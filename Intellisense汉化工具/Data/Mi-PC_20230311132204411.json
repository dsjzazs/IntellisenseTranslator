{"A result of the input value after applying the mapping function, or Error if the input is Error.":"应用映射函数后的输入值的结果，或者如果输入是错误的则出错。\r\n"," to the index of each character in the string and the\r\n character itself.":" 到字符串中每个字符的索引和\r\n 性格本身。\r\n","\r\n to each character and index of the input string.":"\r\n 到输入字符串的每个字符和索引。\r\n","Returns a string by concatenating ":"通过连接返回字符串 \r\n"," Printing the ASCII code for each characater in the string\r\n ":" 打印字符串中每个字符的ASCII码\r\n \r\n","Represents a statically-analyzed format when formatting builds a string. The type parameter indicates the\r\n arguments and return type of the format operation.":"表示格式化生成字符串时静态分析的格式。 Type参数指示\r\n 格式操作的参数和返回类型。\r\n","stderr":"斯德尔\r\n","\r\n After evaluation the text ":"\r\n 经过评估的文本 \r\n","Provides a default implementations of F# numeric literal syntax  for literals of the form 'dddI' ":"为形式为'dddI'的字面量提供f#数字字面量语法的默认实现 \r\n","\r\n H 72\r\n e 101\r\n l 108\r\n l 108\r\n o 111\r\n ":"\r\n H72\r\n e101\r\n 大号108\r\n 大号108\r\n o111\r\n \r\n","\r\n to each of the characters of the input string.":"\r\n 到输入字符串的每个字符。\r\n","The function called to generate a result from the formatted string.":"用于从格式化字符串生成结果的函数。\r\n","The return type and arguments of the formatter.":"格式化程序的返回类型和参数。\r\n","\r\n eprintf \"Write five = %d\" (3+2)\r\n ":"\r\n eprintf\"写五=％d\"（3+2）\r\n \r\n",", but prints:\r\n ":"，但打印:\r\n \r\n","\r\n eprintfn \"Write five = %d\" (3+2)\r\n eprintfn \"Write six = %d\" (3+3)\r\n ":"\r\n eprintfn\"写五=％d\"（3+2）\r\n eprintfn\"写六=％d\"（3+3）\r\n \r\n","\r\n \"Do it!\" |> String.replicate 3\r\n ":"\r\n \"动手吧！\"/>字符串。复制3\r\n \r\n","\r\n open System\r\n\r\n \"hello\" |> String.filter Char.IsDigit  // evaluates \"\"\r\n ":"\r\n 开放系统\r\n\r\n \"你好|/>字符串。过滤Char。IsDigit//评估\"\"\r\n \r\n","Represents a statically-analyzed format associated with writing to a ":"表示与写入a相关联的静态分析格式 \r\n","The input result.":"的输入结果。\r\n","A result of the output type of the binder.":"活页夹的输出类型的结果。\r\n","match inp with Error e -> Error e | Ok x -> Ok (f x)":"匹配inp与错误e->错误e/Ok x->Ok（f x）\r\n"," Looking for lowercase characters\r\n ":" 寻找小写字符\r\n \r\n","Gets the value of the result if the result is ":"获取结果的值，如果结果是 \r\n","The constructed string.":"构造的字符串。\r\n"," Getting the length of different strings\r\n ":" 获取不同字符串的长度\r\n \r\n","\r\n String.init 10 (fun i -> int '0' + i |> sprintf \"%d \")\r\n ":"\r\n 字符串。init10（fun i->int'0'+i/>sprintf\"％d\"）\r\n \r\n","Formatted printing to stdout, adding a newline.":"格式化打印到stdout，添加换行符。\r\n","count-1":"计数-1\r\n","match inp with None -> s | Some x -> f s x":"匹配inp与None->s/S X->f s x\r\n","The number of strings to initialize.":"要初始化的字符串数。\r\n","Formatted printing to stdout":"格式化打印到stdout\r\n","A zero if the option is None, a one otherwise.":"如果选项为零，则为零，否则为零。\r\n","\r\n let input = \"Stefan says: Hi!\"\r\n\r\n input |> String.collect (sprintf \"%c \")\r\n ":"\r\n 让输入=\"斯特凡说：嗨！\"\r\n\r\n 输入/>字符串。收集(sprintf\"%c\")\r\n \r\n","a1 + sep + ... + sep + aN":"a1+sep+。.. +九月+安\r\n","The function to apply to each character and index of the string.":"要应用于字符串的每个字符和索引的函数。\r\n"," with message ":" 带消息 \r\n","A thunk that provides an alternate option when evaluated.":"在评估时提供备用选项的thunk。\r\n","\r\n Error \"Hello world\" |> Result.iter (printfn \"%s\") // does nothing\r\n Ok \"Hello world\" |> Result.iter (printfn \"%s\") // prints \"Hello world\"\r\n ":"\r\n 错误\"Hello world\"/>结果。iter(printfn\"%s\")//什么也不做\r\n Ok\"Hello world\"/>结果。iter(printfn\"%s\")//打印\"Hello world\"\r\n \r\n","kprintf":"kprintf\r\n","\r\n Ok 42 |> Result.isOk // evaluates to true\r\n Error 42 |> Result.isOk // evaluates to false\r\n ":"\r\n Ok42/>结果。isOk//求值为true\r\n 错误42/>结果。isOk//评估为false\r\n \r\n"," types.\r\n ":" 类型。\r\n \r\n","\r\n Error 99 |> Result.count // evaluates to 0\r\n Ok 99 |> Result.count // evaluates to 1\r\n ":"\r\n 错误99/>结果。count//求值为0\r\n 好99/>结果.计数//求值为1\r\n \r\n","stdout":"标准输出\r\n","\r\n Error 1 |> Result.forall (fun x -> x >= 5) // evaluates to true\r\n Ok 42 |> Result.forall (fun x -> x >= 5) // evaluates to true\r\n Ok 4 |> Result.forall (fun x -> x >= 5) // evaluates to false\r\n ":"\r\n 错误1/>结果。forall(fun x->x>=5)//求值为true\r\n Ok42/>结果。forall(fun x->x>=5)//求值为true\r\n 确定4/>结果。forall(fun x->x>=5)//求值为false\r\n \r\n","match inp with None -> 0 | Some _ -> 1":"匹配inp与None->0/Some_->1\r\n","System.Text.RegularExpressions":"系统。文本。正则,正则\r\n","\r\n The sample evaluates as ":"\r\n 样本评估为 \r\n","\"Write five = 5\"":"\"写五=5\"\r\n"," and concatenating the resulting\r\n strings.":" 并连接所得到的\r\n 字符串。\r\n","The function to take an index and produce a string to\r\n be concatenated with the others.":"取一个索引并生成一个字符串的函数\r\n 与其他连接起来。\r\n","The resulting string.":"生成的字符串。\r\n","\r\n Writes ":"\r\n 写道 \r\n","Tests if any character of the string satisfies the given predicate.":"测试字符串的任何字符是否满足给定的谓词。\r\n","True if all characters return true for the predicate and false otherwise.":"如果所有字符对谓词返回true，则返回true，否则返回false。\r\n","\r\n printf $\"Write three = {1+2}\"\r\n ":"\r\n printf$\"写三={1+2}\"\r\n \r\n","\"That's wrong. Five = 5 and six = 6\"":"\"这是不对的。 五=5和六=6\"\r\n","\r\n open Printf\r\n open System.Text\r\n\r\n let buffer = new StringBuilder()\r\n\r\n kbprintf (fun () -> buffer.ToString()) buffer \"Write five = %d\" (3+2)\r\n ":"\r\n 打开Printf\r\n 开放系统。文本\r\n\r\n 让缓冲区=新StringBuilder（）\r\n\r\n kbprintf(fun()->缓冲区。Tostring())buffer\"Write five=%d\"(3+2)\r\n \r\n","\r\n (Error 2, 0) ||> Result.foldBack (fun x accum -> accum + x * 2) // evaluates to 0\r\n (Ok 1, 0) ||> Result.foldBack (fun x accum -> accum + x * 2) // evaluates to 2\r\n (Ok 1, 10) ||> Result.foldBack (fun x accum -> accum + x * 2) // evaluates to 12\r\n ":"\r\n （错误2,0）//>结果。折返(fun x accum->accum+x*2)//求值为0\r\n （Ok1，0）//>结果。折返(fun x accum->accum+x*2)//求值为2\r\n （Ok1，10）//>结果。foldBack(fun x accum->accum+x*2)//求值为12\r\n \r\n","The original state if the option is None, otherwise it returns the updated state with the folder\r\n and the option value.":"如果该选项为None，则返回原始状态，否则返回文件夹的更新状态\r\n 和选项值。\r\n","A function to test whether each character in the input sequence should be included in the output string.":"用于测试输入序列中的每个字符是否应包含在输出字符串中的函数。\r\n","\r\n Error 42 |> Result.toOption // evaluates to ValueNone\r\n Ok 42 |> Result.toOption // evaluates to ValueSome 42\r\n ":"\r\n 错误42/>结果。toOption//评估为ValueNone\r\n Ok42/>结果。toOption//评估值为42\r\n \r\n","\r\n Ok 1 |> Result.map (fun x -> \"perfect\") // evaluates to Ok \"perfect\"\r\n\r\n Error \"message\" |> Result.map (fun x -> \"perfect\") // evaluates to Error \"message\"\r\n ":"\r\n Ok1/>结果。map(fun x->\"perfect\")//评估为Ok\"perfect\"\r\n\r\n 错误\"消息|/>结果。map(fun x->\"perfect\")//求值为Error\"message\"\r\n \r\n","Gets the value of the option if the option is ":"获取选项的值，如果选项是 \r\n","\r\n printf \"Write five = %d\" (3+2)\r\n ":"\r\n printf\"写五=%d\"(3+2)\r\n \r\n","\r\n After evaluation two lines are written to ":"\r\n 评估后两行写入 \r\n","\r\n ((None: int Option), None) ||> Option.orElse // evaluates to None\r\n (Some 99, None) ||> Option.orElse // evaluates to Some 99\r\n (None, Some 42) ||> Option.orElse // evaluates to Some 42\r\n (Some 99, Some 42) ||> Option.orElse // evaluates to Some 42\r\n ":"\r\n （（None：int选项），None）||>选项。orElse//求值为None\r\n （一些99，无）//>选项。orElse//评估到一些99\r\n （无，一些42）||>选项。orElse//评估到一些42\r\n （一些99，一些42）||>选项。orElse//评估到一些42\r\n \r\n","Convert the result to an array of length 0 or 1.":"将结果转换为长度为0或1的数组。\r\n","\r\n open System\r\n\r\n \"all are lower\" |> String.forall Char.IsLower  // evaluates false\r\n\r\n \"allarelower\" |> String.forall Char.IsLower    // evaluates true\r\n ":"\r\n 开放系统\r\n\r\n \"所有都较低\"|>字符串。福勒*查尔。IsLower//评估false\r\n\r\n \"allarelower\"|>字符串。福勒*查尔。IsLower//评估true\r\n \r\n","True if the result is ":"如果结果为True \r\n","Tests if all characters in the string satisfy the given predicate.":"测试字符串中的所有字符是否满足给定的谓词。\r\n"," Looking for uppercase characters\r\n ":" 寻找大写字符\r\n \r\n","Builds a new string whose characters are the results of applying the function ":"构建一个新字符串，其字符是应用函数的结果 \r\n"," How to show the ASCII representation of a very secret text\r\n ":" 如何显示一个非常秘密的文本的ASCII表示\r\n \r\n","match inp with Error _ -> true | Ok x -> p x":"匹配Inp与错误_->true/Ok x->p x\r\n","\r\n (99, Error 99) ||> Result.contains // evaluates to false\r\n (99, Ok 99) ||> Result.contains // evaluates to true\r\n (99, Ok 100) ||> Result.contains // evaluates to false\r\n ":"\r\n （99，错误99）||>结果。contains//求值为false\r\n （99，Ok99）||>结果。contains//求值为true\r\n （99，Ok100）||>结果。contains//求值为false\r\n \r\n","\r\n (None, 0) ||> Option.foldBack (fun x accum -> accum + x * 2) // evaluates to 0\r\n (Some 1, 0) ||> Option.foldBack (fun x accum -> accum + x * 2) // evaluates to 2\r\n (Some 1, 10) ||> Option.foldBack (fun x accum -> accum + x * 2) // evaluates to 12\r\n ":"\r\n （无，0）||>选项。折返(fun x accum->accum+x*2)//求值为0\r\n （一些1，0）//>选项。折返(fun x accum->accum+x*2)//求值为2\r\n （一些1，10）//>选项。foldBack(fun x accum->accum+x*2)//求值为12\r\n \r\n","A function that takes the value of type T from a result and transforms it into\r\n a result containing a value of type U.":"从结果中获取类型T的值并将其转换为\r\n 包含类型为U的值的结果。\r\n","A function to update the state data when given a value from an option.":"当从选项中给定值时更新状态数据的函数。\r\n","True if the result is Error.":"如果结果是错误，则为True。\r\n","\r\n eprintf $\"Write three = {1+2}\"\r\n ":"\r\n eprintf$\"写三={1+2}\"\r\n \r\n","\r\n (0, None) ||> Option.fold (fun accum x -> accum + x * 2) // evaluates to 0\r\n (0, Some 1) ||> Option.fold (fun accum x -> accum + x * 2) // evaluates to 2\r\n (10, Some 1) ||> Option.fold (fun accum x -> accum + x * 2) // evaluates to 12\r\n ":"\r\n （0，无）||>选项。fold(fun accum x->accum+x*2)//求值为0\r\n （0，一些1）||>选项。fold(fun accum x->accum+x*2)//求值为2\r\n （10，一些1）||>选项。fold(fun accum x->accum+x*2)//求值为12\r\n \r\n","A function to apply to the Error result value.":"应用于错误结果值的函数。\r\n","match inp with Error _ -> () | Ok x -> f x":"匹配Inp与错误_->()/Ok x->f x\r\n","\r\n let input1 = [\"Stefan\"; \"says:\"; \"Hello\"; \"there!\"]\r\n\r\n input1 |> String.concat \" \"  // evaluates \"Stefan says: Hello there!\"\r\n\r\n let input2 = [0..9] |> List.map string\r\n\r\n input2 |> String.concat \"\"    // evaluates \"0123456789\"\r\n input2 |> String.concat \", \"  // evaluates \"0, 1, 2, 3, 4, 5, 6, 7, 8, 9\"\r\n\r\n let input3 = [\"No comma\"]\r\n\r\n input3 |> String.concat \",\"   // evaluates \"No comma\"\r\n ":"\r\n let input1=[\"Stefan\";\"says:\";\"Hello\";\"那里！\"]\r\n\r\n input1/>字符串。连接\"//评估\"斯特凡说：你好！\"\r\n\r\n 让input2=[0。.9]/>列表。地图字符串\r\n\r\n input2/>字符串。连接\"//评估\"0123456789\"\r\n input2/>字符串。concat\",\"//评估\"0, 1, 2, 3, 4, 5, 6, 7, 8, 9\"\r\n\r\n 让input3=[\"无逗号\"]\r\n\r\n input3/>字符串。concat\",\"//计算\"无逗号\"\r\n \r\n","\"Write five = 5, done!\"":"\"写五=5，完成！\"\r\n"," The following samples shows how to interspace spaces in a text\r\n ":" 下面的示例演示如何在文本中空格\r\n \r\n","The result if the result is Ok, else the default value.":"结果如果结果是Ok，则为默认值。\r\n","Returns the length of the string.":"返回字符串的长度。\r\n","match inp with Error _ -> s | Ok x -> f s x":"匹配Inp与错误_->s/Ok x->f s x\r\n"," Numbering the characters and printing the associated ASCII code\r\n for each characater in the input string\r\n ":" 为字符编号并打印相关的ASCII码\r\n 对于输入字符串中的每个字符\r\n \r\n","\r\n Some 42 |> Option.get // evaluates to 42\r\n (None: int option) |> Option.get // throws exception!\r\n ":"\r\n 一些42/>选项。得到//评估为42\r\n （无：int选项）/>选项。get//抛出异常！\r\n \r\n","Represents a statically-analyzed format when formatting builds a string. The first type parameter indicates the\r\n arguments of the format operation and the last the overall return type.":"表示格式化生成字符串时静态分析的格式。 第一个类型参数指示\r\n 格式操作的参数和最后一个整体返回类型。\r\n","\"48 49 50 51 52 53 54 55 56 57 \"":"\"48 49 50 51 52 53 54 55 56 57 \"\r\n","\r\n None |> Option.isSome // evaluates to false\r\n Some 42 |> Option.isSome // evaluates to true\r\n ":"\r\n 无/>选项。isSome//评估为false\r\n 一些42/>选项。isSome//评估为true\r\n \r\n","The input StringBuilder.":"输入StringBuilder。\r\n","\r\n Error 42 |> Result.toList // evaluates to []\r\n Ok 42 |> Result.toList // evaluates to [ 42 ]\r\n ":"\r\n 错误42/>结果。toList//求值为[]\r\n Ok42/>结果。toList//评价为[42]\r\n \r\n","Thrown when the option is None.":"选项为None时抛出。\r\n","Contains operations for working with options.":"包含用于处理选项的操作。\r\n","\r\n eprintfn $\"Write three = {1+2}\"\r\n eprintfn $\"Write four = {2+2}\"\r\n ":"\r\n eprintfn$\"写三={1+2}\"\r\n eprintfn$\"写四={2+2}\"\r\n \r\n","\r\n Ok 42 |> Result.isError // evaluates to false\r\n Error 42 |> Result.isError // evaluates to true\r\n ":"\r\n Ok42/>结果。isError//求值为false\r\n 错误42/>结果。isError//求值为true\r\n \r\n","The function to be applied to each character of the string.":"要应用于字符串的每个字符的函数。\r\n","The option if the option is Some, else the result of evaluating ":"选项如果选项是一些，否则评估的结果 \r\n","Returns true if the option is None.":"如果选项为None，则返回true。\r\n","match inp with Error e -> Error e | Ok x -> f x":"匹配inp与错误e->错误e/Ok x->f x\r\n","The option if the option is Some, else the default value.":"选项如果选项是一些，否则默认值。\r\n","\r\n open System\r\n\r\n let input = \"Hello there!\"\r\n\r\n input |> String.map Char.ToUpper  // evaluates \"HELLO THERE!\"\r\n ":"\r\n 开放系统\r\n\r\n let input=\"你好！\"\r\n\r\n 输入/>字符串。地图Char。ToUpper//评价\"你好！\"\r\n \r\n","printf, but call the given 'final' function to generate the result.\r\n For example, these let the printing force a flush after all output has\r\n been entered onto the channel, but not before. ":"printf，而是调用给定的'final'函数来生成结果。\r\n 例如，这些让打印力冲洗后，所有输出有\r\n 已经进入了通道，但以前没有。 \r\n","\r\n to each index from ":"\r\n 到每个索引从 \r\n","A function that evaluates to a boolean when given a value from the result type.":"当给出结果类型的值时，求值为布尔值的函数。\r\n","\r\n None |> Option.count // evaluates to 0\r\n Some 99 |> Option.count // evaluates to 1\r\n ":"\r\n 无/>选项。count//求值为0\r\n 一些99/>选项。计数//求值为1\r\n \r\n"," Enumerate digits ASCII codes\r\n ":" 枚举数字ASCII码\r\n \r\n","True if the result is Error, otherwise it returns the result of applying the predicate\r\n to the result value.":"如果结果为Error，则返回True，否则返回应用谓词的结果\r\n 到结果值。\r\n","\r\n input |> String.mapi (fun i c -> (i, c))\r\n ":"\r\n 输入/>字符串。mapi(趣i c->(i,c))\r\n \r\n"," Filtering out just digits\r\n ":" 过滤掉数字\r\n \r\n","fprintf, but call the given 'final' function to generate the result.\r\n See ":"fprintf，而是调用给定的'final'函数来生成结果。\r\n 见 \r\n","The function to produce a string from each character of the input string.":"从输入字符串的每个字符产生字符串的函数。\r\n","Returns true if the result is Error.":"如果结果为错误，则返回true。\r\n","Using interpolated strings:\r\n ":"使用插值字符串:\r\n \r\n","\r\n printfn \"Write five = %d\" (3+2)\r\n printfn \"Write six = %d\" (3+3)\r\n ":"\r\n printfn\"写五=％d\"（3+2）\r\n printfn\"写六=％d\"（3+3）\r\n \r\n","\"Write five = 5 and six = 6\"":"\"写五=5和六=6\"\r\n","\r\n failwithf \"That's wrong. Five = %d and six = %d\" (3+2) (3+3)\r\n ":"\r\n failwithf\"这是错误的。 五=%d和六=%d\" (3+2) (3+3)\r\n \r\n","\r\n After evaluation the two lines are written to ":"\r\n 经过评估，这两行被写入 \r\n","A function to apply to the OK result value.":"应用于确定结果值的函数。\r\n","Print to a string via an internal string buffer and return\r\n the result as a string. Helper printers must return strings.":"通过内部字符串缓冲区打印到字符串并返回\r\n 结果作为字符串。 辅助打印机必须返回字符串。\r\n","\r\n Result.defaultValue 2 (Error 3) // evaluates to 2\r\n Result.defaultValue 2 (Ok 1) // evaluates to 1\r\n ":"\r\n 结果。defaultValue2（错误3）//求值为2\r\n 结果。defaultValue2(Ok1)//求值为1\r\n \r\n","Returns true if the result is Ok.":"如果结果是Ok，则返回true。\r\n","A function to update the state data when given a value from an result.":"当从结果中给定值时更新状态数据的函数。\r\n","Convert the result to an Option value.":"将结果转换为选项值。\r\n","\"83 101 99 114 101 116 \"":"\"83 101 99 114 101 116 \"\r\n","\r\n open Printf\r\n open System.IO\r\n\r\n let file = File.CreateText(\"out.txt\")\r\n\r\n fprintfn file $\"Write three = {1+2}\"\r\n fprintfn file $\"Write four = {2+2}\"\r\n file.Close()\r\n ":"\r\n 打开Printf\r\n 打开System.IO\r\n\r\n 让文件=文件。CreateText(\"out.txt\"）\r\n\r\n fprintfn文件$\"写三={1+2}\"\r\n fprintfn文件$\"写四={2+2}\"\r\n 档案。关闭()\r\n \r\n","\r\n printfn $\"Write three = {1+2}\"\r\n printfn $\"Write four = {2+2}\"\r\n ":"\r\n printfn$\"写三={1+2}\"\r\n printfn$\"写四={2+2}\"\r\n \r\n"," Filtering out just alphanumeric characters\r\n ":" 过滤掉字母数字字符\r\n \r\n","\r\n open Printf\r\n\r\n ksprintf (fun s -> s + \", done!\") $\"Write three = {1+2}\"\r\n ":"\r\n 打开Printf\r\n\r\n ksprintf（\"s->s+\"，完成！\"）$\"写三={1+2}\"\r\n \r\n","\r\n Ok 1 |> Result.defaultWith (fun error -> 99) // evaluates to 1\r\n Error 2 |> Result.defaultWith (fun error -> 99) // evaluates to 99\r\n ":"\r\n Ok1/>结果。defaultWith(fun error->99)//求值为1\r\n 错误2/>结果。defaultWith(fun error->99)//求值为99\r\n \r\n","Returns true if the option is not None.":"如果选项不是None，则返回true。\r\n","\r\n String.length null   // evaluates 0\r\n String.length \"\"     // evaluates 0\r\n String.length \"123\"  // evaluates 3\r\n ":"\r\n 字符串。长度null//求值0\r\n 字符串。长度\"\"//求值为0\r\n 字符串。长度\"123\"//评估3\r\n \r\n","The sequence of strings to be concatenated.":"要连接的字符串序列。\r\n","A result of the error value after applying the mapping function, or Ok if the input is Ok.":"应用映射函数后的错误值的结果，或者如果输入是Ok，则Ok。\r\n","The original state if the result is Error, otherwise it returns the updated state with the folder\r\n and the result value.":"如果结果是错误，则返回原始状态，否则返回文件夹的更新状态\r\n 和结果值。\r\n","\"S t e f a n   s a y s :   H i ! \"":"\"S t e f a n s a y s:H i！ \"\r\n","Builds a new string containing only the characters of the input string\r\n for which the given predicate returns \"true\".":"构建一个仅包含输入字符串字符的新字符串\r\n 对于给定的谓词返回\"true\"。\r\n","A function to apply to the result value.":"应用于结果值的函数。\r\n","Applies the function ":"应用函数 \r\n","\r\n let input = \"Hello\"\r\n input |> String.iteri (fun i c -> printfn \"%d. %c %d\" (i + 1) c (int c))\r\n ":"\r\n 让输入=\"你好\"\r\n 输入/>字符串。iteri(fun i c->printfn\"%d.%c%d\"(i+1)c(int c))\r\n \r\n","bprintf, but call the given 'final' function to generate the result.\r\n See ":"bprintf，而是调用给定的'final'函数来生成结果。\r\n 见 \r\n","\r\n 1. H 72\r\n 2. e 101\r\n 3. l 108\r\n 4. l 108\r\n 5. o 111\r\n ":"\r\n 1. H72\r\n 2. e101\r\n 3. 大号108\r\n 4. 大号108\r\n 5. o111\r\n \r\n","Returns an empty string if the input string is null":"如果输入字符串为null，则返回空字符串\r\n","\r\n let input = \"Hello\"\r\n input |> String.iter (fun c -> printfn \"%c %d\" c (int c))\r\n ":"\r\n 让输入=\"你好\"\r\n 输入/>字符串。iter(fun c->printfn\"%c%d\"c(int c))\r\n \r\n","\r\n Ok 1 |> Result.mapError (fun x -> \"bar\") // evaluates to Ok 1\r\n\r\n Error \"foo\" |> Result.mapError (fun x -> \"bar\") // evaluates to Error \"bar\"\r\n ":"\r\n Ok1/>结果。mapError(fun x->\"bar\")//求值为Ok1\r\n\r\n 错误\"foo|/>结果。mapError(fun x->\"bar\")//求值为Error\"bar\"\r\n \r\n","Formatted printing to stderr":"格式化打印到stderr\r\n","The result if the result is Ok, else the result of evaluating ":"结果如果结果是确定的，否则是评估的结果 \r\n","True if the result is OK.":"如果结果是确定的，则为True。\r\n","The function to test each character of the string.":"测试字符串每个字符的函数。\r\n","\r\n (99, None) ||> Option.defaultValue // evaluates to 99\r\n (99, Some 42) ||> Option.defaultValue // evaluates to 42\r\n ":"\r\n （99，无）||>选项。defaultValue//求值为99\r\n （99，一些42）||>选项。defaultValue//求值为42\r\n \r\n","\"Write three = 3\"":"\"写三=3\"\r\n","Functional programming operators for string processing.  Further string operations\r\n are available via the member functions on strings and other functionality in\r\n  ":"字符串处理的函数式编程运算符。  进一步的字符串操作\r\n 可通过字符串上的成员函数和\r\n  \r\n","\r\n (0, Error 2) ||> Result.fold (fun accum x -> accum + x * 2) // evaluates to 0\r\n (0, Ok 1) ||> Result.fold (fun accum x -> accum + x * 2) // evaluates to 2\r\n (10, Ok 1) ||> Result.fold (fun accum x -> accum + x * 2) // evaluates to 12\r\n ":"\r\n （0，错误2）||>结果。fold(fun accum x->accum+x*2)//求值为0\r\n （0，Ok1）||>结果。fold(fun accum x->accum+x*2)//求值为2\r\n （10，确定1）||>结果。fold(fun accum x->accum+x*2)//求值为12\r\n \r\n","\r\n Error 42 |> Result.toOption // evaluates to None\r\n Ok 42 |> Result.toOption // evaluates to Some 42\r\n ":"\r\n 错误42/>结果。toOption//评估为None\r\n Ok42/>结果。toOption//评估到一些42\r\n \r\n","\"Do it!Do it!Do it!\"":"\"动手吧！动手吧！动手吧！\"\r\n","Strings and Text":"字符串和文本\r\n","Formatted printing to stderr, adding a newline ":"格式化打印到stderr，添加换行符 \r\n","The TextWriter to print to.":"要打印到的TextWriter。\r\n","\r\n open Printf\r\n\r\n kprintf (fun s -> s + \", done!\") $\"Write three = {1+2}\"\r\n ":"\r\n 打开Printf\r\n\r\n kprintf（\"s->s+\"，完成！\"）$\"写三={1+2}\"\r\n \r\n","Print to a string buffer and raise an exception with the given\r\n result. Helper printers must return strings.":"打印到字符串缓冲区，并引发与给定的异常\r\n 结果。 辅助打印机必须返回字符串。\r\n","\r\n sprintf \"Write five = %d and six = %d\" (3+2) (3+3)\r\n ":"\r\n sprintf\"写五=％d和六=％d\" (3+2) (3+3)\r\n \r\n","match inp with Error x -> Error (f x) | Ok v -> Ok v":"匹配inp与错误x->错误（f x）/Ok v->Ok v\r\n"," to each character in the string.":" 到字符串中的每个字符。\r\n","\r\n Provides a default implementations of F# numeric literal syntax  for literals of the form 'dddI'\r\n":"\r\n 为形式为'dddI'的字面量提供f#数字字面量语法的默认实现\r\n\r\n"," is written to ":" 被写入 \r\n","[ (0, 'O'); (1, 'K'); (2, '!') ]":"[(0,'O');(1,'K');(2,'!') ]\r\n","A zero if the result is Error, a one otherwise.":"如果结果是错误,则为零,否则为零.\r\n","The function called after formatting to generate the format result.":"格式化后调用的函数，生成格式化结果。\r\n",", that is ":"，即 \r\n"," format patterns:\r\n ":" 格式模式:\r\n \r\n","sprintf, but call the given 'final' function to generate the result.\r\n See ":"sprintf，而是调用给定的'final'函数来生成结果。\r\n 见 \r\n","\r\n open System\r\n\r\n let input = \"0 1 2 3 4 5 6 7 8 9 a A m M\"\r\n\r\n input |> String.filter Uri.IsHexDigit  // evaluates \"123456789aA\"\r\n ":"\r\n 开放系统\r\n\r\n 让输入= \"0 1 2 3 4 5 6 7 8 9 a A m M\"\r\n\r\n 输入/>字符串。过滤Uri。IsHexDigit//评估\"123456789aA\"\r\n \r\n","match inp with Error _ -> s | Ok x -> f x s":"匹配Inp与错误_->s/Ok x->f x s\r\n","Convert the result to a list of length 0 or 1.":"将结果转换为长度为0或1的列表。\r\n","The function to apply to the characters of the string.":"要应用于字符串的字符的函数。\r\n","A new string consisting of the concatenated strings separated by\r\n the separation string.":"由以下字符串分隔的串联字符串组成的新字符串\r\n 的分离串。\r\n",". The type parameter indicates the\r\n arguments and return type of the format operation.":". Type参数指示\r\n 格式操作的参数和返回类型。\r\n","True if the option is not None.":"如果选项不是None，则为True。\r\n","\r\n to each of the characters of the input string and concatenating the resulting\r\n strings.":"\r\n 到输入字符串的每个字符，并连接所得到的\r\n 字符串。\r\n","True if any character returns true for the predicate and false otherwise.":"如果任何字符对谓词返回true，则返回true，否则返回false。\r\n","\r\n open Printf\r\n open System.IO\r\n\r\n let file = File.CreateText(\"out.txt\")\r\n\r\n kfprintf (fun () -> file.Close()) $\"Write three = {1+2}\"\r\n ":"\r\n 打开Printf\r\n 打开System.IO\r\n\r\n 让文件=文件。CreateText(\"out.txt\"）\r\n\r\n kfprintf(fun()->文件。Close())$\"写三={1+2}\"\r\n \r\n","True if the option is None.":"如果选项为None，则为True。\r\n","The arguments of the formatter.":"格式化程序的参数。\r\n","\r\n let tryParse (input: string) =\r\n     match System.Int32.TryParse input with\r\n     | true, v -> Ok v\r\n     | false, _ -> Error \"couldn't parse\"\r\n\r\n Error \"message\" |> Result.bind tryParse // evaluates to Error \"message\"\r\n\r\n Ok \"42\" |> Result.bind tryParse // evaluates to Ok 42\r\n\r\n Ok \"Forty-two\" |> Result.bind tryParse // evaluates to Error \"couldn't parse\"\r\n ":"\r\n 让tryParse（输入：字符串）=\r\n     匹配System.Int32.TryParse输入与\r\n     /真的，v->确定v\r\n     /false,_->错误\"无法解析\"\r\n\r\n 错误\"消息|/>结果。绑定tryParse//评估为错误\"消息\"\r\n\r\n 确定\"42\"/>结果。绑定tryParse//评估到Ok42\r\n\r\n Ok\"四十二\"/>结果。绑定tryParse//评估为错误\"无法解析\"\r\n \r\n","\r\n Error 42 |> Result.toArray // evaluates to [||]\r\n Ok 42 |> Result.toArray // evaluates to [| 42 |]\r\n ":"\r\n 错误42/>结果。toArray//求值为[//]\r\n Ok42/>结果。toArray//求值为[/42/]\r\n \r\n","sep":"九月\r\n","match inp with Error _ -> 0 | Ok _ -> 1":"匹配Inp与错误_->0|确定_->1\r\n","The separator string to be inserted between the strings\r\n of the input sequence.":"要插入字符串之间的分隔符字符串\r\n 的输入序列。\r\n","\r\n open System\r\n\r\n \"Yoda\" |> String.exists Char.IsUpper  // evaluates true\r\n\r\n \"nope\" |> String.exists Char.IsUpper  // evaluates false\r\n ":"\r\n 开放系统\r\n\r\n \"尤达\"|>字符串。存在Char。IsUpper//评估true\r\n\r\n \"nope\"|>字符串。存在Char。IsUpper//评估false\r\n \r\n","\r\n None |> Option.defaultWith (fun () -> 99) // evaluates to 99\r\n Some 42 |> Option.defaultWith (fun () -> 99) // evaluates to 42\r\n ":"\r\n 无/>选项。defaultWith(fun()->99)//求值为99\r\n 一些42/>选项。defaultWith(fun()->99)//求值为42\r\n \r\n","The input TextWriter.":"的输入TextWriter。\r\n","out.txt":"出去。txt的\r\n","\r\n None |> Option.isNone // evaluates to true\r\n Some 42 |> Option.isNone // evaluates to false\r\n ":"\r\n 无/>选项。isNone//求值为true\r\n 一些42/>选项。isNone//评估为false\r\n \r\n",". The first type parameter indicates the\r\n arguments of the format operation and the last the overall return type.":". 第一个类型参数指示\r\n 格式操作的参数和最后一个整体返回类型。\r\n","Print to a text writer, adding a newline":"打印到文本编写器，添加换行符\r\n","The input formatter.":"的输入格式化程序。\r\n","\r\n Error 6 |> Result.exists (fun x -> x >= 5) // evaluates to false\r\n Ok 42 |> Result.exists (fun x -> x >= 5) // evaluates to true\r\n Ok 4 |> Result.exists (fun x -> x >= 5) // evaluates to false\r\n ":"\r\n 错误6/>结果。exists(fun x->x>=5)//求值为false\r\n Ok42/>结果。exists(fun x->x>=5)//求值为true\r\n 确定4/>结果。exists(fun x->x>=5)//求值为false\r\n \r\n","The number of copies of the input string will be copied.":"将复制输入字符串的副本数。\r\n","\r\n (None: int Option) |> Option.orElseWith (fun () -> None) // evaluates to None\r\n None |> Option.orElseWith (fun () -> (Some 99)) // evaluates to Some 99\r\n Some 42 |> Option.orElseWith (fun () -> None) // evaluates to Some 42\r\n Some 42 |> Option.orElseWith (fun () -> (Some 99)) // evaluates to Some 42\r\n ":"\r\n （无：int选项）/>选项。orElseWith(fun()->None)//求值为None\r\n 无/>选项。orElseWith(fun()->(Some99))//评估为Some99\r\n 一些42/>选项。orElseWith(fun()->None)//求值约42\r\n 一些42/>选项。orElseWith(fun()->(Some99))//评估到一些42\r\n \r\n","False if the result is Error, otherwise it returns the result of applying the predicate\r\n to the result value.":"如果结果为Error，则返回false，否则返回应用谓词的结果\r\n 到结果值。\r\n","Returns a new string made by concatenating the given strings\r\n with separator ":"返回通过连接给定字符串而生成的新字符串\r\n 带分离器 \r\n"}