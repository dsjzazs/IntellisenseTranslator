{"__m256 _mm256_broadcast_ss (float const * mem_addr)":"__m256 _mm256_broadcast_ss（float const * mem_addr）","__m256d _mm256_broadcast_sd (double const * mem_addr)":"__m256d _mm256_broadcast_sd（double const * mem_addr）","__m256 _mm256_broadcast_ps (__m128 const * mem_addr)":"__m256 _MM256_BRODCAST_PS（__m128 const * mem_addr）","__m256 _mm256_ceil_ps (__m256 a)":"__m256 _mm256_ceil_ps（__m256 a）","__m256d _mm256_broadcast_pd (__m128d const * mem_addr)":"__m256d_mm256_broadcast_pd(__m128d const*mem_addr)","__m128d _mm_cmp_pd (__m128d a, __m128d b, const int imm8)":"__m128d _mm_cmp_pd（__m128d a，__m128d b，const int Imm8）","__m128 _mm_cmp_ps (__m128 a, __m128 b, const int imm8)":"__m128 _mm_cmp_ps（__m128 a，__m128 b，const int inm8）","__m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8)":"__M256D _MM256_CMP_PD（__M256D A，__M256D B，const int Imm8）","__m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8)":"__m256 _mm256_cmp_ps（__m256 A，__m256 B，const int Inm8）","__m256d _mm256_ceil_pd (__m256d a)":"__m256d_mm256_ceil_pd(__m256d a)","__m256d _mm256_cmpeq_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(0)":"__M256D _MM256_CMPEQ_PD（__M256D A，__M256D B）CMPPD YMM，YMM/M256，IMM8（0）","__m256d _mm256_cmpgt_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(14)":"__M256D _MM256_CMPGT_PD（__M256D A，__M256D B）CMPPD YMM，YMM/M256，IMM8（14）","__m256 _mm256_cmpeq_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(0)":"__m256 _mm256_cmpeq_ps（__m256 a，__m256 b）cmpps ymm，ymm/m256，imm8（0）","__m256d _mm256_cmpge_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(13)":"__M256D _MM256_CMPGE_PD（__M256D A，__M256D B）CMPPD YMM，YMM/M256，IMM8（13）","__m256d _mm256_cmplt_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(1)":"__M256D _MM256_CMPLT_PD（__M256D A，__M256D B）CMPPD YMM，YMM/M256，IMM8（1）","__m256 _mm256_cmpge_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(13)":"__m256 _mm256_cmpge_ps（__m256 a，__m256 b）cmpps ymm，ymm/m256，imm8（13）","__m256 _mm256_cmpgt_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(14)":"__m256 _mm256_cmpgt_ps（__m256 a，__m256 b）cmpps ymm，ymm/m256，imm8（14）","__m256d _mm256_cmple_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(2)":"__M256D _MM256_CMPLE_PD（__M256D A，__M256D B）CMPPD YMM，YMM/M256，IMM8（2）","__m256d _mm256_cmpneq_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(4)":"__M256D _MM256_CMPNEQ_PD（__M256D A，__M256D B）CMPPD YMM，YMM/M256，IMM8（4）","__m256 _mm256_cmpngt_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(10)":"__m256 _mm256_cmpngt_ps（__m256 a，__m256 b）cmpps ymm，ymm/m256，imm8（10）","__m256 _mm256_cmplt_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(1)":"__m256 _mm256_cmplt_ps（__m256 a，__m256 b）cmpps ymm，ymm/m256，imm8（1）","__m256d _mm256_cmpngt_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(10)":"__m256d_mm256_cmpngt_pd(__m256d a,__m256d b)CMPPD ymm,ymm/m256,imm8(10)","__m256 _mm256_cmple_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(2)":"__m256 _mm256_cmple_ps（__m256 a，__m256 b）cmpps ymm，ymm/m256，imm8（2）","__m256 _mm256_cmpneq_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(4)":"__m256 _mm256_cmpneq_ps（__m256 a，__m256 b）cmpps ymm，ymm/m256，imm8（4）","__m256d _mm256_cmpnge_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(9)":"__M256D _MM256_CMPNGE_PD（__M256D A，__M256D B）CMPPD YMM，YMM/M256，IMM8（9）","__m256 _mm256_cmpnge_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(9)":"__m256 _mm256_cmpnge_ps（__m256 a，__m256 b）cmpps ymm，ymm/m256，imm8（9）","__m256 _mm256_cmpnle_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(6)":"__m256 _mm256_cmpnle_ps（__m256 a，__m256 b）cmpps ymm，ymm/m256，imm8（6）","__m256 _mm256_cmpnlt_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(5)":"__m256 _mm256_cmpnlt_ps（__m256 a，__m256 b）cmpps ymm，ymm/m256，imm8（5）","__m256 _mm256_cmpord_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(7)":"__m256 _mm256_cmpord_ps（__m256 a，__m256 b）cmpps ymm，ymm/m256，imm8（7）","__m128 _mm_cmp_ss (__m128 a, __m128 b, const int imm8)":"__m128 _mm_cmp_ss（__m128 a，__m128 b，const int inm8）","__m256d _mm256_cmpnlt_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(5)":"__M256D _MM256_CMPNLT_PD（__M256D A，__M256D B）CMPPD YMM，YMM/M256，IMM8（5）","__m256d _mm256_cmpord_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(7)":"__M256D _MM256_CMPORD_PD（__M256D A，__M256D B）CMPPD YMM，YMM/M256，IMM8（7）","__m256d _mm256_cmpunord_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(3)":"__M256D _MM256_CMPUNORD_PD（__M256D A，__M256D B）CMPPD YMM，YMM/M256，IMM8（3）","__m256d _mm256_cmpnle_pd (__m256d a,  __m256d b) CMPPD ymm, ymm/m256, imm8(6)":"__M256D _MM256_CMPNLE_PD（__M256D A，__M256D B）CMPPD YMM，YMM/M256，IMM8（6）","__m128d _mm_cmp_sd (__m128d a, __m128d b, const int imm8)":"__m128d _mm_cmp_sd（__m128d a，__m128d b，const int Imm8）","__m256 _mm256_cmpunord_ps (__m256 a,  __m256 b) CMPPS ymm, ymm/m256, imm8(3)":"__m256 _mm256_cmpunord_ps（__m256 a，__m256 b）cmpps ymm，ymm/m256，imm8（3）","__m256 _mm256_cvtepi32_ps (__m256i a)":"__m256 _MM256_CVTEPI32_PS（__M256I A）","__m256 _mm256_div_ps (__m256 a, __m256 b)":"__m256 _mm256_div_ps（__m256 A，__m256 b）","__m128i _mm256_cvttpd_epi32 (__m256d a)":"__m128i_mm256_cvttpd_epi32(__m256d a)","__m256d _mm256_cvtepi32_pd (__m128i a)":"__m256d _mm256_cvtepi32_pd（__m128i a）","__m128i _mm256_cvtpd_epi32 (__m256d a)":"__m128i _mm256_cvtpd_epi32（__m256d a）","__m256 _mm256_dp_ps (__m256 a, __m256 b, const int imm8)":"__m256 _mm256_dp_ps（__m256 a，__m256 b，const int inm8）","__m256d _mm256_movedup_pd (__m256d a)":"__M256D _MM256_MAVEDUP_PD（__M256D A）","__m128 _mm256_cvtpd_ps (__m256d a)":"__m128 _MM256_CVTPD_PS（__M256D A）","__m256d _mm256_div_pd (__m256d a, __m256d b)":"__M256D _MM256_DIV_PD（__M256D A，__M256D B）","__m256d _mm256_cvtps_pd (__m128 a)":"__M256D _MM256_CVTPS_PD（__M128 A）","__m256 _mm256_moveldup_ps (__m256 a)":"__m256 _mm256_moveldup_ps（__m256 a）","__m128d _mm256_extractf128_pd (__m256d a, const int imm8)":"__M128D _MM256_EXTRACTF128_PD（__M256D A，const int Imm8）","__m256i _mm256_cvtps_epi32 (__m256 a)":"__m256i _mm256_cvtps_epi32（__m256 a）","__m256d _mm256_hadd_pd (__m256d a, __m256d b)":"__M256D _MM256_HADD_PD（__M256D A，__M256D B）","__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8)":"__M256I _MM256_INSERTF128_SI256（__M256I A，__M128I B，INT IMM8）","__m256 _mm256_movehdup_ps (__m256 a)":"__m256 _MM256_MOVEHDUP_PS（__M256 A）","__m128 _mm256_extractf128_ps (__m256 a, const int imm8)":"__m128 _mm256_extractf128_ps（__M256 A，const int Imm8）","__m256i _mm256_cvttps_epi32 (__m256 a)":"__m256i _mm256_cvttps_epi32（__m256 a）","__m256 _mm256_hadd_ps (__m256 a, __m256 b)":"__m256 _mm256_hadd_ps（__m256 A，__m256 b）","__m256d _mm256_insertf128_pd (__m256d a, __m128d b, int imm8)":"__M256D _MM256_INSERTF128_PD（__M256D A，__M128D B，INT IMM8）","__m128i _mm256_extractf128_si256 (__m256i a, const int imm8)":"__m128i_mm256_extractf128_si256(__m256i a,const int imm8)","__m256d _mm256_floor_pd (__m256d a)":"__M256D _MM256_FLOOR_PD（__M256D A）","__m256 _mm256_insertf128_ps (__m256 a, __m128 b, int imm8)":"__M256 _MM256_INSERTF128_PS（__M256 A，__M128 B，INT IMM8）","__m256i _mm256_lddqu_si256 (__m256i const * mem_addr)":"__m256i _mm256_lddqu_si256（__m256i const * mem_addr）","__m256d _mm256_hsub_pd (__m256d a, __m256d b)":"__m256d_mm256_hsub_pd(__m256d a,__m256d b)","__m128d _mm_maskload_pd (double const * mem_addr, __m128i mask)":"__m128d _mm_maskload_pd（double const * mem_addr，__m128i mask）","__m256i _mm256_load_si256 (__m256i const * mem_addr)":"__m256i _mm256_load_si256（__m256i const * mem_addr）","__m256 _mm256_floor_ps (__m256 a)":"__m256 _mm256_floor_ps（__m256 a）","__m256i _mm256_loadu_si256 (__m256i const * mem_addr)":"__m256i _mm256_loadu_si256（__m256i const * mem_addr）","__m256d _mm256_maskload_pd (double const * mem_addr, __m256i mask)":"__m256d _mm256_maskload_pd（double const * mem_addr，__m256i mask）","__m256 _mm256_hsub_ps (__m256 a, __m256 b)":"__m256 _mm256_hsub_ps（__m256 A，__m256 b）","__m256d _mm256_load_pd (double const * mem_addr)":"__m256d _mm256_load_pd（double const * mem_addr）","void _mm_maskstore_pd (double * mem_addr, __m128i mask, __m128d a)":"void _mm_maskStore_pd（double * mem_addr，__m128i mask，__m128d a）","__m256d _mm256_loadu_pd (double const * mem_addr)":"__m256d _mm256_loadu_pd（double const * mem_addr）","__m128 _mm_maskload_ps (float const * mem_addr, __m128i mask)":"__m128 _mm_maskload_ps（float const * mem_addr，__m128i掩码）","__m256 _mm256_load_ps (float const * mem_addr)":"__m256 _mm256_load_ps（float const * mem_addr）","__m256d _mm256_max_pd (__m256d a, __m256d b)":"__M256D _MM256_MAX_PD（__M256D A，__M256D B）","void _mm256_maskstore_pd (double * mem_addr, __m256i mask, __m256d a)":"void _mm256_maskStore_pd（double * mem_addr，__m256i mask，__m256d a）","__m256 _mm256_loadu_ps (float const * mem_addr)":"__m256 _mm256_loadu_ps（float const * mem_addr）","int _mm256_movemask_pd (__m256d a)":"int _mm256_movemask_pd（__M256D A）","__m256 _mm256_maskload_ps (float const * mem_addr, __m256i mask)":"__m256 _mm256_maskload_ps（float const * mem_addr，__m256i蒙版）","__m256 _mm256_max_ps (__m256 a, __m256 b)":"__m256 _mm256_max_ps（__m256 A，__m256 b）","__m256d _mm256_or_pd (__m256d a, __m256d b)":"__M256D _MM256_OR_PD（__M256D A，__M256D B）","void _mm_maskstore_ps (float * mem_addr, __m128i mask, __m128 a)":"void _mm_maskStore_ps（float * mem_addr，__m128i mask，__m128 a）","__m256d _mm256_min_pd (__m256d a, __m256d b)":"__M256D _MM256_MIN_PD（__M256D A，__M256D B）","int _mm256_movemask_ps (__m256 a)":"int _mm256_movemask_ps（__m256 a）","__m256d _mm256_permute_pd (__m256d a, int imm8)":"__M256D _MM256_PERMUTE_PD（__M256D A，INT IMM8）","void _mm256_maskstore_ps (float * mem_addr, __m256i mask, __m256 a)":"void _mm256_maskStore_ps（float * mem_addr，__m256i mask，__m256 a）","__m256d _mm256_mul_pd (__m256d a, __m256d b)":"__M256D _MM256_MUL_PD（__M256D A，__M256D B）","__m256 _mm256_or_ps (__m256 a, __m256 b)":"__m256 _mm256_or_ps（__m256 A，__m256 b）","__m256 _mm256_min_ps (__m256 a, __m256 b)":"__m256 _mm256_min_ps（__m256 A，__m256 b）","__m128d _mm_permute_pd (__m128d a, int imm8)":"__m128d _mm_permute_pd（__m128d a，int imm8）","__m256 _mm256_permute_ps (__m256 a, int imm8)":"__m256 _MM256_PERMUTE_PS（__M256 A，INT IMM8）","__m256 _mm256_mul_ps (__m256 a, __m256 b)":"__m256 _mm256_mul_ps（__m256 a，__m256 b）","__m256 _mm256_permutevar_ps (__m256 a, __m256i b)":"__m256 _MM256_PERMUTEVAR_PS（__M256 A，__M256I B）","__m256 _mm256_permute2f128_ps (__m256 a, __m256 b, int imm8)":"__m256_mm256_permute2f128_ps(__m256a,__m256b,int imm8)","__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8)":"__M256I _MM256_PERMUTE2F128_SI256（__M256I A，__M256I B，INT IMM8）","__m256 _mm256_round_ps (__m256 a, _MM_FROUND_CUR_DIRECTION)":"__m256 _MM256_ROUND_PS（__M256 A，_MM_FROUND_CUR_DIRECTION）","__m256 _mm256_rcp_ps (__m256 a)":"__m256 _mm256_rcp_ps（__m256 a）","__m128 _mm_permute_ps (__m128 a, int imm8)":"__m128_mm_permute_ps（__m128a，int imm8）","__m128d _mm_permutevar_pd (__m128d a, __m128i b)":"__m128d _mm_permutevar_pd（__m128d a，__m128i b）","__m256d _mm256_permute2f128_pd (__m256d a, __m256d b, int imm8)":"__M256D _MM256_PERMUTE2F128_PD（__M256D A，__M256D B，INT IMM8）","__m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC)":"__M256D _MM256_ROUND_PD（__M256D A，_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC）","__m256 _mm256_rsqrt_ps (__m256 a)":"__m256 _mm256_rsqrt_ps（__m256 a）","__m128 _mm_permutevar_ps (__m128 a, __m128i b)":"__m128 _mm_permutevar_ps（__m128 a，__m128i b）","__m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC)":"__m256 _MM256_ROUND_PS（__m256 A，_MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC）","__m256 _mm256_sqrt_ps (__m256 a)":"__m256 _mm256_sqrt_ps（__m256 a）","__m256d _mm256_round_pd (__m256d a, _MM_FROUND_CUR_DIRECTION)":"__M256D _MM256_ROUND_PD（__M256D A，_MM_FROUND_CUR_DIRECTION）","__m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC)":"__m256 _mm256_round_ps（__m256 A，_mm_fround_to_nearest_int | _mm_fround_no_exc）","__m256d _mm256_permutevar_pd (__m256d a, __m256i b)":"__M256D _MM256_PERMUTEVAR_PD（__M256D A，__M256I b）","__m256d _mm256_shuffle_pd (__m256d a, __m256d b, const int imm8)":"__M256D _MM256_SHUFFLE_PD（__M256D A，__M256D B，const int Imm8）","void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a)":"void _mm256_storeu_si256（__m256i * mem_addr，__m256i a）","void _mm256_stream_pd (double * mem_addr, __m256d a)":"void _mm256_stream_pd（double * mem_addr，__m256d a）","__m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC)":"__M256D _MM256_ROUND_PD（__M256D A，_MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC）","__m256 _mm256_shuffle_ps (__m256 a, __m256 b, const int imm8)":"__m256 _mm256_shuffle_ps（__m256 A，__m256 B，const int Inm8）","int _mm256_testc_ps (__m256 a, __m256 b)":"int _mm256_testc_ps（__m256 a，__m256 b）","void _mm256_storeu_pd (double * mem_addr, __m256d a)":"void _mm256_storeu_pd（double * mem_addr，__m256d a）","void _mm256_stream_ps (float * mem_addr, __m256 a)":"void _mm256_stream_ps（float * mem_addr，__m256 a）","__m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC)":"__m256 _MM256_ROUND_PS（__M256 A，_MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC）","__m256d _mm256_sqrt_pd (__m256d a)":"__M256D _MM256_SQRT_PD（__M256D A）","void _mm256_storeu_ps (float * mem_addr, __m256 a)":"void _mm256_storeu_ps（float * mem_addr，__m256 a）","int _mm_testnzc_pd (__m128d a, __m128d b)":"int_mm_testnzc_pd（__m128d a，__m128d b）","__m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC)":"__M256D _MM256_ROUND_PD（__M256D A，_MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC）","__m256d _mm256_sub_pd (__m256d a, __m256d b)":"__M256D _MM256_SUB_PD（__M256D A，__M256D B）","int _mm256_testz_si256 (__m256i a, __m256i b)":"int _mm256_testz_si256（__m256i a，__m256i b）","int _mm_testnzc_ps (__m128 a, __m128 b)":"int _mm_testnzc_ps（__m128 a，__m128 b）","void _mm256_store_si256 (__m256i * mem_addr, __m256i a)":"void _mm256_store_si256（__m256i * mem_addr，__m256i a）","__m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC)":"__m256 _MM256_ROUND_PS（__M256 A，_MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC）","__m256 _mm256_sub_ps (__m256 a, __m256 b)":"__m256 _mm256_sub_ps（__m256 a，__m256 b）","int _mm256_testz_pd (__m256d a, __m256d b)":"int _mm256_testz_pd（__m256D A，__m256d b）","void _mm256_store_pd (double * mem_addr, __m256d a)":"void _mm256_store_pd（double * mem_addr，__m256d a）","__m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC)":"__M256D _MM256_ROUND_PD（__M256D A，_MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC）","int _mm256_testnzc_si256 (__m256i a, __m256i b)":"int _mm256_testnzc_si256（__m256i a，__m256i b）","int _mm_testc_pd (__m128d a, __m128d b)":"int _mm_testc_pd（__m128d a，__m128d b）","int _mm256_testz_ps (__m256 a, __m256 b)":"int _mm256_testz_ps（__m256 a，__m256 b）","__m256 _mm256_xor_ps (__m256 a, __m256 b)":"__m256 _mm256_xor_ps（__m256 A，__m256 b）","int _mm256_testnzc_pd (__m256d a, __m256d b)":"int _mm256_testnzc_pd（__m256D A，__m256d b）","int _mm_testc_ps (__m128 a, __m128 b)":"int _mm_testc_ps（__m128 a，__m128 b）","void _mm256_store_ps (float * mem_addr, __m256 a)":"void_mm256_store_ps（float*mem_addr，__m256a）","__m256d _mm256_unpackhi_pd (__m256d a, __m256d b)":"__M256D _MM256_UNPACKHI_PD（__M256D A，__M256D B）","int _mm256_testnzc_ps (__m256 a, __m256 b)":"int _mm256_testnzc_ps（__m256 a，__m256 b）","__m256i _mm256_abs_epi16 (__m256i a)":"__M256I _MM256_ABS_EPI16（__M256I A）","int _mm256_testc_si256 (__m256i a, __m256i b)":"int _mm256_testc_si256（__m256i a，__m256i b）","void _mm256_stream_si256 (__m256i * mem_addr, __m256i a)":"void _mm256_stream_si256（__m256i * mem_addr，__m256i a）","int _mm_testz_pd (__m128d a, __m128d b)":"int _mm_testz_pd（__m128d a，__m128d b）","__m256i _mm256_abs_epi32 (__m256i a)":"__M256I _MM256_ABS_EPI32（__M256I A）","__m256 _mm256_unpackhi_ps (__m256 a, __m256 b)":"__m256_mm256_unpackhi_ps(__m256a,__m256b)","__m256i _mm256_adds_epu8 (__m256i a, __m256i b)":"__M256I _MM256_ADDS_EPU8（__M256I A，__M256I B）","int _mm256_testc_pd (__m256d a, __m256d b)":"int _mm256_testc_pd（__m256D A，__m256d b）","__m256i _mm256_adds_epi16 (__m256i a, __m256i b)":"__M256I _MM256_ADDS_EPI16（__M256I A，__M256I B）","__m256d _mm256_unpacklo_pd (__m256d a, __m256d b)":"__M256D _MM256_UNPACKLO_PD（__M256D A，__M256D B）","int _mm_testz_ps (__m128 a, __m128 b)":"int _mm_testz_ps（__m128 a，__m128 b）","__m256i _mm256_abs_epi8 (__m256i a)":"__M256I _MM256_ABS_EPI8（__M256I A）","__m256 _mm256_unpacklo_ps (__m256 a, __m256 b)":"__M256 _MM256_UNPACKLO_PS（__M256 A，__M256 B）","__m256i _mm256_avg_epu16 (__m256i a, __m256i b)":"__m256i_mm256_avg_epu16(__m256i a,__m256i b)","__m256i _mm256_adds_epi8 (__m256i a, __m256i b)":"__M256I _MM256_ADDS_EPI8（__M256I A，__M256I B）","__m128i _mm_broadcastq_epi64 (__m128i a)":"__m128i _mm_broadcastq_epi64（__m128i a）","__m256i _mm256_add_epi8 (__m256i a, __m256i b)":"__M256I _MM256_ADD_EPI8（__M256I A，__M256I B）","__m256d _mm256_xor_pd (__m256d a, __m256d b)":"__M256D _MM256_XOR_PD（__M256D A，__M256D B）","__m128i _mm_blend_epi32 (__m128i a, __m128i b, const int imm8)":"__m128i _mm_blend_epi32（__m128i a，__m128i b，const int Imm8）","__m256i _mm256_add_epi16 (__m256i a, __m256i b)":"__M256I _MM256_ADD_EPI16（__M256I A，__M256I B）","__m256i _mm256_adds_epu16 (__m256i a, __m256i b)":"__M256I _MM256_ADDS_EPU16（__M256I A，__M256I B）","__m128d _mm_broadcastsd_pd (__m128d a)":"__m128d _mm_broadcastsd_pd（__m128d a）","__m256 _mm256_broadcastss_ps (__m128 a)":"__m256 _mm256_broadcastss_ps（__m128 a）","__m256i _mm256_blend_epi16 (__m256i a, __m256i b, const int imm8)":"__M256I _MM256_BLEND_EPI16（__M256I A，__M256I B，CONST INT IMM8）","__m256i _mm256_broadcastsi128_si256 (__m128i a)":"__m256i _mm256_broadcasti128_si256（__m128i a）","__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count)":"__m256i _mm256_alignr_epi8（__m256i a，__m256i b，const int count）","__m256i _mm256_add_epi32 (__m256i a, __m256i b)":"__m256i_mm256_add_epi32(__m256i a,__m256i b)","__m128 _mm_broadcastss_ps (__m128 a)":"__m128 _mm_broadcastss_ps（__m128 a）","__m256i _mm256_cmpeq_epi8 (__m256i a, __m256i b)":"__M256I _MM256_CMPEQ_EPI8（__M256I A，__M256I b）","__m256i _mm256_and_si256 (__m256i a, __m256i b)":"__M256I _MM256_AND_SI256（__M256I A，__M256I B）","__m256i _mm256_blend_epi32 (__m256i a, __m256i b, const int imm8)":"__m256i_mm256_blend_epi32(__m256i a,__m256i b,const int imm8)","__m256i _mm256_add_epi64 (__m256i a, __m256i b)":"__M256I _MM256_ADD_EPI64（__M256I A，__M256I B）","__m256i _mm256_broadcastb_epi8 (__m128i a)":"__m256i _mm256_broadcastb_epi8（__m128i a）","__m256i _mm256_cmpeq_epi16 (__m256i a, __m256i b)":"__M256I _MM256_CMPEQ_EPI16（__M256I A，__M256I b）","__m256i _mm256_andnot_si256 (__m256i a, __m256i b)":"__M256I _MM256_ANDNOT_SI256（__M256I A，__M256I b）","__m256i _mm256_cmpgt_epi64 (__m256i a, __m256i b)":"__M256I _MM256_CMPGT_EPI64（__M256I A，__M256I b）","__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask)":"__M256I _MM256_BLENDV_EPI8（__M256I A，__M256I B，__M256I MASK）","__m256i _mm256_broadcastw_epi16 (__m128i a)":"__m256i _mm256_broadcastw_epi16（__m128i a）","__m256i _mm256_cmpeq_epi32 (__m256i a, __m256i b)":"__M256I _MM256_CMPEQ_EPI32（__M256I A，__M256I b）","__m256i _mm256_avg_epu8 (__m256i a, __m256i b)":"__M256I _MM256_AVG_EPU8（__M256I A，__M256I B）","__m128i _mm_broadcastb_epi8 (__m128i a)":"__m128i _mm_broadcastb_epi8（__m128i a）","__m256i _mm256_cmpgt_epi8 (__m256i a, __m256i b)":"__M256I _MM256_CMPGT_EPI8（__M256I A，__M256I b）","__m128i _mm_broadcastw_epi16 (__m128i a)":"__m128i _mm_broadcastw_epi16（__m128i a）","__m256i _mm256_cvtepu16_epi32 (__m128i a)":"__M256I _MM256_CVTEPU16_EPI32（__M128I A）","__m256i _mm256_cmpeq_epi64 (__m256i a, __m256i b)":"__M256I _MM256_CMPEQ_EPI64（__M256I A，__M256I b）","__m256i _mm256_broadcastd_epi32 (__m128i a)":"__m256i _mm256_broadcastd_epi32（__m128i a）","int _mm256_cvtsi256_si32 (__m256i a)":"int _mm256_cvtsi256_si32（__m256i a）","__m256i _mm256_cvtepu8_epi64 (__m128i a)":"__m256i _mm256_cvtepu8_epi64（__m128i a）","__m128i _mm_broadcastd_epi32 (__m128i a)":"__m128i _mm_broadcastd_epi32（__m128i a）","__m256i _mm256_cmpgt_epi16 (__m256i a, __m256i b)":"__M256I _MM256_CMPGT_EPI16（__M256I A，__M256I b）","__m256i _mm256_broadcastq_epi64 (__m128i a)":"__M256I _MM256_BRODCASTQ_EPI64（__M128I A）","__m256i _mm256_cvtepu8_epi16 (__m128i a)":"__m256i _mm256_cvtepu8_epi16（__m128i a）","__m128d _mm_mask_i32gather_pd (__m128d src, double const* base_addr, __m128i vindex, __m128d mask, const int scale)":"__m128d _mm_mask_i32gather_pd（__m128d src，double const* base_addr，__m128i vindex，__m128d mask，const int scale）","__m256i _mm256_cvtepi16_epi64 (__m128i a)":"__M256I _MM256_CVTEPI16_EPI64（__M128I A）","__m256i _mm256_cmpgt_epi32 (__m256i a, __m256i b)":"__M256I _MM256_CMPGT_EPI32（__M256I A，__M256I b）","__m256d _mm256_broadcastsd_pd (__m128d a)":"__m256d _mm256_broadcastsd_pd（__m128d a）","__m256i _mm256_cvtepi8_epi16 (__m128i a)":"__m256i _mm256_cvtepi8_epi16（__m128i a）","__m256i _mm256_cvtepi32_epi64 (__m128i a)":"__M256I _MM256_CVTEPI32_EPI64（__M128I A）","__m128 _mm_mask_i64gather_ps (__m128 src, float const* base_addr, __m128i vindex, __m128 mask, const int scale)":"__m128 _mm_mask_i64gather_ps（__m128 src，float const* base_addr，__m128i vindex，__m128 mask，const int scale）","__m256i _mm256_cvtepi8_epi64 (__m128i a)":"__m256i _mm256_cvtepi8_epi64（__m128i a）","__m128d _mm_i32gather_pd (double const* base_addr, __m128i vindex, const int scale)":"__m128d _mm_i32gather_pd（double const* base_addr，__m128i vindex，const int scale）","__m256i _mm256_cvtepu8_epi32 (__m128i a)":"__m256i _mm256_cvtepu8_epi32（__m128i a）","__m128d _mm_mask_i64gather_pd (__m128d src, double const* base_addr, __m128i vindex, __m128d mask, const int scale)":"__m128d _mm_mask_i64gather_pd (__m128d src, double const* base_addr, __m128i vindex, __m128d mask, const int scale)","__m256i _mm256_cvtepu16_epi64 (__m128i a)":"__m256i _mm256_cvtepu16_epi64（__m128i a）","__m128 _mm256_mask_i64gather_ps (__m128 src, float const* base_addr, __m256i vindex, __m128 mask, const int scale)":"__m128 _mm256_mask_i64gather_ps（__m128 src，float const* base_addr，__m256i vindex，__m128 mask，const int scale）","__m128d _mm_i64gather_pd (double const* base_addr, __m128i vindex, const int scale)":"__m128d _mm_i64gather_pd（double const* base_addr，__m128i vindex，const int scale）","__m256i _mm256_cvtepi16_epi32 (__m128i a)":"__M256I _MM256_CVTEPI16_EPI32（__M128I A）","__m256i _mm256_cvtepu32_epi64 (__m128i a)":"__M256I _MM256_CVTEPU32_EPI64（__M128I A）","__m256d _mm256_mask_i32gather_pd (__m256d src, double const* base_addr, __m128i vindex, __m256d mask, const int scale)":"__M256D _MM256_MASK_I32GATHER_PD（__M256D SRC，double const* base_addr，__m128i vindex，__m256d mask，const int scale）","__m128i _mm256_extracti128_si256 (__m256i a, const int imm8)":"__m128i _mm256_extracti128_si256（__M256I A，const int Inm8）","__m256i _mm256_cvtepi8_epi32 (__m128i a)":"__m256i _mm256_cvtepi8_epi32（__m128i a）","__m128i _mm_mask_i32gather_epi32 (__m128i src, int const* base_addr, __m128i vindex, __m128i mask, const int scale)":"__m128i _mm_mask_i32gather_epi32（__m128i src，int const * base_addr，__m128i冠军，__m128i mask，const int scale）","__m128i _mm_i32gather_epi32 (int const* base_addr, __m128i vindex, const int scale)":"__m128i _mm_i32gather_epi32（int const * base_addr，__m128i vindex，const int scale）","__m128 _mm_i64gather_ps (float const* base_addr, __m128i vindex, const int scale)":"__m128 _mm_i64gather_ps（float const* base_addr，__m128i vindex，const int scale）","__m256d _mm256_mask_i64gather_pd (__m256d src, double const* base_addr, __m256i vindex, __m256d mask, const int scale)":"__M256D _MM256_MASK_I64GATHER_PD（__M256D SRC，double const* base_addr，__m256i vindex，__m256d mask，const int scale）","__m128i _mm_maskload_epi32 (int const* mem_addr, __m128i mask)":"__m128i _mm_maskload_epi32（int const* mem_addr，__m128i蒙版）","__m256i _mm256_mask_i32gather_epi32 (__m256i src, int const* base_addr, __m256i vindex, __m256i mask, const int scale)":"__m256i _mm256_mask_i32gather_epi32（__m256i src，int const* base_addr，__m256i vindex，__m256i bask，const int int scale）","__m128i _mm_mask_i64gather_epi32 (__m128i src, int const* base_addr, __m128i vindex, __m128i mask, const int scale)":"__m128i _mm_mask_i64gather_epi32（__m128i src，int const * base_addr，__m128i冠军，__m128i mask，const int scale）","__m128i _mm_i64gather_epi32 (int const* base_addr, __m128i vindex, const int scale)":"__m128i _mm_i64gather_epi32（int const * base_addr，__m128i vindex，const int scale）","__m128 _mm256_i64gather_ps (float const* base_addr, __m256i vindex, const int scale)":"__m128_mm256_i64gather_ps(float const*base_addr,__m256i vindex,const int scale)","__m256i _mm256_maskload_epi32 (int const* mem_addr, __m256i mask)":"__m256i _mm256_maskload_epi32（int const* mem_addr，__m256i蒙版）","__m128i _mm256_mask_i64gather_epi32 (__m128i src, int const* base_addr, __m256i vindex, __m128i mask, const int scale)":"__m128i _mm256_mask_i64gather_epi32（__m128i src，int const* base_addr，__m256i vindex，__m128i mask，const int scale）","__m128i _mm_maskload_epi64 (__int64 const* mem_addr, __m128i mask)":"__m128i _mm_maskload_epi64（__int64 const* mem_addr，__m128i mask）","__m256d _mm256_i32gather_pd (double const* base_addr, __m128i vindex, const int scale)":"__M256D _MM256_I32GATHER_PD（double const* base_addr，__m128i vindex，const int scale）","__m128i _mm256_i64gather_epi32 (int const* base_addr, __m256i vindex, const int scale)":"__m128i _mm256_I64GATHER_EPI32（int const* base_addr，__m256i vindex，const int scale）","__m256i _mm256_mask_i32gather_epi64 (__m256i src, __int64 const* base_addr, __m128i vindex, __m256i mask, const int scale)":"__m256i _mm256_mask_i32gather_epi64 (__m256i src, __int64 const* base_addr, __m128i vindex, __m256i mask, const int scale)","__m256d _mm256_i64gather_pd (double const* base_addr, __m256i vindex, const int scale)":"__M256D _MM256_I64GATHER_PD（double const* base_addr，__m256i vindex，const int scale）","__m256i _mm256_mask_i64gather_epi64 (__m256i src, __int64 const* base_addr, __m256i vindex, __m256i mask, const int scale)":"__m256i _mm256_mask_i64gather_epi64（__m256i src，__int64 const* base_addr，__m256i vindex，__m256i mask，cont int int scale）","__m128i _mm_mask_i32gather_epi64 (__m128i src, __int64 const* base_addr, __m128i vindex, __m128i mask, const int scale)":"__m128i _mm_mask_i32gather_epi64（__m128i src，__int64 const * base_addr，__m128i vindex，__m128i mask，const int int scale）","__m256i _mm256_maskload_epi64 (__int64 const* mem_addr, __m256i mask)":"__m256i _mm256_maskload_epi64（__int64 const* mem_addr，__m256i蒙版）","__m256i _mm256_i32gather_epi32 (int const* base_addr, __m256i vindex, const int scale)":"__m256i _mm256_I32GATHER_EPI32（int const* base_addr，__m256i vindex，const int scale）","__m256 _mm256_mask_i32gather_ps (__m256 src, float const* base_addr, __m256i vindex, __m256 mask, const int scale)":"__m256 _MM256_MASK_I32GATHER_PS（__M256 SRC，float const* base_addr，__m256i vindex，__m256 mask，const int scale）","__m128i _mm_i32gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale)":"__m128i _mm_i32gather_epi64（__int64 const * base_addr，__m128i vindex，const int scale）","void _mm_maskstore_epi32 (int* mem_addr, __m128i mask, __m128i a)":"void _mm_maskStore_epi32（int* mem_addr，__m128i mask，__m128i a）","__m256i _mm256_i32gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale)":"__M256I _MM256_I32GATHER_EPI64（__INT64 const* base_addr，__m128i vindex，const int scale）","__m128i _mm_mask_i64gather_epi64 (__m128i src, __int64 const* base_addr, __m128i vindex, __m128i mask, const int scale)":"__m128i _mm_mask_i64gather_epi64（__m128i src，__int64 const * base_addr，__m128i vindex，__m128i mask，cont int int scale）","__m256i _mm256_min_epi32 (__m256i a, __m256i b)":"__M256I _MM256_MIN_EPI32（__M256I A，__M256I B）","void _mm256_maskstore_epi32 (int* mem_addr, __m256i mask, __m256i a)":"void _mm256_maskStore_epi32（int* mem_addr，__m256i mask，__m256i a）","__m256i _mm256_min_epi8 (__m256i a, __m256i b)":"__M256I _MM256_MIN_EPI8（__M256I A，__M256I B）","__m256i _mm256_i64gather_epi64 (__int64 const* base_addr, __m256i vindex, const int scale)":"__m256i _mm256_i64gather_epi64（__int64 const* base_addr，__m256i vindex，const int scale）","__m128i _mm_i64gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale)":"__m128i _mm_i64gather_epi64（__int64 const * base_addr，__m128i vindex，const int scale）","__m128 _mm_mask_i32gather_ps (__m128 src, float const* base_addr, __m128i vindex, __m128 mask, const int scale)":"__m128 _mm_mask_i32gather_ps (__m128 src, float const* base_addr, __m128i vindex, __m128 mask, const int scale)","__m256i _mm256_min_epu16 (__m256i a, __m256i b)":"__M256I _MM256_MIN_EPU16（__M256I A，__M256I B）","__m256 _mm256_i32gather_ps (float const* base_addr, __m256i vindex, const int scale)":"__m256 _MM256_I32GATHER_PS（float const* base_addr，__m256i vindex，const int scale）","void _mm_maskstore_epi64 (__int64* mem_addr, __m128i mask, __m128i a)":"void_mm_maskstore_epi64(__int64*mem_addr,__m128i mask,__m128i a)","__m256i _mm256_min_epu32 (__m256i a, __m256i b)":"__M256I _MM256_MIN_EPU32（__M256I A，__M256I B）","__m256i _mm256_packs_epi16 (__m256i a, __m256i b)":"__m256i _mm256_packs_epi16（__m256i A，__m256i b）","__m256i _mm256_hadd_epi16 (__m256i a, __m256i b)":"__m256i _mm256_hadd_epi16（__m256i A，__m256i b）","__m128 _mm_i32gather_ps (float const* base_addr, __m128i vindex, const int scale)":"__m128_mm_i32gather_ps(float const*base_addr,__m128i vindex,const int scale)","int _mm256_movemask_epi8 (__m256i a)":"int _mm256_movemask_epi8（__m256i a）","__m256i _mm256_hadd_epi32 (__m256i a, __m256i b)":"__m256i _mm256_hadd_epi32（__m256i A，__m256i b）","__m256i _mm256_packs_epi32 (__m256i a, __m256i b)":"__m256i _mm256_packs_epi32（__m256i A，__m256i b）","void _mm256_maskstore_epi64 (__int64* mem_addr, __m256i mask, __m256i a)":"void_mm256_maskstore_epi64(__int64*mem_addr,__m256i mask,__m256i a)","__m128i _mm_sllv_epi32 (__m128i a, __m128i count)":"__m128i _mm_sllv_epi32（__m128i a，__m128i计数）","__m256i _mm256_mpsadbw_epu8 (__m256i a, __m256i b, const int imm8)":"__M256I _MM256_MPSADBW_EPU8（__M256I A，__M256I B，CONST INT IMM8）","__m256i _mm256_packus_epi16 (__m256i a, __m256i b)":"__m256i _mm256_packus_epi16（__m256i A，__m256i b）","__m256i _mm256_max_epu8 (__m256i a, __m256i b)":"__M256I _MM256_MAX_EPU8（__M256I A，__M256I B）","__m256i _mm256_hadds_epi16 (__m256i a, __m256i b)":"__m256i _mm256_hadds_epi16（__m256i A，__m256i b）","__m256i _mm256_mul_epi32 (__m256i a, __m256i b)":"__M256I _MM256_MUL_EPI32（__M256I A，__M256I B）","__m128i _mm_sllv_epi64 (__m128i a, __m128i count)":"__m128i _mm_sllv_epi64（__m128i a，__m128i计数）","__m256i _mm256_hsub_epi16 (__m256i a, __m256i b)":"__M256I _MM256_HSUB_EPI16（__M256I A，__M256I b）","__m256i _mm256_packus_epi32 (__m256i a, __m256i b)":"__m256i _mm256_packus_epi32（__m256i A，__m256i b）","__m256i _mm256_max_epi16 (__m256i a, __m256i b)":"__M256I _MM256_MAX_EPI16（__M256I A，__M256I B）","__m256i _mm256_sllv_epi32 (__m256i a, __m256i count)":"__M256I _MM256_SLLV_EPI32（__M256I A，__M256I计数）","__m256i _mm256_mul_epu32 (__m256i a, __m256i b)":"__M256I _MM256_MUL_EPU32（__M256I A，__M256I B）","__m256i _mm256_hsub_epi32 (__m256i a, __m256i b)":"__M256I _MM256_HSUB_EPI32（__M256I A，__M256I b）","__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8)":"__M256I _MM256_PERMUTE2X128_SI256（__M256I A，__M256I B，CONST INT IMM8）","__m256i _mm256_max_epi32 (__m256i a, __m256i b)":"__M256I _MM256_MAX_EPI32（__M256I A，__M256I B）","__m256i _mm256_sllv_epi64 (__m256i a, __m256i count)":"__M256I _MM256_SLLV_EPI64（__M256I A，__M256I计数）","__m256i _mm256_maddubs_epi16 (__m256i a, __m256i b)":"__M256I _MM256_MADDUBS_EPI16（__M256I A，__M256I b）","__m256d _mm256_permute4x64_pd (__m256d a, const int imm8)":"__M256D _MM256_PERMUTE4X64_PD（__M256D A，CONST INT IMM8）","__m256i _mm256_hsubs_epi16 (__m256i a, __m256i b)":"__M256I _MM256_HSUBS_EPI16（__M256I A，__M256I b）","__m256i _mm256_max_epi8 (__m256i a, __m256i b)":"__M256I _MM256_MAX_EPI8（__M256I A，__M256I B）","__m256i _mm256_srai_epi16 (__m256i a, int imm8)":"__M256I _MM256_SRAI_EPI16（__M256I A，INT IMM8）","__m256i _mm256_madd_epi16 (__m256i a, __m256i b)":"__M256I _MM256_MADD_EPI16（__M256I A，__M256I B）","__m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8)":"__M256I _MM256_PERMUTE4X64_EPI64（__M256I A，const int Inm8）","_mm256_sra_epi16 (__m256i a, __m128i count)":"_mm256_sra_epi16（__m256i A，__m128i计数）","__m256i _mm256_mulhi_epi16 (__m256i a, __m256i b)":"__m256i _mm256_mulhi_epi16（__m256i A，__m256i b）","__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8)":"__M256I _MM256_INSERTI128_SI256（__M256I A，__M128I B，CONST INT IMM8）","__m256i _mm256_max_epu16 (__m256i a, __m256i b)":"__M256I _MM256_MAX_EPU16（__M256I A，__M256I B）","__m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx)":"__M256I _MM256_PERMUTEVAR8X32_EPI32（__M256I A，__M256I IDX）","__m256i _mm256_srai_epi32 (__m256i a, int imm8)":"__M256I _MM256_SRAI_EPI32（__M256I A，INT IMM8）","__m256i _mm256_max_epu32 (__m256i a, __m256i b)":"__M256I _MM256_MAX_EPU32（__M256I A，__M256I B）","__m256i _mm256_mulhi_epu16 (__m256i a, __m256i b)":"__m256i _mm256_mulhi_epu16（__m256i A，__m256i b）","__m256i _mm256_stream_load_si256 (__m256i const* mem_addr)":"__m256i _mm256_stream_load_si256（__m256i const* mem_addr）","__m256 _mm256_permutevar8x32_ps (__m256 a, __m256i idx)":"__m256 _MM256_PERMUTEVAR8X32_PS（__M256 A，__M256I IDX）","__m256i _mm256_min_epu8 (__m256i a, __m256i b)":"__M256I _MM256_MIN_EPU8（__M256I A，__M256I B）","_mm256_sra_epi32 (__m256i a, __m128i count)":"_MM256_SRA_EPI32（__m256i A，__m128i计数）","__m256i _mm256_min_epi16 (__m256i a, __m256i b)":"__M256I _MM256_MIN_EPI16（__M256I A，__M256I B）","__m256i _mm256_mulhrs_epi16 (__m256i a, __m256i b)":"__M256I _MM256_MULHRS_EPI16（__M256I A，__M256I b）","__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8)":"__m256i _mm256_bsrli_epi128（__m256i A，const int Imm8）","__m256i _mm256_slli_epi16 (__m256i a, int imm8)":"__M256I _MM256_SLLI_EPI16（__M256I A，INT IMM8）","__m128i _mm_srav_epi32 (__m128i a, __m128i count)":"__m128i _mm_srav_epi32（__m128i a，__m128i计数）","__m128i _mm_srlv_epi32 (__m128i a, __m128i count)":"__m128i _mm_srlv_epi32（__m128i a，__m128i计数）","__m256i _mm256_subs_epu8 (__m256i a, __m256i b)":"__M256I _MM256_SUBS_EPU8（__M256I A，__M256I b）","__m256i _mm256_mullo_epi16 (__m256i a, __m256i b)":"__m256i _mm256_mullo_epi16（__m256i A，__m256i b）","__m256i _mm256_sll_epi16 (__m256i a, __m128i count)":"__M256I _MM256_SLL_EPI16（__M256I A，__M128I计数）","__m256i _mm256_srav_epi32 (__m256i a, __m256i count)":"__M256I _MM256_SRAV_EPI32（__M256I A，__M256I计数）","__m128i _mm_srlv_epi64 (__m128i a, __m128i count)":"__m128i _mm_srlv_epi64（__m128i a，__m128i计数）","__m256i _mm256_subs_epi16 (__m256i a, __m256i b)":"__m256i _mm256_subs_epi16（__m256i A，__m256i b）","__m256i _mm256_mullo_epi32 (__m256i a, __m256i b)":"__m256i _mm256_mullo_epi32（__m256i A，__m256i b）","__m256i _mm256_slli_epi32 (__m256i a, int imm8)":"__M256I _MM256_SLLI_EPI32（__M256I A，INT IMM8）","__m256i _mm256_srli_epi16 (__m256i a, int imm8)":"__M256I _MM256_SRLI_EPI16（__M256I A，INT IMM8）","__m256i _mm256_srlv_epi32 (__m256i a, __m256i count)":"__M256I _MM256_SRLV_EPI32（__M256I A，__M256I计数）","__m256i _mm256_subs_epi8 (__m256i a, __m256i b)":"__m256i _mm256_subs_epi8（__m256i A，__m256i b）","__m256i _mm256_sll_epi32 (__m256i a, __m128i count)":"__M256I _MM256_SLL_EPI32（__M256I A，__M128I计数）","__m256i _mm256_or_si256 (__m256i a, __m256i b)":"__M256I _MM256_OR_SI256（__M256I A，__M256I B）","__m256i _mm256_srlv_epi64 (__m256i a, __m256i count)":"__M256I _MM256_SRLV_EPI64（__M256I A，__M256I计数）","__m256i _mm256_srl_epi16 (__m256i a, __m128i count)":"__M256I _MM256_SRL_EPI16（__M256I A，__M128I计数）","__m256i _mm256_subs_epu16 (__m256i a, __m256i b)":"__m256i _mm256_subs_epu16（__m256i A，__m256i b）","__m256i _mm256_slli_epi64 (__m256i a, int imm8)":"__M256I _MM256_SLLI_EPI64（__M256I A，INT IMM8）","unsigned int _bextr2_u32 (unsigned int a, unsigned int control)":"unsigned int _bextr2_u32（unsigned int a，unsigned int控件）","__m256i _mm256_shuffle_epi8 (__m256i a, __m256i b)":"__M256I _MM256_SHUFFLE_EPI8（__M256I A，__M256I B）","__m256i _mm256_sad_epu8 (__m256i a, __m256i b)":"__M256I _MM256_SAD_EPU8（__M256I A，__M256I B）","__m256i _mm256_srli_epi32 (__m256i a, int imm8)":"__M256I _MM256_SRLI_EPI32（__M256I A，INT IMM8）","__m256i _mm256_sll_epi64 (__m256i a, __m128i count)":"__M256I _MM256_SLL_EPI64（__M256I A，__M128I计数）","unsigned int _blsi_u32 (unsigned int a)":"unsigned int _blsi_u32（unsigned int a）","__m256i _mm256_shuffle_epi32 (__m256i a, const int imm8)":"__M256I _MM256_SHUFFLE_EPI32（__M256I A，CONST INT IMM8）","__m256i _mm256_srl_epi32 (__m256i a, __m128i count)":"__M256I _MM256_SRL_EPI32（__M256I A，__M128I计数）","unsigned int _blsmsk_u32 (unsigned int a)":"unsigned int _blsmsk_u32（unsigned int a）","__m256i _mm256_unpackhi_epi8 (__m256i a, __m256i b)":"__m256i _mm256_unpackhi_epi8（__m256i A，__m256i b）","__m256i _mm256_bslli_epi128 (__m256i a, const int imm8)":"__M256I _MM256_BSLLI_EPI128（__M256I A，const int Imm8）","__m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8)":"__M256I _MM256_SHUFFLEHI_EPI16（__M256I A，const int Imm8）","__m256i _mm256_srli_epi64 (__m256i a, int imm8)":"__M256I _MM256_SRLI_EPI64（__M256I A，INT IMM8）","__m256i _mm256_unpackhi_epi16 (__m256i a, __m256i b)":"__M256I _MM256_UNPACKHI_EPI16（__M256I A，__M256I b）","unsigned __int64 _mulx_u64 (unsigned __int64 a, unsigned __int64 b, unsigned __int64* hi)":"未签名的__int64 _mulx_U64（未签名__int64 a，unsigned __int64 b，unsigned __int64* hi）","unsigned int _blsr_u32 (unsigned int a)":"unsigned int _blsr_u32（unsigned int a）","__m256i _mm256_srl_epi64 (__m256i a, __m128i count)":"__M256I _MM256_SRL_EPI64（__M256I A，__M128I计数）","__m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8)":"__M256I _MM256_SHUFFLELO_EPI16（__M256I A，CONST INT IMM8）","int _mm_tzcnt_32 (unsigned int a)":"int _mm_tzcnt_32（unsigned int a）","unsigned __int64 _pdep_u64 (unsigned __int64 a, unsigned __int64 mask)":"未签名的__int64 _pdep_u64（未签名的__int64 a，unsigned __int64 mask）","__m128d _mm_fmaddsub_pd (__m128d a, __m128d b, __m128d c)":"__m128d _mm_fmaddsub_pd（__m128d a，__m128d b，__m128d c）","unsigned __int64 _pext_u64 (unsigned __int64 a, unsigned __int64 mask)":"无符号__int64 _pext_u64（无符号__int64 a，无符号__int64掩码）","__m256i _mm256_unpackhi_epi32 (__m256i a, __m256i b)":"__m256i _mm256_unpackhi_epi32（__m256i A，__m256i b）","__m256i _mm256_sign_epi16 (__m256i a, __m256i b)":"__M256I _MM256_SIGN_EPI16（__M256I A，__M256I B）","unsigned __int64 _andn_u64 (unsigned __int64 a, unsigned __int64 b)":"未签名的__int64 _andn_u64（未签名__int64 a，unsigned __int64 b）","unsigned __int64 _bzhi_u64 (unsigned __int64 a, unsigned int index)":"未签名的__int64 _bzhi_u64（未签名的__int64 a，unsigned int index）","__m256i _mm256_sign_epi32 (__m256i a, __m256i b)":"__M256I _MM256_SIGN_EPI32（__M256I A，__M256I B）","__m128d _mm_fmadd_pd (__m128d a, __m128d b, __m128d c)":"__m128d _mm_fmadd_pd（__m128d a，__m128d b，__m128d c）","__m128 _mm_fmaddsub_ps (__m128 a, __m128 b, __m128 c)":"__m128 _mm_fmaddsub_ps（__m128 a，__m128 b，__m128 c）","__m256i _mm256_unpackhi_epi64 (__m256i a, __m256i b)":"__m256i _mm256_unpackhi_epi64（__m256i A，__m256i b）","unsigned __int64 _bextr_u64 (unsigned __int64 a, unsigned int start, unsigned int len)":"未签名的__int64 _bextr_u64（未签名的__int64 a，unsigned int start，unsigned int len）","__m256i _mm256_sign_epi8 (__m256i a, __m256i b)":"__M256I _MM256_SIGN_EPI8（__M256I A，__M256I B）","__m256i _mm256_unpacklo_epi8 (__m256i a, __m256i b)":"__M256I _MM256_UNPACKLO_EPI8（__M256I A，__M256I b）","__m128 _mm_fmadd_ps (__m128 a, __m128 b, __m128 c)":"__m128 _mm_fmadd_ps（__m128 a，__m128 b，__m128 c）","__m256d _mm256_fmaddsub_pd (__m256d a, __m256d b, __m256d c)":"__M256D _MM256_FMADDSUB_PD（__M256D A，__M256D B，__M256D C）","unsigned __int64 _bextr2_u64 (unsigned __int64 a, unsigned __int64 control)":"未签名的__int64 _bextr2_U64（未签名__int64 a，unsigned __int64控件）","__m256i _mm256_sub_epi8 (__m256i a, __m256i b)":"__m256i _mm256_sub_epi8（__M256I A，__M256I b）","__m256i _mm256_unpacklo_epi16 (__m256i a, __m256i b)":"__M256I _MM256_UNPACKLO_EPI16（__M256I A，__M256I b）","__m256 _mm256_fmaddsub_ps (__m256 a, __m256 b, __m256 c)":"__M256 _MM256_FMADDSUB_PS（__M256 A，__M256 B，__M256 C）","__m256d _mm256_fmadd_pd (__m256d a, __m256d b, __m256d c)":"__M256D _MM256_FMADD_PD（__M256D A，__M256D B，__M256D C）","__m256i _mm256_sub_epi16 (__m256i a, __m256i b)":"__m256i _mm256_sub_epi16（__m256i A，__m256i b）","unsigned __int64 _blsi_u64 (unsigned __int64 a)":"未签名的__int64 _BLSI_U64（无符号__Int64 a）","__m256i _mm256_unpacklo_epi32 (__m256i a, __m256i b)":"__M256I _MM256_UNPACKLO_EPI32（__M256I A，__M256I b）","__m128d _mm_fmsub_pd (__m128d a, __m128d b, __m128d c)":"__m128d _mm_fmsub_pd（__m128d a，__m128d b，__m128d c）","__m256 _mm256_fmadd_ps (__m256 a, __m256 b, __m256 c)":"__M256 _MM256_FMADD_PS（__M256 A，__M256 B，__M256 C）","__m256i _mm256_sub_epi32 (__m256i a, __m256i b)":"__m256i _mm256_sub_epi32（__m256i A，__m256i b）","unsigned __int64 _blsmsk_u64 (unsigned __int64 a)":"未签名的__int64 _blsmsk_u64（unsigned __int64 a）","__m128 _mm_fmsub_ps (__m128 a, __m128 b, __m128 c)":"__m128 _mm_fmsub_ps（__m128 a，__m128 b，__m128 c）","__m256i _mm256_unpacklo_epi64 (__m256i a, __m256i b)":"__M256I _MM256_UNPACKLO_EPI64（__M256I A，__M256I b）","__m128d _mm_fnmadd_pd (__m128d a, __m128d b, __m128d c)":"__m128d _mm_fnmadd_pd（__m128d a，__m128d b，__m128d c）","unsigned __int64 _blsr_u64 (unsigned __int64 a)":"未签名的__int64 _BLSR_U64（未签名的__int64 a）","__m256i _mm256_sub_epi64 (__m256i a, __m256i b)":"__m256i _mm256_sub_epi64（__m256i A，__m256i b）","__m256i _mm256_xor_si256 (__m256i a, __m256i b)":"__M256I _MM256_XOR_SI256（__M256I A，__M256I b）","__m256d _mm256_fmsub_pd (__m256d a, __m256d b, __m256d c)":"__M256D _MM256_FMSUB_PD（__M256D A，__M256D B，__M256D C）","__m128 _mm_fnmadd_ps (__m128 a, __m128 b, __m128 c)":"__m128 _mm_fnmadd_ps（__m128 a，__m128 b，__m128 c）","__int64 _mm_tzcnt_64 (unsigned __int64 a)":"__int64 _mm_tzcnt_64（未签名的__int64 a）","__m128d _mm_fnmsub_sd (__m128d a, __m128d b, __m128d c)":"__m128d _mm_fnmsub_sd（__m128d a，__m128d b，__m128d c）","unsigned int _andn_u32 (unsigned int a, unsigned int b)":"unsigned int _andn_u32（unsigned int a，unsigned int b）","__m256d _mm256_fnmadd_pd (__m256d a, __m256d b, __m256d c)":"__M256D _MM256_FNMADD_PD（__M256D A，__M256D B，__M256D C）","unsigned int _mulx_u32 (unsigned int a, unsigned int b, unsigned int* hi)":"unsigned int _mulx_u32（unsigned int a，unsigned int b，unsigned int* hi）","__m256 _mm256_fmsub_ps (__m256 a, __m256 b, __m256 c)":"__m256 _MM256_FMSUB_PS（__M256 A，__m256 B，__M256 C）","__m128 _mm_fnmsub_ss (__m128 a, __m128 b, __m128 c)":"__m128 _mm_fnmsub_ss（__m128 a，__m128 b，__m128 c）","unsigned int _bextr_u32 (unsigned int a, unsigned int start, unsigned int len)":"unsigned int _bextr_u32（unsigned int a，unsigned int start，unsigned int len）","__m256 _mm256_fnmadd_ps (__m256 a, __m256 b, __m256 c)":"__M256 _MM256_FNMADD_PS（__M256 A，__M256 B，__M256 C）","__m128d _mm_fmsubadd_pd (__m128d a, __m128d b, __m128d c)":"__m128d _mm_fmsubadd_pd（__m128d a，__m128d b，__m128d c）","unsigned int _pdep_u32 (unsigned int a, unsigned int mask)":"unsigned int _pdep_u32（unsigned int a，unsigned int mask）","__m128d _mm_fmsub_sd (__m128d a, __m128d b, __m128d c)":"__m128d _mm_fmsub_sd（__m128d a，__m128d b，__m128d c）","__m128 _mm_cmplt_ps (__m128 a,  __m128 b)":"__m128 _mm_cmplt_ps（__m128 a，__m128 b）","__m128d _mm_fnmadd_sd (__m128d a, __m128d b, __m128d c)":"__m128d _mm_fnmadd_sd（__m128d a，__m128d b，__m128d c）","__m128 _mm_fmsubadd_ps (__m128 a, __m128 b, __m128 c)":"__m128 _mm_fmsubadd_ps（__m128 a，__m128 b，__m128 c）","__m128 _mm_cmple_ps (__m128 a,  __m128 b)":"__m128 _mm_cmple_ps（__m128 a，__m128 b）","unsigned int _pext_u32 (unsigned int a, unsigned int mask)":"unsigned int _pext_u32（unsigned int a，unsigned int mask）","__m128 _mm_fmsub_ss (__m128 a, __m128 b, __m128 c)":"__m128 _mm_fmsub_ss（__m128 a，__m128 b，__m128 c）","__m128 _mm_fnmadd_ss (__m128 a, __m128 b, __m128 c)":"__m128 _mm_fnmadd_ss（__m128 a，__m128 b，__m128 c）","__m256d _mm256_fmsubadd_pd (__m256d a, __m256d b, __m256d c)":"__M256D _MM256_FMSUBADD_PD（__M256D A，__M256D B，__M256D C）","__m128 _mm_cmpneq_ps (__m128 a,  __m128 b)":"__m128 _mm_cmpneq_ps（__m128 a，__m128 b）","unsigned int _bzhi_u32 (unsigned int a, unsigned int index)":"unsigned int _bzhi_u32（unsigned int a，unsigned int index）","unsigned int _lzcnt_u32 (unsigned int a)":"unsigned int _lzcnt_u32（unsigned int a）","__m256 _mm256_fmsubadd_ps (__m256 a, __m256 b, __m256 c)":"__m256 _MM256_FMSUBADD_PS（__M256 A，__M256 B，__M256 C）","__m128d _mm_fmadd_sd (__m128d a, __m128d b, __m128d c)":"__m128d _mm_fmadd_sd（__m128d a，__m128d b，__m128d c）","__m128 _mm_cmpngt_ps (__m128 a,  __m128 b)":"__m128 _mm_cmpngt_ps（__m128 a，__m128 b）","unsigned __int64 _lzcnt_u64 (unsigned __int64 a)":"未签名的__int64 _lzcnt_u64（未签名__int64 a）","__m128 _mm_cmpnlt_ss (__m128 a,  __m128 b)":"__m128 _mm_cmpnlt_ss（__m128 a，__m128 b）","__m128 _mm_fmadd_ss (__m128 a, __m128 b, __m128 c)":"__m128 _mm_fmadd_ss（__m128 a，__m128 b，__m128 c）","__m128d _mm_fnmsub_pd (__m128d a, __m128d b, __m128d c)":"__m128d _mm_fnmsub_pd（__m128d a，__m128d b，__m128d c）","__m128i _mm_clmulepi64_si128 (__m128i a, __m128i b, const int imm8)":"__m128i _mm_mm_clmulepi64_si128（__m128i a，__m128i b，const int int inm8）","__m128 _mm_cmpnge_ps (__m128 a,  __m128 b)":"__m128 _mm_cmpnge_ps（__m128 a，__m128 b）","__m128 _mm_cmpunord_ps (__m128 a,  __m128 b)":"__m128 _mm_cmpunord_ps（__m128 a，__m128 b）","int _mm_popcnt_u32 (unsigned int a)":"int _mm_popcnt_u32（unsigned int a）","__m128 _mm_fnmsub_ps (__m128 a, __m128 b, __m128 c)":"__m128 _mm_fnmsub_ps（__m128 a，__m128 b，__m128 c）","__m128 _mm_cmpnle_ss (__m128 a,  __m128 b)":"__m128 _mm_cmpnle_ss（__m128 a，__m128 b）","__m128 _mm_cmpnlt_ps (__m128 a,  __m128 b)":"__m128 _mm_cmpnlt_ps（__m128 a，__m128 b）","__m128 _mm_cvtsi32_ss (__m128 a, int b)":"__m128 _mm_cvtsi32_ss（__m128 a，int b）","__int64 _mm_popcnt_u64 (unsigned __int64 a)":"__int64 _mm_popcnt_u64（未签名的__int64 a）","__m128 _mm_cmpord_ss (__m128 a,  __m128 b)":"__m128 _mm_cmpord_ss（__m128 a，__m128 b）","__m256d _mm256_fnmsub_pd (__m256d a, __m256d b, __m256d c)":"__M256D _MM256_FNMSUB_PD（__M256D A，__M256D B，__M256D C）","__m128 _mm_cmpnle_ps (__m128 a,  __m128 b)":"__m128 _mm_cmpnle_ps（__m128 a，__m128 b）","__m128 _mm_add_ps (__m128 a,  __m128 b)":"__m128 _mm_add_ps（__m128 a，__m128 b）","__m256 _mm256_fnmsub_ps (__m256 a, __m256 b, __m256 c)":"__m256 _mm256_fnmsub_ps（__m256 a，__m256 b，__m256 c）","int _mm_comieq_ss (__m128 a, __m128 b)":"int _mm_comieq_ss（__m128 a，__m128 b）","int _mm_cvtss_si32 (__m128 a)":"int _mm_cvtss_si32（__m128 a）","__m128 _mm_add_ss (__m128 a,  __m128 b)":"__m128 _mm_add_ss（__m128 a，__m128 b）","__m128 _mm_cmpord_ps (__m128 a,  __m128 b)":"__m128 _mm_cmpord_ps（__m128 a，__m128 b）","int _mm_cvttss_si32 (__m128 a)":"int _mm_cvttss_si32（__m128 a）","__m128 _mm_movelh_ps (__m128 a,  __m128 b)":"__m128 _mm_movelh_ps（__m128 a，__m128 b）","int _mm_comigt_ss (__m128 a, __m128 b)":"int _mm_comigt_ss（__m128 a，__m128 b）","__m128 _mm_div_ps (__m128 a,  __m128 b)":"__m128 _mm_div_ps（__m128 a，__m128 b）","__m128 _mm_and_ps (__m128 a, __m128 b)":"__m128 _mm_and_ps（__m128 a，__m128 b）","__m128 _mm_cmpeq_ss (__m128 a,  __m128 b)":"__m128 _mm_cmpeq_ss（__m128 a，__m128 b）","int _mm_comige_ss (__m128 a, __m128 b)":"int _mm_comige_ss（__m128 a，__m128 b）","__m128 _mm_andnot_ps (__m128 a, __m128 b)":"__m128 _mm_andnot_ps（__m128 a，__m128 b）","int _mm_movemask_ps (__m128 a)":"int _mm_movemask_ps（__m128 a）","__m128 _mm_div_ss (__m128 a,  __m128 b)":"__m128 _mm_div_ss（__m128 a，__m128 b）","__m128 _mm_cmpgt_ss (__m128 a,  __m128 b)":"__m128 _mm_cmpgt_ss（__m128 a，__m128 b）","__m128 _mm_load_ps (float const* mem_address)":"__m128 _mm_load_ps（float const* mem_address）","__m128 _mm_cmpeq_ps (__m128 a,  __m128 b)":"__m128 _mm_cmpeq_ps（__m128 a，__m128 b）","int _mm_comilt_ss (__m128 a, __m128 b)":"int _mm_comilt_ss（__m128 a，__m128 b）","__m128 _mm_move_ss (__m128 a, __m128 b)":"__m128 _mm_move_ss（__m128 a，__m128 b）","__m128 _mm_cmpge_ss (__m128 a,  __m128 b)":"__m128 _mm_cmpge_ss（__m128 a，__m128 b）","__m128 _mm_loadh_pi (__m128 a, __m64 const* mem_addr)":"__m128 _mm_loadh_pi（__m128 a，__m64 const* mem_addr）","int _mm_comile_ss (__m128 a, __m128 b)":"int _mm_comile_ss（__m128 a，__m128 b）","__m128 _mm_cmpgt_ps (__m128 a,  __m128 b)":"__m128 _mm_cmpgt_ps（__m128 a，__m128 b）","__m128 _mm_mul_ps (__m128 a, __m128 b)":"__m128 _mm_mul_ps（__m128 a，__m128 b）","__m128 _mm_loadl_pi (__m128 a, __m64 const* mem_addr)":"__m128 _mm_loadl_pi（__m128 a，__m64 const* mem_addr）","__m128 _mm_cmpge_ps (__m128 a,  __m128 b)":"__m128 _mm_cmpge_ps（__m128 a，__m128 b）","__m128 _mm_cmplt_ss (__m128 a,  __m128 b)":"__m128 _mm_cmplt_ss（__m128 a，__m128 b）","int _mm_comineq_ss (__m128 a, __m128 b)":"int _mm_comineq_ss（__m128 a，__m128 b）","__m128 _mm_load_ss (float const* mem_address)":"__m128 _mm_load_ss（float const* mem_address）","__m128 _mm_mul_ss (__m128 a, __m128 b)":"__m128 _mm_mul_ss（__m128 a，__m128 b）","__m128 _mm_cmpunord_ss (__m128 a,  __m128 b)":"__m128 _mm_cmpunord_ss（__m128 a，__m128 b）","__m128 _mm_sqrt_ss (__m128 a, __m128 b)":"__m128 _mm_sqrt_ss（__m128 a，__m128 b）","__m128 _mm_cmple_ss (__m128 a,  __m128 b)":"__m128 _mm_cmple_ss（__m128 a，__m128 b）","__m128 _mm_loadu_ps (float const* mem_address)":"__m128 _mm_loadu_ps（float const* mem_address）","__m128 _mm_or_ps (__m128 a,  __m128 b)":"__m128 _mm_or_ps（__m128 a，__m128 b）","int _mm_ucomieq_ss (__m128 a, __m128 b)":"int _mm_ucomieq_ss（__m128 a，__m128 b）","void _mm_storeu_ps (float* mem_addr, __m128 a)":"void _mm_storeu_ps（float* mem_addr，__m128 a）","__m128 _mm_cmpneq_ss (__m128 a,  __m128 b)":"__m128 _mm_cmpneq_ss（__m128 a，__m128 b）","__m128 _mm_max_ps (__m128 a,  __m128 b)":"__m128 _mm_max_ps（__m128 a，__m128 b）","int _mm_ucomigt_ss (__m128 a, __m128 b)":"int _mm_ucomigt_ss（__m128 a，__m128 b）","void _mm_prefetch(char* p, int i)":"void _mm_prefetch（char* p，int i）","void _mm_store_ps (float* mem_addr, __m128 a)":"void _mm_store_ps（float* mem_addr，__m128 a）","__m128 _mm_cmpngt_ss (__m128 a,  __m128 b)":"__m128 _mm_cmpngt_ss（__m128 a，__m128 b）","int _mm_ucomige_ss (__m128 a, __m128 b)":"int _mm_ucomige_ss（__m128 a，__m128 b）","__m128 _mm_max_ss (__m128 a,  __m128 b)":"__m128 _mm_max_ss（__m128 a，__m128 b）","void _mm_stream_ps (float* mem_addr, __m128 a)":"void _mm_stream_ps（float* mem_addr，__m128 a）","__m128 _mm_rcp_ps (__m128 a)":"__m128 _mm_rcp_ps（__m128 a）","__m128 _mm_cmpnge_ss (__m128 a,  __m128 b)":"__m128 _mm_cmpnge_ss（__m128 a，__m128 b）","__m128 _mm_min_ps (__m128 a,  __m128 b)":"__m128 _mm_min_ps（__m128 a，__m128 b）","int _mm_ucomilt_ss (__m128 a, __m128 b)":"int _mm_ucomilt_ss（__m128 a，__m128 b）","__m128 _mm_rcp_ss (__m128 a)":"__m128 _mm_rcp_ss（__m128 a）","void _mm_sfence(void)":"void _mm_sfence（void）","__m128i _mm_cmpeq_epi8 (__m128i a,  __m128i b)":"__m128i _mm_cmpeq_epi8（__m128i a，__m128i b）","__m128 _mm_min_ss (__m128 a,  __m128 b)":"__m128 _mm_min_ss（__m128 a，__m128 b）","__m128 _mm_rcp_ss (__m128 a, __m128 b)":"__m128 _mm_rcp_ss（__m128 a，__m128 b）","int _mm_ucomile_ss (__m128 a, __m128 b)":"int _mm_ucomile_ss（__m128 a，__m128 b）","void _mm_storeh_pi (__m64* mem_addr, __m128 a)":"void _mm_storeh_pi（__m64* mem_addr，__m128 a）","__m128d _mm_cmpeq_pd (__m128d a,  __m128d b)":"__m128d _mm_cmpeq_pd（__m128d a，__m128d b）","int _mm_ucomineq_ss (__m128 a, __m128 b)":"int _mm_ucomineq_ss（__m128 a，__m128 b）","__m128 _mm_movehl_ps (__m128 a,  __m128 b)":"__m128 _mm_movehl_ps（__m128 a，__m128 b）","__m128 _mm_rsqrt_ps (__m128 a)":"__m128 _mm_rsqrt_ps（__m128 a）","void _mm_storel_pi (__m64* mem_addr, __m128 a)":"void _mm_storel_pi（__m64* mem_addr，__m128 a）","int _mm_comigt_sd (__m128d a, __m128d b)":"int _mm_comigt_sd（__m128d a，__m128d b）","__m128i _mm_cmpeq_epi16 (__m128i a,  __m128i b)":"__m128i _mm_cmpeq_epi16（__m128i a，__m128i b）","__m128 _mm_rsqrt_ss (__m128 a)":"__m128 _mm_rsqrt_ss（__m128 a）","__m128i _mm_load_si128 (__m128i const* mem_address)":"__m128i _mm_load_si128（__m128i const* mem_address）","int _mm_comige_sd (__m128d a, __m128d b)":"int _mm_comige_sd（__m128d a，__m128d b）","void _mm_store_ss (float* mem_addr, __m128 a)":"void _mm_store_ss（float* mem_addr，__m128 a）","__m128i _mm_cmpeq_epi32 (__m128i a,  __m128i b)":"__m128i _mm_cmpeq_epi32（__m128i a，__m128i b）","int _mm_comilt_sd (__m128d a, __m128d b)":"int _mm_comilt_sd（__m128d a，__m128d b）","__m128 _mm_rsqrt_ss (__m128 a, __m128 b)":"__m128 _mm_rsqrt_ss（__m128 a，__m128 b）","__m128d _mm_load_pd (double const* mem_address)":"__m128d _mm_load_pd（double const* mem_address）","__m128d _mm_cmpgt_pd (__m128d a,  __m128d b)":"__m128d _mm_cmpgt_pd（__m128d a，__m128d b）","__m128d _mm_sub_ps (__m128d a, __m128d b)":"__m128d _mm_sub_ps（__m128d a，__m128d b）","void _mm_lfence(void)":"void _mm_lfence（void）","__m128 _mm_shuffle_ps (__m128 a,  __m128 b, unsigned int control)":"__m128 _mm_shuffle_ps（__m128 a，__m128 b，unsigned int控件）","int _mm_comile_sd (__m128d a, __m128d b)":"int _mm_comile_sd（__m128d a，__m128d b）","__m128i _mm_cmpgt_epi16 (__m128i a,  __m128i b)":"__m128i _mm_cmpgt_epi16（__m128i a，__m128i b）","__m128 _mm_sub_ss (__m128 a, __m128 b)":"__m128 _mm_sub_ss（__m128 a，__m128 b）","__m128 _mm_sqrt_ps (__m128 a)":"__m128 _mm_sqrt_ps（__m128 a）","int _mm_comineq_sd (__m128d a, __m128d b)":"int _mm_comineq_sd（__m128d a，__m128d b）","__m128d _mm_loadh_pd (__m128d a, double const* mem_addr)":"__m128d _mm_loadh_pd（__m128d a，double const* mem_addr）","__m128i _mm_cmpgt_epi32 (__m128i a,  __m128i b)":"__m128i _mm_cmpgt_epi32（__m128i a，__m128i b）","__m128 _mm_sqrt_ss (__m128 a)":"__m128 _mm_sqrt_ss（__m128 a）","__m128d _mm_cmpunord_sd (__m128d a,  __m128d b)":"__m128d _mm_cmpunord_sd（__m128d a，__m128d b）","__m128 _mm_unpackhi_ps (__m128 a,  __m128 b)":"__m128 _mm_unpackhi_ps（__m128 a，__m128 b）","__m128d _mm_loadl_pd (__m128d a, double const* mem_addr)":"__m128d _mm_loadl_pd（__m128d a，double const* mem_addr）","__m128i _mm_cmpgt_epi8 (__m128i a,  __m128i b)":"__m128i _mm_cmpgt_epi8（__m128i a，__m128i b）","__m128d _mm_or_pd (__m128d a,  __m128d b)":"__m128d _mm_or_pd（__m128d a，__m128d b）","__m128d _mm_load_sd (double const* mem_address)":"__m128d _mm_load_sd（double const* mem_address）","__m128d _mm_cmpge_pd (__m128d a,  __m128d b)":"__m128d _mm_cmpge_pd（__m128d a，__m128d b）","int _mm_ucomieq_sd (__m128d a, __m128d b)":"int _mm_ucomieq_sd（__m128d a，__m128d b）","__m128 _mm_unpacklo_ps (__m128 a,  __m128 b)":"__m128_mm_unpacklo_ps(__m128a,__m128b)","__m128i _mm_packs_epi16 (__m128i a,  __m128i b)":"__m128i _mm_packs_epi16（__m128i a，__m128i b）","__m128d _mm_cmplt_pd (__m128d a,  __m128d b)":"__m128d _mm_cmplt_pd（__m128d a，__m128d b）","__m128i _mm_loadl_epi32 (__m128i const* mem_addr)":"__m128i _mm_loadl_epi32（__m128i const* mem_addr）","int _mm_ucomigt_sd (__m128d a, __m128d b)":"int _mm_ucomigt_sd（__m128d a，__m128d b）","__m128 _mm_xor_ps (__m128 a,  __m128 b)":"__m128 _mm_xor_ps（__m128 a，__m128 b）","__m128i _mm_packs_epi32 (__m128i a,  __m128i b)":"__m128i _mm_packs_epi32（__m128i a，__m128i b）","__m128i _mm_loadl_epi64 (__m128i const* mem_addr)":"__m128i _mm_loadl_epi64（__m128i const* mem_addr）","__m128i _mm_cmplt_epi16 (__m128i a,  __m128i b)":"__m128i _mm_cmplt_epi16（__m128i a，__m128i b）","__m128i _mm_loadu_si128 (__m128i const* mem_address)":"__m128i _mm_loadu_si128（__m128i const* mem_address）","__m128i _mm_packus_epi16 (__m128i a,  __m128i b)":"__m128i _mm_packus_epi16（__m128i a，__m128i b）","int _mm_ucomige_sd (__m128d a, __m128d b)":"int_mm_ucomige_sd（__m128d a，__m128d b）","__m128i _mm_cmplt_epi32 (__m128i a,  __m128i b)":"__m128i _mm_cmplt_epi32（__m128i a，__m128i b）","__m128 _mm_cvtsi64_ss (__m128 a, __int64 b)":"__m128_mm_cvtsi64_ss（__m128a，__int64b）","__m128i _mm_slli_epi16 (__m128i a,  int immediate)":"__m128i _mm_slli_epi16（__m128i a，int立即）","__m128d _mm_loadu_pd (double const* mem_address)":"__m128d _mm_loadu_pd（double const* mem_address）","__m128i _mm_cmplt_epi8 (__m128i a,  __m128i b)":"__m128i _mm_cmplt_epi8（__m128i a，__m128i b）","int _mm_ucomilt_sd (__m128d a, __m128d b)":"int _mm_ucomilt_sd（__m128d a，__m128d b）","__int64 _mm_cvtss_si64 (__m128 a)":"__int64 _mm_cvtss_si64（__m128 a）","__m128d _mm_cmple_pd (__m128d a,  __m128d b)":"__m128d _mm_cmple_pd（__m128d a，__m128d b）","void _mm_maskmoveu_si128 (__m128i a,  __m128i mask, char* mem_address)":"void _mm_maskmoveu_si128（__m128i a，__m128i mask，char* mem_address）","__int64 _mm_cvttss_si64 (__m128 a)":"__int64 _mm_cvttss_si64（__m128 a）","__m128i _mm_sll_epi16 (__m128i a, __m128i count)":"__m128i_mm_sll_epi16（__m128i a，__m128i计数）","__m128i _mm_max_epu8 (__m128i a,  __m128i b)":"__m128i _mm_max_epu8（__m128i a，__m128i b）","__m128d _mm_cmpneq_pd (__m128d a,  __m128d b)":"__m128d _mm_cmpneq_pd（__m128d a，__m128d b）","__m128i _mm_slli_epi32 (__m128i a,  int immediate)":"__m128i _mm_slli_epi32（__m128i a，int立即）","int _mm_ucomile_sd (__m128d a, __m128d b)":"int_mm_ucomile_sd（__m128d a，__m128d b）","__m128d _mm_max_pd (__m128d a,  __m128d b)":"__m128d _mm_max_pd（__m128d a，__m128d b）","__m128d _mm_cmpngt_pd (__m128d a,  __m128d b)":"__m128d _mm_cmpngt_pd（__m128d a，__m128d b）","__m128i _mm_add_epi8 (__m128i a,  __m128i b)":"__m128i_mm_add_epi8(__m128i a,__m128i b)","__m128i _mm_max_epi16 (__m128i a,  __m128i b)":"__m128i _mm_max_epi16（__m128i a，__m128i b）","__m128i _mm_sll_epi32 (__m128i a, __m128i count)":"__m128i _mm_sll_epi32（__m128i a，__m128i计数）","int _mm_ucomineq_sd (__m128d a, __m128d b)":"int _mm_ucomineq_sd（__m128d a，__m128d b）","__m128d _mm_add_pd (__m128d a,  __m128d b)":"__m128d _mm_add_pd（__m128d a，__m128d b）","__m128d _mm_cmpnge_pd (__m128d a,  __m128d b)":"__m128d _mm_cmpnge_pd（__m128d a，__m128d b）","__m128i _mm_slli_epi64 (__m128i a,  int immediate)":"__m128i _mm_slli_epi64（__m128i a，int立即）","__m128i _mm_add_epi16 (__m128i a,  __m128i b)":"__m128i _mm_add_epi16（__m128i a，__m128i b）","__m128d _mm_max_sd (__m128d a,  __m128d b)":"__m128d _mm_max_sd（__m128d a，__m128d b）","__m128d _mm_cmpunord_pd (__m128d a,  __m128d b)":"__m128d _mm_cmpunord_pd（__m128d a，__m128d b）","__m128d _mm_cmpnlt_pd (__m128d a,  __m128d b)":"__m128d _mm_cmpnlt_pd（__m128d a，__m128d b）","__m128i _mm_sll_epi64 (__m128i a, __m128i count)":"__m128i _mm_sll_epi64（__m128i a，__m128i计数）","__m128d _mm_cmpnle_pd (__m128d a,  __m128d b)":"__m128d _mm_cmpnle_pd（__m128d a，__m128d b）","__m128i _mm_add_epi32 (__m128i a,  __m128i b)":"__m128i _mm_add_epi32（__m128i a，__m128i b）","__m128d _mm_cvtsi32_sd (__m128d a, int b)":"__m128d _mm_cvtsi32_sd（__m128d a，int b）","void _mm_mfence(void)":"void_mm_mfence（void）","__m128i _mm_sll_epi16 (__m128i a,  __m128i count)":"__m128i _mm_sll_epi16（__m128i a，__m128i计数）","__m128d _mm_cmpord_pd (__m128d a,  __m128d b)":"__m128d _mm_cmpord_pd（__m128d a，__m128d b）","__m128i _mm_bslli_si128 (__m128i a, int imm8)":"__m128i _mm_bslli_si128（__m128i a，int imm8）","__m128i _mm_min_epu8 (__m128i a,  __m128i b)":"__m128i _mm_min_epu8（__m128i a，__m128i b）","__m128d _mm_cvtss_sd (__m128d a, __m128 b)":"__m128d _mm_cvtss_sd（__m128d a，__m128 b）","__m128i _mm_add_epi64 (__m128i a,  __m128i b)":"__m128i _mm_add_epi64（__m128i a，__m128i b）","__m128d _mm_cmpeq_sd (__m128d a,  __m128d b)":"__m128d _mm_cmpeq_sd（__m128d a，__m128d b）","__m128d _mm_min_pd (__m128d a,  __m128d b)":"__m128d _mm_min_pd（__m128d a，__m128d b）","__m128i _mm_srai_epi16 (__m128i a,  int immediate)":"__m128i _mm_srai_epi16（__m128i a，int立即）","__m128i _mm_cvtsi32_si128 (int a)":"__m128i _mm_cvtsi32_si128（int a）","__m128i _mm_adds_epu8 (__m128i a,  __m128i b)":"__m128i _mm_adds_epu8（__m128i a，__m128i b）","__m128i _mm_min_epi16 (__m128i a,  __m128i b)":"__m128i _mm_min_epi16（__m128i a，__m128i b）","__m128d _mm_cmpgt_sd (__m128d a,  __m128d b)":"__m128d_mm_cmpgt_sd(__m128d a,__m128d b)","__m128i _mm_sra_epi16 (__m128i a, __m128i count)":"__m128i _mm_sra_epi16（__m128i a，__m128i计数）","__m128 _mm_cvtsd_ss (__m128 a, __m128d b)":"__m128 _mm_cvtsd_ss（__m128 a，__m128d b）","__m128i _mm_adds_epi16 (__m128i a,  __m128i b)":"__m128i _mm_adds_epi16（__m128i a，__m128i b）","__m128d _mm_min_sd (__m128d a,  __m128d b)":"__m128d _mm_min_sd（__m128d a，__m128d b）","__m128d _mm_cmpge_sd (__m128d a,  __m128d b)":"__m128d _mm_cmpge_sd（__m128d a，__m128d b）","__m128i _mm_srai_epi32 (__m128i a,  int immediate)":"__m128i _mm_srai_epi32（__m128i a，int立即）","int _mm_cvtsd_si32 (__m128d a)":"int _mm_cvtsd_si32（__m128d a）","__m128i _mm_adds_epi8 (__m128i a,  __m128i b)":"__m128i _mm_adds_epi8（__m128i a，__m128i b）","int _mm_movemask_epi8 (__m128i a)":"int _mm_movemask_epi8（__m128i a）","__m128d _mm_cmplt_sd (__m128d a,  __m128d b)":"__m128d _mm_cmplt_sd（__m128d a，__m128d b）","__m128i _mm_sra_epi32 (__m128i a, __m128i count)":"__m128i _mm_sra_epi32（__m128i a，__m128i计数）","__m128d _mm_cmple_sd (__m128d a,  __m128d b)":"__m128d _mm_cmple_sd（__m128d a，__m128d b）","int _mm_cvtsi128_si32 (__m128i a)":"int _mm_cvtsi128_si32（__m128i a）","__m128i _mm_adds_epu16 (__m128i a,  __m128i b)":"__m128i _mm_adds_epu16（__m128i a，__m128i b）","int _mm_movemask_pd (__m128d a)":"int _mm_movemask_pd（__m128d a）","__m128i _mm_srli_epi16 (__m128i a,  int immediate)":"__m128i _mm_srli_epi16（__m128i a，int立即）","int _mm_cvttsd_si32 (__m128d a)":"int _mm_cvttsd_si32（__m128d a）","__m128d _mm_cmpneq_sd (__m128d a,  __m128d b)":"__m128d _mm_cmpneq_sd（__m128d a，__m128d b）","__m128d _mm_move_sd (__m128d a, __m128d b)":"__m128d _mm_move_sd（__m128d a，__m128d b）","__m128d _mm_add_sd (__m128d a,  __m128d b)":"__m128d _mm_add_sd（__m128d a，__m128d b）","__m128i _mm_srl_epi16 (__m128i a, __m128i count)":"__m128i _mm_srl_epi16（__m128i a，__m128i计数）","__m128i _mm_and_si128 (__m128i a,  __m128i b)":"__m128i _mm_and_si128（__m128i a，__m128i b）","__m128d _mm_cvtepi32_pd (__m128i a)":"__m128d _mm_cvtepi32_pd（__m128i a）","__m128d _mm_cmpngt_sd (__m128d a,  __m128d b)":"__m128d _mm_cmpngt_sd（__m128d a，__m128d b）","__m128i _mm_srli_epi32 (__m128i a,  int immediate)":"__m128i _mm_srli_epi32（__m128i a，int立即）","__m128i _mm_move_epi64 (__m128i a)":"__m128i _mm_move_epi64（__m128i a）","__m128d _mm_and_pd (__m128d a, __m128d b)":"__m128d _mm_and_pd（__m128d a，__m128d b）","__m128d _mm_cvtps_pd (__m128 a)":"__m128d _mm_cvtps_pd（__m128 a）","__m128d _mm_mul_pd (__m128d a,  __m128d b)":"__m128d _mm_mul_pd（__m128d a，__m128d b）","__m128d _mm_cmpnge_sd (__m128d a,  __m128d b)":"__m128d _mm_cmpnge_sd（__m128d a，__m128d b）","__m128i _mm_andnot_si128 (__m128i a,  __m128i b)":"__m128i _mm_andnot_si128（__m128i a，__m128i b）","__m128i _mm_cvtpd_epi32 (__m128d a)":"__m128i _mm_cvtpd_epi32（__m128d a）","__m128i _mm_srl_epi32 (__m128i a, __m128i count)":"__m128i _mm_srl_epi32（__m128i a，__m128i计数）","__m128i _mm_mul_epu32 (__m128i a,  __m128i b)":"__m128i _mm_mul_epu32（__m128i a，__m128i b）","__m128d _mm_cmpnlt_sd (__m128d a,  __m128d b)":"__m128d_mm_cmpnlt_sd(__m128d a,__m128d b)","__m128i _mm_cvtps_epi32 (__m128 a)":"__m128i _mm_cvtps_epi32（__m128 a）","__m128d _mm_andnot_pd (__m128d a, __m128d b)":"__m128d _mm_andnot_pd（__m128d a，__m128d b）","__m128i _mm_madd_epi16 (__m128i a,  __m128i b)":"__m128i _mm_madd_epi16（__m128i a，__m128i b）","__m128i _mm_srli_epi64 (__m128i a,  int immediate)":"__m128i _mm_srli_epi64（__m128i a，int立即）","__m128d _mm_cmpnle_sd (__m128d a,  __m128d b)":"__m128d _mm_cmpnle_sd（__m128d a，__m128d b）","__m128i _mm_srl_epi64 (__m128i a, __m128i count)":"__m128i _mm_srl_epi64（__m128i a，__m128i计数）","__m128i _mm_mulhi_epi16 (__m128i a,  __m128i b)":"__m128i _mm_mulhi_epi16（__m128i a，__m128i b）","__m128i _mm_avg_epu8 (__m128i a,  __m128i b)":"__m128i _mm_avg_epu8（__m128i a，__m128i b）","__m128i _mm_cvttpd_epi32 (__m128d a)":"__m128i_mm_cvttpd_epi32(__m128d a)","__m128d _mm_cmpord_sd (__m128d a,  __m128d b)":"__m128d _mm_cmpord_sd（__m128d a，__m128d b）","__m128i _mm_mulhi_epu16 (__m128i a,  __m128i b)":"__m128i _mm_mulhi_epu16（__m128i a，__m128i b）","__m128i _mm_bsrli_si128 (__m128i a, int imm8)":"__m128i _mm_bsrli_si128（__m128i a，int imm8）","__m128i _mm_cvttps_epi32 (__m128 a)":"__m128i _mm_cvttps_epi32（__m128 a）","int _mm_comieq_sd (__m128d a, __m128d b)":"int _mm_comieq_sd（__m128d a，__m128d b）","__m128i _mm_mullo_epi16 (__m128i a,  __m128i b)":"__m128i _mm_mullo_epi16（__m128i a，__m128i b）","__m128i _mm_avg_epu16 (__m128i a,  __m128i b)":"__m128i _mm_avg_epu16（__m128i a，__m128i b）","void _mm_storeu_pd (double* mem_addr, __m128d a)":"void _mm_storeu_pd（double* mem_addr，__m128d a）","__m128 _mm_cvtpd_ps (__m128d a)":"__m128 _mm_cvtpd_ps（__m128d a）","__m128d _mm_xor_pd (__m128d a,  __m128d b)":"__m128d _mm_xor_pd（__m128d a，__m128d b）","__m128d _mm_shuffle_pd (__m128d a,  __m128d b, int immediate)":"__m128d_mm_shuffle_pd（__m128d a，__m128d b，int immediate）","void _mm_store_si128 (__m128i* mem_addr, __m128i a)":"void _mm_store_si128（__m128i* mem_addr，__m128i a）","__m128d _mm_cvtsi64_sd (__m128d a, __int64 b)":"__m128d _mm_cvtsi64_sd（__m128d a，__int64 b）","__m128i _mm_shuffle_epi32 (__m128i a,  int immediate)":"__m128i _mm_shuffle_epi32（__m128i a，int立即）","__m128 _mm_cvtepi32_ps (__m128i a)":"__m128 _mm_cvtepi32_ps（__m128i a）","void _mm_store_pd (double* mem_addr, __m128d a)":"void _mm_store_pd（double* mem_addr，__m128d a）","__m128d _mm_mul_sd (__m128d a,  __m128d b)":"__m128d_mmul_sd(__m128d a,__m128d b)","__m128i _mm_shufflehi_epi16 (__m128i a,  int immediate)":"__m128i _mm_mm_shufflehi_epi16（__m128i a，int立即）","__m128d _mm_div_pd (__m128d a,  __m128d b)":"__m128d _mm_div_pd（__m128d a，__m128d b）","__m128i _mm_cvtsi64_si128 (__int64 a)":"__m128i _mm_cvtsi64_si128（__int64 a）","void _mm_stream_si128 (__m128i* mem_addr, __m128i a)":"void _mm_stream_si128（__m128i* mem_addr，__m128i a）","__m128i _mm_shufflehi_epi16 (__m128i a,  int control)":"__m128i _mm_shufflehi_epi16（__m128i a，int控件）","__m128i _mm_or_si128 (__m128i a,  __m128i b)":"__m128i _mm_or_si128（__m128i a，__m128i b）","__int64 _mm_cvtsd_si64 (__m128d a)":"__int64 _mm_cvtsd_si64（__m128d a）","__m128d _mm_div_sd (__m128d a,  __m128d b)":"__m128d _mm_div_sd（__m128d a，__m128d b）","void _mm_stream_pd (double* mem_addr, __m128d a)":"void _mm_stream_pd（double* mem_addr，__m128d a）","__m128i _mm_shufflelo_epi16 (__m128i a,  int control)":"__m128i _mm_shufflelo_epi16（__m128i a，int控件）","__m128i _mm_cvtepi8_epi16 (__m128i a)":"__m128i _mm_cvtepi8_epi16（__m128i a）","int _mm_extract_epi16 (__m128i a,  int immediate)":"int _mm_extract_epi16（__m128i a，int立即）","__int64 _mm_cvtsi128_si64 (__m128i a)":"__int64 _mm_cvtsi128_si64（__m128i a）","__m128d _mm_sqrt_pd (__m128d a)":"__m128d _mm_sqrt_pd（__m128d a）","__m128i _mm_cvtepu8_epi32 (__m128i a)":"__m128i _mm_cvtepu8_epi32（__m128i a）","void _mm_storeh_pd (double* mem_addr, __m128d a)":"void _mm_storeh_pd（double* mem_addr，__m128d a）","__int64 _mm_cvttsd_si64 (__m128d a)":"__int64 _mm_cvttsd_si64（__m128d a）","__m128i _mm_insert_epi16 (__m128i a,  int i, int immediate)":"__m128i _mm_insert_epi16（__m128i a，int i，int立即）","void _mm_storel_pd (double* mem_addr, __m128d a)":"void _mm_storel_pd（double* mem_addr，__m128d a）","__m128d _mm_sqrt_sd (__m128d a)":"__m128d _mm_sqrt_sd（__m128d a）","__m128i _mm_cvtepi16_epi32 (__m128i a)":"__m128i _mm_cvtepi16_epi32（__m128i a）","__m128i _mm_min_epu16 (__m128i a, __m128i b)":"__m128i _mm_min_epu16（__m128i a，__m128i b）","void _mm_stream_si64(__int64 *p, __int64 a)":"void _mm_stream_si64（__ int64 *p，__int64 a）","__m128d _mm_sqrt_sd (__m128d a, __m128d b)":"__m128d _mm_sqrt_sd（__m128d a，__m128d b）","void _mm_stream_si32(int *p, int a)":"void _mm_stream_si32（int *p，int a）","__m128i _mm_cvtepi8_epi32 (__m128i a)":"__m128i _mm_cvtepi8_epi32（__m128i a）","__m128i _mm_min_epu32 (__m128i a, __m128i b)":"__m128i _mm_min_epu32（__m128i a，__m128i b）","__m128d _mm_addsub_pd (__m128d a, __m128d b)":"__m128d _mm_addsub_pd（__m128d a，__m128d b）","void _mm_storeu_si128 (__m128i* mem_addr, __m128i a)":"void _mm_storeu_si128（__m128i* mem_addr，__m128i a）","void _mm_store_sd (double* mem_addr, __m128d a)":"void _mm_store_sd（double* mem_addr，__m128d a）","__m128i _mm_cvtepu16_epi32 (__m128i a)":"__m128i _mm_cvtepu16_epi32（__m128i a）","__m128i _mm_minpos_epu16 (__m128i a)":"__m128i _mm_minpos_epu16（__m128i a）","__m128 _mm_addsub_ps (__m128 a, __m128 b)":"__m128 _mm_addsub_ps（__m128 a，__m128 b）","__m128 _mm_round_ps (__m128 a, _MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC)":"__m128 _mm_round_ps（__m128 a，_mm_fround_to_zero | _mm_fround_no_exc）","void _mm_storel_epi64 (__m128i* mem_addr, __m128i a)":"void _mm_storel_epi64（__m128i* mem_addr，__m128i a）","__m128i _mm_cvtepu8_epi64 (__m128i a)":"__m128i _mm_cvtepu8_epi64（__m128i a）","__m128i _mm_mpsadbw_epu8 (__m128i a, __m128i b, const int imm8)":"__m128i _mm_mpsadbw_epu8（__m128i a，__m128i b，const int Imm8）","__m128d _mm_hadd_pd (__m128d a, __m128d b)":"__m128d _mm_hadd_pd（__m128d a，__m128d b）","__m128d _mm_round_sd (__m128d a, _MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC)":"__m128d _mm_round_sd（__m128d a，_mm_fround_to_zero | _mm_fround_no_exc）","__m128i _mm_cvtepi16_epi64 (__m128i a)":"__m128i _mm_cvtepi16_epi64（__m128i a）","__m128i _mm_mul_epi32 (__m128i a, __m128i b)":"__m128i _mm_mul_epi32（__m128i a，__m128i b）","__m128 _mm_hadd_ps (__m128 a, __m128 b)":"__m128 _mm_hadd_ps（__m128 a，__m128 b）","__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC)":"__m128d _mm_round_sd（__m128d a，__m128d b，_mm_fround_to_zero | _mm_fround_no_exc）","__m128i _mm_sub_epi8 (__m128i a,  __m128i b)":"__m128i_mm_sub_epi8(__m128i a,__m128i b)","__m128i _mm_cvtepi32_epi64 (__m128i a)":"__m128i _mm_cvtepi32_epi64（__m128i a）","__m128i _mm_mullo_epi32 (__m128i a, __m128i b)":"__m128i _mm_mullo_epi32（__m128i a，__m128i b）","__m128i _mm_cvtepi8_epi64 (__m128i a)":"__m128i _mm_cvtepi8_epi64（__m128i a）","__m128d _mm_sub_pd (__m128d a, __m128d b)":"__m128d _mm_sub_pd（__m128d a，__m128d b）","__m128d _mm_hsub_pd (__m128d a, __m128d b)":"__m128d _mm_hsub_pd（__m128d a，__m128d b）","__m128 _mm_round_ss (__m128 a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC)":"__m128_mm_round_ss（__m128a，_MM_FROUND_TO_ZERO|_MM_FROUND_NO_EXC）","__m128i _mm_packus_epi32 (__m128i a, __m128i b)":"__m128i _mm_packus_epi32（__m128i a，__m128i b）","__m128i _mm_cvtepu16_epi64 (__m128i a)":"__m128i _mm_cvtepu16_epi64（__m128i a）","__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC)":"__m128 _mm_round_ss（__m128 a，__m128 b，_mm_fround_to_zero | _mm_fround_no_exc）","__m128i _mm_sub_epi16 (__m128i a,  __m128i b)":"__m128i_mm_sub_epi16(__m128i a,__m128i b)","__m128 _mm_hsub_ps (__m128 a, __m128 b)":"__m128 _mm_hsub_ps（__m128 a，__m128 b）","_m128d _mm_round_pd (__m128d a, _MM_FROUND_CUR_DIRECTION)":"_m128d _mm_round_pd（__m128d a，_mm_fround_cur_direction）","__m128i _mm_cvtepu32_epi64 (__m128i a)":"__m128i _mm_cvtepu32_epi64（__m128i a）","int _mm_testc_si128 (__m128i a, __m128i b)":"int _mm_testc_si128（__m128i a，__m128i b）","__m128d _mm_loaddup_pd (double const* mem_addr)":"__m128d _mm_loaddup_pd（double const* mem_addr）","__m128i _mm_sub_epi32 (__m128i a,  __m128i b)":"__m128i _mm_sub_epi32（__m128i a，__m128i b）","__m128 _mm_round_ps (__m128 a, _MM_FROUND_CUR_DIRECTION)":"__m128 _mm_round_ps（__m128 a，_mm_fround_cur_direction）","__m128i _mm_sub_epi64 (__m128i a,  __m128i b)":"__m128i _mm_sub_epi64（__m128i a，__m128i b）","__m128d _mm_dp_pd (__m128d a, __m128d b, const int imm8)":"__m128d_mm_dp_pd（__m128d a，__m128d b，const int imm8）","__m128i _mm_lddqu_si128 (__m128i const* mem_addr)":"__m128i _mm_lddqu_si128（__m128i const* mem_addr）","int _mm_testnzc_si128 (__m128i a, __m128i b)":"int_mm_testnzc_si128（__m128i a，__m128i b）","__m128d _mm_round_sd (__m128d a, _MM_FROUND_CUR_DIRECTION)":"__m128d _mm_round_sd（__m128d a，_mm_fround_cur_direction）","__m128d _mm_movedup_pd (__m128d a)":"__m128d _mm_movedup_pd（__m128d a）","__m128 _mm_dp_ps (__m128 a, __m128 b, const int imm8)":"__m128 _mm_dp_ps（__m128 a，__m128 b，const int inm8）","int _mm_testz_si128 (__m128i a, __m128i b)":"int _mm_testz_si128（__m128i a，__m128i b）","__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_CUR_DIRECTION)":"__m128d _mm_round_sd（__m128d a，__m128d b，_mm_fround_cur_direction）","__m128i _mm_subs_epu8 (__m128i a,  __m128i b)":"__m128i_mm_subs_epu8(__m128i a,__m128i b)","__m128 _mm_movehdup_ps (__m128 a)":"__m128 _mm_movehdup_ps（__m128 a）","__m128i _mm_subs_epi16 (__m128i a,  __m128i b)":"__m128i _mm_subs_epi16（__m128i a，__m128i b）","__int64 _mm_extract_epi64 (__m128i a, const int imm8)":"__int64 _mm_extract_epi64（__m128i a，const int inm8）","__m128 _mm_round_ss (__m128 a, _MM_FROUND_CUR_DIRECTION)":"__m128 _mm_round_ss（__m128 a，_mm_fround_cur_direction）","__m128 _mm_moveldup_ps (__m128 a)":"__m128 _mm_moveldup_ps（__m128 a）","__m128i _mm_subs_epi8 (__m128i a,  __m128i b)":"__m128i _mm_subs_epi8（__m128i a，__m128i b）","__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_CUR_DIRECTION)":"__m128 _mm_round_ss（__m128 a，__m128 b，_mm_fround_cur_direction）","__m128i _mm_insert_epi64 (__m128i a, __int64 i, const int imm8)":"__m128i _mm_insert_epi64（__m128i a，__int64 i，const int in inm8）","__m128i _mm_subs_epu16 (__m128i a,  __m128i b)":"__m128i _mm_subs_epu16（__m128i a，__m128i b）","__m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8)":"__m128d _mm_blend_pd（__m128d a，__m128d b，const int Imm8）","__m128d _mm_round_pd (__m128d a, int rounding)":"__m128d _mm_round_pd（__m128d a，int Founding）","__m128i _mm_cmpgt_epi64 (__m128i a, __m128i b)":"__m128i _mm_cmpgt_epi64（__m128i a，__m128i b）","__m128d _mm_sub_sd (__m128d a, __m128d b)":"__m128d _mm_sub_sd（__m128d a，__m128d b）","__m128i _mm_blend_epi16 (__m128i a, __m128i b, const int imm8)":"__m128i _mm_blend_epi16（__m128i a，__m128i b，const int Imm8）","__m128 _mm_round_ps (__m128 a, int rounding)":"__m128 _mm_round_ps（__m128 A，int Founding）","unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v)":"unsigned int _mm_crc32_u8（unsigned int crc，unsigned char v）","__m128i _mm_sad_epu8 (__m128i a,  __m128i b)":"__m128i _mm_sad_epu8（__m128i a，__m128i b）","__m128d _mm_round_sd (__m128d a, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC)":"__m128d _mm_round_sd（__m128d a，_mm_fround_to_nearest_int | _mm_fround_no_exc）","__m128 _mm_blend_ps (__m128 a, __m128 b, const int imm8)":"__m128 _mm_blend_ps（__m128 a，__m128 b，const int inm8）","unsigned int _mm_crc32_u16 (unsigned int crc, unsigned short v)":"unsigned int _mm_crc32_u16（未签名的int crc，未签名的短V）","__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC)":"__m128d _mm_round_sd（__m128d a，__m128d b，_mm_fround_to_nearest_int | _mm_fround_no_exc）","__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask)":"__m128i _mm_blendv_epi8（__m128i a，__m128i b，__m128i mask）","unsigned int _mm_crc32_u32 (unsigned int crc, unsigned int v)":"unsigned int _mm_crc32_u32（未签名的int crc，unsigned int v）","__m128 _mm_round_ss (__m128 a, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC)":"__m128 _mm_round_ss（__m128 a，_mm_fround_to_nearest_int | _mm_fround_no_exc）","__m128i _mm_unpackhi_epi8 (__m128i a,  __m128i b)":"__m128i_mm_unpackhi_epi8(__m128i a,__m128i b)","__m128d _mm_blendv_pd (__m128d a, __m128d b, __m128d mask)":"__m128d _mm_blendv_pd（__m128d a，__m128d b，__m128d mask）","__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC)":"__m128 _mm_round_ss（__m128 a，__m128 b，_mm_fround_to_nearest_int | _mm_fround_no_exc）","unsigned __int64 _mm_crc32_u64 (unsigned __int64 crc, unsigned __int64 v)":"unsigned__int64_mm_crc32_u64（unsigned__int64crc，unsigned__int64v）","__m128d _mm_unpackhi_pd (__m128d a,  __m128d b)":"__m128d _mm_unpackhi_pd（__m128d a，__m128d b）","__m128i _mm_abs_epi16 (__m128i a)":"__m128i _mm_abs_epi16（__m128i a）","__m128 _mm_blendv_ps (__m128 a, __m128 b, __m128 mask)":"__m128 _mm_blendv_ps（__m128 a，__m128 b，__m128 mask）","__m128i _mm_unpackhi_epi16 (__m128i a,  __m128i b)":"__m128i _mm_unpackhi_epi16（__m128i a，__m128i b）","__m128d _mm_round_pd (__m128d a, _MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC)":"__m128d_mm_round_pd（__m128d a，_MM_FROUND_TO_NEG_INF|_MM_FROUND_NO_EXC）","__m128i _mm_abs_epi32 (__m128i a)":"__m128i _mm_abs_epi32（__m128i a）","__m128i _mm_unpackhi_epi32 (__m128i a,  __m128i b)":"__m128i _mm_unpackhi_epi32（__m128i a，__m128i b）","__m128d _mm_ceil_pd (__m128d a)":"__m128d _mm_ceil_pd（__m128d a）","__m128 _mm_round_ps (__m128 a, _MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC)":"__m128 _mm_round_ps（__m128 a，_mm_fround_to_neg_inf | _mm_fround_no_exc）","__m128i _mm_unpackhi_epi64 (__m128i a,  __m128i b)":"__m128i _mm_unpackhi_epi64（__m128i a，__m128i b）","__m128d _mm_round_sd (__m128d a, _MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC)":"__m128d _mm_round_sd（__m128d a，_mm_fround_to_to_neg_inf | _mm_fround_no_exc）","__m128i _mm_abs_epi8 (__m128i a)":"__m128i _mm_abs_epi8（__m128i a）","__m128 _mm_ceil_ps (__m128 a)":"__m128 _mm_ceil_ps（__m128 a）","__m128i _mm_unpacklo_epi8 (__m128i a,  __m128i b)":"__m128i _mm_unpacklo_epi8（__m128i a，__m128i b）","__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count)":"__m128i _mm_alignr_epi8（__m128i a，__m128i b，int count）","__m128d _mm_ceil_sd (__m128d a)":"__m128d _mm_ceil_sd（__m128d a）","__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC)":"__m128d _mm_round_sd（__m128d a，__m128d b，_mm_fround_to_to_neg_inf | _mm_mm_fround_no_exc）","__m128d _mm_unpacklo_pd (__m128d a,  __m128d b)":"__m128d _mm_unpacklo_pd（__m128d a，__m128d b）","__m128 _mm_round_ss (__m128 a, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC)":"__m128 _mm_round_ss（__m128 a，_mm_fround_to_neg_inf | _mm_fround_no_exc）","__m128i _mm_unpacklo_epi16 (__m128i a,  __m128i b)":"__m128i _mm_unpacklo_epi16（__m128i a，__m128i b）","__m128i _mm_hadd_epi16 (__m128i a, __m128i b)":"__m128i_mm_hadd_epi16(__m128i a,__m128i b)","__m128i _mm_unpacklo_epi32 (__m128i a,  __m128i b)":"__m128i _mm_unpacklo_epi32（__m128i a，__m128i b）","__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC)":"__m128 _mm_round_ss（__m128 a，__m128 b，_mm_fround_to_neg_inf | _mm_mm_fround_no_exc）","__m128i _mm_hadd_epi32 (__m128i a, __m128i b)":"__m128i _mm_hadd_epi32（__m128i a，__m128i b）","__m128i _mm_unpacklo_epi64 (__m128i a,  __m128i b)":"__m128i _mm_unpacklo_epi64（__m128i a，__m128i b）","__m128d _mm_round_pd (__m128d a, _MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC)":"__m128d _mm_round_pd（__m128d a，_mm_fround_to_pos_inf | _mm_fround_no_exc）","__m128i _mm_hadds_epi16 (__m128i a, __m128i b)":"__m128i _mm_hadds_epi16（__m128i a，__m128i b）","__m128i _mm_xor_si128 (__m128i a,  __m128i b)":"__m128i _mm_xor_si128（__m128i a，__m128i b）","__m128 _mm_round_ps (__m128 a, _MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC)":"__m128 _mm_round_ps（__m128 a，_mm_fround_to_pos_inf | _mm_fround_no_exc）","__m128i _mm_hsub_epi16 (__m128i a, __m128i b)":"__m128i_mm_hsub_epi16(__m128i a,__m128i b)","__m128d _mm_round_sd (__m128d a, _MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC)":"__m128d _mm_round_sd（__m128d a，_mm_fround_to_pos_inf | _mm_fround_no_exc）","The assembly to update.":"要更新的程序集。","The metadata changes to be applied.":"元数据更改要应用。","__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC)":"__m128d _mm_round_sd（__m128d a，__m128d b，_mm_fround_to_to_pos_inf | _mm_fround_no_exc）","__m128i _mm_hsub_epi32 (__m128i a, __m128i b)":"__m128i_mm_hsub_epi32(__m128i a,__m128i b)","__m128i _mm_hsubs_epi16 (__m128i a, __m128i b)":"__m128i _mm_hsubs_epi16（__m128i a，__m128i b）","The IL changes to be applied.":"IL更改要应用。","__m128 _mm_round_ss (__m128 a, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC)":"__m128 _mm_round_ss（__m128 a，_mm_fround_to_pos_inf | _mm_fround_no_exc）","The PDB changes to be applied.":"PDB更改要应用。","__m128i _mm_maddubs_epi16 (__m128i a, __m128i b)":"__m128i _mm_maddubs_epi16（__m128i a，__m128i b）","__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC)":"__m128 _mm_round_ss（__m128 a，__m128 b，_mm_fround_to_pos_inf | _mm_mm_fround_no_exc）","__m128i _mm_mulhrs_epi16 (__m128i a, __m128i b)":"__m128i _mm_mulhrs_epi16（__m128i a，__m128i b）"," if the assembly update is enabled and available; otherwise, ":"如果启用和可用汇编更新； 否则，","__m128d _mm_round_pd (__m128d a, _MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC)":"__m128d _mm_round_pd（__m128d a，_mm_fround_to_zero | _mm_fround_no_exc）","The path to the component or plugin's managed entry point.":"组件或插件的托管入口点的路径。","__m128i _mm_shuffle_epi8 (__m128i a, __m128i b)":"__m128i _mm_shuffle_epi8（__m128i a，__m128i b）","A byte array that is a COFF-based image containing a managed assembly.":"包含托管程序集的基于COFF的映像的字节数组。","The assembly name to resolve.":"要解决的汇编名称。","__m128i _mm_sign_epi16 (__m128i a, __m128i b)":"__m128i _mm_sign_epi16（__m128i a，__m128i b）","A byte array that contains the raw bytes representing the symbols for the assembly.":"包含代表组件符号的原始字节的字节数组。","__m128i _mm_sign_epi32 (__m128i a, __m128i b)":"__m128i _mm_sign_epi32（__m128i a，__m128i b）","The path to an assembly with the given name from the component's deps.json file, or ":"来自组件的deps.json文件的给定名称的汇编的路径，或","Name of the unmanaged library. Typically this is the filename without its path or extensions.":"非管理图书馆的名称。 通常，这是没有路径或扩展的文件名。"," if the assembly does not exist in the deps.json file or is not on disk in the location specified by the deps.json file.":"如果deps.json文件中的程序集不存在，或者在deps.json文件指定的位置中不在磁盘上。","__m128i _mm_sign_epi8 (__m128i a, __m128i b)":"__m128i _mm_sign_epi8（__m128i a，__m128i b）","A handle to the loaded library, or ":"加载库的手柄，或","The name of the native library to resolve.":"本地库的名称要解决。","The path to the unmanaged library.":"通往非管理图书馆的路径。","A type that handles metadata updates and that should be notified when any occur.":"处理元数据更新的类型，并应在发生任何情况时通知。","The path to a native library with the given name from the component's deps.json file and the current runtime identifier, or ":"来自组件的deps.json文件和当前运行时标识符的本机库的路径，或","The full path to the directory where the optimization profiles are stored.":"存储优化配置文件的目录的完整路径。"," if the assembly does not exist in the deps.json file or is not on disk  in the location specified by the deps.json file.":"如果deps.json文件中的程序集不存在，或者在deps.json文件指定的位置中不在磁盘上。","An unsigned 64-bit integer.":"一个未签名的64位整数。","The name of the optimization profile.":"优化配置文件的名称。","A number.":"一个号码。"," to enable ":"启用","The absolute value of ":"绝对价值","The string representation of this load context.":"此负载上下文的字符串表示。"," because there is a performance cost associated with enabling unloading.":"因为有启用卸载的性能成本。","The value for ":"值","The first value to add.":"要添加的第一个值。","A collection of all ":"所有的集合"," in the new instance. Its value can be ":"在新实例中。 它的价值可以是","The second value to add.":"要添加的第二个值。"," instances.":"实例。","The signed 64-bit integer to compare.":"签名的64位整数进行比较。","An object to restore the previous value of ":"修复先前值的对象","A collection of the ":"集合",". It is intended to be used as an ":"。 它打算用作","A signed integer value that indicates the relationship of this instance to ":"一个签名的整数值，指示此实例与"," instances loaded in the ":"加载的实例","A signed integer that indicates the relationship of the current instance to the ":"指示当前实例与该关系的签名整数"," block.":"堵塞。"," set by the most recent call to ":"由最近的电话设置","The assembly that is used to determine the requested ":"用于确定请求的组件"," parameter, as shown in the following table.  \n  \n ":"参数，如下表所示。","The path to the assembly.":"组装的路径。",". The value is stored in an ":"。 该值存储在一个",", so the value is unique per asynchronous context.":"，因此该值是每个异步上下文的唯一值。","An object that contains the fully parsed assembly name for the assembly at ":"一个包含装配给完全解析的组件名称的对象","The unsigned 64-bit integer to compare.":"未签名的64位整数进行比较。","An assembly.":"集会。","The default assembly load context.":"默认的汇编负载上下文。","A signed integer that indicates the relative value of this instance and ":"指示此实例的相对值的签名整数和","The assembly load context containing the ":"装配负载上下文包含",", as shown in the following table.\n          ":"，如下表所示。"," is collectible; otherwise, ":"是可收藏的； 否则，"," is not provided by the runtime, this method returns null.":"运行时没有提供，此方法返回null。","The value to be divided.":"要分配的价值。",". If a value is not specified in the constructor, the value is ":"。 如果构造函数中未指定值，则值为","The object that describes the assembly to be resolved.":"描述要解决的组件的对象。","The value to divide by.":"要分开的价值。",". Its value can be ":"。 它的价值可以是","The resolved assembly, or ":"已解决的组件，或","An array of byte values in little-endian order.":"小字节值以小阶数为单位。","The quotient of the division.":"该部门的商。","A decimal number.":"小数号。","The object that describes the assembly to load.":"描述要加载的组件的对象。"," value that represents the remainder from the division. This parameter is passed uninitialized.":"代表该部门的其余部分的值。 该参数通过非初始化。","A double-precision floating-point value.":"双精度浮点值。","The loaded assembly, or throws.":"加载的组件或投掷。","The signed 64-bit integer value to compare.":"签名的64位整数值进行比较。","The fully qualified path of the file to load.":"文件的完全合格路径加载。","A 32-bit signed integer.":"一个32位签名的整数。"," if the signed 64-bit integer and the current instance have the same value; otherwise, ":"如果已签名的64位整数和当前实例具有相同的值； 否则，","The loaded assembly.":"加载的组件。","A 64-bit signed integer.":"一个64位签名的整数。"," have the same value; otherwise, ":"具有相同的价值； 否则，","The fully qualified path of the IL version of the file to load, or ":"文件版本的IL版本完全合格的路径，或","A read-only span of bytes representing the big integer.":"代表大整数的仅读取字节。"," argument is a ":"论点是"," to indicate ":"以表示","The base of the logarithm.":"对数的基础。"," object, and its value is equal to the value of the current ":"对象，其值等于当前的值"," uses unsigned encoding; otherwise, ":"使用未签名的编码； 否则，"," logarithm of ":"对数的"," (the default value).":"（默认值）。"," if the current instance and the unsigned 64-bit integer have the same value; otherwise, ":"如果当前实例和未签名的64位整数具有相同的值； 否则，","The base 10 logarithm of ":"基本10对数的","The minimum non-negative number of bits in two's complement notation without the sign bit.":"没有标志位，两件补体表示法中的最小非负数位。"," is in big-endian byte order; otherwise, ":"处于大型字节秩序； 否则，"," parameter, whichever is larger.":"参数，以较大者为准。"," to use unsigned encoding; otherwise, ":"使用未签名的编码； 否则，","  (the default value).":"（默认值）。"," parameter, whichever is smaller.":"参数，以较小者为准。","The first value.":"第一个值。","A single-precision floating-point value.":"单精度的浮点值。","The second value.":"第二个值。","The number to raise to the ":"提高到","The greatest common divisor of ":"最大的共同除数","An unsigned 32-bit integer value.":"未签名的32位整数值。"," power.":"力量。","The number whose logarithm is to be found.":"要找到对数的数字。","The exponent to raise ":"提高指数"," value as specified by the ":"值指定"," by.":"经过。","The span of characters into which this instance will be written.":"将写入此实例的字符跨度。","The natural (base ":"自然（基础","The number by which to divide ":"划分的数字","When the method returns, contains the length of the span in number of characters.":"当方法返回时，包含字符数量的跨度。",") logarithm of ":"）对数","__m128d _mm_ceil_sd (__m128d a, __m128d b)":"__m128d_mm_ceil_sd(__m128d a,__m128d b)","A read-only span of characters that specifies the format for the formatting operation.":"仅读取字符的跨度为格式操作指定格式。"," raised to the ":"抬起","int _mm_extract_epi32 (__m128i a, const int imm8)":"int _mm_extract_epi32（__m128i a，const int inm8）",", as shown in the table in the Remarks section.":"，如备注部分所示。","An object that supplies culture-specific formatting information about ":"提供有关文化特定格式信息的对象","__m128 _mm_ceil_ss (__m128 a)":"__m128 _mm_ceil_ss（__m128 a）","int _mm_extract_ps (__m128 a, const int imm8)":"int _mm_extract_ps（__m128 a，const int inm8）","The remainder after dividing ":"分隔后的其余部分","The representation of a number as a read-only span of characters.":"数字表示仅读取字符的跨度。","A number whose logarithm is to be found.":"一个与数的数字。","__m128 _mm_ceil_ss (__m128 a, __m128 b)":"__m128 _mm_ceil_ss（__m128 a，__m128 b）","__m128d _mm_floor_pd (__m128d a)":"__m128d _mm_floor_pd（__m128d a）","exponent by ":"指数by","A bitwise combination of enumeration values that indicates the style elements that can be present in ":"枚举值的比重组合，指示可以存在的样式元素","__m128i _mm_cmpeq_epi64 (__m128i a, __m128i b)":"__m128i _mm_cmpeq_epi64（__m128i a，__m128i b）","__m128 _mm_floor_ps (__m128 a)":"__m128 _mm_floor_ps（__m128 a）","The first number to multiply.":"乘以的第一个数字。",". A typical value to specify is ":"。 指定的典型值是","__m128i _mm_cvtepu8_epi16 (__m128i a)":"__m128i _mm_cvtepu8_epi16（__m128i a）","__m128d _mm_floor_sd (__m128d a)":"__m128d _mm_floor_sd（__m128d a）","__m128d _mm_floor_sd (__m128d a, __m128d b)":"__m128d _mm_floor_sd（__m128d a，__m128d b）","The second number to multiply.":"第二个数字要乘。"," equivalent to the number that is contained in ":"等效于包含的数字","__m128 _mm_floor_ss (__m128 a)":"__m128 _mm_floor_ss（__m128 a）","The product of the ":"乘积"," if the conversion failed. The conversion fails if the ":"如果转换失败。 转换失败，如果","The value to negate.":"否定的价值。","__m128 _mm_floor_ss (__m128 a, __m128 b)":"__m128 _mm_floor_ss（__m128 a，__m128 b）"," parameter is an empty character span or is not in a format that is compliant with ":"参数是一个空的字符跨度，或不以符合格式的格式","__m128i _mm_insert_epi8 (__m128i a, int i, const int imm8)":"__m128i _mm_insert_epi8（__m128i a，int i，const int inm8）","The result of the ":"结果","__m128i _mm_insert_epi32 (__m128i a, int i, const int imm8)":"__m128i _mm_insert_epi32（__m128i a，int i，const int inm8）",", or zero (0) if the conversion fails. The conversion fails if the ":"或零（0）如果转换失败。 转换失败，如果"," parameter multiplied by negative one (-1).":"参数乘以负一个（-1）。","__m128 _mm_insert_ps (__m128 a, __m128 b, const int imm8)":"__m128 _mm_insert_ps（__m128 a，__m128 b，const int inm8）"," parameter is an empty character span or is not of the correct format. This parameter is passed uninitialized.":"参数是一个空的字符跨度，或者不是正确的格式。 该参数通过非初始化。","The string representation of a number. The string is interpreted using the style specified by ":"数字的字符串表示。 使用由","__m128i _mm_stream_load_si128 (const __m128i* mem_addr)":"__m128i _mm_stream_load_si128（const __m128i* mem_addr）","The result of the bitwise ":"位的结果","__m128i _mm_max_epi32 (__m128i a, __m128i b)":"__m128i _mm_max_epi32（__m128i a，__m128i b）"," operation.":"手术。"," or is not in a format that is compliant with ":"或不采用符合格式","__m128i _mm_max_epi8 (__m128i a, __m128i b)":"__m128i _mm_max_epi8（__m128i a，__m128i b）"," parameter was converted successfully; otherwise, ":"参数已成功转换； 否则，","The value to decrement.":"降低的价值。","The string representation of a number.":"数字的字符串表示。","__m128i _mm_max_epu16 (__m128i a, __m128i b)":"__m128i _mm_max_epu16（__m128i a，__m128i b）"," or is not of the correct format. This parameter is passed uninitialized.":"或不是正确的格式。 该参数通过非初始化。","__m128i _mm_max_epu32 (__m128i a, __m128i b)":"__m128i _mm_max_epu32（__m128i a，__m128i b）"," parameter decremented by 1.":"参数减少1。","The integral result of the division.":"该部门不可或缺的结果。","__m128i _mm_min_epi32 (__m128i a, __m128i b)":"__m128i _mm_min_epi32（__m128i a，__m128i b）","The destination span to which the resulting bytes should be written.":"应将结果字节编写的目的地跨度。","__m128i _mm_min_epi8 (__m128i a, __m128i b)":"__m128i _mm_min_epi8（__m128i a，__m128i b）"," parameters have the same value; otherwise, ":"参数具有相同的值； 否则，"," if the bytes fit in ":"如果字节适合","An object that contains the value of the ":"一个包含值的对象","The value to convert to a 16-bit signed integer.":"转换为16位签名整数的值。"," if not all bytes could be written due to lack of space.":"如果不是所有的字节，都可以由于缺乏空间而写。","The value to convert to a 32-bit signed integer.":"转换为32位签名整数的值。"," if the value of the ":"如果价值","The value to convert to a 64-bit signed integer.":"转换为64位签名整数的值。"," object is an even number; otherwise, ":"对象是一个偶数数字； 否则，"," object is ":"对象是","The value to convert to a signed 8-bit value.":"转换为签名的8位值的值。","The value to convert to a single-precision floating-point value.":"转换为单精度浮点数值的值。"," object is a power of two; otherwise, ":"对象是两个的力量； 否则，","An object that contains the closest possible representation of the ":"包含最接近表示的对象","An integer whose value is negative one (-1).":"一个整数，其价值为负一个（-1）。","An object whose value is one (1).":"一个值为1（1）的对象。","The value to convert to an unsigned 16-bit integer.":"转换为未签名的16位整数的值。"," object, as shown in the following table.  \n  \n ":"对象，如下表所示。","The value to convert to an unsigned 32-bit integer.":"转换为未签名的32位整数的值。","An integer whose value is 0 (zero).":"一个值为0（零）的整数。","The value to convert to an unsigned 64-bit integer.":"转换为未签名的64位整数的值。","The real part of the complex number.":"复数的实际部分。","The imaginary part of the complex number.":"复数的虚构部分。","The value to increment.":"增量的值。","A complex number.":"一个复杂的数字。"," parameter incremented by 1.":"参数增加1。","The value whose bits are to be shifted.":"将要转移的值。","A complex number that represents a cosine.":"代表余弦的复杂数字。","The number of bits to shift ":"要移动的位数","The angle, measured in radians, which is the arc cosine of ":"该角度以弧度为单位，这是"," to the left.":"向左转。","The double-precision real value to add.":"要添加的双精度实际值。","A value that has been shifted to the left by the specified number of bits.":"已通过指定数量的位向左移动的值。","The complex value to add.":"要添加的复杂值。","The remainder that results from the division.":"该部门产生的其余部分。","The first complex number to add.":"要添加的第一个复杂号码。","The first value to multiply.":"乘以的第一个值。","The second complex number to add.":"第二个要添加的复合号码。","The second value to multiply.":"第二个值乘。","The angle which is the arc sine of ":"角度是弧的正弦","The bitwise one's complement of ":"一个人的补充","The angle that is the arc tangent of ":"是弧形切线的角度"," to the right.":"向右。","The conjugate of ":"共轭","The cosine of ":"余弦","A value that has been shifted to the right by the specified number of bits.":"已通过指定数量的位向右移动的值。","The hyperbolic cosine of ":"双曲线余弦","The value to subtract from (the minuend).":"从（最小值）减去的值。","The double-precision real number to be divided.":"要划分的双精度实数。","The value to subtract (the subtrahend).":"减去的价值（子图形）。","The complex number to divide by.":"要分开的复杂数字。","The result of subtracting ":"减法的结果","The complex number to be divided.":"要分割的复杂数字。"," operand.":"操作数。","The double-precision real number to divide by.":"双精度真实数字要除以。","A read-only span of characters that contains the number to convert.":"仅读取字符的跨度，其中包含要转换的数字。","The complex number to compare.":"比较的复杂数字。","A bitwise combination of the enumeration values that specify the permitted format of ":"枚举值的位组合，该值指定了允许格式的"," if this complex number and ":"如果这个复杂的数字和"," parameter is a ":"参数为a","An object that provides culture-specific formatting information about ":"提供有关文化特定格式信息的对象","A value that is equivalent to the number specified in the ":"一个等同于指定的数字的值"," object or a type capable of implicit conversion to a ":"对象或能够隐式转换为一个的类型","A string that contains the number to convert.":"一个包含要转换的数字的字符串。"," object, and its value is equal to the current ":"对象，其值等于当前","A string that contains a number to convert.":"一个包含一个要转换的数字的字符串。","A complex number that specifies a power.":"一个指定电源的复杂数字。","The result of raising ":"提升的结果","The number ":"号码","The value of the current ":"电流的价值"," raised to the power ":"提高力量"," object converted to an array of bytes.":"对象转换为字节数组。"," to write the bytes in a big-endian byte order; otherwise, ":"用大型字节命令编写字节； 否则，","The string representation of the current ":"电流的字符串表示"," value in the format specified by the ":"以由","A standard or custom numeric format string.":"标准或自定义数字格式字符串。"}