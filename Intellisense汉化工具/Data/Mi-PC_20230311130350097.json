{"\r\n            Original was GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA\r\n            \r\n","\r\n            Original was GL_MAX_WIDTH = 0x827E\r\n            ":"\r\n            原来是 GL_MAX_WIDTH = 0x827E\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify fog parameters\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定雾参数\r\n            \r\n"," \r\n            Specify the index of the first binding point within the array specified by target.\r\n            ":" \r\n            指定 target 指定的数组中第一个绑定点的索引。\r\n            \r\n","A new Matrix3x4d which holds the result of the addition":"保存加法结果的新 Matrix3x4d\r\n"," \r\n            Specifies the height of the texture, in texels.\r\n            ":" \r\n            指定纹理的高度，以纹素为单位。\r\n            \r\n"," if the up button is pressed; otherwise, ":" 如果按下向上按钮；否则，\r\n","\r\n            Original was GL_TextureMinFilter = 0x2801\r\n            ":"\r\n            原来是 GL_TextureMinFilter = 0x2801\r\n            \r\n","\r\n            Returns the rotation component of this instance. Quite slow.\r\n            ":"\r\n            返回此实例的旋转组件。相当慢。\r\n            \r\n","\r\n            Gets the view reference for this instance.\r\n            ":"\r\n            获取此实例的视图引用。\r\n            \r\n","\r\n            Original was GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3\r\n            ":"\r\n            原来是 GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003\r\n            \r\n","\r\n            Original was GL_TEXTURE_ENV = 0x2300\r\n            ":"\r\n            原来是 GL_TEXTURE_ENV = 0x2300\r\n            \r\n","\r\n            Original was GL_MATRIX1_NV = 0x8631\r\n            ":"\r\n            原来是 GL_MATRIX1_NV = 0x8631\r\n            \r\n","\r\n            Original was GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210\r\n            ":"\r\n            原来是 GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210\r\n            \r\n"," \r\n            Specifies the address of a structure containing an array of draw parameters.\r\n            ":" \r\n            指定包含绘制参数数组的结构的地址。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_3D_OES = 0x806A\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_3D_OES = 0x806A\r\n            \r\n","[requires: v1.1]\r\n            Bind a named texture to a texturing target\r\n            ":"[要求：v1.1]\r\n            将命名纹理绑定到纹理目标\r\n            \r\n","\r\n            Original was GL_FOG_COORD_ARRAY = 0x8457\r\n            ":"\r\n            原来是 GL_FOG_COORD_ARRAY = 0x8457\r\n            \r\n","The translation vector.":"翻译向量。\r\n","\r\n            Gets or sets a double representing the target update period, in seconds.\r\n            ":"\r\n            获取或设置一个代表目标更新周期的双精度数，以秒为单位。\r\n            \r\n","\r\n            Original was GL_ONE = 1\r\n            ":"\r\n            原来是 GL_ONE = 1\r\n            \r\n","[length: format,type,width,height] \r\n            Pointer to a two-dimensional array of pixel data that is processed to build the convolution filter kernel.\r\n            ":"[长度：格式、类型、宽度、高度]\r\n            指向经过处理以构建卷积滤波器内核的二维像素数据数组的指针。\r\n            \r\n","\r\n            Original was GL_COLOR_SUM_CLAMP_NV = 0x854F\r\n            ":"\r\n            原来是 GL_COLOR_SUM_CLAMP_NV = 0x854F\r\n            \r\n","\r\n            Original was GL_MAX_CLIP_PLANES_IMG = 0x0D32\r\n            ":"\r\n            原来是 GL_MAX_CLIP_PLANES_IMG = 0x0D32\r\n            \r\n","\r\n            Original was GL_4PASS_0_EXT = 0x80A4\r\n            ":"\r\n            原来是 GL_4PASS_0_EXT = 0x80A4\r\n            \r\n","\r\n            Original was GL_TEXTURE28_ARB = 0x84DC\r\n            ":"\r\n            原来是 GL_TEXTURE28_ARB = 0x84DC\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Determine if a name corresponds to a framebuffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            确定名称是否对应于帧缓冲区对象\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPARE_MODE_EXT = 0x884C\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPARE_MODE_EXT = 0x884C\r\n            \r\n","\r\n            Original was GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D\r\n            ":"\r\n            原来是 GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D\r\n            \r\n","\r\n            Original was GL_VERTEX_PROGRAM_BINDING_NV = 0x864A\r\n            ":"\r\n            原来是 GL_VERTEX_PROGRAM_BINDING_NV = 0x864A\r\n            \r\n","[requires: SUN_vertex]":"[需要：SUN_vertex]\r\n","\r\n            Original was GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC\r\n            ":"\r\n            原来是 GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_EXT = 0x8C48\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_EXT = 0x8C48\r\n            \r\n","A System.Type to check.":"要检查的 System.Type。\r\n","[length: 2]":"[长度：2]\r\n","\r\n            Used in GL.NormalPointer\r\n            ":"\r\n            在 GL.NormalPointer 中使用\r\n            \r\n","IsConnected":"已连接\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Load pre-compiled shader binaries\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            加载预编译的着色器二进制文件\r\n            \r\n"," \r\n            Specifies the target to which to bind the transform feedback object id. target must be TransformFeedback.\r\n            ":" \r\n            指定要将转换反馈对象 ID 绑定到的目标。目标必须是 TransformFeedback。\r\n            \r\n"," \r\n            Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.\r\n            ":" \r\n            指定刷新操作的目标。 target 必须是 ArrayBuffer、CopyReadBuffer、CopyWriteBuffer、ElementArrayBuffer、PixelPackBuffer、PixelUnpackBuffer、TransformFeedbackBuffer 或 UniformBuffer。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Multiply the current matrix with the specified matrix\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            将当前矩阵与指定矩阵相乘\r\n            \r\n","\r\n            Original was GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1\r\n            ":"\r\n            原来是 GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1\r\n            \r\n","[requires: NV_conditional_render]":"[要求：NV_conditional_render]\r\n","The index of the mouse device.":"鼠标设备的索引。\r\n","\r\n            Original was GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41\r\n            ":"\r\n            原来是 GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41\r\n            \r\n","\r\n            Original was GL_DUAL_LUMINANCE4_SGIS = 0x8114\r\n            ":"\r\n            原来是 GL_DUAL_LUMINANCE4_SGIS = 0x8114\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664\r\n            \r\n","\r\n            Original was GL_MAX_TESS_PATCH_COMPONENTS_EXT = 0x8E84\r\n            ":"\r\n            原来是 GL_MAX_TESS_PATCH_COMPONENTS_EXT = 0x8E84\r\n            \r\n"," \r\n            The internal format of the convolution filter kernel. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.\r\n            ":" \r\n            卷积滤波器内核的内部格式。允许的值为 Alpha、Alpha4、Alpha8、Alpha12、Alpha16、Luminance、Luminance4、Luminance8、Luminance12、Luminance16、LuminanceAlpha、Luminance4Alpha4、Luminance6Alpha2、Luminance8Alpha8、Luminance12Alpha4、Luminance12Alpha12、Luminance16Alpha16、Intensity、Intensity4、LuminanceG3B、Intensity162、Intensity162、 Rgb、Rgb4、Rgb5、Rgb8、Rgb10、Rgb12、Rgb16、Rgba、Rgba2、Rgba4、Rgb5A1、Rgba8、Rgb10A2、Rgba12 或 Rgba16。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Specify material parameters for the lighting model\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            为光照模型指定材质参数\r\n            \r\n","[length: 16] \r\n            Points to 16 consecutive values that are used as the elements of a 4  times  4 row-major matrix.\r\n            ":"[长度：16]\r\n            指向用作 4 乘 4 行主矩阵元素的 16 个连续值。\r\n            \r\n","\r\n            Original was GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12\r\n            ":"\r\n            原来是 GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12\r\n            \r\n","True if the instances are equal; false otherwise.":"如果实例相等则为真；否则为假。\r\n","\r\n            Original was GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198\r\n            ":"\r\n            原来是 GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198\r\n            \r\n","[requires: v1.0]\r\n            Read a block of pixels from the frame buffer\r\n            ":"[要求：v1.0]\r\n            从帧缓冲区中读取一个像素块\r\n            \r\n","\r\n            Used in GL.GetSync\r\n            ":"\r\n            在 GL.GetSync 中使用\r\n            \r\n",".\r\n            This method supports OpenTK and is not intended to be called by user code.\r\n            ":".\r\n            此方法支持 OpenTK，不应由用户代码调用。\r\n            \r\n"," indicating whether this keyboard\r\n            is connected.\r\n            ":" 指示此键盘是否\r\n            已连接。\r\n            \r\n","\r\n            Original was GL_PACK_CMYK_HINT_EXT = 0x800E\r\n            ":"\r\n            原来是 GL_PACK_CMYK_HINT_EXT = 0x800E\r\n            \r\n","\r\n            Original was GL_TEXTURE_ENV_COLOR = 0x2201\r\n            ":"\r\n            原来是 GL_TEXTURE_ENV_COLOR = 0x2201\r\n            \r\n","Bottom row of the matrix.":"矩阵的底行。\r\n","\r\n            Original was GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6\r\n            \r\n","[requires: v1.1][deprecated: v3.2]\r\n            Define an array of color indexes\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            定义颜色索引数组\r\n            \r\n","\r\n            Original was GL_SLUMINANCE_ALPHA = 0x8C44\r\n            ":"原来是 GL_SLUMINANCE_ALPHA = 0x8C44\r\n            \r\n"," \r\n            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.\r\n            ":" \r\n            指定 OpenGL 允许写入由名称指示的字符缓冲区的最大字符数。\r\n            \r\n","\r\n            Original was GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38\r\n            ":"\r\n            原来是 GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT1_EXT = 0x8CE1\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT1_EXT = 0x8CE1\r\n            \r\n","\r\n            Original was GL_CLIP_DISTANCE0 = 0x3000\r\n            ":"\r\n            原来是 GL_CLIP_DISTANCE0 = 0x3000\r\n            \r\n","The border_width for an InputOnly window must be zero, or a BadMatch error results. For class InputOutput, the visual type and depth must be a combination supported for the screen, or a BadMatch error results. The depth need not be the same as the parent, but the parent must not be a window of class InputOnly, or a BadMatch error results. For an InputOnly window, the depth must be zero, and the visual must be one supported by the screen. If either condition is not met, a BadMatch error results. The parent window, however, may have any depth and class. If you specify any invalid window attribute for a window, a BadMatch error results. ":"InputOnly 窗口的 border_width 必须为零，否则将导致 BadMatch 错误。对于 InputOutput 类，视觉类型和深度必须是屏幕支持的组合，否则将导致 BadMatch 错误。深度不必与父级相同，但父级不能是 InputOnly 类的窗口，否则会导致 BadMatch 错误。对于 InputOnly 窗口，深度必须为零，并且视觉必须是屏幕支持的深度。如果不满足任一条件，则会产生 BadMatch 错误。然而，父窗口可以有任何深度和类。如果为窗口指定任何无效的窗口属性，则会导致 BadMatch 错误。\r\n","\r\n            Original was GL_DRAW_BUFFER4 = 0x8829\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER4 = 0x8829\r\n            \r\n"," \r\n            The window space coordinates of the lower-left coordinate of the pixel array to copy.\r\n            ":" \r\n            要复制的像素数组的左下坐标的窗口空间坐标。\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_RECTANGLE = 0x84F6\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_RECTANGLE = 0x84F6\r\n            \r\n","\r\n            Used in GL.PushAttrib\r\n            ":"\r\n            在 GL.PushAttrib 中使用\r\n            \r\n","\r\n            Bottom row of the matrix\r\n            ":"\r\n            矩阵的底行\r\n            \r\n","\r\n            Used in GL.ClearBufferData, GL.ClearBufferSubData and 22 other functions\r\n            ":"\r\n            用于 GL.ClearBufferData、GL.ClearBufferSubData 和其他 22 个函数\r\n            \r\n","\r\n            GameWindow contains several events you can hook or override to add your custom logic:\r\n            ":"\r\n            GameWindow 包含几个事件，您可以挂钩或覆盖以添加自定义逻辑：\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the Z, W, and Y components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Z、W 和 Y 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Original was GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD\r\n            ":"\r\n            原来是 GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD\r\n            \r\n"," \r\n            Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan and Triangles are accepted.\r\n            ":" \r\n            指定要渲染的图元类型。接受符号常量 Points、LineStrip、LineLoop、Lines、TriangleStrip、TriangleFan 和 Triangles。\r\n            \r\n","\r\n            Original was GL_RGBA_FLOAT_MODE_ATI = 0x8820\r\n            ":"\r\n            原来是 GL_RGBA_FLOAT_MODE_ATI = 0x8820\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Set the current texture coordinates\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            设置当前纹理坐标\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB\r\n            \r\n","\r\n            Original was GL_DEPTH = 0x1801\r\n            ":"\r\n            原来是 GL_DEPTH = 0x1801\r\n            \r\n","The left shift key (equivalent to ShiftLeft).":"左移键（相当于 ShiftLeft）。\r\n","Second item of the first row of the matrix.":"矩阵第一行的第二项。\r\n","[requires: v1.0][deprecated: v3.2]\r\n            Initialize the name stack\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            初始化名字栈\r\n            \r\n","\r\n            Original was GL_UNDEFINED_VERTEX_EXT = 0x8260\r\n            ":"\r\n            原来是 GL_UNDEFINED_VERTEX_EXT = 0x8260\r\n            \r\n","\r\n            Original was GL_QUERY_BY_REGION_NO_WAIT = 0x8E16\r\n            ":"\r\n            原来是 GL_QUERY_BY_REGION_NO_WAIT = 0x8E16\r\n            \r\n","\r\n            Original was GL_IMAGE_TRANSLATE_Y_HP = 0x8158\r\n            ":"\r\n            原来是 GL_IMAGE_TRANSLATE_Y_HP = 0x8158\r\n            \r\n"," \r\n            Specifies a value that may be the name of a vertex array object.\r\n            ":" \r\n            指定一个值，该值可以是顶点数组对象的名称。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3\r\n            \r\n","The resulting Matrix2x3d instance.":"生成的 Matrix2x3d 实例。\r\n","The string representation of the matrix.":"矩阵的字符串表示形式。\r\n","The function uses the window identified by the hWnd parameter and the screen coordinates given in the POINT structure to compute client coordinates. It then replaces the screen coordinates with the client coordinates. The new coordinates are relative to the upper-left corner of the specified window's client area. ":"该函数使用 hWnd 参数标识的窗口和 POINT 结构中给定的屏幕坐标来计算客户端坐标。然后它用客户端坐标替换屏幕坐标。新坐标相对于指定窗口客户区的左上角。\r\n","\r\n            Original was GL_COLOR_BUFFER_BIT6_QCOM = 0x00000040\r\n            ":"\r\n            原来是 GL_COLOR_BUFFER_BIT6_QCOM = 0x00000040\r\n            \r\n","[requires: ARB_multitexture]\r\n            Set the current texture coordinates\r\n            ":"[需要：ARB_multitexture]\r\n            设置当前纹理坐标\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01\r\n            \r\n","\r\n            Original was GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0\r\n            ":"\r\n            原来是 GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0\r\n            \r\n","\r\n            Original was GL_CON_23_ATI = 0x8958\r\n            ":"原来是 GL_CON_23_ATI = 0x8958\r\n            \r\n","\r\n            Original was GL_COMPARE_REF_TO_TEXTURE = 0x884E\r\n            ":"\r\n            原来是 GL_COMPARE_REF_TO_TEXTURE = 0x884E\r\n            \r\n","\r\n            Does not redraw changes. If this flag is set, no repainting of any kind occurs.\r\n            This applies to the client area, the nonclient area (including the title bar and scroll bars),\r\n            and any part of the parent window uncovered as a result of the window being moved.\r\n            When this flag is set, the application must explicitly invalidate or redraw any parts\r\n            of the window and parent window that need redrawing.\r\n            ":"\r\n            不重绘更改。如果设置了此标志，则不会发生任何类型的重绘。\r\n            这适用于客户区，非客户区（包括标题栏和滚动条），\r\n            以及由于窗口移动而露出的父窗口的任何部分。\r\n            设置此标志后，应用程序必须显式使任何部分无效或重绘\r\n            需要重绘的窗口和父窗口。\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D\r\n            \r\n","\r\n            Original was GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642\r\n            ":"\r\n            原来是 GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642\r\n            \r\n","\r\n            Original was GL_ZOOM_X = 0x0D16\r\n            ":"\r\n            原来是 GL_ZOOM_X = 0x0D16\r\n            \r\n","\r\n            Requery for mouse attributes.\r\n            ":"\r\n            重新查询鼠标属性。\r\n            \r\n","\r\n            Original was GL_INTERPOLATE_ARB = 0x8575\r\n            ":"\r\n            原来是 GL_INTERPOLATE_ARB = 0x8575\r\n            \r\n","\r\n            Original was GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776\r\n            ":"\r\n            原来是 GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776\r\n            \r\n"," \r\n            Specifies the value that pname will be set to.\r\n            ":" \r\n            指定 pname 将设置为的值。\r\n            \r\n","\r\n            Original was GL_REG_2_ATI = 0x8923\r\n            ":"\r\n            原来是 GL_REG_2_ATI = 0x8923\r\n            \r\n","\r\n            Original was GL_STENCIL_BACK_VALUE_MASK = 0x8CA4\r\n            ":"\r\n            原来是 GL_STENCIL_BACK_VALUE_MASK = 0x8CA4\r\n            \r\n","A new Matrix4x2 which holds the result of the multiplication":"保存乘法结果的新 Matrix4x2\r\n","Describes an OS window.":"描述操作系统窗口。\r\n"," \r\n            Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.\r\n            ":" \r\n            指定用于为每个多边形创建可变深度偏移的比例因子。初始值为 0。\r\n            \r\n","\r\n            Used in GL.Angle.BlitFramebuffer, GL.BlitFramebuffer and 1 other function\r\n            ":"\r\n            用于 GL.Angle.BlitFramebuffer、GL.BlitFramebuffer 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_Renderbuffer = 0X8d41\r\n            ":"\r\n            原来是 GL_Renderbuffer = 0X8d41\r\n            \r\n","[length: target,format,type,width] \r\n            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.\r\n            ":"[长度：目标、格式、类型、宽度]\r\n            指向经过处理以构建行过滤器内核的一维像素数据数组的指针。\r\n            \r\n"," \r\n            The width of the pixel array referenced by data.\r\n            ":" \r\n            数据引用的像素阵列的宽度。\r\n            \r\n","\r\n            Original was GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F\r\n            ":"\r\n            原来是 GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F\r\n            \r\n","\r\n            Called when the NativeWindow is resized.\r\n            ":"\r\n            在调整 NativeWindow 大小时调用。\r\n            \r\n","\r\n            Original was GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803\r\n            ":"\r\n            原来是 GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Replaces the source code in a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            替换着色器对象中的源代码\r\n            \r\n","\r\n            Original was GL_MODELVIEW8_ARB = 0x8728\r\n            ":"\r\n            原来是 GL_MODELVIEW8_ARB = 0x8728\r\n            \r\n","\r\n            Original was GL_MATRIX11 = 0x88CB\r\n            ":"\r\n            原来是 GL_MATRIX11 = 0x88CB\r\n            \r\n","[length: genMode,colorFormat]":"[长度：genMode，colorFormat]\r\n"," \r\n            Specifies a value that may be the name of a buffer object.\r\n            ":" \r\n            指定一个值，该值可能是缓冲区对象的名称。\r\n            \r\n"," \r\n            Specifies the index used when the stencil buffer is cleared. The initial value is 0.\r\n            ":" \r\n            指定清除模板缓冲区时使用的索引。初始值为 0。\r\n            \r\n","\r\n            The window has a resizable border. A window with a resizable border can be resized by the user or programmatically.\r\n            ":"\r\n            该窗口具有可调整大小的边框。具有可调整大小边框的窗口可以由用户或以编程方式调整大小。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD\r\n            \r\n","[requires: v4.4 or ARB_multi_bind|VERSION_4_4]\r\n            Bind one or more named texture images to a sequence of consecutive image units\r\n            ":"[要求：v4.4 或 ARB_multi_bind|VERSION_4_4]\r\n            将一个或多个命名纹理图像绑定到一系列连续的图像单元\r\n            \r\n"," of the device connected\r\n            at the specified index.\r\n            ":" 连接的设备\r\n            在指定的索引处。\r\n            \r\n","\r\n            Original was GL_COLORBURN_NV = 0x929A\r\n            ":"\r\n            原来是 GL_COLORBURN_NV = 0x929A\r\n            \r\n"," \r\n            Specifies the name of the subroutine uniform whose index to query.\r\n            ":" \r\n            指定要查询其索引的子例程统一的名称。\r\n            \r\n","[length: size,type,stride,count] \r\n            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.\r\n            ":"[长度：尺寸、类型、步幅、计数]\r\n            指定指向数组中第一个顶点的第一个坐标的指针。初始值为 0。\r\n            \r\n","\r\n            Contains information about a raw input device.\r\n            ":"\r\n            包含有关原始输入设备的信息。\r\n            \r\n","\r\n            Used in GL.BlendEquation, GL.BlendEquationSeparate and 2 other functions\r\n            ":"\r\n            用于 GL.BlendEquation、GL.BlendEquationSeparate 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_CONST_EYE_NV = 0x86E5\r\n            ":"原来是 GL_CONST_EYE_NV = 0x86E5\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8\r\n            \r\n","\r\n            Used in GL.NV.GetImageHandle, GL.NV.MakeImageHandleResident\r\n            ":"\r\n            用于GL.NV.GetImageHandle、GL.NV.MakeImageHandleResident\r\n            \r\n","[length: count] \r\n            Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.\r\n            ":"[长度：计数]\r\n            指定加载预编译着色器二进制文件的着色器句柄数组的地址。\r\n            \r\n","[requires: EXT_copy_texture]\r\n            Copy a three-dimensional texture subimage\r\n            ":"[需要：EXT_copy_texture]\r\n            复制三维纹理子图像\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B\r\n            \r\n","[requires: v1.0]\r\n            Enable or disable server-side GL capabilities\r\n            ":"[要求：v1.0]\r\n            启用或禁用服务器端 GL 功能\r\n            \r\n","\r\n            2nd row of the matrix\r\n            ":"\r\n            矩阵的第二行\r\n            \r\n"," \r\n            Specifies the name of the framebuffer object to bind.\r\n            ":" \r\n            指定要绑定的帧缓冲区对象的名称。\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_1D = 0x8010\r\n            ":"\r\n            原来是 GL_CONVOLUTION_1D = 0x8010\r\n            \r\n","\r\n            Original was GL_MaxVertexAttribs = 0X8869\r\n            ":"\r\n            原来是 GL_MaxVertexAttribs = 0X8869\r\n            \r\n","[requires: GREMEDY_string_marker]":"[需要：GREMEDY_string_marker]\r\n","A scaling matrix":"缩放矩阵\r\n","The enter key.":"输入键。\r\n","[requires: NV_vertex_program]\r\n            Determines if a name corresponds to a program object\r\n            ":"[要求：NV_vertex_program]\r\n            确定名称是否对应于程序对象\r\n            \r\n"," to retrieve the state of a specific mouse device.\r\n            Use ":" 检索特定鼠标设备的状态。\r\n            使用\r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83\r\n            \r\n"," \r\n            Specifies the target framebuffer object. The symbolic constant must be Framebuffer.\r\n            ":" \r\n            指定目标帧缓冲区对象。符号常量必须是 Framebuffer。\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C\r\n            \r\n","\r\n            Original was GL_OUTPUT_COLOR1_EXT = 0x879C\r\n            ":"\r\n            原来是 GL_OUTPUT_COLOR1_EXT = 0x879C\r\n            \r\n"," instance is connected.\r\n            ":" 实例已连接。\r\n            \r\n","\r\n            Original was GL_POINT_SPRITE_OES = 0x8861\r\n            ":"\r\n            原来是 GL_POINT_SPRITE_OES = 0x8861\r\n            \r\n"," \r\n            Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.\r\n            ":" \r\n            指定是否更新正面和/或背面模板状态。三个符号常量是有效的：Front、Back 和 FrontAndBack。\r\n            \r\n","\r\n            Original was GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8\r\n            ":"\r\n            原来是 GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER10_ATI = 0x882F\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER10_ATI = 0x882F\r\n            \r\n","The F34 key.":"F34 键。\r\n"," that generated this event.\r\n            ":" 产生了这个事件。\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_ALPHA_SIZE = 0x802B\r\n            ":"\r\n            原来是 GL_HISTOGRAM_ALPHA_SIZE = 0x802B\r\n            \r\n","\r\n            Original was GL_CompileStatus = 0X8b81\r\n            ":"\r\n            原来是 GL_CompileStatus = 0X8b81\r\n            \r\n","[requires: APPLE_sync]\r\n            Instruct the GL server to block until the specified sync object becomes signaled\r\n            ":"[需要：APPLE_sync]\r\n            指示 GL 服务器阻塞，直到指定的同步对象发出信号\r\n            \r\n","\r\n            Used in GL.BlendFunc, GL.BlendFuncSeparate\r\n            ":"\r\n            在GL.BlendFunc中使用，GL.BlendFuncSeparate\r\n            \r\n","\r\n            Defines the event data for ":"\r\n            定义事件数据\r\n","\r\n            Gets the absolute wheel position in floating-point units.\r\n            ":"\r\n            获取浮点单位的绝对车轮位置。\r\n            \r\n"," \r\n            Specifies a value that may be the name of a program pipeline object.\r\n            ":" \r\n            指定一个值，该值可以是程序管道对象的名称。\r\n            \r\n","Pointer to a POINT structure that receives the screen coordinates of the cursor.":"指向接收光标屏幕坐标的 POINT 结构的指针。\r\n","\r\n            Original was GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC\r\n            ":"\r\n            原来是 GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC\r\n            \r\n","\r\n            Marshals a ":"\r\n            元帅\r\n","[length: target,level,format,type] \r\n            Returns the texture image. Should be a pointer to an array of the type specified by type.\r\n            ":"[长度：目标、级别、格式、类型]\r\n            返回纹理图像。应该是指向由 type 指定的类型的数组的指针。\r\n            \r\n","\r\n            Call this method to simulate KeyDown/KeyUp events\r\n            on platforms that do not generate key events for\r\n            modifier flags (e.g. Mac/Cocoa).\r\n            Note: this method does not distinguish between the\r\n            left and right variants of modifier keys.\r\n            ":"调用此方法模拟 KeyDown/KeyUp 事件\r\n            在不生成关键事件的平台上\r\n            修饰符标志（例如 Mac/Cocoa）。\r\n            注意：此方法不区分\r\n            修改键的左右变体。\r\n            \r\n","\r\n            Original was GL_BYTE = 0X1400\r\n            ":"\r\n            原来是 GL_BYTE = 0X1400\r\n            \r\n","\r\n            The seventh extra mouse button.\r\n            ":"\r\n            第七个额外的鼠标按钮。\r\n            \r\n","\r\n            Mouse state. This member can be any reasonable combination of the following. \r\n            MOUSE_ATTRIBUTES_CHANGED\r\n            Mouse attributes changed; application needs to query the mouse attributes.\r\n            MOUSE_MOVE_RELATIVE\r\n            Mouse movement data is relative to the last mouse position.\r\n            MOUSE_MOVE_ABSOLUTE\r\n            Mouse movement data is based on absolute position.\r\n            MOUSE_VIRTUAL_DESKTOP\r\n            Mouse coordinates are mapped to the virtual desktop (for a multiple monitor system).\r\n            ":"鼠标状态。该成员可以是以下各项的任意合理组合。\r\n            MOUSE_ATTRIBUTES_CHANGED\r\n            鼠标属性改变；应用程序需要查询鼠标属性。\r\n            MOUSE_MOVE_RELATIVE\r\n            鼠标移动数据是相对于最后一个鼠标位置的。\r\n            鼠标移动绝对\r\n            鼠标移动数据基于绝对位置。\r\n            鼠标_虚拟_桌面\r\n            鼠标坐标映射到虚拟桌面（对于多显示器系统）。\r\n            \r\n"," is a big button pad.\r\n            ":" 是一个大按钮垫。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify a two-dimensional texture subimage\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定二维纹理子图像\r\n            \r\n","\r\n            Original was GL_MATRIX5_ARB = 0x88C5\r\n            ":"\r\n            原来是 GL_MATRIX5_ARB = 0x88C5\r\n            \r\n","\r\n            The hat is in its top-left position.\r\n            ":"\r\n            帽子位于左上角。\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER0_NV = 0x8825\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER0_NV = 0x8825\r\n            \r\n","\r\n            Original was GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D\r\n            ":"\r\n            原来是 GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D\r\n            \r\n","A new instance that is the result of the subraction.":"作为减法结果的新实例。\r\n"," structure to test for equality.":" 测试平等的结构。\r\n","\r\n            Original was GL_MATRIX30_ARB = 0x88DE\r\n            ":"\r\n            原来是 GL_MATRIX30_ARB = 0x88DE\r\n            \r\n","\r\n            Used in GL.ClientWaitSync\r\n            ":"\r\n            在 GL.ClientWaitSync 中使用\r\n            \r\n","[length: n]":"[长度：n]\r\n","\r\n            Original was GL_COMPARE_R_TO_TEXTURE = 0x884E\r\n            ":"\r\n            原来是 GL_COMPARE_R_TO_TEXTURE = 0x884E\r\n            \r\n","\r\n            Original was GL_MAX_SAMPLE_MASK_WORDS = 0x8E59\r\n            ":"\r\n            原来是 GL_MAX_SAMPLE_MASK_WORDS = 0x8E59\r\n            \r\n","\r\n            Original was GL_RGB10_A2_EXT = 0x8059\r\n            ":"\r\n            原来是 GL_RGB10_A2_EXT = 0x8059\r\n            \r\n","\r\n            Original was GL_INVERT = 0x150A\r\n            ":"\r\n            原来是 GL_INVERT = 0x150A\r\n            \r\n","A new Matrix4x3 which holds the result of the subtraction":"保存减法结果的新 Matrix4x3\r\n","[requires: EXT_framebuffer_object]\r\n            Determine if a name corresponds to a renderbuffer object\r\n            ":"[需要：EXT_framebuffer_object]\r\n            确定名称是否对应于渲染缓冲区对象\r\n            \r\n","\r\n            Original was GL_POINTS = 0x0000\r\n            ":"\r\n            原来是 GL_POINTS = 0x0000\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49\r\n            \r\n","\r\n            Original was GL_BUFFER_ACCESS_FLAGS = 0x911F\r\n            ":"\r\n            原来是 GL_BUFFER_ACCESS_FLAGS = 0x911F\r\n            \r\n","\r\n            Original was GL_EMISSION = 0x1600\r\n            ":"\r\n            原来是 GL_EMISSION = 0x1600\r\n            \r\n","\r\n            Original was GL_Points = 0X0000\r\n            ":"\r\n            原来是 GL_Points = 0X0000\r\n            \r\n"," \r\n            Specifies a texel offset in the y direction within the texture array.\r\n            ":" \r\n            指定纹理数组中 y 方向上的纹素偏移。\r\n            \r\n","\r\n            Original was GL_REGISTER_COMBINERS_NV = 0x8522\r\n            ":"\r\n            原来是 GL_REGISTER_COMBINERS_NV = 0x8522\r\n            \r\n","\r\n            Original was GL_SrcColor = 0X0300\r\n            ":"\r\n            原来是 GL_SrcColor = 0X0300\r\n            \r\n","\r\n            Original was GL_SRC_OVER_NV = 0x9288\r\n            ":"\r\n            原来是 GL_SRC_OVER_NV = 0x9288\r\n            \r\n","\r\n            Original was GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C\r\n            ":"\r\n            原来是 GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C\r\n            \r\n","\r\n            Original was GL_PROGRAM = 0x82E2\r\n            ":"\r\n            原来是 GL_PROGRAM = 0x82E2\r\n            \r\n"," \r\n            The index of the resource within programInterface of program.\r\n            ":" \r\n            程序的 programInterface 中资源的索引。\r\n            \r\n","[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]\r\n            Retrieve properties of a program object corresponding to a specified shader stage\r\n            ":"[需要：v4.0 或 ARB_shader_subroutine|VERSION_4_0]\r\n            检索对应于指定着色器阶段的程序对象的属性\r\n            \r\n","\r\n            Original was GL_UNSIGNED_BYTE_2_3_3_REVERSED = 0x8362\r\n            ":"\r\n            原来是 GL_UNSIGNED_BYTE_2_3_3_REVERSED = 0x8362\r\n            \r\n","\r\n            Original was GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000\r\n            ":"\r\n            原来是 GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000\r\n            \r\n","\r\n            Original was GL_RGBA_DXT5_S3TC = 0x83A4\r\n            ":"\r\n            原来是 GL_RGBA_DXT5_S3TC = 0x83A4\r\n            \r\n","Pointer to a RECT structure that receives the client coordinates. The left and top members are zero. The right and bottom members contain the width and height of the window.":"指向接收客户端坐标的 RECT 结构的指针。左侧和顶部成员为零。右侧和底部成员包含窗口的宽度和高度。\r\n","\r\n            Original was GL_TRANSLATE_Y_NV = 0x908F\r\n            ":"\r\n            原来是 GL_TRANSLATE_Y_NV = 0x908F\r\n            \r\n","\r\n            Original was GL_PN_TRIANGLES_ATI = 0x87F0\r\n            ":"\r\n            原来是 GL_PN_TRIANGLES_ATI = 0x87F0\r\n            \r\n","The euler angles a vector":"欧拉角向量\r\n","\r\n            Original was GL_DEBUG_SOURCE_OTHER = 0x824B\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_OTHER = 0x824B\r\n            \r\n","A Matrix4d to take the upper-left 3x3 from.":"从中获取左上角 3x3 的 Matrix4d。\r\n","\r\n            Original was GL_PALETTE4_RGBA8_OES = 0x8B91\r\n            ":"\r\n            原来是 GL_PALETTE4_RGBA8_OES = 0x8B91\r\n            \r\n","\r\n            Original was GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE\r\n            ":"\r\n            原来是 GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033\r\n            \r\n","\r\n            Original was GL_LIGHT2 = 0x4002\r\n            ":"\r\n            原来是 GL_LIGHT2 = 0x4002\r\n            \r\n","\r\n            Original was GL_PRIMARY_COLOR_NV = 0x852C\r\n            ":"\r\n            原来是 GL_PRIMARY_COLOR_NV = 0x852C\r\n            \r\n","[length: count*6]":"[长度：计数*6]\r\n","\r\n            Original was GL_INT8_VEC4_NV = 0x8FE3\r\n            ":"\r\n            原来是 GL_INT8_VEC4_NV = 0x8FE3\r\n            \r\n"," \r\n            specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.\r\n            ":" \r\n            指定 alpha 混合方程式，源颜色和目标颜色的 alpha 分量如何组合。它必须是 FuncAdd、FuncSubtract 或 FuncReverseSubtract。\r\n            \r\n","\r\n            Original was GL_SHADER_CONSISTENT_NV = 0x86DD\r\n            ":"\r\n            原来是 GL_SHADER_CONSISTENT_NV = 0x86DD\r\n            \r\n","\r\n            Original was GL_RGB4 = 0x804F\r\n            ":"\r\n            原来是 GL_RGB4 = 0x804F\r\n            \r\n","\r\n            Original was GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE\r\n            ":"\r\n            原来是 GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE\r\n            \r\n","Determines whether the specified resolutions are equal.":"确定指定的分辨率是否相等。\r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 0x93E8\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 0x93E8\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56\r\n            \r\n","\r\n            Original was GL_PREVIOUS_ARB = 0x8578\r\n            ":"\r\n            原来是 GL_PREVIOUS_ARB = 0x8578\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365\r\n            \r\n"," has\r\n            a left digital pad button.\r\n            ":" 有\r\n            左数字键盘按钮。\r\n            \r\n","\r\n            Original was GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6\r\n            ":"\r\n            原来是 GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6\r\n            \r\n","\r\n            Used in GL.PixelStore\r\n            ":"\r\n            在 GL.PixelStore 中使用\r\n            \r\n","\r\n            Creates an icon or cursor from an IconInfo structure.\r\n            ":"\r\n            从 IconInfo 结构创建图标或光标。\r\n            \r\n"," instance carrying mouse state information.\r\n            The information carried by this instance is only valid within this method body.\r\n            ":" 携带鼠标状态信息的实例。\r\n            该实例携带的信息只在该方法体内有效。\r\n            \r\n","\r\n            Original was GL_PER_STAGE_CONSTANTS_NV = 0x8535\r\n            ":"\r\n            原来是 GL_PER_STAGE_CONSTANTS_NV = 0x8535\r\n            \r\n","\r\n            Original was GL_SYNC_FENCE = 0x9116\r\n            ":"\r\n            原来是 GL_SYNC_FENCE = 0x9116\r\n            \r\n","\r\n            Original was GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 0x8918\r\n            ":"\r\n            原来是 GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 0x8918\r\n            \r\n","\r\n            Specifies the window height, in pixels.\r\n            ":"\r\n            指定窗口高度，以像素为单位。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify a two-dimensional texture subimage\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            指定二维纹理子图像\r\n            \r\n","\r\n            Original was GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199\r\n            ":"\r\n            原来是 GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199\r\n            \r\n","[requires: KHR_debug]\r\n            Retrieve messages from the debug message log\r\n            ":"[要求：KHR_debug]\r\n            从调试消息日志中检索消息\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF\r\n            \r\n","The screen.":"屏幕。\r\n","\r\n            The ninth extra mouse button.\r\n            ":"\r\n            第九个额外的鼠标按钮。\r\n            \r\n","\r\n            Original was GL_SPHERE_MAP = 0x2402\r\n            ":"\r\n            原来是 GL_SPHERE_MAP = 0x2402\r\n            \r\n","\r\n            Used in GL.ColorPointer, GL.SecondaryColorPointer and 5 other functions\r\n            ":"\r\n            用于 GL.ColorPointer、GL.SecondaryColorPointer 和其他 5 个函数\r\n            \r\n","[length: query]":"[长度：查询]\r\n","[length: columnBufSize]":"[长度：columnBufSize]\r\n","\r\n            Original was GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314\r\n            \r\n"," \r\n            The Z coordinate of the near edge of the souce region to copy.\r\n            ":" \r\n            要复制的源区域近边缘的 Z 坐标。\r\n            \r\n","\r\n            Original was GL_TEXTURE_GEN_MODE = 0x2500\r\n            ":"\r\n            原来是 GL_TEXTURE_GEN_MODE = 0x2500\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER10_ARB = 0x882F\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER10_ARB = 0x882F\r\n            \r\n","\r\n            Original was GL_ZOOM_Y = 0x0D17\r\n            ":"\r\n            原来是 GL_ZOOM_Y = 0x0D17\r\n            \r\n","[requires: v2.0]\r\n            Enable or disable a generic vertex attribute array\r\n            ":"[要求：v2.0]\r\n            启用或禁用通用顶点属性数组\r\n            \r\n"," \r\n            Specifies the number of renderbuffer objects to be deleted.\r\n            ":" \r\n            指定要删除的渲染缓冲区对象的数量。\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455\r\n            \r\n"," before accessing members\r\n            of this class.\r\n            ":" 在访问成员之前\r\n            这个类的。\r\n            \r\n","A key outside the known keys.":"已知密钥之外的密钥。\r\n","\r\n            Original was GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB\r\n            ":"\r\n            原来是 GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB\r\n            \r\n","\r\n            Original was GL_FRAGMENT_COLOR_EXT = 0x834C\r\n            ":"\r\n            原来是 GL_FRAGMENT_COLOR_EXT = 0x834C\r\n            \r\n","[requires: OES_fixed_point]":"[要求：OES_fixed_point]\r\n","\r\n            Original was GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5\r\n            \r\n","\r\n            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.\r\n            ":"\r\n            指定连续纹理坐标集之间的字节偏移量。如果步幅为 0，则数组元素被认为是紧密排列的。初始值为 0。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1\r\n            \r\n","[requires: EXT_separate_shader_objects]\r\n            Bind a program pipeline to the current context\r\n            ":"[需要：EXT_separate_shader_objects]\r\n            将程序管道绑定到当前上下文\r\n            \r\n","\r\n            Original was GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852\r\n            ":"\r\n            原来是 GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852\r\n            \r\n","The left operand of the subraction.":"减法的左操作数。\r\n","\r\n            Original was GL_FRAMEBUFFER_UNDEFINED = 0x8219\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_UNDEFINED = 0x8219\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT12_NV = 0x8CEC\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT12_NV = 0x8CEC\r\n            \r\n","Returns the maximum number of KeyCodes.":"返回 KeyCodes 的最大数量。\r\n","\r\n            Original was GL_RGB_INTEGER = 0x8D98\r\n            ":"\r\n            原来是 GL_RGB_INTEGER = 0x8D98\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Query the bindings of color numbers to user-defined varying out variables\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            查询颜色编号与用户定义的 varying out 变量的绑定\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4\r\n            \r\n","\r\n            Gets an object that can be used to synchronize access to the bindings implementation.\r\n            ":"\r\n            获取可用于同步对绑定实现的访问的对象。\r\n            \r\n","\r\n            Original was GL_READ_FRAMEBUFFER_BINDING_NV = 0x8CAA\r\n            ":"\r\n            原来是 GL_READ_FRAMEBUFFER_BINDING_NV = 0x8CAA\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_OTHER_KHR = 0x8251\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_OTHER_KHR = 0x8251\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27\r\n            \r\n","\r\n            Original was GL_QUAD_MESH_SUN = 0x8614\r\n            ":"\r\n            原来是 GL_QUAD_MESH_SUN = 0x8614\r\n            \r\n","[length: numAttachments] \r\n            A list of numAttachments attachments to invalidate.\r\n            ":"[长度：numAttachments]\r\n            要失效的 numAttachments 附件列表。\r\n            \r\n","[length: 1] \r\n            Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL.\r\n            ":"[长度：1]\r\n            指定变量的地址以接收令牌，该令牌指示 GL 返回的二进制数据的格式。\r\n            \r\n","\r\n            Original was GL_SAMPLE_MASK_NV = 0x8E51\r\n            ":"\r\n            原来是 GL_SAMPLE_MASK_NV = 0x8E51\r\n            \r\n","First item of the fourth row of the matrix.":"矩阵第四行的第一项。\r\n","\r\n            The second extra mouse button.\r\n            ":"\r\n            第二个额外的鼠标按钮。\r\n            \r\n","\r\n            Original was GL_VertexAttribArraySize = 0X8623\r\n            ":"\r\n            原来是 GL_VertexAttribArraySize = 0X8623\r\n            \r\n","[requires: EXT_vertex_shader]":"[需要：EXT_vertex_shader]\r\n","\r\n            Gets or sets the second column of the matrix.\r\n            ":"\r\n            获取或设置矩阵的第二列。\r\n            \r\n","\r\n            Defines the interface for an input driver.\r\n            ":"\r\n            定义输入驱动程序的接口。\r\n            \r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075\r\n            \r\n"," \r\n            Specifies the symbolic name of the texture-coordinate generation function. Must be TextureGenMode.\r\n            ":" \r\n            指定纹理坐标生成函数的符号名称。必须是 TextureGenMode。\r\n            \r\n","\r\n            Original was GL_REG_27_ATI = 0x893C\r\n            ":"\r\n            原来是 GL_REG_27_ATI = 0x893C\r\n            \r\n"," \r\n            Specifies the type of shader to create.\r\n            ":"指定要创建的着色器类型。\r\n            \r\n"," \r\n            Specified how the alpha source blending factor is computed. The initial value is One.\r\n            ":" \r\n            指定如何计算 alpha 源混合因子。初始值为一。\r\n            \r\n"," \r\n            Specifies a symbolic constant, one of Extensions, Renderer, ShadingLanguageVersion, Vendor, or Version. glGetStringi accepts only the Extensions token.\r\n            ":" \r\n            指定符号常量，Extensions、Renderer、ShadingLanguageVersion、Vendor 或 Version 之一。 glGetStringi 只接受扩展令牌。\r\n            \r\n","[length: count*8]":"[长度：计数*8]\r\n","\r\n            Original was GL_UNSIGNED_NORMALIZED_ARB = 0x8C17\r\n            ":"\r\n            原来是 GL_UNSIGNED_NORMALIZED_ARB = 0x8C17\r\n            \r\n","\r\n            Flags for scan code information. It can be one or more of the following.\r\n            RI_KEY_MAKE\r\n            RI_KEY_BREAK\r\n            RI_KEY_E0\r\n            RI_KEY_E1\r\n            RI_KEY_TERMSRV_SET_LED\r\n            RI_KEY_TERMSRV_SHADOW\r\n            ":"\r\n            扫描代码信息的标志。它可以是以下一项或多项。\r\n            RI_KEY_MAKE\r\n            RI_KEY_BREAK\r\n            RI_KEY_E0\r\n            RI_KEY_E1\r\n            RI_KEY_TERMSRV_SET_LED\r\n            RI_KEY_TERMSRV_SHADOW\r\n            \r\n","[requires: OES_texture_3D]":"[要求：OES_texture_3D]\r\n","\r\n            Original was GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA\r\n            ":"\r\n            原来是 GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Generate mipmaps for a specified texture target\r\n            ":"[需要：EXT_framebuffer_object]\r\n            为指定的纹理目标生成 mipmap\r\n            \r\n","\r\n            Constructs a new IWindowInfo instance for the X11 platform.\r\n            ":"\r\n            为 X11 平台构造一个新的 IWindowInfo 实例。\r\n            \r\n"," \r\n            Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.\r\n            ":" \r\n            指定一个以空字符结尾的字符串，其中包含要绑定索引的顶点着色器属性变量的名称。\r\n            \r\n","\r\n            ShowWindow() Commands\r\n            ":"\r\n            显示窗口() 命令\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063\r\n            ":"原来是 GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063\r\n            \r\n","Gets or sets the X11 VisualInfo.":"获取或设置 X11 VisualInfo。\r\n","\r\n            Used in GL.Ext.BlendFuncSeparate\r\n            ":"\r\n            在 GL.Ext.BlendFuncSeparate 中使用\r\n            \r\n","[length: 4] \r\n            For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.\r\n            ":"[长度：4]\r\n            对于向量和矩阵命令，指定一个指向计数值数组的指针，该数组将用于更新指定的统一变量。\r\n            \r\n","\r\n            Original was GL_NORMALIZED_RANGE_EXT = 0x87E0\r\n            ":"\r\n            原来是 GL_NORMALIZED_RANGE_EXT = 0x87E0\r\n            \r\n","\r\n            Original was GL_Triangles = 0X0004\r\n            ":"\r\n            原来是 GL_Triangles = 0X0004\r\n            \r\n","\r\n            Original was GL_CONSTANT_COLOR1_NV = 0x852B\r\n            ":"原来是 GL_CONSTANT_COLOR1_NV = 0x852B\r\n            \r\n","\r\n            Original was GL_PIXEL_PACK_BUFFER_EXT = 0x88EB\r\n            ":"\r\n            原来是 GL_PIXEL_PACK_BUFFER_EXT = 0x88EB\r\n            \r\n","Third item of the third row of the matrix.":"矩阵第三行的第三项。\r\n","The JoystickButton to check.":"要检查的 JoystickButton。\r\n"," \r\n            Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.\r\n            ":" \r\n            指定要渲染的图元类型。接受符号常量 Points、LineStrip、LineLoop、Lines、LineStripAdjacency、LinesAdjacency、TriangleStrip、TriangleFan、Triangles、TriangleStripAdjacency、TrianglesAdjacency 和 Patches。\r\n            \r\n"," \r\n            Specifies how the red, green, and blue blending factors are computed. The initial value is One.\r\n            ":"指定如何计算红色、绿色和蓝色混合因子。初始值为一。\r\n            \r\n","[requires: AMD_gpu_shader_int64|NV_gpu_shader5]\r\n            Returns the value of a uniform variable\r\n            ":"[要求：AMD_gpu_shader_int64|NV_gpu_shader5]\r\n            返回统一变量的值\r\n            \r\n","\r\n            Original was GL_ElementArrayBufferBinding = 0X8895\r\n            ":"\r\n            原来是 GL_ElementArrayBufferBinding = 0X8895\r\n            \r\n","\r\n            Original was GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898F\r\n            ":"\r\n            原来是 GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898F\r\n            \r\n","\r\n            Used in GL.Ext.GetVertexAttribI, GL.Ext.VertexAttribIPointer\r\n            ":"用于GL.Ext.GetVertexAttribI, GL.Ext.VertexAttribIPointer\r\n            \r\n","\r\n            Defines a unit-length Vector4 that points towards the Z-axis.\r\n            ":"\r\n            定义指向 Z 轴的单位长度 Vector4。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify implementation-specific hints\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            指定特定于实现的提示\r\n            \r\n","\r\n            Original was GL_GENERATE_MIPMAP_HINT = 0x8192\r\n            ":"\r\n            原来是 GL_GENERATE_MIPMAP_HINT = 0x8192\r\n            \r\n","\r\n            Original was GL_SAMPLE_MASK = 0x8E51\r\n            ":"\r\n            原来是 GL_SAMPLE_MASK = 0x8E51\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56\r\n            \r\n","\r\n            Any message is in the queue.\r\n            ":"\r\n            任何消息都在队列中。\r\n            \r\n","\r\n            Original was GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138\r\n            ":"\r\n            原来是 GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138\r\n            \r\n","\r\n            Original was GL_SHORT = 0x1402\r\n            ":"\r\n            原来是 GL_SHORT = 0x1402\r\n            \r\n","\r\n            Original was GL_MATRIX4_NV = 0x8634\r\n            ":"\r\n            原来是 GL_MATRIX4_NV = 0x8634\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Retrieve information about a bound renderbuffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            检索有关绑定渲染缓冲区对象的信息\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9\r\n            \r\n","\r\n            Gets the list of available KeyboardDevices.\r\n            ":"\r\n            获取可用的 KeyboardDevices 列表。\r\n            \r\n"," input device.\r\n            This value depends on the connected device and the drivers in use. If ":" 输入设备。\r\n            该值取决于连接的设备和使用的驱动程序。如果\r\n","\r\n            Used in GL.GetInternalformat, GL.TexStorage2D and 3 other functions\r\n            ":"\r\n            用于 GL.GetInternalformat、GL.TexStorage2D 和其他 3 个函数\r\n            \r\n","\r\n            Original was GL_SRC1_ALPHA = 0x8589\r\n            ":"\r\n            原来是 GL_SRC1_ALPHA = 0x8589\r\n            \r\n","[requires: v4.3 or ARB_texture_view|VERSION_4_3]\r\n            Initialize a texture as a data alias of another texture's data store\r\n            ":"[要求：v4.3 或 ARB_texture_view|VERSION_4_3]\r\n            将纹理初始化为另一个纹理数据存储的数据别名\r\n            \r\n","\r\n            Original was GL_ASYNC_HISTOGRAM_SGIX = 0x832C\r\n            ":"\r\n            原来是 GL_ASYNC_HISTOGRAM_SGIX = 0x832C\r\n            \r\n"," \r\n            Specifies the size of the count, indices and basevertex arrays.\r\n            ":" \r\n            指定计数、索引和基顶点数组的大小。\r\n            \r\n","\r\n            DPad right direction button\r\n            ":"\r\n            DPad右方向键\r\n            \r\n","[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]":"[需要：EXT_disjoint_timer_query|EXT_occlusion_query_boolean]\r\n","\r\n            Original was GL_INNOCENT_CONTEXT_RESET_KHR = 0x8254\r\n            ":"\r\n            原来是 GL_INNOCENT_CONTEXT_RESET_KHR = 0x8254\r\n            \r\n"," \r\n            Specifies the alpha comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Always.\r\n            ":" \r\n            指定 alpha 比较函数。接受符号常量 Never、Less、Equal、Lequal、Greater、Notequal、Gequal 和 Always。初始值为始终。\r\n            \r\n","\r\n            Get minmax parameters\r\n            ":"\r\n            获取最小最大参数\r\n            \r\n","\r\n            Original was GL_TextureCubeMapNegativeZ = 0X851a\r\n            ":"\r\n            原来是 GL_TextureCubeMapNegativeZ = 0X851a\r\n            \r\n","\r\n            Original was GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32\r\n            ":"\r\n            原来是 GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 0x8A55\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 0x8A55\r\n            \r\n","\r\n            Original was GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2\r\n            \r\n","[length: numPaths,transformType]":"[长度：numPaths，transformType]\r\n","\r\n            Original was GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C\r\n            ":"\r\n            原来是 GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C\r\n            \r\n"," for the X button.\r\n            ":" 对于 X 按钮。\r\n            \r\n","\r\n            The point passed to GetMouseMovePoints is not in the buffer.\r\n            ":"\r\n            传递给 GetMouseMovePoints 的点不在缓冲区中。\r\n            \r\n"," is an alternate guitar.\r\n            ":" 是备用吉他。\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_16_BITS = 0x82CA\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_16_BITS = 0x82CA\r\n            \r\n","\r\n            Called when a keybord key is released.\r\n            ":"\r\n            释放键盘键时调用。\r\n            \r\n","[requires: v4.3 or KHR_debug|VERSION_4_3]\r\n            Retrieve the label of a sync object identified by a pointer\r\n            ":"[要求：v4.3 或 KHR_debug|VERSION_4_3]\r\n            检索由指针标识的同步对象的标签\r\n            \r\n","\r\n            Original was GL_LUMINANCE = 0X1909\r\n            ":"\r\n            原来是 GL_LUMINANCE = 0X1909\r\n            \r\n"," structure describing\r\n            the capabilities of the device at the specified index.\r\n            If no device is connected at the specified index, the ":" 结构描述\r\n            设备在指定索引处的功能。\r\n            如果没有设备连接到指定的索引，则\r\n","\r\n            Original was GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000\r\n            \r\n","[requires: v2.0]\r\n            Returns information about an active attribute variable for the specified program object\r\n            ":"[要求：v2.0]\r\n            返回有关指定程序对象的活动属性变量的信息\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1\r\n            \r\n","[requires: v1.5]\r\n            Delimit the boundaries of a query object\r\n            ":"[要求：v1.5]\r\n            划定查询对象的边界\r\n            \r\n","[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]\r\n            Return parameters of a query object\r\n            ":"[需要：EXT_disjoint_timer_query|EXT_occlusion_query_boolean]\r\n            查询对象的返回参数\r\n            \r\n","\r\n            Original was GL_MATRIX1_ARB = 0x88C1\r\n            ":"\r\n            原来是 GL_MATRIX1_ARB = 0x88C1\r\n            \r\n","\r\n            Original was GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867\r\n            ":"\r\n            原来是 GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867\r\n            \r\n","\r\n            Original was GL_VARIABLE_G_NV = 0x8529\r\n            ":"\r\n            原来是 GL_VARIABLE_G_NV = 0x8529\r\n            \r\n","\r\n            Original was GL_PALETTE4_RGB8_OES = 0x8B90\r\n            ":"\r\n            原来是 GL_PALETTE4_RGB8_OES = 0x8B90\r\n            \r\n","[requires: NV_shader_buffer_load]\r\n            Return parameters of a buffer object\r\n            ":"[要求：NV_shader_buffer_load]\r\n            缓冲区对象的返回参数\r\n            \r\n","\r\n            Original was GL_ImplementationColorReadType = 0X8b9a\r\n            ":"\r\n            原来是 GL_ImplementationColorReadType = 0X8b9a\r\n            \r\n","\r\n            Original was GL_MaxTextureImageUnits = 0X8872\r\n            ":"\r\n            原来是 GL_MaxTextureImageUnits = 0X8872\r\n            \r\n","\r\n            Original was GL_RED = 0x1903\r\n            ":"\r\n            原来是 GL_RED = 0x1903\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 0x90D7\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 0x90D7\r\n            \r\n","\r\n            Original was GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E\r\n            ":"\r\n            原来是 GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E\r\n            \r\n","\r\n            Original was GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179\r\n            ":"\r\n            原来是 GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179\r\n            \r\n","\r\n            Original was GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E\r\n            ":"\r\n            原来是 GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E\r\n            \r\n","\r\n            Original was GL_RGBA8I_EXT = 0x8D8E\r\n            ":"\r\n            原来是 GL_RGBA8I_EXT = 0x8D8E\r\n            \r\n","[requires: SGIX_flush_raster]":"[要求：SGIX_flush_raster]\r\n","\r\n            Used in GL.GetString\r\n            ":"\r\n            在 GL.GetString 中使用\r\n            \r\n","\r\n            Used in GL.MatrixMode\r\n            ":"\r\n            在 GL.MatrixMode 中使用\r\n            \r\n","\r\n            Original was GL_CLIP_DEPTH_MODE = 0x935D\r\n            ":"\r\n            原来是 GL_CLIP_DEPTH_MODE = 0x935D\r\n            \r\n","\r\n            Original was GL_TEXTURE_BORDER_COLOR = 0x1004\r\n            ":"\r\n            原来是 GL_TEXTURE_BORDER_COLOR = 0x1004\r\n            \r\n","[length: name] \r\n            The name of the user-defined varying out variable whose binding to query\r\n            ":"[长度：姓名]\r\n            绑定到查询的用户定义变量的名称\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Bind a renderbuffer to a renderbuffer target\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            将渲染缓冲区绑定到渲染缓冲区目标\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT_EXT = 0x90F0\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT_EXT = 0x90F0\r\n            \r\n","\r\n            Represents a keyboard device and provides methods to query its status. \r\n            ":"\r\n            表示键盘设备并提供查询其状态的方法。\r\n            \r\n","\r\n            Original was GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D\r\n            ":"\r\n            原来是 GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D\r\n            \r\n","\r\n            Original was GL_FEEDBACK = 0x1C01\r\n            ":"\r\n            原来是 GL_FEEDBACK = 0x1C01\r\n            \r\n","The class to load extensions for.":"加载扩展的类。\r\n","\r\n            Original was GL_ARRAY_POINTER = 0x8645\r\n            ":"\r\n            原来是 GL_ARRAY_POINTER = 0x8645\r\n            \r\n"," \r\n            Specifies the name of a renderbuffer object.\r\n            ":" \r\n            指定渲染缓冲区对象的名称。\r\n            \r\n","\r\n            Original was GL_DUAL_INTENSITY12_SGIS = 0x811A\r\n            ":"\r\n            原来是 GL_DUAL_INTENSITY12_SGIS = 0x811A\r\n            \r\n","\r\n            Original was GL_ShadingLanguageVersion = 0X8b8c\r\n            ":"\r\n            原来是 GL_ShadingLanguageVersion = 0X8b8c\r\n            \r\n","[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]\r\n            Delimit the boundaries of a query object on an indexed target\r\n            ":"[要求：v4.0 或 ARB_transform_feedback3|VERSION_4_0]\r\n            在索引目标上划定查询对象的边界\r\n            \r\n"," reference the same win32 window.":" 引用相同的 win32 窗口。\r\n","\r\n            Original was GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 0x9124\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 0x9124\r\n            \r\n","[length: 4] \r\n            Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.\r\n            ":"[长度：4]\r\n            指定 s、t、r 和 q 纹理坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44\r\n            \r\n"," \r\n            Specifies the name of the parameter to modify.\r\n            ":" \r\n            指定要修改的参数的名称。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SLUMINANCE = 0x8C4A\r\n            ":"\r\n            原来是 GL_COMPRESSED_SLUMINANCE = 0x8C4A\r\n            \r\n","[requires: EXT_texture_buffer_object]\r\n            Attach the storage for a buffer object to the active buffer texture\r\n            ":"[需要：EXT_texture_buffer_object]\r\n            将缓冲区对象的存储附加到活动缓冲区纹理\r\n            \r\n","\r\n            Original was GL_PATH_JOIN_STYLE_NV = 0x9079\r\n            ":"\r\n            原来是 GL_PATH_JOIN_STYLE_NV = 0x9079\r\n            \r\n","[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]\r\n            Return a binary representation of a program object's compiled and linked executable source\r\n            ":"[要求：v4.1 或 ARB_get_program_binary|VERSION_4_1]\r\n            返回程序对象的已编译和链接的可执行源的二进制表示\r\n            \r\n","\r\n            Original was GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2\r\n            ":"\r\n            原来是 GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2\r\n            \r\n"," \r\n            Specifies the byte offset between consecutive edge flags. If stride is 0, the edge flags are understood to be tightly packed in the array. The initial value is 0.\r\n            ":" \r\n            指定连续边缘标志之间的字节偏移量。如果步幅为 0，则边缘标志被理解为紧密排列在数组中。初始值为 0。\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER8_ARB = 0x882D\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER8_ARB = 0x882D\r\n            \r\n","\r\n            Original was GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060\r\n            ":"\r\n            原来是 GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060\r\n            \r\n","GlyphMetricsFloat":"GlyphMetricsFloat\r\n","The index of the JoystickButton to check.":"要检查的 JoystickButton 的索引。\r\n","\r\n            Original was GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36\r\n            ":"\r\n            原来是 GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36\r\n            \r\n","\r\n            Used in GL.GetBufferPointer, GL.GetNamedBufferPointer\r\n            ":"\r\n            在 GL.GetBufferPointer、GL.GetNamedBufferPointer 中使用\r\n            \r\n","\r\n            Original was GL_SAMPLE_ALPHA_TO_ONE = 0x809F\r\n            ":"\r\n            原来是 GL_SAMPLE_ALPHA_TO_ONE = 0x809F\r\n            \r\n","\r\n            Used in GL.NewList\r\n            ":"\r\n            在 GL.NewList 中使用\r\n            \r\n","\r\n            Original was GL_DRAW_INDIRECT_BUFFER = 0x8F3F\r\n            ":"原来是 GL_DRAW_INDIRECT_BUFFER = 0x8F3F\r\n            \r\n","\r\n            Original was GL_MATRIX18 = 0x88D2\r\n            ":"原来是 GL_MATRIX18 = 0x88D2\r\n            \r\n","\r\n            Original was GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056\r\n            ":"\r\n            原来是 GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6C\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6C\r\n            \r\n"," \r\n            Specify the name of a query object into which to record the GL time.\r\n            ":" \r\n            指定要记录 GL 时间的查询对象的名称。\r\n            \r\n","[requires: v3.2 or ARB_sync|VERSION_3_2]\r\n            Query the properties of a sync object\r\n            ":"[要求：v3.2 或 ARB_sync|VERSION_3_2]\r\n            查询同步对象的属性\r\n            \r\n","\r\n            Used in GL.Ibm.FogCoordPointerList, GL.Ibm.SecondaryColorPointerList\r\n            ":"\r\n            用于GL.Ibm.FogCoordPointerList, GL.Ibm.SecondaryColorPointerList\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88\r\n            \r\n","\r\n            Specify new red, green, and blue values for the current color.\r\n            ":"为当前颜色指定新的红色、绿色和蓝色值。\r\n            \r\n","\r\n            Used in GL.CreateShader, GL.GetShaderPrecisionFormat\r\n            ":"\r\n            在GL.CreateShader、GL.GetShaderPrecisionFormat中使用\r\n            \r\n","\r\n            Constructs a new instance\r\n            ":"\r\n            构造一个新实例\r\n            \r\n","The resulting Matrix2 instance.":"生成的 Matrix2 实例。\r\n","\r\n            Original was GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF\r\n            ":"\r\n            原来是 GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF\r\n            \r\n","\r\n            Original was GL_TEXTURE15 = 0x84CF\r\n            ":"\r\n            原来是 GL_TEXTURE15 = 0x84CF\r\n            \r\n","[requires: EXT_polygon_offset]\r\n            Set the scale and units used to calculate depth values\r\n            ":"[需要：EXT_polygon_offset]\r\n            设置用于计算深度值的比例和单位\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F\r\n            \r\n","[length: 1] \r\n            For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.\r\n            ":"[长度：1]\r\n            对于向量和矩阵命令，指定一个指向计数值数组的指针，该数组将用于更新指定的统一变量。\r\n            \r\n","\r\n            Original was GL_POLYGON_OFFSET_LINE = 0x2A02\r\n            ":"\r\n            原来是 GL_POLYGON_OFFSET_LINE = 0x2A02\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8\r\n            \r\n","\r\n            Original was GL_FRAMEZOOM_SGIX = 0x818B\r\n            ":"\r\n            原来是 GL_FRAMEZOOM_SGIX = 0x818B\r\n            \r\n","\r\n            Retrieves the device name for the keyboard device.\r\n            ":"\r\n            检索键盘设备的设备名称。\r\n            \r\n"," if this instance has a left stick button; otherwise, ":" 如果这个实例有一个左摇杆按钮；否则，\r\n","[length: stride] \r\n            Specifies a pointer to the first edge flag in the array. The initial value is 0.\r\n            ":"[长度：步幅]\r\n            指定指向数组中第一个边缘标志的指针。初始值为 0。\r\n            \r\n","[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]\r\n            Return parameters of an indexed query object target\r\n            ":"[要求：v4.0 或 ARB_transform_feedback3|VERSION_4_0]\r\n            索引查询对象目标的返回参数\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Define front- and back-facing polygons\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            定义正面和背面的多边形\r\n            \r\n","\r\n            Original was GL_MINMAX = 0x802E\r\n            ":"\r\n            原来是 GL_MINMAX = 0x802E\r\n            \r\n","\r\n            Original was GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F\r\n            ":"\r\n            原来是 GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F\r\n            \r\n","\r\n            Original was GL_OES_extended_matrix_palette = 1\r\n            ":"\r\n            原来是 GL_OES_extended_matrix_palette = 1\r\n            \r\n","\r\n            Queries the specified GPU for connected displays and, optionally,\r\n            returns the list of displays.\r\n            ":"\r\n            为连接的显示器查询指定的 GPU，并且可以选择，\r\n            返回显示列表。\r\n            \r\n","\r\n            Original was GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E\r\n            ":"\r\n            原来是 GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E\r\n            \r\n","[requires: EXT_texture_integer]":"[需要：EXT_texture_integer]\r\n","The right operand of the subraction.":"减法的右操作数。\r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2\r\n            \r\n","\r\n            Used in GL.Arb.FramebufferTexture, GL.Arb.FramebufferTextureFace and 32 other functions\r\n            ":"\r\n            用于GL.Arb.FramebufferTexture、GL.Arb.FramebufferTextureFace等32个函数\r\n            \r\n","\r\n            Original was GL_OES_matrix_palette = 1\r\n            ":"\r\n            原来是 GL_OES_matrix_palette = 1\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898\r\n            \r\n","\r\n            Original was GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187\r\n            ":"\r\n            原来是 GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187\r\n            \r\n","\r\n            Original was GL_TEXTURE26 = 0x84DA\r\n            ":"\r\n            原来是 GL_TEXTURE26 = 0x84DA\r\n            \r\n","\r\n            Original was GL_GREEN_INTEGER = 0x8D95\r\n            ":"\r\n            原来是 GL_GREEN_INTEGER = 0x8D95\r\n            \r\n","[requires: NV_transform_feedback]\r\n            Start transform feedback operation\r\n            ":"[需要：NV_transform_feedback]\r\n            开始变换反馈操作\r\n            \r\n","\r\n            Original was GL_MAX_PALETTE_MATRICES_OES = 0x8842\r\n            ":"\r\n            原来是 GL_MAX_PALETTE_MATRICES_OES = 0x8842\r\n            \r\n","\r\n            Original was GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649\r\n            ":"\r\n            原来是 GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649\r\n            \r\n","\r\n            Original was GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A\r\n            \r\n","\r\n            Original was GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE\r\n            \r\n","The left operand of the multiplication.":"乘法的左操作数。\r\n","\r\n            Original was GL_CONDITION_SATISFIED = 0x911C\r\n            ":"\r\n            原来是 GL_CONDITION_SATISFIED = 0x911C\r\n            \r\n","\r\n            Used in GL.Apple.ElementPointer\r\n            ":"\r\n            在 GL.Apple.ElementPointer 中使用\r\n            \r\n","\r\n            Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.\r\n            ":"\r\n            指定远裁剪平面到窗口坐标的映射。初始值为 1。\r\n            \r\n","\r\n            Original was GL_GEOMETRY_OUTPUT_TYPE = 0x8918\r\n            ":"\r\n            原来是 GL_GEOMETRY_OUTPUT_TYPE = 0x8918\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 0x88FE\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 0x88FE\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29\r\n            \r\n","\r\n            Used in GL.GetnColorTable, GL.GetnCompressedTexImage and 7 other functions\r\n            ":"\r\n            用于GL.GetnColorTable、GL.GetnCompressedTexImage等7个函数\r\n            \r\n","[length: maxFramebuffers]":"[长度：最大帧缓冲区]\r\n","\r\n            Original was GL_MediumFloat = 0X8df1\r\n            ":"\r\n            原来是 GL_MediumFloat = 0X8df1\r\n            \r\n","\r\n            Original was GL_BGRA_INTEGER = 0x8D9B\r\n            ":"\r\n            原来是 GL_BGRA_INTEGER = 0x8D9B\r\n            \r\n","\r\n            Original was GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B\r\n            ":"\r\n            原来是 GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B\r\n            \r\n","[requires: ARB_shading_language_include]":"[需要：ARB_shading_language_include]\r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3\r\n            \r\n","Returns a System.String that represents the current window.":"返回表示当前窗口的 System.String。\r\n","[length: n] \r\n            A pointer to an array containing n renderbuffer objects to be deleted.\r\n            ":"[长度：n]\r\n            指向包含 n 个要删除的渲染缓冲区对象的数组的指针。\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the W, Z, and X components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 W、Z 和 X 组件的 OpenTK.Vector3。\r\n            \r\n","[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]\r\n            Render primitives from array data with a per-element offset\r\n            ":"[要求：v3.2 或 ARB_draw_elements_base_vertex|VERSION_3_2]\r\n            从具有每个元素偏移量的数组数据渲染图元\r\n            \r\n","\r\n            Original was GL_EXCLUSION_KHR = 0x92A0\r\n            ":"\r\n            原来是 GL_EXCLUSION_KHR = 0x92A0\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Reserve transform feedback object names\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            保留变换反馈对象名称\r\n            \r\n","[requires: v3.3]\r\n            Modify the rate at which generic vertex attributes advance during instanced rendering\r\n            ":"[要求：v3.3]\r\n            修改实例化渲染期间通用顶点属性前进的速率\r\n            \r\n","\r\n            It is only necessary to call DestroyIcon for icons and cursors \r\n            created with the following functions: CreateIconFromResourceEx \r\n            (if called without the LR_SHARED flag), CreateIconIndirect, and \r\n            CopyIcon. Do not use this function to destroy a shared icon. A \r\n            shared icon is valid as long as the module from which it was loaded\r\n            remains in memory. The following functions obtain a shared icon.\r\n            \r\n            LoadIcon\r\n            LoadImage (if you use the LR_SHARED flag)\r\n            CopyImage (if you use the LR_COPYRETURNORG flag and the hImage parameter is a shared icon)\r\n            CreateIconFromResource\r\n            CreateIconFromResourceEx (if you use the LR_SHARED flag)\r\n            ":"\r\n            只需要为图标和光标调用 DestroyIcon\r\n            使用以下函数创建：CreateIconFromResourceEx\r\n            （如果调用时没有 LR_SHARED 标志）、CreateIconIndirect 和\r\n            复制图标。不要使用此功能破坏共享图标。 A\r\n            只要从中加载它的模块，共享图标就有效\r\n            留在记忆中。以下函数获取共享图标。\r\n            \r\n            加载图标\r\n            LoadImage（如果您使用 LR_SHARED 标志）\r\n            CopyImage（如果你使用了LR_COPYRETURNORG标志并且hImage参数是共享图标）\r\n            从资源创建图标\r\n            CreateIconFromResourceEx（如果您使用 LR_SHARED 标志）\r\n            \r\n","\r\n            Original was GL_STENCIL_ATTACHMENT_OES = 0x8D20\r\n            ":"\r\n            原来是 GL_STENCIL_ATTACHMENT_OES = 0x8D20\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872\r\n            \r\n","\r\n            Used in GL.Oes.MultiTexCoord1, GL.Oes.MultiTexCoord2 and 2 other functions\r\n            ":"\r\n            用于 GL.Oes.MultiTexCoord1、GL.Oes.MultiTexCoord2 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93\r\n            ":"\r\n            原来是 GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93\r\n            \r\n"," \r\n            The value to clear a depth render buffer to.\r\n            ":" \r\n            清除深度渲染缓冲区的值。\r\n            \r\n"," \r\n            Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.\r\n            ":" \r\n            指定活动纹理单元的目标纹理的符号名称。 Texture2D 和 TextureCubeMap 被接受。\r\n            \r\n","\r\n            Gets or sets the Z component of this instance.\r\n            ":"\r\n            获取或设置此实例的 Z 分量。\r\n            \r\n","\r\n            Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the CreateProcess function by the program that started the application.\r\n            ":"\r\n            根据启动应用程序的程序传递给 CreateProcess 函数的 STARTUPINFO 结构中指定的 SW_ 值设置显示状态。\r\n            \r\n","[requires: v1.5]\r\n            Return parameters of a query object\r\n            ":"[要求：v1.5]\r\n            查询对象的返回参数\r\n            \r\n","\r\n            Original was GL_INT_IMAGE_2D_RECT_EXT = 0x905A\r\n            ":"\r\n            原来是 GL_INT_IMAGE_2D_RECT_EXT = 0x905A\r\n            \r\n","\r\n            Used in GL.BeginConditionalRender\r\n            ":"\r\n            在 GL.BeginConditionalRender 中使用\r\n            \r\n","[requires: OES_point_size_array]":"[要求：OES_point_size_array]\r\n","\r\n            Original was GL_4PASS_0_SGIS = 0x80A4\r\n            ":"\r\n            原来是 GL_4PASS_0_SGIS = 0x80A4\r\n            \r\n"," for the up button.\r\n            ":" 对于向上按钮。\r\n            \r\n","\r\n            Original was GL_CONTEXT_ROBUST_ACCESS_KHR = 0x90F3\r\n            ":"\r\n            原来是 GL_CONTEXT_ROBUST_ACCESS_KHR = 0x90F3\r\n            \r\n","\r\n            Original was GL_TEXTURE25 = 0x84D9\r\n            ":"\r\n            原来是 GL_TEXTURE25 = 0x84D9\r\n            \r\n","\r\n            Original was GL_TEXTURE_DEPTH_QCOM = 0x8BD4\r\n            ":"\r\n            原来是 GL_TEXTURE_DEPTH_QCOM = 0x8BD4\r\n            \r\n"," \r\n            Specifies the number of shader object handles contained in shaders.\r\n            ":" \r\n            指定着色器中包含的着色器对象句柄数。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1\r\n            \r\n","\r\n            Do not cache instances of this type outside their event handler.\r\n            If necessary, you can clone an instance using the \r\n            ":"\r\n            不要在事件处理程序之外缓存这种类型的实例。\r\n            如有必要，您可以使用\r\n            \r\n"," \r\n            Specify the target of the framebuffer completeness check.\r\n            ":" \r\n            指定帧缓冲区完整性检查的目标。\r\n            \r\n","\r\n            OnResize: Occurs whenever GameWindow is resized. You should update the OpenGL Viewport\r\n            and Projection Matrix here.\r\n            ":"\r\n            OnResize：每当调整 GameWindow 大小时发生。您应该更新 OpenGL 视口\r\n            和投影矩阵在这里。\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B\r\n            \r\n","\r\n            Original was GL_SYNC_STATUS = 0x9114\r\n            ":"\r\n            原来是 GL_SYNC_STATUS = 0x9114\r\n            \r\n"," \r\n            For glViewportIndexedf, specifies the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).\r\n            ":" \r\n            对于 glViewportIndexedf，以像素为单位指定视口矩形的左下角。初始值为 (0,0)。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Set the lighting model parameters\r\n            ":"[要求：v1.0 和 1.0]\r\n            设置光照模型参数\r\n            \r\n","\r\n            Defines an IGraphicsContext implementation for the Linux KMS framebuffer.\r\n            For Linux/X11 and other Unix operating systems, use the more generic\r\n            ":"\r\n            为 Linux KMS 帧缓冲区定义 IGraphicsContext 实现。\r\n            对于 Linux/X11 和其他 Unix 操作系统，使用更通用的\r\n            \r\n","\r\n            Original was GL_EMBOSS_CONSTANT_NV = 0x855E\r\n            ":"\r\n            原来是 GL_EMBOSS_CONSTANT_NV = 0x855E\r\n            \r\n","[length: bufsize] \r\n            Specifies the address of an array into which the name of the shader subroutine uniform will be written.\r\n            ":"[长度：bufsize]\r\n            指定数组的地址，着色器子例程 uniform 的名称将写入该数组。\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_WIDTH = 0x8018\r\n            ":"\r\n            原来是 GL_CONVOLUTION_WIDTH = 0x8018\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT2 = 0x8CE2\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT2 = 0x8CE2\r\n            \r\n","\r\n            Original was GL_SOURCE1_RGB_ARB = 0x8581\r\n            ":"\r\n            原来是 GL_SOURCE1_RGB_ARB = 0x8581\r\n            \r\n","[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]\r\n            Fill all or part of buffer object's data store with a fixed value\r\n            ":"[要求：v4.3 或 ARB_clear_buffer_object|VERSION_4_3]\r\n            用固定值填充全部或部分缓冲区对象的数据存储\r\n            \r\n","[in] Pointer to a null-terminated string to be used as the new title or control text.":"[in] 指向要用作新标题或控制文本的空终止字符串的指针。\r\n","[requires: EXT_separate_shader_objects]\r\n            Retrieve the info log string from a program pipeline object\r\n            ":"[需要：EXT_separate_shader_objects]\r\n            从程序管道对象中检索信息日志字符串\r\n            \r\n","\r\n            Specifies the category of this OpenGL function.\r\n            ":"\r\n            指定此 OpenGL 函数的类别。\r\n            \r\n","\r\n            Original was GL_4_BYTES = 0x1409\r\n            ":"\r\n            原来是 GL_4_BYTES = 0x1409\r\n            \r\n","\r\n            Original was GL_RGBA_ICC_SGIX = 0x8461\r\n            ":"\r\n            原来是 GL_RGBA_ICC_SGIX = 0x8461\r\n            \r\n","[requires: EXT_vertex_array]\r\n            Define an array of color indexes\r\n            ":"[需要：EXT_vertex_array]\r\n            定义颜色索引数组\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_POINTER = 0x8090\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_POINTER = 0x8090\r\n            \r\n","\r\n            Original was GL_WIDE_LINE_HINT_PGI = 0x1A222\r\n            ":"\r\n            原来是 GL_WIDE_LINE_HINT_PGI = 0x1A222\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT12 = 0x8CEC\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT12 = 0x8CEC\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A\r\n            \r\n"," \r\n            Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.\r\n            ":" \r\n            指定单个符号常量，Add、AddSigned、Interpolate、Modulate、Decal、Blend、Replace、Subtract、Combine、Texture、Constant、PrimaryColor、Previous、SrcColor、OneMinusSrcColor、SrcAlpha、OneMinusSrcAlpha 之一，点精灵的单个布尔值纹理坐标替换，纹理细节层次偏差的单个浮点值，或者在指定 RgbScale 或 AlphaScale 时为 1.0、2.0 或 4.0。\r\n            \r\n"," \r\n            Specifies the compilation mode, which can be Compile or CompileAndExecute.\r\n            ":" \r\n            指定编译方式，可以是Compile或CompileAndExecute。\r\n            \r\n","\r\n            For the keyboard, the Usage Page is 1 and the Usage is 2.\r\n            ":"\r\n            对于键盘，Usage Page 为 1，Usage 为 2。\r\n            \r\n","[requires: EXT_vertex_weighting]":"[需要：EXT_vertex_weighting]\r\n","\r\n            Original was GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221\r\n            ":"\r\n            原来是 GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221\r\n            \r\n","\r\n            Used in GL.Sun.ReplacementCodePointer\r\n            ":"\r\n            在 GL.Sun.ReplacementCodePointer 中使用\r\n            \r\n"," \r\n            Specifies a value that may be the name of a framebuffer object.\r\n            ":" \r\n            指定一个值，该值可能是帧缓冲区对象的名称。\r\n            \r\n","True if T is blittable; false otherwise.":"如果 T 是 blittable 则为真；否则为假。\r\n","\r\n            The zero matrix.\r\n            ":"\r\n            零矩阵。\r\n            \r\n"," \r\n            Specify one vertex of a rectangle.\r\n            ":" \r\n            指定矩形的一个顶点。\r\n            \r\n","[length: 1] \r\n            Specifies the address of a variable into which is written the number of characters copied into name.\r\n            ":"[长度：1]\r\n            指定变量的地址，其中写入复制到名称中的字符数。\r\n            \r\n","\r\n            Original was GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178\r\n            ":"\r\n            原来是 GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE = 0x809D\r\n            ":"\r\n            原来是 GL_MULTISAMPLE = 0x809D\r\n            \r\n","\r\n            Adds or replaces a device based on its hardware id.\r\n            A zero-based device index will be generated automatically\r\n            for the first available device slot.\r\n            ":"\r\n            根据设备的硬件 ID 添加或替换设备。\r\n            将自动生成一个从零开始的设备索引\r\n            对于第一个可用的设备插槽。\r\n            \r\n","\r\n            Original was GL_COLOR_FLOAT_APPLE = 0x8A0F\r\n            ":"\r\n            原来是 GL_COLOR_FLOAT_APPLE = 0x8A0F\r\n            \r\n","[length: maxLength] \r\n            Returns a null terminated string containing the name of the attribute variable.\r\n            ":"[长度：最大长度]\r\n            返回包含属性变量名称的空终止字符串。\r\n            \r\n","\r\n            Original was GL_SPRITE_AXIS_SGIX = 0x814A\r\n            ":"\r\n            原来是 GL_SPRITE_AXIS_SGIX = 0x814A\r\n            \r\n","\r\n            Original was GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF\r\n            ":"原来是 GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF\r\n            \r\n","\r\n            Original was GL_SIGNALED = 0x9119\r\n            ":"\r\n            原来是 GL_SIGNALED = 0x9119\r\n            \r\n","[length: 4] \r\n            Specifies the address of an array of four double-precision floating-point values. These values are interpreted as a plane equation.\r\n            ":"[长度：4]\r\n            指定包含四个双精度浮点值的数组的地址。这些值被解释为平面方程。\r\n            \r\n","\r\n            Original was GL_RED_SNORM = 0x8F90\r\n            ":"\r\n            原来是 GL_RED_SNORM = 0x8F90\r\n            \r\n","\r\n            Original was GL_Zero = 0\r\n            ":"\r\n            原来是 GL_Zero = 0\r\n            \r\n","\r\n            Original was GL_T2F_C4UB_V3F = 0x2A29\r\n            ":"\r\n            原来是 GL_T2F_C4UB_V3F = 0x2A29\r\n            \r\n","\r\n            Original was GL_SOURCE1_RGB = 0x8581\r\n            ":"\r\n            原来是 GL_SOURCE1_RGB = 0x8581\r\n            \r\n","\r\n            Original was GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB\r\n            ":"\r\n            原来是 GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB\r\n            \r\n","\r\n            Original was GL_NUM_SAMPLE_COUNTS = 0x9380\r\n            ":"\r\n            原来是 GL_NUM_SAMPLE_COUNTS = 0x9380\r\n            \r\n","\r\n            Creates an IWindowInfo instance for the Mac OS X platform.\r\n            ":"\r\n            为 Mac OS X 平台创建一个 IWindowInfo 实例。\r\n            \r\n","\r\n            Original was GL_VERTEX_STREAM3_ATI = 0x876F\r\n            ":"\r\n            原来是 GL_VERTEX_STREAM3_ATI = 0x876F\r\n            \r\n","\r\n            Used in GL.GetNamedRenderbufferParameter, GL.GetRenderbufferParameter and 2 other functions\r\n            ":"\r\n            用于 GL.GetNamedRenderbufferParameter、GL.GetRenderbufferParameter 和其他 2 个函数\r\n            \r\n","Loads all extensions for the specified class. This function is intended\r\n            for OpenGL, Wgl, Glx, OpenAL etc.":"加载指定类的所有扩展。此功能旨在\r\n            适用于 OpenGL、Wgl、Glx、OpenAL 等。\r\n","\r\n            Original was GL_COMPILE_AND_EXECUTE = 0x1301\r\n            ":"\r\n            原来是 GL_COMPILE_AND_EXECUTE = 0x1301\r\n            \r\n","\r\n            The GetWindowRect function retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.\r\n            ":"\r\n            GetWindowRect 函数检索指定窗口的边界矩形的尺寸。尺寸以相对于屏幕左上角的屏幕坐标给出。\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_WIDTH_OES = 0x8D42\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_WIDTH_OES = 0x8D42\r\n            \r\n","\r\n            Original was GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69\r\n            ":"\r\n            原来是 GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC\r\n            \r\n","\r\n            Original was GL_PROXY_HISTOGRAM_EXT = 0x8025\r\n            ":"\r\n            原来是 GL_PROXY_HISTOGRAM_EXT = 0x8025\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_TYPE_EXT = 0x807B\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_TYPE_EXT = 0x807B\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Specifies a list of color buffers to be drawn into\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            指定要绘制到的颜色缓冲区列表\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_BORDER_MODE = 0x8013\r\n            ":"\r\n            原来是 GL_CONVOLUTION_BORDER_MODE = 0x8013\r\n            \r\n","[length: size] \r\n            Specifies a pointer to the new data that will be copied into the data store.\r\n            ":"[长度：尺寸]\r\n            指定指向将复制到数据存储中的新数据的指针。\r\n            \r\n","\r\n            Used in GL.Ext.BindImageTexture\r\n            ":"在 GL.Ext.BindImageTexture 中使用\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Return parameters of a buffer object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            缓冲区对象的返回参数\r\n            \r\n","\r\n            Used in GL.GetVertexArrayIndexed\r\n            ":"\r\n            在 GL.GetVertexArrayIndexed 中使用\r\n            \r\n","[requires: v1.0]\r\n            Update a subset of a buffer object's data store\r\n            ":"[要求：v1.0]\r\n            更新缓冲区对象数据存储的子集\r\n            \r\n","A bitmask containing the button state.":"包含按钮状态的位掩码。\r\n","\r\n            Gets the trace of the matrix, the sum of the values along the diagonal.\r\n            ":"\r\n            获取矩阵的轨迹，即沿对角线的值的总和。\r\n            \r\n","\r\n            Original was GL_TESS_CONTROL_SUBROUTINE = 0x92E9\r\n            ":"\r\n            原来是 GL_TESS_CONTROL_SUBROUTINE = 0x92E9\r\n            \r\n","Specify the x coordinates, which are the top-left outside corner of the window's borders and are relative to the inside of the parent window's borders.":"指定 x 坐标，它是窗口边框的左上外角并且相对于父窗口边框的内侧。\r\n","The scancode to check.":"要检查的扫描码。\r\n","\r\n            Original was GL_MULTISAMPLE_EXT = 0x809D\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_EXT = 0x809D\r\n            \r\n","\r\n            Original was GL_TEXTURE_1D = 0x0DE0\r\n            ":"\r\n            原来是 GL_TEXTURE_1D = 0x0DE0\r\n            \r\n","\r\n            Original was GL_OR_REVERSE = 0x150B\r\n            ":"\r\n            原来是 GL_OR_REVERSE = 0x150B\r\n            \r\n","\r\n            Original was GL_SEPARABLE_2D = 0x8012\r\n            ":"\r\n            原来是 GL_SEPARABLE_2D = 0x8012\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667\r\n            \r\n"," \r\n            Specify the  and  zoom factors for pixel write operations.\r\n            ":" \r\n            指定像素写入操作的缩放因子。\r\n            \r\n","\r\n            Original was GL_OES_stencil1 = 1\r\n            ":"\r\n            原来是 GL_OES_stencil1 = 1\r\n            \r\n","The thirtysecond button of the JoystickDevice.":"JoystickDevice 的第 30 个按钮。\r\n"," \r\n            Specifies the location of the uniform variable to be modified.\r\n            ":" \r\n            指定要修改的统一变量的位置。\r\n            \r\n","\r\n            Used in GL.NV.BindVideoCaptureStreamBuffer, GL.NV.BindVideoCaptureStreamTexture and 3 other functions\r\n            ":"\r\n            用于GL.NV.BindVideoCaptureStreamBuffer、GL.NV.BindVideoCaptureStreamTexture等3个函数\r\n            \r\n","\r\n            Original was GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB\r\n            ":"\r\n            原来是 GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB\r\n            \r\n","\r\n            Windows NT/2000/XP: If the window is being created from a dialog template,\r\n            this member is the address of a SHORT value that specifies the size, in bytes,\r\n            of the window creation data. The value is immediately followed by the creation data.\r\n            ":"\r\n            Windows NT/2000/XP：如果窗口是从对话框模板创建的，\r\n            该成员是指定大小的 SHORT 值的地址，以字节为单位，\r\n            窗口创建数据。该值紧跟创建数据。\r\n            \r\n","Single scale factor for the x, y, and z axes.":"x、y 和 z 轴的单一比例因子。\r\n","\r\n            Original was GL_BGR_INTEGER_EXT = 0x8D9A\r\n            ":"\r\n            原来是 GL_BGR_INTEGER_EXT = 0x8D9A\r\n            \r\n","Second item of the fourth row of the matrix.":"矩阵第四行的第二项。\r\n","[requires: v1.1][deprecated: v3.2]\r\n            Set texture residence priority\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            设置纹理驻留优先级\r\n            \r\n"," \r\n            The minmax table whose parameters are to be set. Must be Minmax.\r\n            ":" \r\n            待设置参数的minmax表。必须是极小极大。\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6\r\n            \r\n"," \r\n            Specifies the number of query objects to be deleted.\r\n            ":" \r\n            指定要删除的查询对象的数量。\r\n            \r\n","\r\n            Original was GL_LINEAR = 0X2601\r\n            ":"原来是 GL_LINEAR = 0X2601\r\n            \r\n","\r\n            Original was GL_COLOR_ALPHA_PAIRING_ATI = 0x8975\r\n            ":"\r\n            原来是 GL_COLOR_ALPHA_PAIRING_ATI = 0x8975\r\n            \r\n","[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]\r\n            Query the location of a named resource within a program\r\n            ":"[要求：v4.3 或 ARB_program_interface_query|VERSION_4_3]\r\n            查询命名资源在程序中的位置\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Set the display-list base for glCallLists\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            为 glCallLists 设置显示列表基础\r\n            \r\n"," \r\n            Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.\r\n            ":"指定纹理绑定到的活动纹理单元的目标。必须是 Texture2D 或 TextureCubeMap。\r\n            \r\n","[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]\r\n            Delete vertex array objects\r\n            ":"[要求：v3.0 或 ARB_vertex_array_object|VERSION_3_0]\r\n            删除顶点数组对象\r\n            \r\n","\r\n            Original was GL_DUAL_INTENSITY16_SGIS = 0x811B\r\n            ":"\r\n            原来是 GL_DUAL_INTENSITY16_SGIS = 0x811B\r\n            \r\n"," \r\n            The number of work groups to be launched in the Y dimension.\r\n            ":" \r\n            Y 维度中要启动的工作组的数量。\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_HINT_PGI = 0x1A22D\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_HINT_PGI = 0x1A22D\r\n            \r\n"," \r\n            Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.\r\n            ":"指示要清除的缓冲区的掩码的按位或。这三个掩码是 ColorBufferBit、DepthBufferBit 和 StencilBufferBit。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT7_NV = 0x8CE7\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT7_NV = 0x8CE7\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Creates and initializes a buffer object's data store\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            创建并初始化缓冲区对象的数据存储\r\n            \r\n","\r\n            Original was GL_PACK_SWAP_BYTES = 0x0D00\r\n            ":"\r\n            原来是 GL_PACK_SWAP_BYTES = 0x0D00\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT5 = 0x8CE5\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT5 = 0x8CE5\r\n            \r\n","\r\n            Original was GL_BlendSrcAlpha = 0X80cb\r\n            ":"原来是 GL_BlendSrcAlpha = 0X80cb\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A\r\n            \r\n","[length: 4] \r\n            Specify the , , , and  object coordinates (if present) for the raster position.\r\n            ":"[长度：4]\r\n            为光栅位置指定 、 、 和对象坐标（如果存在）。\r\n            \r\n","\r\n            Displays the window in its current size and position. This value is similar to SW_SHOW, except the window is not activated.\r\n            ":"\r\n            以当前大小和位置显示窗口。该值与 SW_SHOW 类似，只是窗口未激活。\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_3 = 0x0DB7\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_3 = 0x0DB7\r\n            \r\n"," \r\n            Specifies the target texture. Must be Texture3D or Texture2DArray.\r\n            ":" \r\n            指定目标纹理。必须是 Texture3D 或 Texture2DArray。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517\r\n            \r\n","\r\n            Original was GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643\r\n            ":"\r\n            原来是 GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Determine if a name corresponds to a transform feedback object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            确定名称是否对应于变换反馈对象\r\n            \r\n"," \r\n            The internal format with which the data will be stored in the buffer object.\r\n            ":" \r\n            数据将存储在缓冲区对象中的内部格式。\r\n            \r\n","\r\n            Original was GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49\r\n            \r\n","\r\n            Original was GL_FACTOR_ALPHA_MODULATE_IMG = 0x8C07\r\n            ":"\r\n            原来是 GL_FACTOR_ALPHA_MODULATE_IMG = 0x8C07\r\n            \r\n","The fourteenth button of the JoystickDevice.":"JoystickDevice 的第十四个按钮。\r\n","\r\n            Original was GL_PROGRAM_BINARY_LENGTH_OES = 0x8741\r\n            ":"\r\n            原来是 GL_PROGRAM_BINARY_LENGTH_OES = 0x8741\r\n            \r\n","\r\n            \\internal\r\n            ":"\r\n            \\内部的\r\n            \r\n","\r\n            Original was GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160\r\n            ":"\r\n            原来是 GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160\r\n            \r\n"," has\r\n            a Y button.\r\n            ":" 有\r\n            一个 Y 按钮。\r\n            \r\n","\r\n            Original was GL_COUNT_DOWN_NV = 0x9089\r\n            ":"\r\n            原来是 GL_COUNT_DOWN_NV = 0x9089\r\n            \r\n","[requires: v1.5]\r\n            Determine if a name corresponds to a buffer object\r\n            ":"[要求：v1.5]\r\n            确定名称是否对应于缓冲区对象\r\n            \r\n","\r\n            Convert this instance to an axis-angle representation.\r\n            ":"\r\n            将此实例转换为轴角表示。\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER15_NV = 0x8834\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER15_NV = 0x8834\r\n            \r\n","\r\n            Original was GL_RGBA32UI = 0x8D70\r\n            ":"\r\n            原来是 GL_RGBA32UI = 0x8D70\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Attach a single layer of a texture to a framebuffer\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            将单层纹理附加到帧缓冲区\r\n            \r\n","\r\n            Original was GL_QUERY_WAIT_NV = 0x8E13\r\n            ":"\r\n            原来是 GL_QUERY_WAIT_NV = 0x8E13\r\n            \r\n","[requires: v3.0]\r\n            Specify the value of a uniform variable for the current program object\r\n            ":"[要求：v3.0]\r\n            为当前程序对象指定统一变量的值\r\n            \r\n","\r\n            Constructs a new X11WindowInfo class from the specified window handle and parent.\r\n            ":"\r\n            从指定的窗口句柄和父级构造一个新的 X11WindowInfo 类。\r\n            \r\n"," \r\n            Specifies the number of components per color. Must be 3.\r\n            ":" \r\n            指定每种颜色的分量数。必须是 3。\r\n            \r\n","\r\n            Original was GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361\r\n            ":"\r\n            原来是 GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361\r\n            \r\n","\r\n            Original was GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175\r\n            ":"\r\n            原来是 GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175\r\n            \r\n","\r\n            Original was GL_3DC_XY_AMD = 0x87FA\r\n            ":"\r\n            原来是 GL_3DC_XY_AMD = 0x87FA\r\n            \r\n","\r\n            Used in GL.FenceSync, GL.GetInteger64 and 1 other function\r\n            ":"\r\n            用于 GL.FenceSync、GL.GetInteger64 和其他 1 个函数\r\n            \r\n","\r\n            Specifies a single-valued fog parameter. GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, and GL_FOG_COORD_SRC are accepted.\r\n            ":"\r\n            指定单值雾参数。接受 GL_FOG_MODE、GL_FOG_DENSITY、GL_FOG_START、GL_FOG_END、GL_FOG_INDEX 和 GL_FOG_COORD_SRC。\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Delete named query objects\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            删除命名查询对象\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x8E5A\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x8E5A\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000\r\n            \r\n","Accumulator buffer bits.":"累加器缓冲位。\r\n","\r\n            Original was GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9\r\n            ":"\r\n            原来是 GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F\r\n            \r\n","\r\n            Opens a game controller for use.\r\n            ":"\r\n            打开游戏控制器以供使用。\r\n            \r\n","\r\n            Original was GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196\r\n            ":"\r\n            原来是 GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196\r\n            \r\n","\r\n            True if both left is not equal to right; false otherwise.\r\n            ":"\r\n            如果左不等于右则为真；否则为假。\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1\r\n            \r\n","[requires: v2.0]\r\n            Links a program object\r\n            ":"[要求：v2.0]\r\n            链接程序对象\r\n            \r\n"," \r\n            The width of the multisample texture's image, in texels.\r\n            ":" \r\n            多重采样纹理图像的宽度，以纹素为单位。\r\n            \r\n","\r\n            Original was GL_PIXEL_TEX_GEN_SGIX = 0x8139\r\n            ":"\r\n            原来是 GL_PIXEL_TEX_GEN_SGIX = 0x8139\r\n            \r\n","\r\n            Original was GL_FLOAT_RGBA32_NV = 0x888B\r\n            ":"\r\n            原来是 GL_FLOAT_RGBA32_NV = 0x888B\r\n            \r\n","\r\n            Original was GL_PATH_STROKE_MASK_NV = 0x9084\r\n            ":"\r\n            原来是 GL_PATH_STROKE_MASK_NV = 0x9084\r\n            \r\n","\r\n            Original was GL_CIRCULAR_CW_ARC_TO_NV = 0xFA\r\n            ":"\r\n            原来是 GL_CIRCULAR_CW_ARC_TO_NV = 0xFA\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_VARYING_COMPONENTS = 0x8DDD\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_VARYING_COMPONENTS = 0x8DDD\r\n            \r\n","A System.Single in the range [-1, 1].":"[-1, 1] 范围内的 System.Single。\r\n","[requires: IMG_multisampled_render_to_texture]\r\n            Establish data storage, format, dimensions and sample count of a renderbuffer object's image\r\n            ":"[需要：IMG_multisampled_render_to_texture]\r\n            建立渲染缓冲区对象图像的数据存储、格式、尺寸和样本计数\r\n            \r\n","\r\n            Used in GL.Arb.GetProgramEnvParameter, GL.Arb.GetProgramLocalParameter and 1 other function\r\n            ":"\r\n            用于 GL.Arb.GetProgramEnvParameter、GL.Arb.GetProgramLocalParameter 和 1 个其他函数\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Set the RGB blend equation and the alpha blend equation separately\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            分别设置RGB混合方程和alpha混合方程\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Returns the location of a uniform variable\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回统一变量的位置\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Retrieve the name of an active uniform block\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            检索活动统一块的名称\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA_SNORM = 0x9012\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA_SNORM = 0x9012\r\n            \r\n","[requires: v1.5]\r\n            Delete named buffer objects\r\n            ":"[要求：v1.5]\r\n            删除命名缓冲区对象\r\n            \r\n","\r\n            Original was GL_Cw = 0X0900\r\n            ":"\r\n            原来是 GL_Cw = 0X0900\r\n            \r\n","[requires: v1.3]\r\n            Specify a two-dimensional texture subimage in a compressed format\r\n            ":"[要求：v1.3]\r\n            以压缩格式指定二维纹理子图像\r\n            \r\n"," \r\n            Specifies the texel offset within the texture array.\r\n            ":" \r\n            指定纹理数组中的纹素偏移。\r\n            \r\n","[length: programObj,location] \r\n            Returns the value of the specified uniform variable.\r\n            ":"[长度：programObj，位置]\r\n            返回指定统一变量的值。\r\n            \r\n","[requires: ARB_vertex_buffer_object]":"[需要：ARB_vertex_buffer_object]\r\n","\r\n            Original was GL_DRAW_BUFFER9_ARB = 0x882E\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER9_ARB = 0x882E\r\n            \r\n","\r\n            Original was GL_LUMINANCE12_EXT = 0x8041\r\n            ":"\r\n            原来是 GL_LUMINANCE12_EXT = 0x8041\r\n            \r\n","\r\n            Used in GL.BlitFramebuffer, GL.BlitNamedFramebuffer\r\n            ":"\r\n            用于GL.BlitFramebuffer、GL.BlitNamedFramebuffer\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7\r\n            \r\n","\r\n            Original was GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF\r\n            ":"\r\n            原来是 GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF\r\n            \r\n","[requires: v3.2 or ARB_sync|VERSION_3_2]\r\n            Determine if a name corresponds to a sync object\r\n            ":"[要求：v3.2 或 ARB_sync|VERSION_3_2]\r\n            确定名称是否对应于同步对象\r\n            \r\n","\r\n            Original was GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A\r\n            ":"\r\n            原来是 GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD\r\n            \r\n","[requires: ARB_draw_buffers]\r\n            Specifies a list of color buffers to be drawn into\r\n            ":"[需要：ARB_draw_buffers]\r\n            指定要绘制到的颜色缓冲区列表\r\n            \r\n","[requires: v1.1][deprecated: v3.2]\r\n            Define an array of colors\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            定义颜色数组\r\n            \r\n","\r\n            Used in GL.PushClientAttrib, GL.Ext.ClientAttribDefault and 1 other function\r\n            ":"\r\n            用于 GL.PushClientAttrib、GL.Ext.ClientAttribDefault 和 1 个其他函数\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087\r\n            \r\n","\r\n            Original was GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D\r\n            \r\n","\r\n            Original was GL_LUMINANCE12_ALPHA12 = 0x8047\r\n            ":"\r\n            原来是 GL_LUMINANCE12_ALPHA12 = 0x8047\r\n            \r\n","\r\n            Original was GL_QUERY_RESULT_EXT = 0x8866\r\n            ":"\r\n            原来是 GL_QUERY_RESULT_EXT = 0x8866\r\n            \r\n","\r\n            Original was GL_ACTIVE_VARYINGS_NV = 0x8C81\r\n            ":"\r\n            原来是 GL_ACTIVE_VARYINGS_NV = 0x8C81\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 0x93E9\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 0x93E9\r\n            \r\n","\r\n            Original was GL_MODULATE_SIGNED_ADD_ATI = 0x8745\r\n            ":"\r\n            原来是 GL_MODULATE_SIGNED_ADD_ATI = 0x8745\r\n            \r\n","\r\n            Original was GL_LOCAL_EXT = 0x87C4\r\n            ":"\r\n            原来是 GL_LOCAL_EXT = 0x87C4\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT = 0x1902\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT = 0x1902\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_LOW_KHR = 0x9148\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_LOW_KHR = 0x9148\r\n            \r\n","\r\n            Original was GL_HI_SCALE_NV = 0x870E\r\n            ":"\r\n            原来是 GL_HI_SCALE_NV = 0x870E\r\n            \r\n"," structure that contains the location of this window on the desktop.\r\n            ":" 包含此窗口在桌面上的位置的结构。\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C\r\n            \r\n","\r\n            Original was GL_ALPHA8_SNORM = 0x9014\r\n            ":"\r\n            原来是 GL_ALPHA8_SNORM = 0x9014\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF\r\n            \r\n","\r\n            Original was GL_V2F = 0x2A20\r\n            ":"\r\n            原来是 GL_V2F = 0x2A20\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Copy a two-dimensional texture subimage\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            复制二维纹理子图像\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E\r\n            \r\n","\r\n            Original was GL_TEXTURE_DS_SIZE_NV = 0x871D\r\n            ":"\r\n            原来是 GL_TEXTURE_DS_SIZE_NV = 0x871D\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_ATTRIBS = 0x88AF\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_ATTRIBS = 0x88AF\r\n            \r\n","\r\n            Original was GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806\r\n            ":"\r\n            原来是 GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806\r\n            \r\n","\r\n            Original was GL_GEOMETRY_PROGRAM_NV = 0x8C26\r\n            ":"\r\n            原来是 GL_GEOMETRY_PROGRAM_NV = 0x8C26\r\n            \r\n"," containing the cursor,\r\n            typically between 96 and 120 DPI.\r\n            ":" 包含光标，\r\n            通常在 96 到 120 DPI 之间。\r\n            \r\n","\r\n            Original was GL_RGBA_S3TC = 0x83A2\r\n            ":"\r\n            原来是 GL_RGBA_S3TC = 0x83A2\r\n            \r\n","\r\n            Used in GL.NV.ProgramVertexLimit\r\n            ":"\r\n            在 GL.NV.ProgramVertexLimit 中使用\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_OTHER = 0x8251\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_OTHER = 0x8251\r\n            \r\n","\r\n            Original was GL_PROGRAM_NATIVE_ADDRESS_REGISTERS = 0x88B2\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_ADDRESS_REGISTERS = 0x88B2\r\n            \r\n","[requires: EXT_index_material]":"[需要：EXT_index_material]\r\n","\r\n            Original was GL_SOURCE0_ALPHA_ARB = 0x8588\r\n            ":"\r\n            原来是 GL_SOURCE0_ALPHA_ARB = 0x8588\r\n            \r\n","\r\n            Return the address of the specified pointer\r\n            ":"\r\n            返回指定指针的地址\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX1_EXT = 0x8D46\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX1_EXT = 0x8D46\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677\r\n            \r\n","[length: stride]":"[长度：步幅]\r\n","\r\n            Original was GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3\r\n            ":"\r\n            原来是 GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_4 = 0x0DB8\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_4 = 0x0DB8\r\n            \r\n","\r\n            Original was GL_HARDMIX_NV = 0x92A9\r\n            ":"\r\n            原来是 GL_HARDMIX_NV = 0x92A9\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Determine if a name corresponds to a buffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            确定名称是否对应于缓冲区对象\r\n            \r\n","\r\n            Original was GL_DEPTH_EXT = 0x1801\r\n            ":"\r\n            原来是 GL_DEPTH_EXT = 0x1801\r\n            \r\n"," \r\n            Specifies the height of the pixel rectangle to invalidate.\r\n            ":"指定要失效的像素矩形的高度。\r\n            \r\n","\r\n            Drives GameWindow on X11.\r\n            This class supports OpenTK, and is not intended for use by OpenTK programs.\r\n            ":"\r\n            在 X11 上驱动 GameWindow。\r\n            此类支持 OpenTK，并不打算供 OpenTK 程序使用。\r\n            \r\n","\r\n            value to use in restoring planes\r\n            ":"\r\n            用于恢复平面的值\r\n            \r\n","[requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]\r\n            Render multiple sets of primitives from array data, taking parameters from memory\r\n            ":"[要求：v4.3 或 ARB_multi_draw_indirect|VERSION_4_3]\r\n            从数组数据中渲染多组图元，从内存中获取参数\r\n            \r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY = 0x8079\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY = 0x8079\r\n            \r\n","[length: format,type,width,height,depth]":"[长度：格式、类型、宽度、高度、深度]\r\n","\r\n            Original was GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD\r\n            ":"\r\n            原来是 GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD\r\n            \r\n","\r\n            Original was GL_INT16_NV = 0x8FE4\r\n            ":"\r\n            原来是 GL_INT16_NV = 0x8FE4\r\n            \r\n","Reference to the surface.":"参考表面。\r\n","[requires: ARB_geometry_shader4]":"[需要：ARB_geometry_shader4]\r\n","The x component of the Vector4.":"Vector4 的 x 分量。\r\n","\r\n            Original was GL_CLIP_PLANE5 = 0x3005\r\n            ":"\r\n            原来是 GL_CLIP_PLANE5 = 0x3005\r\n            \r\n","\r\n            Original was GL_TEXTURE_OBJECT_VALID_QCOM = 0x8BDB\r\n            ":"\r\n            原来是 GL_TEXTURE_OBJECT_VALID_QCOM = 0x8BDB\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B\r\n            ":"\r\n            原来是 GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B\r\n            \r\n","XSelectInput() can generate a BadWindow error.":"XSelectInput() 会产生 BadWindow 错误。\r\n","\r\n            Original was GL_VERTEX_STREAM1_ATI = 0x876D\r\n            ":"\r\n            原来是 GL_VERTEX_STREAM1_ATI = 0x876D\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT1_NV = 0x8CE1\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT1_NV = 0x8CE1\r\n            \r\n"," \r\n            Specifies a pointer to a 32  times  32 stipple pattern that will be unpacked from memory in the same way that glDrawPixels unpacks pixels.\r\n            ":" \r\n            指定一个指向 32 乘以 32 点画图案的指针，该图案将以与 glDrawPixels 解包像素相同的方式从内存中解包。\r\n            \r\n","\r\n            Used in GL.DrawBuffer, GL.NamedFramebufferDrawBuffer\r\n            ":"\r\n            在GL.DrawBuffer、GL.NamedFramebufferDrawBuffer中使用\r\n            \r\n","\r\n            Original was GL_EXT_texture_filter_anisotropic = 1\r\n            ":"\r\n            原来是 GL_EXT_texture_filter_anisotropic = 1\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER2_ATI = 0x8827\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER2_ATI = 0x8827\r\n            \r\n","\r\n            A WM_MOUSEMOVE message or mouse-button message (WM_LBUTTONUP, WM_RBUTTONDOWN, and so on).\r\n            ":"\r\n            WM_MOUSEMOVE 消息或鼠标按钮消息（WM_LBUTTONUP、WM_RBUTTONDOWN 等）。\r\n            \r\n"," \r\n            Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. Bit zero is used first; the default pattern is all 1's.\r\n            ":" \r\n            指定一个 16 位整数，其位模式确定在光栅化线条时将绘制线条的哪些片段。首先使用位零；默认模式是全 1。\r\n            \r\n"," \r\n            The offset into the buffer object currently bound to the DispatchIndirectBuffer buffer target at which the dispatch parameters are stored.\r\n            ":" \r\n            当前绑定到存储调度参数的 DispatchIndirectBuffer 缓冲区目标的缓冲区对象的偏移量。\r\n            \r\n","\r\n            Original was GL_STREAM_COPY_ARB = 0x88E2\r\n            ":"\r\n            原来是 GL_STREAM_COPY_ARB = 0x88E2\r\n            \r\n","\r\n            Original was GL_INDEX_OFFSET = 0x0D13\r\n            ":"\r\n            原来是 GL_INDEX_OFFSET = 0x0D13\r\n            \r\n","\r\n            Used in GL.GetQueryObject, GL.Ext.GetQueryObject\r\n            ":"\r\n            用于 GL.GetQueryObject, GL.Ext.GetQueryObject\r\n            \r\n","\r\n            Original was GL_SAMPLE_BUFFERS = 0x80A8\r\n            ":"\r\n            原来是 GL_SAMPLE_BUFFERS = 0x80A8\r\n            \r\n","[requires: v1.0]\r\n            Replace the current matrix with the specified matrix\r\n            ":"[要求：v1.0]\r\n            用指定矩阵替换当前矩阵\r\n            \r\n","\r\n            Original was GL_MODELVIEW0_ARB = 0x1700\r\n            ":"\r\n            原来是 GL_MODELVIEW0_ARB = 0x1700\r\n            \r\n","\r\n            Microsoft Windows XP Service Pack 1 (SP1): If set, the application command keys are handled. APPKEYS can be specified only if NOLEGACY is specified for a keyboard device.\r\n            ":"\r\n            Microsoft Windows XP Service Pack 1 (SP1)：如果设置，将处理应用程序命令键。仅当为键盘设备指定了 NOLEGACY 时，才能指定 APPKEYS。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT7 = 0x8CE7\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT7 = 0x8CE7\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Set front and back stencil test actions\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            设置前后模板测试动作\r\n            \r\n","\r\n            Original was GL_CURRENT_QUERY_ARB = 0x8865\r\n            ":"\r\n            原来是 GL_CURRENT_QUERY_ARB = 0x8865\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B\r\n            \r\n"," \r\n            Specifies how the red, green, and blue destination blending factors are computed. The initial value is Zero.\r\n            ":" \r\n            指定如何计算红色、绿色和蓝色目标混合因子。初始值为零。\r\n            \r\n","\r\n            one of bit gravity values\r\n            ":"\r\n            比特重力值之一\r\n            \r\n","\r\n            Original was GL_RGB9_E5_EXT = 0x8C3D\r\n            ":"\r\n            原来是 GL_RGB9_E5_EXT = 0x8C3D\r\n            \r\n","\r\n            Original was GL_Texture1 = 0X84c1\r\n            ":"\r\n            原来是 GL_Texture1 = 0X84c1\r\n            \r\n","\r\n            Original was GL_RG = 0x8227\r\n            ":"\r\n            原来是 GL_RG = 0x8227\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_CUBE_MAP_OES = 0x8514\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_CUBE_MAP_OES = 0x8514\r\n            \r\n","\r\n            Original was GL_TEXTURE20 = 0x84D4\r\n            ":"\r\n            原来是 GL_TEXTURE20 = 0x84D4\r\n            \r\n","\r\n            Pointer to an array of RawInputDevice structures for the application.\r\n            ":"\r\n            指向应用程序的 RawInputDevice 结构数组的指针。\r\n            \r\n"," \r\n            Specifies the index of the first viewport whose depth range to update.\r\n            ":" \r\n            指定要更新其深度范围的第一个视口的索引。\r\n            \r\n","An existing KeyboardEventArgs instance to clone.":"要克隆的现有 KeyboardEventArgs 实例。\r\n","\r\n            Used in GL.NV.GetProgramSubroutineParameter, GL.NV.ProgramSubroutineParameters\r\n            ":"\r\n            在GL.NV.GetProgramSubroutineParameter、GL.NV.ProgramSubroutineParameters中使用\r\n            \r\n","[requires: NV_transform_feedback2]\r\n            Reserve transform feedback object names\r\n            ":"[需要：NV_transform_feedback2]\r\n            保留变换反馈对象名称\r\n            \r\n","[length: num]":"[长度：数量]\r\n","\r\n            Original was GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4\r\n            ":"\r\n            原来是 GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4\r\n            \r\n","\r\n            Constructs a new instance with the specified parameters.\r\n            ":"\r\n            构造具有指定参数的新实例。\r\n            \r\n","\r\n            Gets or sets the NativeWindow title.\r\n            ":"\r\n            获取或设置 NativeWindow 标题。\r\n            \r\n","[requires: v1.0]\r\n            Determine if a name corresponds to a buffer object\r\n            ":"[要求：v1.0]\r\n            确定名称是否对应于缓冲区对象\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Generate sampler object names\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            生成采样器对象名称\r\n            \r\n","\r\n            Original was GL_ACTIVE_UNIFORMS = 0x8B86\r\n            ":"\r\n            原来是 GL_ACTIVE_UNIFORMS = 0x8B86\r\n            \r\n","[length: count] \r\n            Specifies an array of pointers to strings containing the source code to be loaded into the shader.\r\n            ":"[长度：计数]\r\n            指定指向包含要加载到着色器中的源代码的字符串的指针数组。\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER11_ARB = 0x8830\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER11_ARB = 0x8830\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER5_EXT = 0x882A\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER5_EXT = 0x882A\r\n            \r\n","\r\n            Original was GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25\r\n            \r\n","\r\n            Returns a System.String that represents the current Matrix4x3.\r\n            ":"\r\n            返回表示当前 Matrix4x3 的 System.String。\r\n            \r\n","\r\n            Original was GL_REG_1_ATI = 0x8922\r\n            ":"\r\n            原来是 GL_REG_1_ATI = 0x8922\r\n            \r\n","[requires: OES_texture_3D]\r\n            Specify a three-dimensional texture image in a compressed format\r\n            ":"[要求：OES_texture_3D]\r\n            以压缩格式指定三维纹理图像\r\n            \r\n","\r\n            Original was GL_TEXTURE_IMAGE_TYPE = 0x8290\r\n            ":"\r\n            原来是 GL_TEXTURE_IMAGE_TYPE = 0x8290\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456\r\n            \r\n","[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]\r\n            Invalidate the content some or all of a framebuffer object's attachments\r\n            ":"[要求：v4.3 或 ARB_invalidate_subdata|VERSION_4_3]\r\n            使帧缓冲区对象附件的部分或全部内容无效\r\n            \r\n","[length: 1] \r\n            Specifies the new value for the current color index.\r\n            ":"[长度：1]\r\n            指定当前颜色索引的新值。\r\n            \r\n","\r\n            Original was GL_SAMPLER_3D_OES = 0x8B5F\r\n            ":"\r\n            原来是 GL_SAMPLER_3D_OES = 0x8B5F\r\n            \r\n","\r\n            Original was GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7\r\n            ":"\r\n            原来是 GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify the clear value for the depth buffer\r\n            ":"[要求：v1.0 和 1.0]\r\n            为深度缓冲区指定清除值\r\n            \r\n","\r\n            Used in GL.VertexArrayAttribFormat, GL.VertexArrayAttribIFormat and 1 other function\r\n            ":"\r\n            用于 GL.VertexArrayAttribFormat、GL.VertexArrayAttribIFormat 和 1 个其他函数\r\n            \r\n","\r\n            Original was GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F\r\n            ":"\r\n            原来是 GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT13_EXT = 0x8CED\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT13_EXT = 0x8CED\r\n            \r\n","\r\n            Original was GL_MAX_CONVOLUTION_WIDTH = 0x801A\r\n            ":"\r\n            原来是 GL_MAX_CONVOLUTION_WIDTH = 0x801A\r\n            \r\n","\r\n            Original was GL_PIXEL_COUNT_NV = 0x8866\r\n            ":"\r\n            原来是 GL_PIXEL_COUNT_NV = 0x8866\r\n            \r\n"," \r\n            Specifies the sampler object whose parameter to modify.\r\n            ":" \r\n            指定要修改其参数的采样器对象。\r\n            \r\n","\r\n            Original was GL_MAX_LAYERS = 0x8281\r\n            ":"\r\n            原来是 GL_MAX_LAYERS = 0x8281\r\n            \r\n","\r\n            Original was GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 0x8916\r\n            ":"\r\n            原来是 GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 0x8916\r\n            \r\n","[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]\r\n            Specify the clear value for the depth buffer\r\n            ":"[要求：v4.1 或 ARB_ES2_compatibility|VERSION_4_1]\r\n            为深度缓冲区指定清除值\r\n            \r\n","[requires: EXT_vertex_array]":"[需要：EXT_vertex_array]\r\n","\r\n            Original was GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C\r\n            \r\n","\r\n            Original was GL_STRICT_LIGHTING_HINT_PGI = 0x1A217\r\n            ":"\r\n            原来是 GL_STRICT_LIGHTING_HINT_PGI = 0x1A217\r\n            \r\n","[requires: NV_draw_instanced]\r\n            Draw multiple instances of a set of elements\r\n            ":"[要求：NV_draw_instanced]\r\n            绘制一组元素的多个实例\r\n            \r\n"," \r\n            Specifies the depth value used when the depth buffer is cleared. The initial value is 1.\r\n            ":" \r\n            指定清除深度缓冲区时使用的深度值。初始值为 1。\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER7_ATI = 0x882C\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER7_ATI = 0x882C\r\n            \r\n","\r\n            Returns a synchronization token unique for the GL class.\r\n            ":"\r\n            返回 GL 类唯一的同步标记。\r\n            \r\n","[requires: APPLE_sync]\r\n            Query the properties of a sync object\r\n            ":"[需要：APPLE_sync]\r\n            查询同步对象的属性\r\n            \r\n","The right arrow key.":"右箭头键。\r\n","\r\n            Original was GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 0x889E\r\n            ":"\r\n            原来是 GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 0x889E\r\n            \r\n","\r\n            Original was GL_RG_SNORM = 0x8F91\r\n            ":"\r\n            原来是 GL_RG_SNORM = 0x8F91\r\n            \r\n","\r\n            Original was GL_OBJECT_TYPE_ARB = 0x8B4E\r\n            ":"\r\n            原来是 GL_OBJECT_TYPE_ARB = 0x8B4E\r\n            \r\n","\r\n            Original was GL_CLAMP_VERTEX_COLOR = 0x891A\r\n            ":"\r\n            原来是 GL_CLAMP_VERTEX_COLOR = 0x891A\r\n            \r\n","\r\n            Used in GL.Arb.BufferPageCommitment\r\n            ":"\r\n            在 GL.Arb.BufferPageCommitment 中使用\r\n            \r\n","\r\n            Original was GL_POINT_DISTANCE_ATTENUATION = 0x8129\r\n            ":"\r\n            原来是 GL_POINT_DISTANCE_ATTENUATION = 0x8129\r\n            \r\n","\r\n            Original was GL_TEXTURE26_ARB = 0x84DA\r\n            ":"\r\n            原来是 GL_TEXTURE26_ARB = 0x84DA\r\n            \r\n","[requires: ANGLE_translated_shader_source]":"[需要：ANGLE_translated_shader_source]\r\n","\r\n            Gets a System.Boolean indicating whether OpenTK is running on the Mono runtime.\r\n            ":"\r\n            获取一个 System.Boolean，指示 OpenTK 是否在 Mono 运行时上运行。\r\n            \r\n"," \r\n            Specifies the shader object to be detached.\r\n            ":" \r\n            指定要分离的着色器对象。\r\n            \r\n","\r\n            The cursor is set only if the new cursor is different from the \r\n            previous cursor; otherwise, the function returns immediately.\r\n            \r\n            The cursor is a shared resource. A window should set the cursor \r\n            shape only when the cursor is in its client area or when the window \r\n            is capturing mouse input. In systems without a mouse, the window \r\n            should restore the previous cursor before the cursor leaves the \r\n            client area or before it relinquishes control to another window.\r\n            \r\n            If your application must set the cursor while it is in a window, \r\n            make sure the class cursor for the specified window's class is set \r\n            to NULL. If the class cursor is not NULL, the system restores the \r\n            class cursor each time the mouse is moved.\r\n            \r\n            The cursor is not shown on the screen if the internal cursor \r\n            display count is less than zero. This occurs if the application \r\n            uses the ShowCursor function to hide the cursor more times than to \r\n            show the cursor.\r\n            ":"\r\n            仅当新光标不同于\r\n            上一个光标；否则，函数立即返回。\r\n            \r\n            游标是共享资源。一个窗口应该设置光标\r\n            仅当光标位于其客户区或窗口时才形状\r\n            正在捕获鼠标输入。在没有鼠标的系统中，窗口\r\n            应该在光标离开之前恢复前一个光标\r\n            客户区或在它放弃对另一个窗口的控制之前。\r\n            \r\n            如果您的应用程序必须在窗口中设置光标，\r\n            确保设置了指定窗口类的类光标\r\n            为空。如果类游标不为 NULL，则系统恢复\r\n            每次移动鼠标时类光标。\r\n            \r\n            光标不显示在屏幕上，如果内部光标\r\n            显示计数小于零。如果应用程序发生这种情况\r\n            使用 ShowCursor 函数隐藏光标的次数多于\r\n            显示光标。\r\n            \r\n","\r\n            Original was GL_ColorAttachment0 = 0X8ce0\r\n            ":"\r\n            原来是 GL_ColorAttachment0 = 0X8ce0\r\n            \r\n","[requires: v4.2 or ARB_base_instance|VERSION_4_2]\r\n            Render multiple instances of a set of primitives from array data with a per-element offset\r\n            ":"[要求：v4.2 或 ARB_base_instance|VERSION_4_2]\r\n            从具有每个元素偏移量的数组数据中渲染一组基元的多个实例\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Define the scissor box\r\n            ":"[要求：v1.0 和 1.0]\r\n            定义剪刀框\r\n            \r\n","\r\n            Retrieve contents of a color lookup table\r\n            ":"\r\n            检索颜色查找表的内容\r\n            \r\n","\r\n            Used in GL.GetSamplerParameter, GL.SamplerParameter\r\n            ":"\r\n            在GL.GetSamplerParameter、GL.SamplerParameter中使用\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6\r\n            ":"原来是 GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662\r\n            \r\n","The secondary backslash key.":"辅助反斜杠键。\r\n"," \r\n            Specifies a bit mask to enable and disable the writing of individual bits in the color index buffers. Initially, the mask is all 1's.\r\n            ":" \r\n            指定位掩码以启用和禁用颜色索引缓冲区中的各个位的写入。最初，掩码全为 1。\r\n            \r\n","\r\n            Original was GL_MODELVIEW10_ARB = 0x872A\r\n            ":"\r\n            原来是 GL_MODELVIEW10_ARB = 0x872A\r\n            \r\n","The eleventh axis of the JoystickDevice.":"JoystickDevice 的第十一个轴。\r\n","\r\n            Original was GL_DUDV_ATI = 0x8779\r\n            ":"\r\n            原来是 GL_DUDV_ATI = 0x8779\r\n            \r\n","\r\n            Original was GL_FONT_UNINTELLIGIBLE_NV = 0x936B\r\n            ":"\r\n            原来是 GL_FONT_UNINTELLIGIBLE_NV = 0x936B\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT8_VEC2_NV = 0x8FED\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT8_VEC2_NV = 0x8FED\r\n            \r\n","[requires: EXT_vertex_array]\r\n            Define an array of colors\r\n            ":"[需要：EXT_vertex_array]\r\n            定义颜色数组\r\n            \r\n","[requires: APPLE_element_array]":"[需要：APPLE_element_array]\r\n","\r\n            Original was GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Specify a three-dimensional texture subimage\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            指定三维纹理子图像\r\n            \r\n","\r\n            Original was GL_SIGNED_LUMINANCE8_NV = 0x8702\r\n            ":"\r\n            原来是 GL_SIGNED_LUMINANCE8_NV = 0x8702\r\n            \r\n","\r\n            Original was GL_QUERY_BY_REGION_WAIT_NV = 0x8E15\r\n            ":"\r\n            原来是 GL_QUERY_BY_REGION_WAIT_NV = 0x8E15\r\n            \r\n"," \r\n            Specifies the index of the viewport whose scissor box to modify.\r\n            ":" \r\n            指定要修改其剪刀框的视口的索引。\r\n            \r\n","\r\n            Original was GL_IUI_N3F_V3F_EXT = 0x81B0\r\n            ":"\r\n            原来是 GL_IUI_N3F_V3F_EXT = 0x81B0\r\n            \r\n","\r\n            Matrix-scalar multiplication\r\n            ":"\r\n            矩阵标量乘法\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_OTHER_ARB = 0x8251\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_OTHER_ARB = 0x8251\r\n            \r\n","Values lower than 0.002 seconds (500Hz) are clamped to 0.0. Values higher than 1.0 seconds (1Hz) are clamped to 1.0.":"低于 0.002 秒 (500Hz) 的值被限制为 0.0。高于 1.0 秒 (1Hz) 的值被限制为 1.0。\r\n","\r\n            Original was GL_GUILTY_CONTEXT_RESET_KHR = 0x8253\r\n            ":"\r\n            原来是 GL_GUILTY_CONTEXT_RESET_KHR = 0x8253\r\n            \r\n","\r\n            Original was GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8\r\n            ":"\r\n            原来是 GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8\r\n            \r\n","[requires: EXT_gpu_shader4]\r\n            Bind a user-defined varying out variable to a fragment shader color number\r\n            ":"[需要：EXT_gpu_shader4]\r\n            将用户定义的 varying out 变量绑定到片段着色器颜色编号\r\n            \r\n","\r\n            Original was GL_INTERLACE_SGIX = 0x8094\r\n            ":"\r\n            原来是 GL_INTERLACE_SGIX = 0x8094\r\n            \r\n","\r\n            Original was GL_TEXTURE_RED_SIZE_EXT = 0x805C\r\n            ":"\r\n            原来是 GL_TEXTURE_RED_SIZE_EXT = 0x805C\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154\r\n            \r\n","\r\n            Windows 2000 and higher only.\r\n            ":"\r\n            仅限 Windows 2000 及更高版本。\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Check the completeness status of a framebuffer\r\n            ":"[需要：EXT_framebuffer_object]\r\n            检查帧缓冲区的完整性状态\r\n            \r\n","\r\n            Microsoft Windows message compatible virtual-key code. For more information, see Virtual-Key Codes.\r\n            ":"\r\n            Microsoft Windows 消息兼容虚拟键码。有关详细信息，请参阅虚拟键代码。\r\n            \r\n","\r\n            Original was GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B\r\n            ":"\r\n            原来是 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B\r\n            \r\n","\r\n            Original was GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34\r\n            ":"\r\n            原来是 GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34\r\n            \r\n","uCode is a scan code and is translated into a virtual-key code that does not distinguish between left- and right-hand keys. If there is no translation, the function returns 0.":"uCode 是一个扫描码，被翻译成一个不区分左右键的虚拟键码。如果没有翻译，函数返回 0。\r\n"," \r\n            Specifies the name of a sampler.\r\n            ":" \r\n            指定采样器的名称。\r\n            \r\n"," \r\n            Specifies the symbolic name of the target texture. Texture2D, Texture2DArray, Texture3D, and TextureCubeMap are accepted.\r\n            ":" \r\n            指定目标纹理的符号名称。接受 Texture2D、Texture2DArray、Texture3D 和 TextureCubeMap。\r\n            \r\n","\r\n            Gets a value indicating the number of led indicators on this KeyboardDevice.\r\n            ":"\r\n            获取一个值，该值指示此 KeyboardDevice 上的 LED 指示灯的数量。\r\n            \r\n","[length: value]":"[长度：值]\r\n","\r\n            Original was GL_FRAME_NV = 0x8E26\r\n            ":"\r\n            原来是 GL_FRAME_NV = 0x8E26\r\n            \r\n"," (K - first_code) * keysyms_per_code_return + N ":" (K - first_code) * keysyms_per_code_return + N\r\n","\r\n            Gets the third column of this matrix.\r\n            ":"\r\n            获取此矩阵的第三列。\r\n            \r\n","\r\n            Used in GL.Amd.StencilOpValue\r\n            ":"\r\n            在 GL.Amd.StencilOpValue 中使用\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D\r\n            \r\n","[requires: v1.0]\r\n            Set the scale and units used to calculate depth values\r\n            ":"[要求：v1.0]\r\n            设置用于计算深度值的比例和单位\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366\r\n            \r\n","\r\n            Original was GL_TRIANGLE_LIST_SUN = 0x81D7\r\n            ":"\r\n            原来是 GL_TRIANGLE_LIST_SUN = 0x81D7\r\n            \r\n","\r\n            Original was GL_FLOAT_VEC3_ARB = 0x8B51\r\n            ":"\r\n            原来是 GL_FLOAT_VEC3_ARB = 0x8B51\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1\r\n            \r\n","\r\n            Original was GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910B\r\n            ":"\r\n            原来是 GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910B\r\n            \r\n","\r\n            Original was GL_DST_OVER_NV = 0x9289\r\n            ":"\r\n            原来是 GL_DST_OVER_NV = 0x9289\r\n            \r\n"," \r\n            Specifies a color buffer. Accepted values are FrontLeft, FrontRight, BackLeft, BackRight, Front, Back, Left, Right, and the constants ColorAttachmenti.\r\n            ":" \r\n            指定颜色缓冲区。可接受的值为 FrontLeft、FrontRight、BackLeft、BackRight、Front、Back、Left、Right 和常量 ColorAttachmenti。\r\n            \r\n","Second row of the matrix":"矩阵的第二行\r\n","Returns an array of bytes that identifies which keys are pressed down. Each bit represents one key of the keyboard.":"返回标识按下哪些键的字节数组。每个位代表键盘的一个键。\r\n","\r\n            Used in GL.Arb.FramebufferTexture, GL.Arb.FramebufferTextureFace and 26 other functions\r\n            ":"\r\n            用于 GL.Arb.FramebufferTexture、GL.Arb.FramebufferTextureFace 和其他 26 个函数\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify a two-dimensional texture image in a compressed format\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            以压缩格式指定二维纹理图像\r\n            \r\n","[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]\r\n            Delete transform feedback objects\r\n            ":"[要求：v4.0 或 ARB_transform_feedback2|VERSION_4_0]\r\n            删除变换反馈对象\r\n            \r\n","\r\n            Defines a unit-length Vector4 that points towards the Y-axis.\r\n            ":"\r\n            定义指向 Y 轴的单位长度 Vector4。\r\n            \r\n","\r\n            Original was GL_MIRRORED_REPEAT_IBM = 0x8370\r\n            ":"\r\n            原来是 GL_MIRRORED_REPEAT_IBM = 0x8370\r\n            \r\n","\r\n            Not used yet.\r\n            Registers the necessary atoms for GameWindow.\r\n            ":"\r\n            还没有使用。\r\n            为 GameWindow 注册必要的原子。\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264\r\n            \r\n","\r\n            Original was GL_SYSTEM_FONT_NAME_NV = 0x9073\r\n            ":"\r\n            原来是 GL_SYSTEM_FONT_NAME_NV = 0x9073\r\n            \r\n","\r\n            Original was GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28\r\n            ":"\r\n            原来是 GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28\r\n            \r\n","\r\n            Original was GL_DEPTH_BUFFER_BIT3_QCOM = 0x00000800\r\n            ":"\r\n            原来是 GL_DEPTH_BUFFER_BIT3_QCOM = 0x00000800\r\n            \r\n","[requires: EXT_color_subtable]\r\n            Respecify a portion of a color table\r\n            ":"[需要：EXT_color_subtable]\r\n            重新指定颜色表的一部分\r\n            \r\n","[length: imageSize] \r\n            Specifies a pointer to the compressed image data in memory.\r\n            ":"[长度：图像大小]\r\n            指定指向内存中压缩图像数据的指针。\r\n            \r\n"," \r\n            Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.\r\n            ":" \r\n            乘以特定于实现的值以创建恒定的深度偏移。初始值为 0。\r\n            \r\n","\r\n            Original was GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A\r\n            ":"\r\n            原来是 GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A\r\n            \r\n","The keypad 0 key.":"小键盘 0 键。\r\n","\r\n            Original was GL_TEXTURE_SWIZZLE_R = 0x8E42\r\n            ":"\r\n            原来是 GL_TEXTURE_SWIZZLE_R = 0x8E42\r\n            \r\n","\r\n            Gets the current state of a button on a game controller.\r\n            ":"\r\n            获取游戏控制器上按钮的当前状态。\r\n            \r\n","\r\n            Original was GL_QUERY_BUFFER_BINDING = 0x9193\r\n            ":"\r\n            原来是 GL_QUERY_BUFFER_BINDING = 0x9193\r\n            \r\n","\r\n            Original was GL_SAMPLE_BUFFERS_3DFX = 0x86B3\r\n            ":"\r\n            原来是 GL_SAMPLE_BUFFERS_3DFX = 0x86B3\r\n            \r\n","[length: maxLength]":"[长度：最大长度]\r\n","\r\n            Original was GL_TEXTURE_LOD_BIAS = 0x8501\r\n            ":"\r\n            原来是 GL_TEXTURE_LOD_BIAS = 0x8501\r\n            \r\n","\r\n            Original was GL_EYE_LINE_SGIS = 0x81F6\r\n            ":"\r\n            原来是 GL_EYE_LINE_SGIS = 0x81F6\r\n            \r\n","\r\n            Original was GL_FRACTIONAL_ODD_EXT = 0x8E7B\r\n            ":"\r\n            原来是 GL_FRACTIONAL_ODD_EXT = 0x8E7B\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Create and initialize a buffer object's data store\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            创建并初始化缓冲区对象的数据存储\r\n            \r\n"," \r\n            The new value for the instance step rate to apply.\r\n            ":" \r\n            要应用的实例步进速率的新值。\r\n            \r\n","Multiply this instance by a scalar.":"将此实例乘以标量。\r\n","\r\n            Original was GL_DRAW_BUFFER4_ATI = 0x8829\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER4_ATI = 0x8829\r\n            \r\n","SDL.GetError":"SDL.Get错误\r\n","\r\n            Defines available JoystickDevice buttons.\r\n            ":"\r\n            定义可用的 JoystickDevice 按钮。\r\n            \r\n","\r\n            Occurs when the window is about to close.\r\n            ":"\r\n            在窗口即将关闭时发生。\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_2D = 0x8011\r\n            ":"\r\n            原来是 GL_CONVOLUTION_2D = 0x8011\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Determine if a name corresponds to a renderbuffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            确定名称是否对应于渲染缓冲区对象\r\n            \r\n","\r\n            The y-coordinate of a cursor's hot spot. If this structure defines \r\n            an icon, the hot spot is always in the center of the icon, and \r\n            this member is ignored.\r\n            ":"\r\n            光标热点的 y 坐标。如果这个结构定义\r\n            一个图标，热点总是在图标的中心，并且\r\n            该成员被忽略。\r\n            \r\n","\r\n            Original was GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766\r\n            ":"\r\n            原来是 GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766\r\n            \r\n","\r\n            Original was GL_ALWAYS_FAST_HINT_PGI = 0x1A20C\r\n            ":"\r\n            原来是 GL_ALWAYS_FAST_HINT_PGI = 0x1A20C\r\n            \r\n","The Vector2 to copy components from.":"要从中复制组件的 Vector2。\r\n","\r\n            Original was GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A\r\n            ":"\r\n            原来是 GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A\r\n            \r\n","\r\n            Original was GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD\r\n            ":"\r\n            原来是 GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD\r\n            \r\n","\r\n            Original was GL_IMG_read_format = 1\r\n            ":"\r\n            原来是 GL_IMG_read_format = 1\r\n            \r\n"," \r\n            Specifies the location of the uniform variable to be queried.\r\n            ":" \r\n            指定要查询的统一变量的位置。\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Compile a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            编译着色器对象\r\n            \r\n","\r\n            Original was GL_CURRENT_MATRIX_ARB = 0x8641\r\n            ":"\r\n            原来是 GL_CURRENT_MATRIX_ARB = 0x8641\r\n            \r\n","\r\n            Used in GL.IndexPointer, GL.Ext.IndexPointer and 2 other functions\r\n            ":"\r\n            用于 GL.IndexPointer、GL.Ext.IndexPointer 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_DEPTH_RENDERABLE = 0x8287\r\n            ":"\r\n            原来是 GL_DEPTH_RENDERABLE = 0x8287\r\n            \r\n","\r\n            Original was GL_SHADER_KHR = 0x82E1\r\n            ":"\r\n            原来是 GL_SHADER_KHR = 0x82E1\r\n            \r\n","[requires: NV_vertex_program]":"[要求：NV_vertex_program]\r\n","\r\n            Original was GL_NORMAL_MAP_EXT = 0x8511\r\n            ":"\r\n            原来是 GL_NORMAL_MAP_EXT = 0x8511\r\n            \r\n","\r\n            Original was GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B\r\n            ":"\r\n            原来是 GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B\r\n            \r\n","\r\n            Original was GL_REG_7_ATI = 0x8928\r\n            ":"\r\n            原来是 GL_REG_7_ATI = 0x8928\r\n            \r\n","\r\n            Gets the determinant of this matrix.\r\n            ":"\r\n            获取此矩阵的行列式。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD\r\n            \r\n","\r\n            Original was GL_QUAD_INTENSITY4_SGIS = 0x8122\r\n            ":"\r\n            原来是 GL_QUAD_INTENSITY4_SGIS = 0x8122\r\n            \r\n","\r\n            Original was GL_BGR_INTEGER = 0x8D9A\r\n            ":"\r\n            原来是 GL_BGR_INTEGER = 0x8D9A\r\n            \r\n","\r\n            The number of elements in the pixel array referenced by column. (This is the height of the separable filter kernel.)\r\n            ":"\r\n            列引用的像素数组中的元素数。 （这是可分离滤波器内核的高度。）\r\n            \r\n","\r\n            Original was GL_STENCIL_BACK_FUNC_ATI = 0x8800\r\n            ":"\r\n            原来是 GL_STENCIL_BACK_FUNC_ATI = 0x8800\r\n            \r\n","\r\n            Original was GL_MULTIPLY_KHR = 0x9294\r\n            ":"\r\n            原来是 GL_MULTIPLY_KHR = 0x9294\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248\r\n            \r\n"," \r\n            Specifies the size of buffer.\r\n            ":" \r\n            指定缓冲区的大小。\r\n            \r\n","\r\n            Used in GL.GetTexEnv, GL.TexEnv and 2 other functions\r\n            ":"\r\n            用于 GL.GetTexEnv、GL.TexEnv 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_Q = 0x2003\r\n            ":"\r\n            原来是 GL_Q = 0x2003\r\n            \r\n","The mouse button for the event.":"事件的鼠标按钮。\r\n","\r\n            Original was GL_INCR_WRAP_EXT = 0x8507\r\n            ":"\r\n            原来是 GL_INCR_WRAP_EXT = 0x8507\r\n            \r\n"," \r\n            The y coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.\r\n            ":" \r\n            要传输到颜色表的像素矩形左下角的 y 坐标。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Set pixel transfer modes\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            设置像素传输模式\r\n            \r\n","\r\n            Original was GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D\r\n            ":"\r\n            原来是 GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_SIZE_EXT = 0x807A\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_SIZE_EXT = 0x807A\r\n            \r\n","\r\n            Original was GL_OPERAND2_RGB = 0x8592\r\n            ":"\r\n            原来是 GL_OPERAND2_RGB = 0x8592\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = 0x93C2\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = 0x93C2\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT10 = 0x8CEA\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT10 = 0x8CEA\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Establish data storage, format and dimensions of a renderbuffer object's image\r\n            ":"[需要：EXT_framebuffer_object]\r\n            建立渲染缓冲区对象图像的数据存储、格式和尺寸\r\n            \r\n","\r\n            Original was GL_Fixed = 0X140c\r\n            ":"\r\n            原来是 GL_Fixed = 0X140c\r\n            \r\n","\r\n            Used in GL.GetRenderbufferParameter\r\n            ":"在 GL.GetRenderbufferParameter 中使用\r\n            \r\n","\r\n            Original was GL_OES_query_matrix = 1\r\n            ":"\r\n            原来是 GL_OES_query_matrix = 1\r\n            \r\n","\r\n            Gets or sets the value at row 1, column 3 of this instance.\r\n            ":"\r\n            获取或设置此实例第 1 行第 3 列的值。\r\n            \r\n","\r\n            Original was GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5\r\n            ":"\r\n            原来是 GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5\r\n            \r\n","\r\n            Original was GL_TEXTURE_DEPTH_TYPE = 0x8C16\r\n            ":"\r\n            原来是 GL_TEXTURE_DEPTH_TYPE = 0x8C16\r\n            \r\n","\r\n            Specifies the style for the new window.\r\n            ":"指定新窗口的样式。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA\r\n            \r\n","\r\n            Control the reporting of debug messages in a debug context\r\n            ":"\r\n            在调试上下文中控制调试消息的报告\r\n            \r\n","\r\n            Original was GL_ShaderCompiler = 0X8dfa\r\n            ":"\r\n            原来是 GL_ShaderCompiler = 0X8dfa\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 0x90D9\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 0x90D9\r\n            \r\n","\r\n            Original was GL_TESS_EVALUATION_SHADER = 0x8E87\r\n            ":"\r\n            原来是 GL_TESS_EVALUATION_SHADER = 0x8E87\r\n            \r\n","[length: 4] \r\n            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.\r\n            ":"[长度：4]\r\n            指定目标纹理单元的 s、t、r 和 q 纹理坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n","\r\n            Original was GL_SAMPLER_CUBE_ARB = 0x8B60\r\n            ":"\r\n            原来是 GL_SAMPLER_CUBE_ARB = 0x8B60\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2\r\n            \r\n"," \r\n            Specifies the handle of the program containing the uniform variable to be modified.\r\n            ":" \r\n            指定包含要修改的统一变量的程序的句柄。\r\n            \r\n","[requires: ARB_shader_objects]\r\n            Returns information about an active uniform variable for the specified program object\r\n            ":"[需要：ARB_shader_objects]\r\n            返回有关指定程序对象的活动统一变量的信息\r\n            \r\n","\r\n            Original was GL_TextureCubeMapPositiveY = 0X8517\r\n            ":"\r\n            原来是 GL_TextureCubeMapPositiveY = 0X8517\r\n            \r\n","\r\n            Original was GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354\r\n            ":"\r\n            原来是 GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C\r\n            \r\n","\r\n            Original was GL_BUFFER_SIZE_ARB = 0x8764\r\n            ":"\r\n            原来是 GL_BUFFER_SIZE_ARB = 0x8764\r\n            \r\n","\r\n            Gets a System.Drawing.Rectangle that contains the bounds of this display device.\r\n            ":"\r\n            获取包含此显示设备边界的 System.Drawing.Rectangle。\r\n            \r\n","\r\n            Original was GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243\r\n            ":"\r\n            原来是 GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243\r\n            \r\n","\r\n            Original was GL_SRGB_ALPHA_EXT = 0x8C42\r\n            ":"\r\n            原来是 GL_SRGB_ALPHA_EXT = 0x8C42\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9\r\n            \r\n","\r\n            Used in GL.DebugMessageInsert, GL.PushDebugGroup\r\n            ":"\r\n            用于GL.DebugMessageInsert、GL.PushDebugGroup\r\n            \r\n","The width of the NativeWindow in pixels.":"NativeWindow 的宽度（以像素为单位）。\r\n"," \r\n            Specifies the number of texture names to be generated.\r\n            ":" \r\n            指定要生成的纹理名称的数量。\r\n            \r\n","\r\n            Original was GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB\r\n            ":"\r\n            原来是 GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB\r\n            \r\n","\r\n            Original was GL_TEXTURE7_ARB = 0x84C7\r\n            ":"\r\n            原来是 GL_TEXTURE7_ARB = 0x84C7\r\n            \r\n","\r\n            Original was GL_GENERATE_MIPMAP = 0x8191\r\n            ":"\r\n            原来是 GL_GENERATE_MIPMAP = 0x8191\r\n            \r\n","\r\n            Used in GL.NV.GetVideo, GL.NV.PresentFrameDualFill and 1 other function\r\n            ":"\r\n            用于 GL.NV.GetVideo、GL.NV.PresentFrameDualFill 和其他 1 个函数\r\n            \r\n","[length: 3] \r\n            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.\r\n            ":"[长度：3]\r\n            指定顶点的 x、y、z 和 w 坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n","True, if left equals right; false otherwise.":"是的，如果左等于右；否则为假。\r\n","\r\n            Original was GL_OES_rgb8_rgba8 = 1\r\n            ":"\r\n            原来是 GL_OES_rgb8_rgba8 = 1\r\n            \r\n","\r\n            Original was GL_RGB16F_ARB = 0x881B\r\n            ":"\r\n            原来是 GL_RGB16F_ARB = 0x881B\r\n            \r\n","\r\n            Original was GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81\r\n            ":"\r\n            原来是 GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81\r\n            \r\n"," if this instance has a left digital pad button; otherwise, ":" 如果这个实例有一个左数字键盘按钮；否则，\r\n","\r\n            Original was GL_CON_7_ATI = 0x8948\r\n            ":"\r\n            原来是 GL_CON_7_ATI = 0x8948\r\n            \r\n","The w component of the Vector4.":"Vector4 的 w 分量。\r\n","\r\n            Disposes of the GameWindow, releasing all resources consumed by it.\r\n            ":"\r\n            处理 GameWindow，释放它消耗的所有资源。\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670\r\n            \r\n","\r\n            Original was GL_RGB10_EXT = 0x8052\r\n            ":"\r\n            原来是 GL_RGB10_EXT = 0x8052\r\n            \r\n","\r\n            background pixel\r\n            ":"\r\n            背景像素\r\n            \r\n","\r\n            Original was GL_PROGRAM_BINARY_FORMATS_OES = 0x87FF\r\n            ":"\r\n            原来是 GL_PROGRAM_BINARY_FORMATS_OES = 0x87FF\r\n            \r\n","\r\n            Original was GL_TEXTURE0 = 0x84C0\r\n            ":"\r\n            原来是 GL_TEXTURE0 = 0x84C0\r\n            \r\n"," \r\n            Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.\r\n            ":" \r\n            指定是否更新正面和/或背面模板写掩码。三个符号常量是有效的：Front、Back 和 FrontAndBack。\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676\r\n            \r\n","[requires: v3.1]\r\n            Draw multiple instances of a range of elements\r\n            ":"[要求：v3.1]\r\n            绘制一系列元素的多个实例\r\n            \r\n","\r\n            Original was GL_LINEAR_SHARPEN_SGIS = 0x80AD\r\n            ":"\r\n            原来是 GL_LINEAR_SHARPEN_SGIS = 0x80AD\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8\r\n            \r\n","\r\n            Original was GL_TEXTURE12_ARB = 0x84CC\r\n            ":"\r\n            原来是 GL_TEXTURE12_ARB = 0x84CC\r\n            \r\n","\r\n            Original was GL_ALPHA16_SNORM = 0x9018\r\n            ":"\r\n            原来是 GL_ALPHA16_SNORM = 0x9018\r\n            \r\n","\r\n            Original was GL_PACK_RESAMPLE_OML = 0x8984\r\n            ":"\r\n            原来是 GL_PACK_RESAMPLE_OML = 0x8984\r\n            \r\n","[requires: OES_fixed_point]\r\n            Specify multisample coverage parameters\r\n            ":"[要求：OES_fixed_point]\r\n            指定多样本覆盖参数\r\n            \r\n","\r\n            Used in GL.ColorSubTable, GL.ColorTable and 10 other functions\r\n            ":"\r\n            用于 GL.ColorSubTable、GL.ColorTable 和其他 10 个函数\r\n            \r\n","\r\n            Original was GL_SOURCE0_ALPHA_EXT = 0x8588\r\n            ":"\r\n            原来是 GL_SOURCE0_ALPHA_EXT = 0x8588\r\n            \r\n"," \r\n            Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureMaxLevel, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, or TextureWrapR.\r\n            ":" \r\n            指定单值纹理参数的符号名称。 pname 可以是以下之一：TextureBaseLevel、TextureCompareFunc、TextureCompareMode、TextureMinFilter、TextureMagFilter、TextureMinLod、TextureMaxLod、TextureMaxLevel、TextureSwizzleR、TextureSwizzleG、TextureSwizzleB、TextureSwizzleA、TextureWrapS、TextureWrapT 或 TextureWrapR。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify the diameter of rasterized points\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定光栅化点的直径\r\n            \r\n","\r\n            Original was GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2\r\n            ":"\r\n            原来是 GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_COMPLETE = 0x8CD5\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_COMPLETE = 0x8CD5\r\n            \r\n","\r\n            Original was GL_MAX_SPOT_EXPONENT_NV = 0x8505\r\n            ":"\r\n            原来是 GL_MAX_SPOT_EXPONENT_NV = 0x8505\r\n            \r\n","\r\n            Original was GL_RenderbufferWidth = 0X8d42\r\n            ":"\r\n            原来是 GL_RenderbufferWidth = 0X8d42\r\n            \r\n"," \r\n            Specifies the framebuffer target. The symbolic constant must be Framebuffer.\r\n            ":" \r\n            指定帧缓冲区目标。符号常量必须是 Framebuffer。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Set the scale and units used to calculate depth values\r\n            ":"[要求：v1.0 和 1.0]\r\n            设置用于计算深度值的比例和单位\r\n            \r\n","\r\n            The Osu window handle.\r\n            ":"\r\n            Osu 窗口句柄。\r\n            \r\n","[length: 3] \r\n            Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.\r\n            ":"[长度：3]\r\n            指定 s、t、r 和 q 纹理坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n","\r\n            This property is deprecated.\r\n            ":"\r\n            此属性已弃用。\r\n            \r\n","[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]\r\n            Render primitives from array data, taking parameters from memory\r\n            ":"[要求：v4.0 或 ARB_draw_indirect|VERSION_4_0]\r\n            从数组数据渲染基元，从内存中获取参数\r\n            \r\n","Call GetLastError to identify any other errors.":"调用 GetLastError 以识别任何其他错误。\r\n","\r\n            Original was GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7\r\n            ":"\r\n            原来是 GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7\r\n            \r\n","The OpenTK.Graphics.DisplayDevice to construct the NativeWindow in.":"在其中构造 NativeWindow 的 OpenTK.Graphics.DisplayDevice。\r\n","The fifth button of the JoystickDevice.":"JoystickDevice 的第五个按钮。\r\n","[requires: EXT_draw_buffers_indexed]\r\n            Enable or disable server-side GL capabilities\r\n            ":"[需要：EXT_draw_buffers_indexed]\r\n            启用或禁用服务器端 GL 功能\r\n            \r\n"," \r\n            Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.\r\n            ":" \r\n            指定帧缓冲区对象附件参数的符号名称。接受的值为 FramebufferAttachmentObjectType、FramebufferAttachmentObjectName、FramebufferAttachmentTextureLevel 和 FramebufferAttachmentTextureCubeMapFace。\r\n            \r\n","X11WindowInfo":"X11窗口信息\r\n","\r\n            Original was GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C\r\n            \r\n","\r\n            Original was GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B\r\n            ":"\r\n            原来是 GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B\r\n            \r\n","\r\n            Original was GL_SYNC_FENCE_APPLE = 0x9116\r\n            ":"\r\n            原来是 GL_SYNC_FENCE_APPLE = 0x9116\r\n            \r\n","\r\n            Original was GL_HIGH_FLOAT = 0x8DF2\r\n            ":"\r\n            原来是 GL_HIGH_FLOAT = 0x8DF2\r\n            \r\n","\r\n            Original was GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034\r\n            ":"\r\n            原来是 GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034\r\n            \r\n","\r\n            Version number for the HID.\r\n            ":"\r\n            HID 的版本号。\r\n            \r\n","\r\n            Original was GL_MIN = 0x8007\r\n            ":"\r\n            原来是 GL_MIN = 0x8007\r\n            \r\n","A read-only field that represents a handle that has been initialized to zero.":"一个只读字段，表示已初始化为零的句柄。\r\n"," \r\n            Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.\r\n            ":" \r\n            指定模板测试失败时要采取的操作。接受八个符号常量：Keep、Zero、Replace、Incr、IncrWrap、Decr、DecrWrap 和 Invert。初始值为 Keep。\r\n            \r\n","\r\n            Vertical sync start\r\n            ":"\r\n            垂直同步开始\r\n            \r\n","\r\n            Original was GL_BACK_NORMALS_HINT_PGI = 0x1A223\r\n            ":"\r\n            原来是 GL_BACK_NORMALS_HINT_PGI = 0x1A223\r\n            \r\n","\r\n            Original was GL_ARRAY_TYPE = 0x8625\r\n            ":"\r\n            原来是 GL_ARRAY_TYPE = 0x8625\r\n            \r\n","\r\n            Original was GL_DST_OUT_NV = 0x928D\r\n            ":"\r\n            原来是 GL_DST_OUT_NV = 0x928D\r\n            \r\n","\r\n            Original was GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7\r\n            ":"\r\n            原来是 GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7\r\n            \r\n","\r\n            Original was GL_PROGRAM_ATTRIBS_ARB = 0x88AC\r\n            ":"\r\n            原来是 GL_PROGRAM_ATTRIBS_ARB = 0x88AC\r\n            \r\n","\r\n            Original was GL_CON_10_ATI = 0x894B\r\n            ":"\r\n            原来是 GL_CON_10_ATI = 0x894B\r\n            \r\n","\r\n            Original was GL_PROGRAM_PARAMETER_NV = 0x8644\r\n            ":"\r\n            原来是 GL_PROGRAM_PARAMETER_NV = 0x8644\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8\r\n            \r\n","\r\n            Original was GL_DOT_PRODUCT_NV = 0x86EC\r\n            ":"\r\n            原来是 GL_DOT_PRODUCT_NV = 0x86EC\r\n            \r\n","[requires: v4.3 or ARB_multi_draw_indirect|VERSION_4_3]\r\n            Render indexed primitives from array data, taking parameters from memory\r\n            ":"[要求：v4.3 或 ARB_multi_draw_indirect|VERSION_4_3]\r\n            从数组数据渲染索引基元，从内存中获取参数\r\n            \r\n","\r\n            Original was GL_OES_byte_coordinates = 1\r\n            ":"\r\n            原来是 GL_OES_byte_coordinates = 1\r\n            \r\n","\r\n            Original was GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262\r\n            ":"\r\n            原来是 GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262\r\n            \r\n","\r\n            Specifies the position of the window in Z order (front-to-back position).\r\n            This member can be a handle to the window behind which this window is placed,\r\n            or can be one of the special values listed with the SetWindowPos function.\r\n            ":"\r\n            指定窗口在 Z 顺序中的位置（从前到后的位置）。\r\n            该成员可以是该窗口所在窗口的句柄，\r\n            或者可以是随 SetWindowPos 函数列出的特殊值之一。\r\n            \r\n","\r\n            Original was GL_IMAGE_CLASS_11_11_10 = 0x82C2\r\n            ":"\r\n            原来是 GL_IMAGE_CLASS_11_11_10 = 0x82C2\r\n            \r\n","\r\n            Gets or sets the value at row 4, column 3 of this instance.\r\n            ":"\r\n            获取或设置此实例第 4 行第 3 列的值。\r\n            \r\n","\r\n            Original was GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A\r\n            ":"\r\n            原来是 GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A\r\n            \r\n","\r\n            Original was GL_ACCUM_RED_BITS = 0x0D58\r\n            ":"\r\n            原来是 GL_ACCUM_RED_BITS = 0x0D58\r\n            \r\n","\r\n            Original was GL_DEPTH_BITS = 0x0D56\r\n            ":"\r\n            原来是 GL_DEPTH_BITS = 0x0D56\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return information about an active attribute variable\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回有关活动属性变量的信息\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC\r\n            \r\n","[requires: v4.3 or KHR_debug|VERSION_4_3]\r\n            Control the reporting of debug messages in a debug context\r\n            ":"[要求：v4.3 或 KHR_debug|VERSION_4_3]\r\n            在调试上下文中控制调试消息的报告\r\n            \r\n","[length: bufSize] \r\n            Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex.\r\n            ":"[长度：bufSize]\r\n            指定字符数组的地址，以在 uniformBlockIndex 处接收统一块的名称。\r\n            \r\n","\r\n            Original was GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F\r\n            ":"\r\n            原来是 GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F\r\n            \r\n","\r\n            Original was GL_COMBINER7_NV = 0x8557\r\n            ":"\r\n            原来是 GL_COMBINER7_NV = 0x8557\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_BINDING_OES = 0x8CA6\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_BINDING_OES = 0x8CA6\r\n            \r\n","[length: type,stride]":"[长度：类型，步幅]\r\n","\r\n            Original was GL_FOG_COORDINATE_ARRAY = 0x8457\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_ARRAY = 0x8457\r\n            \r\n","\r\n            Original was GL_PATCH_VERTICES_EXT = 0x8E72\r\n            ":"\r\n            原来是 GL_PATCH_VERTICES_EXT = 0x8E72\r\n            \r\n","\r\n            border of the window or CopyFromParent\r\n            ":"\r\n            窗口边框或 CopyFromParent\r\n            \r\n","\r\n            Used in GL.NV.ProgramBufferParameters, GL.NV.ProgramBufferParametersI\r\n            ":"\r\n            在GL.NV.ProgramBufferParameters、GL.NV.ProgramBufferParametersI中使用\r\n            \r\n","\r\n            Original was GL_LuminanceAlpha = 0X190a\r\n            ":"\r\n            原来是 GL_LuminanceAlpha = 0X190a\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 0x8E82\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 0x8E82\r\n            \r\n","\r\n            Transforms the specified point from screen to client coordinates. \r\n            ":"\r\n            将指定点从屏幕坐标转换为客户坐标。\r\n            \r\n","\r\n            Original was GL_IMAGE_SCALE_X_HP = 0x8155\r\n            ":"\r\n            原来是 GL_IMAGE_SCALE_X_HP = 0x8155\r\n            \r\n","\r\n            Original was GL_COMPRESSED_ALPHA = 0x84E9\r\n            ":"\r\n            原来是 GL_COMPRESSED_ALPHA = 0x84E9\r\n            \r\n","\r\n            Gets or sets the value at row 1, column 1 of this instance.\r\n            ":"\r\n            获取或设置此实例第 1 行第 1 列的值。\r\n            \r\n","\r\n            Original was GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E\r\n            ":"\r\n            原来是 GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E\r\n            \r\n","\r\n            Original was GL_LUMINANCE16_ALPHA16_SNORM = 0x901A\r\n            ":"\r\n            原来是 GL_LUMINANCE16_ALPHA16_SNORM = 0x901A\r\n            \r\n","The blend factor":"混合因素\r\n"," value describing whether this ":" 描述这是否的值\r\n","[requires: KHR_debug]\r\n            Retrieve the label of a named object identified within a namespace\r\n            ":"[要求：KHR_debug]\r\n            检索命名空间中标识的命名对象的标签\r\n            \r\n","\r\n            Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where is the number of bitplanes in the stencil buffer. The initial value is 0.\r\n            ":"\r\n            指定模板测试的参考值。 ref 被限制在 [0, 2 sup n - 1] 范围内，其中是模板缓冲区中位平面的数量。初始值为 0。\r\n            \r\n","\r\n            Original was GL_RGB_SCALE = 0x8573\r\n            ":"\r\n            原来是 GL_RGB_SCALE = 0x8573\r\n            \r\n","[length: n] \r\n            Specifies an array in which the generated buffer object names are stored.\r\n            ":"[长度：n]\r\n            指定一个数组，其中存储生成的缓冲区对象名称。\r\n            \r\n","[requires: v3.0]\r\n            Bind a range within a buffer object to an indexed buffer target\r\n            ":"[要求：v3.0]\r\n            将缓冲区对象中的范围绑定到索引缓冲区目标\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03\r\n            \r\n","\r\n            Used in GL.FramebufferRenderbuffer, GL.FramebufferTexture and 13 other functions\r\n            ":"\r\n            用于GL.FramebufferRenderbuffer、GL.FramebufferTexture等13个函数\r\n            \r\n","\r\n            Original was GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0\r\n            ":"\r\n            原来是 GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0\r\n            \r\n","\r\n            Original was GL_FUNC_ADD_EXT = 0x8006\r\n            ":"\r\n            原来是 GL_FUNC_ADD_EXT = 0x8006\r\n            \r\n","\r\n            Original was GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB\r\n            ":"\r\n            原来是 GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB\r\n            \r\n","\r\n            Original was GL_RGB_FLOAT16_ATI = 0x881B\r\n            ":"\r\n            原来是 GL_RGB_FLOAT16_ATI = 0x881B\r\n            \r\n","\r\n            Original was GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF\r\n            ":"\r\n            原来是 GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Determine if a name corresponds to a display list\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            判断名称是否对应显示列表\r\n            \r\n","\r\n            Specifies the symbolic name of a single-valued texture environment parameter. May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.\r\n            ":"\r\n            指定单值纹理环境参数的符号名称。 May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.\r\n            \r\n","\r\n            Original was GL_FILTER4_SGIS = 0x8146\r\n            ":"\r\n            原来是 GL_FILTER4_SGIS = 0x8146\r\n            \r\n","\r\n            Original was GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2\r\n            ":"\r\n            原来是 GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2\r\n            \r\n","The XCreateSimpleWindow function creates an unmapped InputOutput subwindow for a specified parent window, returns the window ID of the created window, and causes the X server to generate a CreateNotify event. The created window is placed on top in the stacking order with respect to siblings. Any part of the window that extends outside its parent window is clipped. The border_width for an InputOnly window must be zero, or a BadMatch error results. XCreateSimpleWindow inherits its depth, class, and visual from its parent. All other window attributes, except background and border, have their default values. ":"XCreateSimpleWindow 函数为指定的父窗口创建一个未映射的 InputOutput 子窗口，返回创建窗口的窗口 ID，并使 X 服务器生成一个 CreateNotify 事件。创建的窗口相对于兄弟窗口按堆叠顺序放置在顶部。窗口超出其父窗口的任何部分都将被剪裁。 InputOnly 窗口的 border_width 必须为零，否则将导致 BadMatch 错误。 XCreateSimpleWindow 从其父级继承其深度、类和视觉效果。所有其他窗口属性，除了背景和边框，都有它们的默认值。\r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Determine if a name corresponds to a framebuffer object\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            确定名称是否对应于帧缓冲区对象\r\n            \r\n","[length: 3]":"[长度：3]\r\n","\r\n            Back button\r\n            ":"\r\n            返回键\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C\r\n            \r\n","\r\n            Original was GL_ALPHA_FLOAT16_ATI = 0x881C\r\n            ":"\r\n            原来是 GL_ALPHA_FLOAT16_ATI = 0x881C\r\n            \r\n","\r\n            Gets an OpenTK.Vector2 with the Z and W components of this instance.\r\n            ":"获取具有此实例的 Z 和 W 组件的 OpenTK.Vector2。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Control the writing of individual bits in the color index buffers\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            控制颜色索引缓冲区中各个位的写入\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5\r\n            \r\n","\r\n            Original was GL_RGB8I_EXT = 0x8D8F\r\n            ":"\r\n            原来是 GL_RGB8I_EXT = 0x8D8F\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519\r\n            \r\n","\r\n            Original was GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1\r\n            ":"\r\n            原来是 GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1\r\n            \r\n"," \r\n            The index of the vertex buffer binding point to which to bind the buffer.\r\n            ":" \r\n            要绑定缓冲区的顶点缓冲区绑定点的索引。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A\r\n            \r\n","\r\n            Original was GL_RELATIVE_ROUNDED_RECT_NV = 0xE9\r\n            ":"\r\n            原来是 GL_RELATIVE_ROUNDED_RECT_NV = 0xE9\r\n            \r\n","\r\n            Original was GL_COMBINER_SUM_OUTPUT_NV = 0x854C\r\n            ":"\r\n            原来是 GL_COMBINER_SUM_OUTPUT_NV = 0x854C\r\n            \r\n","\r\n            Original was GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4\r\n            ":"\r\n            原来是 GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4\r\n            \r\n","\r\n            Original was GL_GEOMETRY_INPUT_TYPE = 0x8917\r\n            ":"\r\n            原来是 GL_GEOMETRY_INPUT_TYPE = 0x8917\r\n            \r\n"," \r\n            Specifies the number of vertex array objects to be deleted.\r\n            ":" \r\n            指定要删除的顶点数组对象的数量。\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 0x900A\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 0x900A\r\n            \r\n"," \r\n            Specifies the size of the map being defined.\r\n            ":"指定正在定义的地图的大小。\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 0x9105\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 0x9105\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021\r\n            \r\n","\r\n            The shift key modifier.\r\n            ":"\r\n            Shift 键修饰符。\r\n            \r\n","\r\n            Original was GL_TANGENT_ARRAY_EXT = 0x8439\r\n            ":"\r\n            原来是 GL_TANGENT_ARRAY_EXT = 0x8439\r\n            \r\n","\r\n            Original was GL_MODELVIEW17_ARB = 0x8731\r\n            ":"\r\n            原来是 GL_MODELVIEW17_ARB = 0x8731\r\n            \r\n","\r\n            Original was GL_SOURCE2_RGB_ARB = 0x8582\r\n            ":"\r\n            原来是 GL_SOURCE2_RGB_ARB = 0x8582\r\n            \r\n","[length: pname] \r\n            A pointer to an array where the values of the parameter will be stored.\r\n            ":"[长度：pname]\r\n            指向将存储参数值的数组的指针。\r\n            \r\n","\r\n            Describes the state of a joystick hat.\r\n            ":"\r\n            描述操纵杆帽子的状态。\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D\r\n            \r\n","[requires: ARB_vertex_buffer_object]\r\n            Generate buffer object names\r\n            ":"[需要：ARB_vertex_buffer_object]\r\n            生成缓冲区对象名称\r\n            \r\n","\r\n            Original was GL_RELATIVE_ROUNDED_RECT4_NV = 0xED\r\n            ":"\r\n            原来是 GL_RELATIVE_ROUNDED_RECT4_NV = 0xED\r\n            \r\n","\r\n            Mode flag that specifies how to interpret the information provided by UsagePage and Usage.\r\n            It can be zero (the default) or one of the following values.\r\n            By default, the operating system sends raw input from devices with the specified top level collection (TLC)\r\n            to the registered application as long as it has the window focus. \r\n            ":"\r\n            指定如何解释 UsagePage 和 Usage 提供的信息的模式标志。\r\n            它可以是零（默认值）或以下值之一。\r\n            默认情况下，操作系统从具有指定顶级集合 (TLC) 的设备发送原始输入\r\n            到注册的应用程序，只要它有窗口焦点。\r\n            \r\n","\r\n            Copy pixels into a two-dimensional convolution filter\r\n            ":"\r\n            将像素复制到二维卷积滤波器中\r\n            \r\n","\r\n            Original was GL_REG_18_ATI = 0x8933\r\n            ":"\r\n            原来是 GL_REG_18_ATI = 0x8933\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Block until all GL execution is complete\r\n            ":"[要求：v1.0 和 1.0]\r\n            阻塞直到所有 GL 执行完成\r\n            \r\n","\r\n            Original was GL_VIDEO_BUFFER_PITCH_NV = 0x9028\r\n            ":"\r\n            原来是 GL_VIDEO_BUFFER_PITCH_NV = 0x9028\r\n            \r\n","[requires: NV_transform_feedback2]\r\n            Delete transform feedback objects\r\n            ":"[需要：NV_transform_feedback2]\r\n            删除变换反馈对象\r\n            \r\n","\r\n            Original was GL_RGB16I = 0x8D89\r\n            ":"\r\n            原来是 GL_RGB16I = 0x8D89\r\n            \r\n"," \r\n            Specifies the name of a texture object of which to make a view.\r\n            ":" \r\n            指定要制作视图的纹理对象的名称。\r\n            \r\n","\r\n            Original was GL_INNOCENT_CONTEXT_RESET_EXT = 0x8254\r\n            ":"\r\n            原来是 GL_INNOCENT_CONTEXT_RESET_EXT = 0x8254\r\n            \r\n","[requires: NV_explicit_multisample]":"[要求：NV_explicit_multisample]\r\n"," \r\n            Specifies the primitive or primitives that will be created from vertices presented between glBegin and the subsequent glEnd. Ten symbolic constants are accepted: Points, Lines, LineStrip, LineLoop, Triangles, TriangleStrip, TriangleFan, Quads, QuadStrip, and Polygon.\r\n            ":" \r\n            指定将从 glBegin 和后续 glEnd 之间呈现的顶点创建的图元或图元。接受十个符号常量：Points、Lines、LineStrip、LineLoop、Triangles、TriangleStrip、TriangleFan、Quads、QuadStrip 和 Polygon。\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B\r\n            \r\n"," \r\n            The starting offset in basic machine units into the buffer object buffer.\r\n            ":" \r\n            基本机器单位中的起始偏移量进入缓冲对象缓冲区。\r\n            \r\n","\r\n            Original was GL_READ_FRAMEBUFFER = 0x8CA8\r\n            ":"\r\n            原来是 GL_READ_FRAMEBUFFER = 0x8CA8\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_1_5_5_5_REVERSED = 0x8366\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_1_5_5_5_REVERSED = 0x8366\r\n            \r\n","\r\n            The window covers the whole screen, including all taskbars and/or panels.\r\n            ":"\r\n            该窗口覆盖整个屏幕，包括所有任务栏和/或面板。\r\n            \r\n","\r\n            Original was GL_SLUMINANCE8_ALPHA8_NV = 0x8C45\r\n            ":"\r\n            原来是 GL_SLUMINANCE8_ALPHA8_NV = 0x8C45\r\n            \r\n"," \r\n            Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.\r\n            ":" \r\n            指定正面多边形的方向。 Cw 和 Ccw 被接受。初始值为 Ccw。\r\n            \r\n","\r\n            Original was GL_RESAMPLE_REPLICATE_OML = 0x8986\r\n            ":"\r\n            原来是 GL_RESAMPLE_REPLICATE_OML = 0x8986\r\n            \r\n","\r\n            Original was GL_OP_SET_GE_EXT = 0x878C\r\n            ":"\r\n            原来是 GL_OP_SET_GE_EXT = 0x878C\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE\r\n            \r\n","\r\n            Specifies the data type of the pixel data. Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.\r\n            ":"\r\n            指定像素数据的数据类型。 Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV,或 GL_FLOAT_32_UNSIGNED_INT_24_8_REV。\r\n            \r\n","\r\n            Original was GL_ActiveTexture = 0X84e0\r\n            ":"\r\n            原来是 GL_ActiveTexture = 0X84e0\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 0x93A3\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 0x93A3\r\n            \r\n"," \r\n            Specifies the length of the range to be mapped.\r\n            ":" \r\n            指定要映射的范围的长度。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4\r\n            \r\n"," \r\n            Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.\r\n            ":" \r\n            指定活动纹理单元的目标纹理。必须是 Texture2D、TextureCubeMapPositiveX、TextureCubeMapNegativeX、TextureCubeMapPositiveY、TextureCubeMapNegativeY、TextureCubeMapPositiveZ 或 TextureCubeMapNegativeZ。\r\n            \r\n","\r\n            Original was GL_SIGNED_RGBA8_NV = 0x86FC\r\n            ":"\r\n            原来是 GL_SIGNED_RGBA8_NV = 0x86FC\r\n            \r\n","\r\n            Original was GL_ALPHA_FLOAT32_ATI = 0x8816\r\n            ":"\r\n            原来是 GL_ALPHA_FLOAT32_ATI = 0x8816\r\n            \r\n","\r\n            Original was GL_CURRENT_MATRIX_INDEX_ARB = 0x8845\r\n            ":"\r\n            原来是 GL_CURRENT_MATRIX_INDEX_ARB = 0x8845\r\n            \r\n","[length: buffer] \r\n            For color buffers, a pointer to a four-element vector specifying R, G, B and A values to clear the buffer to. For depth buffers, a pointer to a single depth value to clear the buffer to. For stencil buffers, a pointer to a single stencil value to clear the buffer to.\r\n            ":"[长度：缓冲区]\r\n            对于颜色缓冲区，指向一个四元素向量的指针，指定要清除缓冲区的 R、G、B 和 A 值。对于深度缓冲区，指向要清除缓冲区的单个深度值的指针。对于模板缓冲区，指向要清除缓冲区的单个模板值的指针。\r\n            \r\n","[requires: NV_register_combiners]":"[需要：NV_register_combiners]\r\n","[requires: v2.0]\r\n            Detaches a shader object from a program object to which it is attached\r\n            ":"[要求：v2.0]\r\n            将着色器对象从它附加到的程序对象中分离出来\r\n            \r\n","\r\n            Contains information about the mouse's location in screen coordinates.\r\n            ":"\r\n            包含有关鼠标在屏幕坐标中的位置的信息。\r\n            \r\n"," \r\n            The name of the parameter within programInterface to query.\r\n            ":" \r\n            要查询的 programInterface 中的参数名称。\r\n            \r\n","\r\n            Number of display pixels horizontally\r\n            ":"\r\n            水平显示像素数\r\n            \r\n","A ContextHandle equivalent to the specified IntPtr.":"等效于指定的 IntPtr 的 ContextHandle。\r\n","\r\n            Get the inverse of the given quaternion\r\n            ":"\r\n            获取给定四元数的倒数\r\n            \r\n","\r\n            Original was GL_RESCALE_NORMAL_EXT = 0x803A\r\n            ":"\r\n            原来是 GL_RESCALE_NORMAL_EXT = 0x803A\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 0x8D56\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 0x8D56\r\n            \r\n","\r\n            Not used directly.\r\n            ":"\r\n            不直接使用。\r\n            \r\n","\r\n            Gets or sets the third column of this matrix.\r\n            ":"\r\n            获取或设置此矩阵的第三列。\r\n            \r\n","[length: n] \r\n            Specifies an array of query objects to be deleted.\r\n            ":"[长度：n]\r\n            指定要删除的查询对象数组。\r\n            \r\n","\r\n            Specifies the width of the smallest rectangle (the glyph's black box) that completely encloses the glyph.\r\n            ":"\r\n            指定完全包围字形的最小矩形（字形的黑框）的宽度。\r\n            \r\n","\r\n            If set, this enables the caller to receive the input even when the caller is not in the foreground.\r\n            Note that Target must be specified in RawInputDevice.\r\n            ":"如果设置，这使调用者即使不在前台也能接收输入。\r\n            请注意，必须在 RawInputDevice 中指定 Target。\r\n            \r\n","\r\n            Handle to the window.\r\n            ":"\r\n            处理窗口。\r\n            \r\n"," \r\n            The address of a character array containing the message to insert.\r\n            ":"包含要插入的消息的字符数组的地址。\r\n            \r\n","\r\n            Original was GL_COMBINER3_NV = 0x8553\r\n            ":"\r\n            原来是 GL_COMBINER3_NV = 0x8553\r\n            \r\n","\r\n            The hat is in its left position.\r\n            ":"\r\n            帽子位于左侧位置。\r\n            \r\n","\r\n            A pointer to a MOUSEMOVEPOINT structure containing valid mouse \r\n            coordinates (in screen coordinates). It may also contain a time \r\n            stamp.\r\n            ":"\r\n            指向包含有效鼠标的 MOUSEMOVEPOINT 结构的指针\r\n            坐标（在屏幕坐标中）。它还可能包含时间\r\n            邮票。\r\n            \r\n","\r\n            Matrix subtraction\r\n            ":"\r\n            矩阵减法\r\n            \r\n","\r\n            Original was GL_RED_BITS = 0x0D52\r\n            ":"\r\n            原来是 GL_RED_BITS = 0x0D52\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Attach a level of a texture object as a logical buffer to the currently bound framebuffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            将纹理对象的级别作为逻辑缓冲区附加到当前绑定的帧缓冲区对象\r\n            \r\n","\r\n            Used in GL.GetMultisample\r\n            ":"\r\n            在 GL.GetMultisample 中使用\r\n            \r\n","[requires: v3.1]\r\n            Specify the primitive restart index\r\n            ":"[要求：v3.1]\r\n            指定原始重启索引\r\n            \r\n"," \r\n            Specifies the name of a transform feedback object reserved by glGenTransformFeedbacks.\r\n            ":" \r\n            指定由 glGenTransformFeedbacks 保留的转换反馈对象的名称。\r\n            \r\n"," \r\n            Specifies an index into the enabled vertex data arrays.\r\n            ":" \r\n            指定启用的顶点数据数组的索引。\r\n            \r\n","\r\n            Gets a System.Boolean that indicates whether this window has input focus.\r\n            ":"\r\n            获取一个 System.Boolean，它指示此窗口是否具有输入焦点。\r\n            \r\n","[length: count*3] \r\n            Specifies the new values to be used for the specified uniform variable.\r\n            ":"[长度：计数*3]\r\n            指定要用于指定统一变量的新值。\r\n            \r\n","Thrown if the Matrix2 is singular.":"如果 Matrix2 是奇异的则抛出。\r\n","[requires: SGIS_fog_function]":"[要求：SGIS_fog_function]\r\n","Returns a copy of the matched event's associated structure.":"返回匹配事件关联结构的副本。\r\n","The index of the joystick button for the event.":"事件的操纵杆按钮的索引。\r\n","\r\n            Used in GL.VertexPointer\r\n            ":"\r\n            在 GL.VertexPointer 中使用\r\n            \r\n","\r\n            Original was GL_INTENSITY_FLOAT32_APPLE = 0x8817\r\n            ":"\r\n            原来是 GL_INTENSITY_FLOAT32_APPLE = 0x8817\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB\r\n            \r\n","The ClientToScreen function replaces the client-area coordinates in the POINT structure with the screen coordinates. The screen coordinates are relative to the upper-left corner of the screen. Note, a screen-coordinate point that is above the window's client area has a negative y-coordinate. Similarly, a screen coordinate to the left of a client area has a negative x-coordinate.":"ClientToScreen 函数将 POINT 结构中的客户区坐标替换为屏幕坐标。屏幕坐标相对于屏幕的左上角。请注意，窗口客户区上方的屏幕坐标点具有负 y 坐标。类似地，客户区左侧的屏幕坐标具有负的 x 坐标。\r\n"," \r\n            Specifies the depth of the texture subimage.\r\n            ":" \r\n            指定纹理子图像的深度。\r\n            \r\n","The major version for the OpenGL GraphicsContext.":"OpenGL GraphicsContext 的主要版本。\r\n","\r\n            Original was GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85\r\n            ":"\r\n            原来是 GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85\r\n            \r\n"," \r\n            Specify a single floating-point sample coverage value.  The value is clamped to the range [0 ,1]. The initial value is 1.0.\r\n            ":" \r\n            指定单个浮点样本覆盖率值。该值被限制在 [0 ,1] 范围内。初始值为 1.0。\r\n            \r\n"," for the right button.\r\n            ":" 为右键。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213\r\n            \r\n"," \r\n            The coordinate of the front of the region to be cleared.\r\n            ":" \r\n            待清除区域的正面坐标。\r\n            \r\n","\r\n            Original was GL_ASYNC_READ_PIXELS_SGIX = 0x835E\r\n            ":"\r\n            原来是 GL_ASYNC_READ_PIXELS_SGIX = 0x835E\r\n            \r\n","\r\n            Original was GL_TextureWrapT = 0x2803\r\n            ":"\r\n            原来是 GL_TextureWrapT = 0x2803\r\n            \r\n","Number of RawInput structures pointed to by paRawInput.":"paRawInput 指向的 RawInput 结构数。\r\n","[requires: v1.0][deprecated: v3.2]\r\n            Specify which matrix is the current matrix\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            指定哪个矩阵是当前矩阵\r\n            \r\n"," \r\n            Specify the number of viewports to set.\r\n            ":" \r\n            指定要设置的视口数。\r\n            \r\n","\r\n            Original was GL_RGBA32UI_EXT = 0x8D70\r\n            ":"\r\n            原来是 GL_RGBA32UI_EXT = 0x8D70\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9\r\n            \r\n","[length: 1] \r\n            The maximum number of characters, including the null terminator, that may be written into name.\r\n            ":"[长度：1]\r\n            可以写入名称的最大字符数，包括空终止符。\r\n            \r\n","\r\n            Original was GL_ALPHA_MIN_CLAMP_INGR = 0x8563\r\n            ":"\r\n            原来是 GL_ALPHA_MIN_CLAMP_INGR = 0x8563\r\n            \r\n","\r\n            Does not change the owner window's position in the Z order.\r\n            ":"\r\n            不更改所有者窗口在 Z 顺序中的位置。\r\n            \r\n","\r\n            Used in GL.Angle.RenderbufferStorageMultisample, GL.Apple.RenderbufferStorageMultisample and 7 other functions\r\n            ":"\r\n            用于GL.Angle.RenderbufferStorageMultisample、GL.Apple.RenderbufferStorageMultisample等7个函数\r\n            \r\n","The quote key.":"报价键。\r\n","[requires: v1.0][deprecated: v3.2]\r\n            Delimit the vertices of a primitive or a group of like primitives\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            划定一个图元或一组类似图元的顶点\r\n            \r\n","\r\n            Original was GL_SHADER_INCLUDE_ARB = 0x8DAE\r\n            ":"\r\n            原来是 GL_SHADER_INCLUDE_ARB = 0x8DAE\r\n            \r\n"," indicating\r\n            whether this hat lies in the bottom hemicircle.\r\n            ":" 表明\r\n            这顶帽子是否位于底部半圆中。\r\n            \r\n","\r\n            Original was GL_TEXTURE_WRAP_Q_SGIS = 0x8137\r\n            ":"原来是 GL_TEXTURE_WRAP_Q_SGIS = 0x8137\r\n            \r\n","[requires: v3.3 or ARB_timer_query|VERSION_3_3]\r\n            Return parameters of a query object\r\n            ":"[要求：v3.3 或 ARB_timer_query|VERSION_3_3]\r\n            查询对象的返回参数\r\n            \r\n","first_keycode + keycode_count - 1 ":"first_keycode + keycode_count - 1\r\n","[length: count] \r\n            Specifies the address of an array of strides to associate with the binding points.\r\n            ":"[长度：计数]\r\n            指定与绑定点关联的步幅数组的地址。\r\n            \r\n"," \r\n            Specifies the name of the texture to bind to the image unit.\r\n            ":" \r\n            指定要绑定到图像单元的纹理名称。\r\n            \r\n","[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]\r\n            Render multiple instances of a set of primitives from array data with a per-element offset\r\n            ":"[要求：v3.2 或 ARB_draw_elements_base_vertex|VERSION_3_2]\r\n            从具有每个元素偏移量的数组数据中渲染一组基元的多个实例\r\n            \r\n","\r\n            Gets a System.Int32 indicating the available amount of JoystickAxes.\r\n            ":"获取一个 System.Int32，指示 JoystickAxes 的可用数量。\r\n            \r\n","[requires: INTEL_parallel_arrays]\r\n            Define an array of normals\r\n            ":"[需要：INTEL_parallel_arrays]\r\n            定义法线数组\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT11_EXT = 0x8CEB\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT11_EXT = 0x8CEB\r\n            \r\n","\r\n            Original was GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA\r\n            ":"\r\n            原来是 GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA\r\n            \r\n","[requires: ARB_fragment_program|ARB_vertex_program]\r\n            Returns a parameter from a program object\r\n            ":"[需要：ARB_fragment_program|ARB_vertex_program]\r\n            从程序对象返回参数\r\n            \r\n","[length: count] \r\n            The address of an array of variables to receive the severites of the retrieved messages.\r\n            ":"[长度：计数]\r\n            用于接收检索到的消息的严重程度的变量数组的地址。\r\n            \r\n","\r\n            Original was GL_COMPARE_REF_TO_TEXTURE_EXT = 0x884E\r\n            ":"\r\n            原来是 GL_COMPARE_REF_TO_TEXTURE_EXT = 0x884E\r\n            \r\n"," \r\n            The number of work groups to be launched in the Z dimension.\r\n            ":" \r\n            Z 维度中要启动的工作组的数量。\r\n            \r\n","\r\n            Original was GL_LUMINANCE8_EXT = 0x8040\r\n            ":"原来是 GL_LUMINANCE8_EXT = 0x8040\r\n            \r\n","\r\n            Original was GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3\r\n            ":"\r\n            原来是 GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3\r\n            \r\n","\r\n            Provides methods to create and control an opengl context on the Windows platform.\r\n            This class supports OpenTK, and is not intended for use by OpenTK programs.\r\n            ":"\r\n            提供在 Windows 平台上创建和控制 opengl 上下文的方法。\r\n            此类支持 OpenTK，并不打算供 OpenTK 程序使用。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6\r\n            \r\n","\r\n            Original was GL_FILE_NAME_NV = 0x9074\r\n            ":"\r\n            原来是 GL_FILE_NAME_NV = 0x9074\r\n            \r\n","\r\n            Original was GL_IR_INSTRUMENT1_SGIX = 0x817F\r\n            ":"\r\n            原来是 GL_IR_INSTRUMENT1_SGIX = 0x817F\r\n            \r\n","[length: size,type,stride]":"[长度：尺寸、类型、步幅]\r\n","[requires: SUN_global_alpha]":"[需要：SUN_global_alpha]\r\n","\r\n            Original was GL_BUFFER_OBJECT_APPLE = 0x85B3\r\n            ":"\r\n            原来是 GL_BUFFER_OBJECT_APPLE = 0x85B3\r\n            \r\n","\r\n            The coordinates are mapped to the virtual desktop.\r\n            ":"\r\n            坐标映射到虚拟桌面。\r\n            \r\n","[length: format,type,width]":"[长度：格式，类型，宽度]\r\n"," \r\n            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. Additionally, the symbolic constant Bgra is accepted by glVertexAttribPointer. The initial value is 4.\r\n            ":" \r\n            指定每个通用顶点属性的组件数。必须是 1、2、3、4。此外，glVertexAttribPointer 接受符号常量 Bgra。初始值为 4。\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D\r\n            \r\n","\r\n            Original was GL_TEXTURE28 = 0x84DC\r\n            ":"\r\n            原来是 GL_TEXTURE28 = 0x84DC\r\n            \r\n","\r\n            Original was GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3\r\n            ":"\r\n            原来是 GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_PERFORMANCE_KHR = 0x8250\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_PERFORMANCE_KHR = 0x8250\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03\r\n            \r\n","[requires: NV_gpu_program4]":"[要求：NV_gpu_program4]\r\n"," \r\n            Specifies the name of the parameter to query.\r\n            ":" \r\n            指定要查询的参数的名称。\r\n            \r\n","\r\n            Original was GL_GENERIC_ATTRIB_NV = 0x8C7D\r\n            ":"\r\n            原来是 GL_GENERIC_ATTRIB_NV = 0x8C7D\r\n            \r\n","[length: 2] \r\n            Specifies the address of an array to receive the position of the sample.\r\n            ":"[长度：2]\r\n            指定数组的地址以接收样本的位置。\r\n            \r\n","\r\n            Original was GL_LOW_INT = 0x8DF3\r\n            ":"\r\n            原来是 GL_LOW_INT = 0x8DF3\r\n            \r\n","\r\n            Original was GL_SAMPLES_3DFX = 0x86B4\r\n            ":"\r\n            原来是 GL_SAMPLES_3DFX = 0x86B4\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Returns information about several active uniform variables for the specified program object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            返回有关指定程序对象的几个活动统一变量的信息\r\n            \r\n","\r\n            Original was GL_DEPTH_STENCIL_OES = 0x84F9\r\n            ":"\r\n            原来是 GL_DEPTH_STENCIL_OES = 0x84F9\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7\r\n            \r\n","\r\n            Used in GL.NV.CombinerStageParameter, GL.NV.GetCombinerStageParameter\r\n            ":"\r\n            在GL.NV.CombinerStageParameter、GL.NV.GetCombinerStageParameter中使用\r\n            \r\n","\r\n            Original was GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73\r\n            ":"\r\n            原来是 GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73\r\n            \r\n","[requires: SGI_color_table]\r\n            Set color lookup table parameters\r\n            ":"[要求：SGI_color_table]\r\n            设置颜色查找表参数\r\n            \r\n","\r\n            Original was GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF\r\n            ":"\r\n            原来是 GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF\r\n            \r\n","The keypad divide key.":"键盘分割键。\r\n","\r\n            Original was GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F\r\n            ":"\r\n            原来是 GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return parameters of a renderbuffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            渲染缓冲区对象的返回参数\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER11_EXT = 0x8830\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER11_EXT = 0x8830\r\n            \r\n","\r\n            Indicates that this function is generated automatically by a tool.\r\n            ":"\r\n            表示该函数由工具自动生成。\r\n            \r\n","\r\n            Original was GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC\r\n            ":"\r\n            原来是 GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 0x8C4C\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 0x8C4C\r\n            \r\n","(?)":"(?)\r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655\r\n            \r\n","\r\n            boolean value for override_redirect\r\n            ":"\r\n            override_redirect 的布尔值\r\n            \r\n","\r\n            Original was GL_MATRIX_INDEX_ARRAY_SIZE_OES = 0x8846\r\n            ":"\r\n            原来是 GL_MATRIX_INDEX_ARRAY_SIZE_OES = 0x8846\r\n            \r\n","\r\n            Original was GL_StencilBackValueMask = 0X8ca4\r\n            ":"\r\n            原来是 GL_StencilBackValueMask = 0X8ca4\r\n            \r\n","\r\n            Original was GL_FLOAT_MAT3x2_NV = 0x8B67\r\n            ":"\r\n            原来是 GL_FLOAT_MAT3x2_NV = 0x8B67\r\n            \r\n","\r\n            Original was GL_MAP2_TANGENT_EXT = 0x8445\r\n            ":"原来是 GL_MAP2_TANGENT_EXT = 0x8445\r\n            \r\n","\r\n            Original was GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA\r\n            ":"\r\n            原来是 GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA\r\n            \r\n","\r\n            Original was GL_Keep = 0X1e00\r\n            ":"\r\n            原来是 GL_Keep = 0X1e00\r\n            \r\n","\r\n            Original was GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351\r\n            ":"\r\n            原来是 GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351\r\n            \r\n","[length: target,format,type] \r\n            Pointer to storage for the span filter image (currently unused).\r\n            ":"[长度：目标、格式、类型]\r\n            指向跨度过滤器图像（当前未使用）的存储指针。\r\n            \r\n","\r\n            Occurs whenever the mouse cursor is moved;\r\n            ":"\r\n            每当移动鼠标光标时发生；\r\n            \r\n","\r\n            Original was GL_YCRCB_444_SGIX = 0x81BC\r\n            ":"\r\n            原来是 GL_YCRCB_444_SGIX = 0x81BC\r\n            \r\n","\r\n            OpenGL bindings for .NET, implementing the full OpenGL API, including extensions.\r\n            ":"\r\n            .NET 的 OpenGL 绑定，实现完整的 OpenGL API，包括扩展。\r\n            \r\n","[requires: EXT_histogram]\r\n            Get minimum and maximum pixel values\r\n            ":"[需要：EXT_histogram]\r\n            获取最小和最大像素值\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT24_SGIX = 0x81A6\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT24_SGIX = 0x81A6\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA = 0x8C49\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_ALPHA = 0x8C49\r\n            \r\n","\r\n            Original was GL_ARRAY_NORMALIZED = 0x886A\r\n            ":"\r\n            原来是 GL_ARRAY_NORMALIZED = 0x886A\r\n            \r\n","\r\n            Original was GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D\r\n            ":"\r\n            原来是 GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B\r\n            \r\n","The maximum output value (inclusive)":"最大输出值（含）\r\n","\r\n            Original was GL_DEPTH_COMPONENT24 = 0x81a6\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT24 = 0x81a6\r\n            \r\n","Pointer to a POINT structure that contains the client coordinates to be converted. The new screen coordinates are copied into this structure if the function succeeds.":"指向包含要转换的客户端坐标的 POINT 结构的指针。如果函数成功，新的屏幕坐标将被复制到这个结构中。\r\n","\r\n            Original was GL_CURRENT_PALETTE_MATRIX_OES = 0x8843\r\n            ":"\r\n            原来是 GL_CURRENT_PALETTE_MATRIX_OES = 0x8843\r\n            \r\n","\r\n            Original was GL_SOURCE1_ALPHA = 0x8589\r\n            ":"\r\n            原来是 GL_SOURCE1_ALPHA = 0x8589\r\n            \r\n","\r\n            Original was GL_QCOM_perfmon_global_mode = 1\r\n            ":"\r\n            原来是 GL_QCOM_perfmon_global_mode = 1\r\n            \r\n","\r\n            DLLs should accept the dpi setting of the host process\r\n            rather than call SetProcessDPIAware themselves.\r\n            To be set properly, dpiAware should be specified as part\r\n            of the application (.exe) manifest.\r\n            ":"\r\n            DLL 应接受主机进程的 dpi 设置\r\n            而不是自己调用 SetProcessDPIAware。\r\n            要正确设置，dpiAware 应指定为部分\r\n            应用程序 (.exe) 清单。\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER5_ATI = 0x882A\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER5_ATI = 0x882A\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51\r\n            \r\n","\r\n            Construct a new Quaternion from given Euler angles\r\n            ":"\r\n            从给定的欧拉角构造一个新的四元数\r\n            \r\n"," \r\n            The size of the buffer whose address is given by messageLog.\r\n            ":" \r\n            其地址由 messageLog 给出的缓冲区的大小。\r\n            \r\n","\r\n            Original was GL_TEXTURE17 = 0x84D1\r\n            ":"\r\n            原来是 GL_TEXTURE17 = 0x84D1\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER14 = 0x8833\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER14 = 0x8833\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_LOD_BIAS = 0x84FD\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_LOD_BIAS = 0x84FD\r\n            \r\n","The extension function to check (e.g. \"wglGetExtensionsStringARB\"":"要检查的扩展函数（例如“wglGetExtensionsStringARB”\r\n","\r\n            Used in GL.GetShader\r\n            ":"\r\n            在 GL.GetShader 中使用\r\n            \r\n","\r\n            Original was GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3\r\n            ":"\r\n            原来是 GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3\r\n            \r\n","[length: program,uniformBlockIndex,pname] \r\n            Specifies the address of a variable to receive the result of the query.\r\n            ":"[长度：程序，uniformBlockIndex，pname]\r\n            指定接收查询结果的变量地址。\r\n            \r\n","\r\n            Original was GL_IMG_texture_compression_pvrtc = 1\r\n            ":"\r\n            原来是 GL_IMG_texture_compression_pvrtc = 1\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_TYPE_EXT = 0x807E\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_TYPE_EXT = 0x807E\r\n            \r\n","\r\n            A window info for angle. \r\n            ":"\r\n            角度的窗口信息。\r\n            \r\n","\r\n            Horizontal sync end\r\n            ":"\r\n            水平同步结束\r\n            \r\n","Less than 0, if this instance is less than other; 0 if both are equal; Greater than 0 if other is greater than this instance.":"小于 0，如果此实例小于其他实例；如果两者相等则为 0；如果其他实例大于此实例，则大于 0。\r\n","\r\n            Used in GL.Apple.GetObjectParameter, GL.Apple.ObjectPurgeable and 1 other function\r\n            ":"\r\n            用于 GL.Apple.GetObjectParameter、GL.Apple.ObjectPurgeable 和其他 1 个函数\r\n            \r\n","[requires: v1.4][deprecated: v3.2]\r\n            Specify the raster position in window coordinates for pixel operations\r\n            ":"[要求：v1.4][弃用：v3.2]\r\n            为像素操作指定窗口坐标中的光栅位置\r\n            \r\n","\r\n            Original was GL_COMPRESSED_LUMINANCE_ARB = 0x84EA\r\n            ":"\r\n            原来是 GL_COMPRESSED_LUMINANCE_ARB = 0x84EA\r\n            \r\n","\r\n            Used in GL.BindRenderbuffer, GL.FramebufferRenderbuffer and 4 other functions\r\n            ":"\r\n            用于GL.BindRenderbuffer、GL.FramebufferRenderbuffer等4个函数\r\n            \r\n","\r\n            Original was GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189\r\n            ":"\r\n            原来是 GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189\r\n            \r\n","\r\n            Used in GL.Apple.FenceSync, GL.Apple.WaitSync and 2 other functions\r\n            ":"\r\n            用于 GL.Apple.FenceSync、GL.Apple.WaitSync 和其他 2 个函数\r\n            \r\n","\r\n            Gets the first column of this matrix.\r\n            ":"\r\n            获取此矩阵的第一列。\r\n            \r\n","\r\n            Original was GL_SWIZZLE_STR_ATI = 0x8976\r\n            ":"\r\n            原来是 GL_SWIZZLE_STR_ATI = 0x8976\r\n            \r\n","\r\n            Original was GL_CURRENT_BINORMAL_EXT = 0x843C\r\n            ":"\r\n            原来是 GL_CURRENT_BINORMAL_EXT = 0x843C\r\n            \r\n","\r\n            This property returns 0 for non-blittable types.\r\n            ":"\r\n            对于非 blittable 类型，此属性返回 0。\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_2D = 0x8069\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_2D = 0x8069\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9\r\n            \r\n","\r\n            Original was GL_QUERY_TARGET = 0x82EA\r\n            ":"\r\n            原来是 GL_QUERY_TARGET = 0x82EA\r\n            \r\n","\r\n            Original was GL_VIDEO_BUFFER_BINDING_NV = 0x9021\r\n            ":"\r\n            原来是 GL_VIDEO_BUFFER_BINDING_NV = 0x9021\r\n            \r\n","The first axis of the JoystickDevice.":"JoystickDevice 的第一个轴。\r\n","[requires: v1.0 and 1.0]\r\n            Enable or disable server-side GL capabilities\r\n            ":"[要求：v1.0 和 1.0]\r\n            启用或禁用服务器端 GL 功能\r\n            \r\n","\r\n            Original was GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF\r\n            ":"\r\n            原来是 GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF\r\n            \r\n","\r\n            Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT. The initial value is GL_KEEP.\r\n            ":"\r\n            指定模板测试失败时要采取的操作。接受八个符号常量：GL_KEEP、GL_ZERO、GL_REPLACE、GL_INCR、GL_INCR_WRAP、GL_DECR、GL_DECR_WRAP 和 GL_INVERT。初始值为 GL_KEEP。\r\n            \r\n","\r\n            Original was GL_DEPTH_BUFFER_BIT6_QCOM = 0x00004000\r\n            ":"\r\n            原来是 GL_DEPTH_BUFFER_BIT6_QCOM = 0x00004000\r\n            \r\n","A new Matrix2x4d which holds the result of the subtraction":"保存减法结果的新 Matrix2x4d\r\n","[length: n] \r\n            Specifies an array of names of transform feedback objects to delete.\r\n            ":"[长度：n]\r\n            指定要删除的变换反馈对象的名称数组。\r\n            \r\n"," \r\n            Specifies the width of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels wide.\r\n            ":"指定纹理图像的宽度。所有实现都支持至少 16384 纹素宽的 2D 纹理和立方体贴图纹理图像。\r\n            \r\n","[requires: v1.1]\r\n            Copy a one-dimensional texture subimage\r\n            ":"[要求：v1.1]\r\n            复制一维纹理子图像\r\n            \r\n","\r\n            Original was GL_2PASS_0_SGIS = 0x80A2\r\n            ":"\r\n            原来是 GL_2PASS_0_SGIS = 0x80A2\r\n            \r\n","\r\n            Original was GL_MATRIX16_ARB = 0x88D0\r\n            ":"\r\n            原来是 GL_MATRIX16_ARB = 0x88D0\r\n            \r\n","\r\n            Original was GL_MAX_FRAMEBUFFER_LAYERS_EXT = 0x9317\r\n            ":"\r\n            原来是 GL_MAX_FRAMEBUFFER_LAYERS_EXT = 0x9317\r\n            \r\n","\r\n            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.\r\n            ":"\r\n            为当前颜色指定一个新的 alpha 值。仅包含在四参数 glColor4 命令中。\r\n            \r\n","\r\n            Original was GL_SEPARATE_SPECULAR_COLOR = 0x81FA\r\n            ":"原来是 GL_SEPARATE_SPECULAR_COLOR = 0x81FA\r\n            \r\n","\r\n            Original was GL_SOURCE0_RGB_EXT = 0x8580\r\n            ":"\r\n            原来是 GL_SOURCE0_RGB_EXT = 0x8580\r\n            \r\n","The clear key (Keypad5 with NumLock disabled, on typical keyboards).":"清除键（禁用 NumLock 的 Keypad5，在典型键盘上）。\r\n","\r\n            Original was GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53\r\n            \r\n","\r\n            Gets the number of axes supported by this ":"\r\n            获取此支持的轴数\r\n","[requires: v1.0][deprecated: v3.2]\r\n            Set light source parameters\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            设置光源参数\r\n            \r\n","\r\n            Used in GL.Ext.IndexMaterial\r\n            ":"\r\n            用于 GL.Ext.IndexMaterial\r\n            \r\n","\r\n            Original was GL_VIEWPORT_SUBPIXEL_BITS = 0x825C\r\n            ":"\r\n            原来是 GL_VIEWPORT_SUBPIXEL_BITS = 0x825C\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Copy part of the data store of a buffer object to the data store of another buffer object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            将缓冲区对象的部分数据存储复制到另一个缓冲区对象的数据存储\r\n            \r\n","\r\n            Original was GL_TEXCOORD3_BIT_PGI = 0x40000000\r\n            ":"\r\n            原来是 GL_TEXCOORD3_BIT_PGI = 0x40000000\r\n            \r\n"," \r\n            Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.\r\n            ":" \r\n            指定正面或背面面是剔除的候选面。接受符号常量 Front、Back 和 FrontAndBack。初始值为返回。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Delete named sampler objects\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            删除命名采样器对象\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064\r\n            \r\n"," \r\n            Specifies the renderbuffer object that is to be attached.\r\n            ":" \r\n            指定要附加的渲染缓冲区对象。\r\n            \r\n","[requires: v1.1 or KHR_debug|VERSION_1_1|VERSION_4_3|VERSION_4_3]\r\n            Return the address of the specified pointer\r\n            ":"[要求：v1.1 或 KHR_debug|VERSION_1_1|VERSION_4_3|VERSION_4_3]\r\n            返回指定指针的地址\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Set front and back stencil test actions\r\n            ":"[要求：v1.0 和 1.0]\r\n            设置前后模板测试动作\r\n            \r\n"," to retrieve the exact\r\n            capabilities of a given device.\r\n            Use ":" 检索确切的\r\n            给定设备的能力。\r\n            使用\r\n","\r\n            Original was GL_HISTOGRAM_RED_SIZE_EXT = 0x8028\r\n            ":"\r\n            原来是 GL_HISTOGRAM_RED_SIZE_EXT = 0x8028\r\n            \r\n","\r\n            Original was GL_FRAGMENT_LIGHT7_SGIX = 0x8413\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHT7_SGIX = 0x8413\r\n            \r\n","\r\n            Gets a bitwise combination representing the ":"\r\n            获取表示的按位组合\r\n","\r\n            Original was GL_RENDERBUFFER_BLUE_SIZE_OES = 0x8D52\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_BLUE_SIZE_OES = 0x8D52\r\n            \r\n","\r\n            Original was GL_PIXEL_TEXTURE_SGIS = 0x8353\r\n            ":"\r\n            原来是 GL_PIXEL_TEXTURE_SGIS = 0x8353\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Delete a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            删除着色器对象\r\n            \r\n","\r\n            Original was GL_LOW_FLOAT = 0x8DF0\r\n            ":"\r\n            原来是 GL_LOW_FLOAT = 0x8DF0\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12\r\n            \r\n","\r\n            Original was GL_OES_blend_func_separate = 1\r\n            ":"\r\n            原来是 GL_OES_blend_func_separate = 1\r\n            \r\n","GameControllerOpen":"GameController打开\r\n","\r\n            Original was GL_R32F_EXT = 0x822E\r\n            ":"\r\n            原来是 GL_R32F_EXT = 0x822E\r\n            \r\n","\r\n            The return value is the handle to the current cursor. If there is \r\n            no cursor, the return value is null.\r\n            ":"\r\n            返回值是当前游标的句柄。如果有\r\n            没有游标，返回值为空。\r\n            \r\n","\r\n            Original was GL_BLEND_SRC_RGB = 0x80C9\r\n            ":"\r\n            原来是 GL_BLEND_SRC_RGB = 0x80C9\r\n            \r\n","[length: 4] \r\n            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.\r\n            ":"[长度：4]\r\n            对于矢量命令 (glVertexAttrib*v)，指定指向要用于通用顶点属性的值数组的指针。\r\n            \r\n","\r\n            Original was GL_FETCH_PER_SAMPLE_ARM = 0x8F65\r\n            ":"原来是 GL_FETCH_PER_SAMPLE_ARM = 0x8F65\r\n            \r\n","[requires: OES_draw_texture]":"[需要：OES_draw_texture]\r\n"," \r\n            Specify the number of instances that will pass between updates of the generic attribute at slot index.\r\n            ":"指定将在插槽索引处的通用属性更新之间传递的实例数。\r\n            \r\n","\r\n            Original was GL_TEXTURE_MAX_LOD_SGIS = 0x813B\r\n            ":"\r\n            原来是 GL_TEXTURE_MAX_LOD_SGIS = 0x813B\r\n            \r\n","[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]\r\n            Specify the value of a uniform variable for a specified program object\r\n            ":"[要求：v4.1 或 ARB_separate_shader_objects|VERSION_4_1]\r\n            为指定的程序对象指定统一变量的值\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER12 = 0x8831\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER12 = 0x8831\r\n            \r\n","\r\n            Original was GL_TRANSLATE_2D_NV = 0x9090\r\n            ":"\r\n            原来是 GL_TRANSLATE_2D_NV = 0x9090\r\n            \r\n"," \r\n            Specifies the offset in bytes between each aggregate array element.\r\n            ":" \r\n            指定每个聚合数组元素之间的偏移量（以字节为单位）。\r\n            \r\n"," if this instance has an up digital pad button; otherwise, ":" 如果此实例有向上数字键盘按钮；否则，\r\n","\r\n            Nonzero indicates that the function retrieves a message other than WM_QUIT.\r\n            Zero indicates that the function retrieves the WM_QUIT message, or that lpMsg is an invalid pointer.\r\n            1 indicates that an error occurred  for example, the function fails if hWnd is an invalid window handle.\r\n            To get extended error information, call GetLastError.\r\n            ":"\r\n            非零表示函数检索的消息不是 WM_QUIT。\r\n            零表示函数检索到 WM_QUIT 消息，或者 lpMsg 是无效指针。\r\n            1 表示发生了错误 例如，如果 hWnd 是无效的窗口句柄，则函数失败。\r\n            要获取扩展的错误信息，请调用 GetLastError。\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_RECTANGLE = 0x84F7\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_RECTANGLE = 0x84F7\r\n            \r\n","\r\n            Original was GL_TEXTURE_SAMPLES = 0x9106\r\n            ":"\r\n            原来是 GL_TEXTURE_SAMPLES = 0x9106\r\n            \r\n","\r\n            The type of the input device.\r\n            ":"\r\n            输入设备的类型。\r\n            \r\n","[length: 2] \r\n            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.\r\n            ":"[长度：2]\r\n            指定目标纹理单元的 s、t、r 和 q 纹理坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n"," \r\n            Specifies the integer name of the first display list to delete.\r\n            ":" \r\n            指定要删除的第一个显示列表的整数名称。\r\n            \r\n","\r\n            Specifies a texel offset in the x direction within the texture array.\r\n            ":"\r\n            指定纹理数组中 x 方向上的纹素偏移。\r\n            \r\n"," \r\n            The name of an existing buffer to bind to the vertex buffer binding point.\r\n            ":" \r\n            要绑定到顶点缓冲区绑定点的现有缓冲区的名称。\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5\r\n            \r\n","The menu key.":"菜单键。\r\n","[length: pname] \r\n            Specifies a single symbolic constant, one of Add, AddSigned, Interpolate, Modulate, Decal, Blend, Replace, Subtract, Combine, Texture, Constant, PrimaryColor, Previous, SrcColor, OneMinusSrcColor, SrcAlpha, OneMinusSrcAlpha, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the RgbScale or AlphaScale.\r\n            ":"[长度：pname]\r\n            指定单个符号常量，Add、AddSigned、Interpolate、Modulate、Decal、Blend、Replace、Subtract、Combine、Texture、Constant、PrimaryColor、Previous、SrcColor、OneMinusSrcColor、SrcAlpha、OneMinusSrcAlpha 之一，点精灵的单个布尔值纹理坐标替换，纹理细节层次偏差的单个浮点值，或者在指定 RgbScale 或 AlphaScale 时为 1.0、2.0 或 4.0。\r\n            \r\n","\r\n            Original was GL_PROGRAM_LENGTH_ARB = 0x8627\r\n            ":"\r\n            原来是 GL_PROGRAM_LENGTH_ARB = 0x8627\r\n            \r\n"," \r\n            Specifies the target from whose data store data should be read.\r\n            ":" \r\n            指定应从其数据存储中读取数据的目标。\r\n            \r\n","\r\n            Original was GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45\r\n            ":"\r\n            原来是 GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45\r\n            \r\n"," \r\n            For the vector (glUniform*v) commands, specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix (glUniformMatrix*) commands, specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.\r\n            ":" \r\n            对于向量 (glUniform*v) 命令，指定要修改的元素数。如果目标统一变量不是数组，这应该是 1，如果是数组，则应该是 1 或更多。对于矩阵 (glUniformMatrix*) 命令，指定要修改的矩阵数。如果目标统一变量不是矩阵数组，则它应该为 1，如果它是矩阵数组，则它应该为 1 或更多。\r\n            \r\n","\r\n            Original was GL_Version = 0X1f02\r\n            ":"\r\n            原来是 GL_Version = 0X1f02\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88\r\n            \r\n","\r\n            The fifth extra mouse button.\r\n            ":"\r\n            第五个额外的鼠标按钮。\r\n            \r\n","A new Matrix2d which holds the result of the multiplication":"保存乘法结果的新 Matrix2d\r\n","[requires: ANGLE_framebuffer_blit]\r\n            Copy a block of pixels from the read framebuffer to the draw framebuffer\r\n            ":"[需要：ANGLE_framebuffer_blit]\r\n            将像素块从读取帧缓冲区复制到绘制帧缓冲区\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_RGTC2_RG = 0x82D1\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_RGTC2_RG = 0x82D1\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21\r\n            \r\n","\r\n            Original was GL_THREE = 3\r\n            ":"\r\n            原来是 GL_THREE = 3\r\n            \r\n","\r\n            Original was GL_OPERAND3_RGB_NV = 0x8593\r\n            ":"\r\n            原来是 GL_OPERAND3_RGB_NV = 0x8593\r\n            \r\n","\r\n            Original was GL_REG_15_ATI = 0x8930\r\n            ":"\r\n            原来是 GL_REG_15_ATI = 0x8930\r\n            \r\n","The tenth axis of the JoystickDevice.":"JoystickDevice 的第十轴。\r\n","\r\n            Original was GL_BGR = 0x80E0\r\n            ":"\r\n            原来是 GL_BGR = 0x80E0\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124\r\n            \r\n","\r\n            Original was GL_Byte = 0X1400\r\n            ":"\r\n            原来是 GL_Byte = 0X1400\r\n            \r\n","\r\n            Gets the number of buttons supported by this ":"\r\n            获取此支持的按钮数量\r\n","\r\n            Original was GL_ALPHA32F_ARB = 0x8816\r\n            ":"\r\n            原来是 GL_ALPHA32F_ARB = 0x8816\r\n            \r\n","\r\n            Original was GL_PATH_MITER_LIMIT_NV = 0x907A\r\n            ":"\r\n            原来是 GL_PATH_MITER_LIMIT_NV = 0x907A\r\n            \r\n"," \r\n            The address of an array of unsigned integers contianing the ids of the messages to enable or disable.\r\n            ":" \r\n            包含要启用或禁用的消息 ID 的无符号整数数组的地址。\r\n            \r\n"," \r\n            Specifies the type of shader to be created. Must be one of ComputeShader, VertexShader, TessControlShader, TessEvaluationShader, GeometryShader, or FragmentShader.\r\n            ":" \r\n            指定要创建的着色器类型。必须是 ComputeShader、VertexShader、TessControlShader、TessEvaluationShader、GeometryShader 或 FragmentShader 之一。\r\n            \r\n"," \r\n            Specifies the number of textures to be deleted.\r\n            ":" \r\n            指定要删除的纹理数。\r\n            \r\n","\r\n            Original was GL_DECR_WRAP_EXT = 0x8508\r\n            ":"\r\n            原来是 GL_DECR_WRAP_EXT = 0x8508\r\n            \r\n","\r\n            Original was GL_NO_RESET_NOTIFICATION = 0x8261\r\n            ":"\r\n            原来是 GL_NO_RESET_NOTIFICATION = 0x8261\r\n            \r\n","\r\n            Original was GL_Bool = 0X8b56\r\n            ":"\r\n            原来是 GL_Bool = 0X8b56\r\n            \r\n","Scale factor for the y axis.":"y 轴的比例因子。\r\n","\r\n            Used in GL.Apple.DisableVertexAttrib, GL.Apple.EnableVertexAttrib and 1 other function\r\n            ":"\r\n            用于 GL.Apple.DisableVertexAttrib、GL.Apple.EnableVertexAttrib 和 1 个其他函数\r\n            \r\n","\r\n            Original was GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 0x851C\r\n            ":"\r\n            原来是 GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 0x851C\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F\r\n            \r\n","\r\n            Original was GL_2_BYTES = 0x1407\r\n            ":"\r\n            原来是 GL_2_BYTES = 0x1407\r\n            \r\n","\r\n            Original was GL_DUAL_ALPHA16_SGIS = 0x8113\r\n            ":"原来是 GL_DUAL_ALPHA16_SGIS = 0x8113\r\n            \r\n"," for all keyboard devices.\r\n            ":" 适用于所有键盘设备。\r\n            \r\n","\r\n            Original was GL_TEXTURE_GATHER_SHADOW = 0x82A3\r\n            ":"\r\n            原来是 GL_TEXTURE_GATHER_SHADOW = 0x82A3\r\n            \r\n","\r\n            Original was GL_DEPTH_CLAMP_FAR_AMD = 0x901F\r\n            ":"\r\n            原来是 GL_DEPTH_CLAMP_FAR_AMD = 0x901F\r\n            \r\n","\r\n            Specifies the vertical distance from the origin of the current character cell to the origin of the next character cell.\r\n            ":"\r\n            指定从当前字符单元格的原点到下一个字符单元格的原点的垂直距离。\r\n            \r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED\r\n            \r\n"," \r\n            Specify the x, y, and z coordinates of a translation vector.\r\n            ":" \r\n            指定平移向量的 x、y 和 z 坐标。\r\n            \r\n","\r\n            Original was GL_SGX_PROGRAM_BINARY_IMG = 0x9130\r\n            ":"\r\n            原来是 GL_SGX_PROGRAM_BINARY_IMG = 0x9130\r\n            \r\n","\r\n            Original was GL_FRAMEZOOM_FACTOR_SGIX = 0x818C\r\n            ":"\r\n            原来是 GL_FRAMEZOOM_FACTOR_SGIX = 0x818C\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 0x93F1\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 0x93F1\r\n            \r\n"," \r\n            The color number to bind the user-defined varying out variable to\r\n            ":" \r\n            将用户定义的 varying out 变量绑定到的颜色编号\r\n            \r\n","\r\n            Original was GL_VERTEX_SHADER_ARB = 0x8B31\r\n            ":"\r\n            原来是 GL_VERTEX_SHADER_ARB = 0x8B31\r\n            \r\n","\r\n            Original was GL_IMAGE_PIXEL_TYPE = 0x82AA\r\n            ":"\r\n            原来是 GL_IMAGE_PIXEL_TYPE = 0x82AA\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C\r\n            \r\n","\r\n            Gets or sets the W component of this instance.\r\n            ":"\r\n            获取或设置此实例的 W 组件。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Bind a named sampler to a texturing target\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            将命名采样器绑定到纹理目标\r\n            \r\n"," indicating whether the right mouse button is pressed.\r\n            This property is intended for XNA compatibility.\r\n            ":" 指示是否按下鼠标右键。\r\n            此属性旨在实现 XNA 兼容性。\r\n            \r\n","[requires: v2.0]\r\n            Validates a program object\r\n            ":"[要求：v2.0]\r\n            验证程序对象\r\n            \r\n","\r\n            Get color lookup table parameters\r\n            ":"\r\n            获取颜色查找表参数\r\n            \r\n"," \r\n            Must be 0.\r\n            ":" \r\n            必须为 0。\r\n            \r\n","\r\n            Original was GL_DISCRETE_AMD = 0x9006\r\n            ":"\r\n            原来是 GL_DISCRETE_AMD = 0x9006\r\n            \r\n","\r\n            Y button\r\n            ":"\r\n            Y键\r\n            \r\n","\r\n            Original was GL_R16 = 0x822A\r\n            ":"\r\n            原来是 GL_R16 = 0x822A\r\n            \r\n","\r\n            The hat is in its top position.\r\n            ":"\r\n            帽子处于顶部位置。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x8C4D\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x8C4D\r\n            \r\n","\r\n            Original was GL_ShaderSourceLength = 0X8b88\r\n            ":"\r\n            原来是 GL_ShaderSourceLength = 0X8b88\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25\r\n            \r\n","GamePadType.Unknown":"GamePadType.Unknown\r\n","\r\n            Original was GL_ALPHA16F_ARB = 0x881C\r\n            ":"\r\n            原来是 GL_ALPHA16F_ARB = 0x881C\r\n            \r\n","\r\n            Original was GL_COMBINE_RGB_ARB = 0x8571\r\n            ":"\r\n            原来是 GL_COMBINE_RGB_ARB = 0x8571\r\n            \r\n"," \r\n            Specifies the target texture. Must be one of Texture3D or Texture2DArray.\r\n            ":" \r\n            指定目标纹理。必须是 Texture3D 或 Texture2DArray 之一。\r\n            \r\n"," \r\n            The format of the pixel data in table. The possible values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.\r\n            ":" \r\n            表中像素数据的格式。可能的值为红色、绿色、蓝色、Alpha、亮度、LuminanceAlpha、Rgb、Bgr、Rgba 和 Bgra。\r\n            \r\n","[length: pname] \r\n            Returns the texture parameters.\r\n            ":"[长度：pname]\r\n            返回纹理参数。\r\n            \r\n","\r\n            Specify the x, y, and z coordinates of a vector, respectively.\r\n            ":"\r\n            分别指定向量的 x、y 和 z 坐标。\r\n            \r\n","\r\n            Original was GL_TEXTURE5_ARB = 0x84C5\r\n            ":"\r\n            原来是 GL_TEXTURE5_ARB = 0x84C5\r\n            \r\n"," representing the location of the mouse for the event.\r\n            ":" 表示事件的鼠标位置。\r\n            \r\n"," \r\n            Specifies a pointer to the first edge flag in the array. The initial value is 0.\r\n            ":" \r\n            指定指向数组中第一个边缘标志的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_SHORT = 0X1402\r\n            ":"\r\n            原来是 GL_SHORT = 0X1402\r\n            \r\n"," \r\n            Specify the lower left corner of the scissor box. Initially (0, 0).\r\n            ":" \r\n            指定剪刀框的左下角。最初是 (0, 0)。\r\n            \r\n","\r\n            Defines the interface for JoystickDevice drivers.\r\n            ":"\r\n            定义 JoystickDevice 驱动程序的接口。\r\n            \r\n","\r\n            Original was GL_QUERY_BY_REGION_WAIT = 0x8E15\r\n            ":"\r\n            原来是 GL_QUERY_BY_REGION_WAIT = 0x8E15\r\n            \r\n","\r\n            Original was GL_COLOR_INDEX16_EXT = 0x80E7\r\n            ":"\r\n            原来是 GL_COLOR_INDEX16_EXT = 0x80E7\r\n            \r\n"," \r\n            The parameter to be retrieved. Must be one of MinmaxFormat or MinmaxSink.\r\n            ":" \r\n            要检索的参数。必须是 MinmaxFormat 或 MinmaxSink 之一。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX16 = 0x8D49\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX16 = 0x8D49\r\n            \r\n","\r\n            Original was GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9\r\n            ":"\r\n            原来是 GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9\r\n            \r\n","\r\n            Compares the numerical value of this instance to the specified ContextHandle and\r\n            returns a value indicating their relative order.\r\n            ":"\r\n            将此实例的数值与指定的 ContextHandle 进行比较\r\n            返回一个值，指示它们的相对顺序。\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6\r\n            \r\n","[length: count*2]":"[长度：计数*2]\r\n","\r\n            Original was GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B\r\n            ":"\r\n            原来是 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B\r\n            \r\n","\r\n            Original was GL_MAX_CLIP_DISTANCES = 0x0D32\r\n            ":"\r\n            原来是 GL_MAX_CLIP_DISTANCES = 0x0D32\r\n            \r\n"," \r\n            Specifies the parameter whose value to retrieve from the renderbuffer bound to target.\r\n            ":" \r\n            指定要从绑定到目标的渲染缓冲区中检索其值的参数。\r\n            \r\n","\r\n            Original was GL_SLUMINANCE8_ALPHA8 = 0x8C45\r\n            ":"\r\n            原来是 GL_SLUMINANCE8_ALPHA8 = 0x8C45\r\n            \r\n","The first quaternion":"第一个四元数\r\n","\r\n            Original was GL_SIGNALED_APPLE = 0x9119\r\n            ":"\r\n            原来是 GL_SIGNALED_APPLE = 0x9119\r\n            \r\n","\r\n            Original was GL_UNKNOWN_CONTEXT_RESET_EXT = 0x8255\r\n            ":"\r\n            原来是 GL_UNKNOWN_CONTEXT_RESET_EXT = 0x8255\r\n            \r\n","\r\n            Original was GL_POINT_SIZE_MIN_SGIS = 0x8126\r\n            ":"\r\n            原来是 GL_POINT_SIZE_MIN_SGIS = 0x8126\r\n            \r\n","\r\n            Original was GL_MAX_LABEL_LENGTH = 0x82E8\r\n            ":"\r\n            原来是 GL_MAX_LABEL_LENGTH = 0x82E8\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Attach a renderbuffer object to a framebuffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            将渲染缓冲区对象附加到帧缓冲区对象\r\n            \r\n","\r\n            Original was GL_Texture23 = 0X84d7\r\n            ":"\r\n            原来是 GL_Texture23 = 0X84d7\r\n            \r\n","\r\n            Original was GL_ALPHA_FLOAT32_APPLE = 0x8816\r\n            ":"\r\n            原来是 GL_ALPHA_FLOAT32_APPLE = 0x8816\r\n            \r\n","\r\n            Original was GL_R11F_G11F_B10F = 0x8C3A\r\n            ":"\r\n            原来是 GL_R11F_G11F_B10F = 0x8C3A\r\n            \r\n","[length: primcount] \r\n            Points to an array of starting indices in the enabled arrays.\r\n            ":"[长度：primcount]\r\n            指向已启用数组中的起始索引数组。\r\n            \r\n"," \r\n            Specify the number of samples in the texture.\r\n            ":" \r\n            指定纹理中的样本数。\r\n            \r\n","[requires: v2.0]\r\n            Returns information about an active uniform variable for the specified program object\r\n            ":"[要求：v2.0]\r\n            返回有关指定程序对象的活动统一变量的信息\r\n            \r\n","[requires: OES_blend_subtract]\r\n            Specify the equation used for both the RGB blend equation and the Alpha blend equation\r\n            ":"[要求：OES_blend_subtract]\r\n            指定用于 RGB 混合方程和 Alpha 混合方程的方程\r\n            \r\n","\r\n            Original was GL_MAX_MULTIVIEW_BUFFERS_EXT = 0x90F2\r\n            ":"\r\n            原来是 GL_MAX_MULTIVIEW_BUFFERS_EXT = 0x90F2\r\n            \r\n","[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]\r\n            Retrieve the value of a subroutine uniform of a given shader stage of the current program\r\n            ":"[需要：v4.0 或 ARB_shader_subroutine|VERSION_4_0]\r\n            检索当前程序的给定着色器阶段的子例程统一的值\r\n            \r\n"," \r\n            The internal format of the color table. The allowable values are Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, and Rgba16.\r\n            ":" \r\n            颜色表的内部格式。允许的值为 Alpha、Alpha4、Alpha8、Alpha12、Alpha16、Luminance、Luminance4、Luminance8、Luminance12、Luminance16、LuminanceAlpha、Luminance4Alpha4、Luminance6Alpha2、Luminance8Alpha8、Luminance12Alpha4、Luminance12Alpha12、Luminance16Alpha16、Intensity、Intensity4、LuminanceG3B、Intensity162、Intensity162、 Rgb、Rgb4、Rgb5、Rgb8、Rgb10、Rgb12、Rgb16、Rgba、Rgba2、Rgba4、Rgb5A1、Rgba8、Rgb10A2、Rgba12 和 Rgba16。\r\n            \r\n","\r\n            Original was GL_MODELVIEW3_ARB = 0x8723\r\n            ":"\r\n            原来是 GL_MODELVIEW3_ARB = 0x8723\r\n            \r\n","\r\n            Original was GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B\r\n            ":"\r\n            原来是 GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B\r\n            \r\n","\r\n            Original was GL_MAX_DRAW_BUFFERS_ARB = 0x8824\r\n            ":"\r\n            原来是 GL_MAX_DRAW_BUFFERS_ARB = 0x8824\r\n            \r\n","To get detailed information -- such as the header and the content of the raw input -- call GetRawInputData.":"要获取详细信息（例如原始输入的标头和内容），请调用 GetRawInputData。\r\n","\r\n            Original was GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC\r\n            \r\n","\r\n            Original was GL_TEXTURE_BLUE_TYPE = 0x8C12\r\n            ":"\r\n            原来是 GL_TEXTURE_BLUE_TYPE = 0x8C12\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6\r\n            \r\n","\r\n            The identity matrix.\r\n            ":"\r\n            单位矩阵。\r\n            \r\n","\r\n            Original was GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626\r\n            ":"\r\n            原来是 GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626\r\n            \r\n","\r\n            The XSelectInput() function requests that the X server report the events associated\r\n            with the specified event mask.\r\n            ":"\r\n            XSelectInput() 函数请求 X 服务器报告关联的事件\r\n            使用指定的事件掩码。\r\n            \r\n"," \r\n            Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by both functions. Additionally HalfFloat, Float, Fixed, Int2101010Rev, and UnsignedInt2101010Rev are accepted by glVertexAttribPointer. The initial value is Float.\r\n            ":" \r\n            指定数组中每个组件的数据类型。这两个函数都接受符号常量 Byte、UnsignedByte、Short、UnsignedShort、Int 和 UnsignedInt。此外，glVertexAttribPointer 接受 HalfFloat、Float、Fixed、Int2101010Rev 和 UnsignedInt2101010Rev。初始值为浮点数。\r\n            \r\n"," \r\n            The X coordinate of the left edge of the destination region.\r\n            ":" \r\n            目标区域左边缘的 X 坐标。\r\n            \r\n"," \r\n            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.\r\n            ":" \r\n            指定指向数组中第一条法线的第一个坐标的指针。初始值为 0。\r\n            \r\n","\r\n            Used in GL.Amd.GetPerfMonitorCounterData, GL.Amd.GetPerfMonitorCounterInfo and 165 other functions\r\n            ":"\r\n            用于 GL.Amd.GetPerfMonitorCounterData、GL.Amd.GetPerfMonitorCounterInfo 和 165 个其他函数\r\n            \r\n","\r\n            Constructs a new instance with the specified window handle and paren.t\r\n            ":"\r\n            构造具有指定窗口句柄和 parent.t 的新实例\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A\r\n            \r\n","\r\n            Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.\r\n            ":"\r\n            指定用于为每个多边形创建可变深度偏移的比例因子。初始值为 0。\r\n            \r\n"," structure to test for inequality.":" 测试不平等的结构。\r\n"," is a guitar.\r\n            ":" 是一把吉他。\r\n            \r\n","\r\n            Provides access to Joystick devices.\r\n            Joystick devices provide a varying number of axes and buttons.\r\n            Use ":"\r\n            提供对操纵杆设备的访问。\r\n            操纵杆设备提供不同数量的轴和按钮。\r\n            使用\r\n"," \r\n            Specifies the number of buffers to bind.\r\n            ":" \r\n            指定要绑定的缓冲区数。\r\n            \r\n","\r\n            Original was GL_FLOAT_VEC4_ARB = 0x8B52\r\n            ":"\r\n            原来是 GL_FLOAT_VEC4_ARB = 0x8B52\r\n            \r\n","\r\n            Original was GL_MATRIX10 = 0x88CA\r\n            ":"\r\n            原来是 GL_MATRIX10 = 0x88CA\r\n            \r\n","\r\n            Gets a value indicating whether the shutdown sequence has been initiated\r\n            for this window, by calling GameWindow.Exit() or hitting the 'close' button.\r\n            If this property is true, it is no longer safe to use any OpenTK.Input or\r\n            OpenTK.Graphics.OpenGL functions or properties.\r\n            ":"\r\n            获取一个值，该值指示关闭序列是否已启动\r\n            对于此窗口，通过调用 GameWindow.Exit() 或点击“关闭”按钮。\r\n            如果此属性为真，则使用任何 OpenTK.Input 或\r\n            OpenTK.Graphics.OpenGL 函数或属性。\r\n            \r\n"," \r\n            Must be one of Histogram or ProxyHistogram.\r\n            ":" \r\n            必须是 Histogram 或 ProxyHistogram 之一。\r\n            \r\n","\r\n            Specifies which face or faces are being updated. Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK.\r\n            ":"\r\n            指定要更新的面或面。必须是 GL_FRONT、GL_BACK 或 GL_FRONT_AND_BACK 之一。\r\n            \r\n","\r\n            Reset minmax table entries to initial values\r\n            ":"\r\n            将 minmax 表条目重置为初始值\r\n            \r\n","\r\n            Original was GL_LUMINANCE16 = 0x8042\r\n            ":"\r\n            原来是 GL_LUMINANCE16 = 0x8042\r\n            \r\n","\r\n            Original was GL_TEXTURE_RED_SIZE = 0x805C\r\n            ":"\r\n            原来是 GL_TEXTURE_RED_SIZE = 0x805C\r\n            \r\n","\r\n            Handle to the parent window, if the window is a child window.\r\n            If the window is owned, this member identifies the owner window.\r\n            If the window is not a child or owned window, this member is NULL.\r\n            ":"\r\n            如果窗口是子窗口，则为父窗口的句柄。\r\n            如果窗口是拥有的，这个成员标识所有者窗口。\r\n            如果窗口不是子窗口或拥有的窗口，则此成员为 NULL。\r\n            \r\n","\r\n            Original was GL_SOFTLIGHT_KHR = 0x929C\r\n            ":"\r\n            原来是 GL_SOFTLIGHT_KHR = 0x929C\r\n            \r\n","\r\n            Gets a System.Boolean indicating the state of the specified MouseButton.\r\n            ":"\r\n            获取一个 System.Boolean，指示指定的 MouseButton 的状态。\r\n            \r\n","\r\n            Original was GL_GENERATE_MIPMAP_SGIS = 0x8191\r\n            ":"\r\n            原来是 GL_GENERATE_MIPMAP_SGIS = 0x8191\r\n            \r\n"," \r\n            Specifies the offset of the start of the range of the buffer's data store to attach.\r\n            ":" \r\n            指定要附加的缓冲区数据存储范围的起始偏移量。\r\n            \r\n","[requires: ANGLE_framebuffer_multisample]\r\n            Establish data storage, format, dimensions and sample count of a renderbuffer object's image\r\n            ":"[需要：ANGLE_framebuffer_multisample]\r\n            建立渲染缓冲区对象图像的数据存储、格式、尺寸和样本计数\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B\r\n            \r\n"," \r\n            Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.\r\n            ":" \r\n            指定纹理图像的高度。所有实现都支持至少 16 纹素高的 3D 纹理图像。\r\n            \r\n","\r\n            Original was GL_REFLECTION_MAP_ARB = 0x8512\r\n            ":"\r\n            原来是 GL_REFLECTION_MAP_ARB = 0x8512\r\n            \r\n","\r\n            Original was GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2\r\n            ":"\r\n            原来是 GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2\r\n            \r\n","\r\n            Gets or sets the vertical location of this window in screen coordinates.\r\n            The coordinates are specified in device-independent points.\r\n            ":"\r\n            获取或设置此窗口在屏幕坐标中的垂直位置。\r\n            坐标以与设备无关的点指定。\r\n            \r\n","\r\n            Original was GL_UNPACK_RESAMPLE_OML = 0x8985\r\n            ":"\r\n            原来是 GL_UNPACK_RESAMPLE_OML = 0x8985\r\n            \r\n"," \r\n            The Y coordinate of the top edge of the souce region to copy.\r\n            ":" \r\n            要复制的源区域上边缘的 Y 坐标。\r\n            \r\n","[requires: ARB_vertex_shader]\r\n            Returns the location of an attribute variable\r\n            ":"[需要：ARB_vertex_shader]\r\n            返回属性变量的位置\r\n            \r\n","A pointer to a null-terminated byte array.":"指向以 null 结尾的字节数组的指针。\r\n","\r\n            Original was GL_LUMINANCE4_ALPHA4_EXT = 0x8043\r\n            ":"\r\n            原来是 GL_LUMINANCE4_ALPHA4_EXT = 0x8043\r\n            \r\n","\r\n            Original was GL_TEXTURE_LEQUAL_R_SGIX = 0x819C\r\n            ":"原来是 GL_TEXTURE_LEQUAL_R_SGIX = 0x819C\r\n            \r\n","\r\n            The Type must also implement a static function called LoadDelegate with the\r\n            following signature:\r\n            ":"\r\n            Type 还必须实现一个名为 LoadDelegate 的静态函数\r\n            以下签名：\r\n            \r\n","\r\n            Original was GL_NAMED_STRING_TYPE_ARB = 0x8DEA\r\n            ":"\r\n            原来是 GL_NAMED_STRING_TYPE_ARB = 0x8DEA\r\n            \r\n","If the window was previously visible, the return value is true. Otherwise false.":"如果窗口以前是可见的，则返回值为 true。否则为假。\r\n","[requires: v1.0 and 1.0]\r\n            Return a string describing the current GL connection\r\n            ":"[要求：v1.0 和 1.0]\r\n            返回描述当前 GL 连接的字符串\r\n            \r\n","The name of the game controller name.":"游戏控制器名称的名称。\r\n","\r\n            Original was GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520\r\n            \r\n"," \r\n            Specifies the target buffer object. The symbolic constant must be ArrayBuffer, ElementArrayBuffer, PixelPackBuffer, or PixelUnpackBuffer.\r\n            ":" \r\n            指定目标缓冲区对象。符号常量必须是 ArrayBuffer、ElementArrayBuffer、PixelPackBuffer 或 PixelUnpackBuffer。\r\n            \r\n"," is a flight stick.\r\n            ":" 是飞行棒。\r\n            \r\n","\r\n            Used in GL.Ati.ClientActiveVertexStream, GL.Ati.NormalStream3 and 5 other functions\r\n            ":"\r\n            用于GL.Ati.ClientActiveVertexStream、GL.Ati.NormalStream3等5个函数\r\n            \r\n","The number 1 key.":"1 号键。\r\n","\r\n            Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when displaying the window for the first time.\r\n            ":"\r\n            激活并显示一个窗口。如果窗口被最小化或最大化，系统会将其恢复到原来的大小和位置。应用程序应在首次显示窗口时指定此标志。\r\n            \r\n","\r\n            Original was GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352\r\n            ":"\r\n            原来是 GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352\r\n            \r\n"," for all keyboard devices.\r\n            This method is equivalent to ":" 适用于所有键盘设备。\r\n            这个方法相当于\r\n","\r\n            Original was GL_DRAW_BUFFER3_EXT = 0x8828\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER3_EXT = 0x8828\r\n            \r\n","\r\n            Original was GL_Texture26 = 0X84da\r\n            ":"\r\n            原来是 GL_Texture26 = 0X84da\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT8_EXT = 0x8CE8\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT8_EXT = 0x8CE8\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B\r\n            ":"\r\n            原来是 GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B\r\n            \r\n"," \r\n            for glBlendEquationi, specifies the index of the draw buffer for which to set the blend equation.\r\n            ":" \r\n            对于 glBlendEquationi，指定要为其设置混合方程的绘制缓冲区的索引。\r\n            \r\n","\r\n            Original was GL_MATRIX_INDEX_ARRAY_TYPE_OES = 0x8847\r\n            ":"\r\n            原来是 GL_MATRIX_INDEX_ARRAY_TYPE_OES = 0x8847\r\n            \r\n"," \r\n            The source of the debug message to insert.\r\n            ":" \r\n            要插入的调试消息的来源。\r\n            \r\n","\r\n            Pointer to storage for the column filter image.\r\n            ":"指向列过滤器图像存储的指针。\r\n            \r\n","If there is an error, the return value is (UINT)-1.":"如果有错误，返回值为 (UINT)-1。\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Set the viewport\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            设置视口\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_BIT_ARB = 0x20000000\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_BIT_ARB = 0x20000000\r\n            \r\n","\r\n            The coordinate system has the X axis horizontal and the Y axis vertical with the origin [0, 0] at the upper-left corner. Coordinates are integral, in terms of pixels, and coincide with pixel centers. Each window and pixmap has its own coordinate system. For a window, the origin is inside the border at the inside, upper-left corner. \r\n            ":"\r\n            坐标系X轴水平，Y轴垂直，原点[0, 0]在左上角。就像素而言，坐标是完整的，并且与像素中心重合。每个窗口和像素图都有自己的坐标系。对于窗口，原点位于内部左上角的边框内。\r\n            \r\n","Scale factors for x,y and z axes":"x、y 和 z 轴的比例因子\r\n","[requires: v4.4 or ARB_clear_texture|VERSION_4_4]\r\n            Fills all or part of a texture image with a constant value\r\n            ":"[要求：v4.4 或 ARB_clear_texture|VERSION_4_4]\r\n            用常数值填充全部或部分纹理图像\r\n            \r\n","\r\n            Original was GL_REDUCE_EXT = 0x8016\r\n            ":"\r\n            原来是 GL_REDUCE_EXT = 0x8016\r\n            \r\n","\r\n            Original was GL_HighFloat = 0X8df2\r\n            ":"\r\n            原来是 GL_HighFloat = 0X8df2\r\n            \r\n","\r\n            Original was GL_STENCIL_BUFFER_BIT3_QCOM = 0x00080000\r\n            ":"\r\n            原来是 GL_STENCIL_BUFFER_BIT3_QCOM = 0x00080000\r\n            \r\n","\r\n            Used in GL.Ati.StencilOpSeparate, GL.StencilOp and 1 other function\r\n            ":"\r\n            用于 GL.Ati.StencilOpSeparate、GL.StencilOp 和 1 个其他函数\r\n            \r\n","\r\n            Original was GL_RGBA_FLOAT32_APPLE = 0x8814\r\n            ":"\r\n            原来是 GL_RGBA_FLOAT32_APPLE = 0x8814\r\n            \r\n","\r\n            Original was GL_ATTRIB_ARRAY_TYPE_NV = 0x8625\r\n            ":"\r\n            原来是 GL_ATTRIB_ARRAY_TYPE_NV = 0x8625\r\n            \r\n","\r\n            DPad left direction button\r\n            ":"\r\n            方向键左方向键\r\n            \r\n","All coordinates are in device units.":"所有坐标均以设备单位表示。\r\n"," \r\n            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { (i+1) j }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of ustride is 0.\r\n            ":" \r\n            指定控制点 R sub ij 开始和控制点 R sub { (i+1) j } 开始之间的浮点数或双精度数，其中和分别是和控制点索引。这允许控制点嵌入任意数据结构中。唯一的限制是特定控制点的值必须占据连续的内存位置。 ustride 的初始值为 0。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = 0x93C1\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = 0x93C1\r\n            \r\n","\r\n            Original was GL_YCBAYCR8A_4224_NV = 0x9032\r\n            ":"\r\n            原来是 GL_YCBAYCR8A_4224_NV = 0x9032\r\n            \r\n"," \r\n            Specifies which parameter of the atomic counter buffer to retrieve.\r\n            ":" \r\n            指定要检索的原子计数器缓冲区的哪个参数。\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_128_BITS = 0x82C4\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_128_BITS = 0x82C4\r\n            \r\n","\r\n            Original was GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0\r\n            ":"\r\n            原来是 GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0\r\n            \r\n","[requires: v1.0]\r\n            Specify which color buffers are to be drawn into\r\n            ":"[要求：v1.0]\r\n            指定要绘制到哪些颜色缓冲区\r\n            \r\n","\r\n            Called when the NativeWindow is about to close.\r\n            ":"\r\n            在 NativeWindow 即将关闭时调用。\r\n            \r\n","\r\n            Original was GL_OUTPUT_VERTEX_EXT = 0x879A\r\n            ":"\r\n            原来是 GL_OUTPUT_VERTEX_EXT = 0x879A\r\n            \r\n","\r\n            Original was GL_BGR_EXT = 0x80E0\r\n            ":"\r\n            原来是 GL_BGR_EXT = 0x80E0\r\n            \r\n","\r\n            Original was GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0\r\n            ":"\r\n            原来是 GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0\r\n            \r\n"," \r\n            Specifies the width of the texture image. All implementations support texture images that are at least 64 texels wide. The height of the 1D texture image is 1.\r\n            ":" \r\n            指定纹理图像的宽度。所有实现都支持至少 64 纹素宽的纹理图像。一维纹理图像的高度为 1。\r\n            \r\n","\r\n            The XDisplayKeycodes() function returns the min-keycodes and max-keycodes supported by the specified display.\r\n            ":"\r\n            XDisplayKeycodes() 函数返回指定显示器支持的最小键码和最大键码。\r\n            \r\n","To set the text of a control in another process, send the WM_SETTEXT message directly instead of calling SetWindowText. ":"要在另一个进程中设置控件的文本，直接发送 WM_SETTEXT 消息而不是调用 SetWindowText。\r\n","\r\n            Original was GL_SELECT = 0x1C02\r\n            ":"\r\n            原来是 GL_SELECT = 0x1C02\r\n            \r\n"," for the A button.\r\n            ":" 对于 A 按钮。\r\n            \r\n","[requires: v1.0]\r\n            Specify a plane against which all geometry is clipped\r\n            ":"[要求：v1.0]\r\n            指定一个平面，所有几何图形都将根据该平面进行剪裁\r\n            \r\n","true if the predicate returns true for some event, false otherwise":"如果谓词对某个事件返回 true，则为 true，否则为 false\r\n"," \r\n            Specifies a symbolic constant that describes the information that will be returned for each vertex. Gl2D, Gl3D, Gl3DColor, Gl3DColorTexture, and Gl4DColorTexture are accepted.\r\n            ":" \r\n            指定一个符号常量，描述将为每个顶点返回的信息。接受 Gl2D、Gl3D、Gl3DColor、Gl3DColorTexture 和 Gl4DColorTexture。\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0\r\n            \r\n","\r\n            Original was GL_TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5\r\n            ":"\r\n            原来是 GL_TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5\r\n            \r\n","[length: numGlyphs,type,charcodes]":"[长度：numGlyphs，类型，字符码]\r\n","\r\n            Used in GL.ColorTableParameter\r\n            ":"\r\n            在 GL.ColorTableParameter 中使用\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Select active texture unit\r\n            ":"[要求：v1.0 和 1.0]\r\n            选择活动纹理单元\r\n            \r\n","\r\n            to query the number of available axes.\r\n            ":"\r\n            查询可用轴数。\r\n            \r\n","[requires: EXT_robustness]":"[要求：EXT_robustness]\r\n","[length: target,level] \r\n            Returns the compressed texture image.\r\n            ":"[长度：目标，水平]\r\n            返回压缩的纹理图像。\r\n            \r\n","\r\n            Original was GL_RGB_SCALE_ARB = 0x8573\r\n            ":"\r\n            原来是 GL_RGB_SCALE_ARB = 0x8573\r\n            \r\n","Describes an X11 window.":"描述 X11 窗口。\r\n","\r\n            Used in GL.ConvolutionParameter\r\n            ":"\r\n            在GL.ConvolutionParameter中使用\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_24_BITS = 0x82C9\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_24_BITS = 0x82C9\r\n            \r\n","\r\n            Original was GL_REFERENCE_PLANE_SGIX = 0x817D\r\n            ":"\r\n            原来是 GL_REFERENCE_PLANE_SGIX = 0x817D\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Return a binary representation of a program object's compiled and linked executable source\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            返回程序对象的已编译和链接的可执行源的二进制表示\r\n            \r\n","\r\n            Used in GL.Pgi.Hint\r\n            ":"\r\n            在 GL.Pgi.Hint 中使用\r\n            \r\n","[length: 1] \r\n            Specifies the address of a variable which is to receive the length of the shader subroutine uniform name.\r\n            ":"[长度：1]\r\n            指定要接收着色器子例程统一名称长度的变量的地址。\r\n            \r\n"," \r\n            Specify the coordinates for the left and right vertical clipping planes.\r\n            ":" \r\n            指定左右垂直裁剪平面的坐标。\r\n            \r\n","\r\n            Gets the absolute wheel position in integer units. This property is intended for XNA compatibility.\r\n            To support high-precision mice, it is recommended to use ":"\r\n            获取以整数为单位的绝对车轮位置。此属性旨在实现 XNA 兼容性。\r\n            支持高精度鼠标，推荐使用\r\n","\r\n            Original was GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80\r\n            ":"\r\n            原来是 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80\r\n            \r\n","[requires: EXT_copy_texture]\r\n            Copy a one-dimensional texture subimage\r\n            ":"[需要：EXT_copy_texture]\r\n            复制一维纹理子图像\r\n            \r\n","\r\n            Pointer to a variable. If RawInputDeviceList is NULL, it specifies the number\r\n            of devices attached to the system. Otherwise, it contains the size, in bytes,\r\n            of the preallocated buffer pointed to by pRawInputDeviceList.\r\n            However, if NumDevices is smaller than needed to contain RawInputDeviceList structures,\r\n            the required buffer size is returned here.\r\n            ":"\r\n            指向变量的指针。如果 RawInputDeviceList 为 NULL，则它指定编号\r\n            连接到系统的设备。否则，它包含大小，以字节为单位，\r\n            pRawInputDeviceList 指向的预分配缓冲区。\r\n            但是，如果 NumDevices 小于包含 RawInputDeviceList 结构所需的值，\r\n            此处返回所需的缓冲区大小。\r\n            \r\n","\r\n            Left trigger button\r\n            ":"\r\n            左触发按钮\r\n            \r\n","\r\n            Original was GL_RGBA_FLOAT_MODE = 0x8820\r\n            ":"\r\n            原来是 GL_RGBA_FLOAT_MODE = 0x8820\r\n            \r\n","The extension to check.":"要检查的扩展名。\r\n","A new Matrix3x2d which holds the result of the addition":"保存加法结果的新 Matrix3x2d\r\n"," has\r\n            a X button.\r\n            ":" 有\r\n            一个 X 按钮。\r\n            \r\n","[requires: v2.0]\r\n            Set front and/or back stencil test actions\r\n            ":"[要求：v2.0]\r\n            设置正面和/或背面模板测试操作\r\n            \r\n","The eighteenth button of the JoystickDevice.":"JoystickDevice 的第十八个按钮。\r\n","\r\n            A client rectangle is the smallest rectangle that completely encloses a client area. A window rectangle is the smallest rectangle that completely encloses the window, which includes the client area and the nonclient area. \r\n            The AdjustWindowRect function does not add extra space when a menu bar wraps to two or more rows. \r\n            The AdjustWindowRect function does not take the WS_VSCROLL or WS_HSCROLL styles into account. To account for the scroll bars, call the GetSystemMetrics function with SM_CXVSCROLL or SM_CYHSCROLL.\r\n            Found Winuser.h, user32.dll\r\n            ":"客户区矩形是完全包围客户区的最小矩形。窗口矩形是完全包围窗口的最小矩形，包括客户区和非客户区。\r\n            当菜单栏换行到两行或更多行时，AdjustWindowRect 函数不会添加额外的空间。\r\n            AdjustWindowRect 函数不考虑 WS_VSCROLL 或 WS_HSCROLL 样式。要考虑滚动条，请使用 SM_CXVSCROLL 或 SM_CYHSCROLL 调用 GetSystemMetrics 函数。\r\n            找到Winuser.h、user32.dll\r\n            \r\n","[length: pname] \r\n            Specifies the value that parameter Shininess will be set to.\r\n            ":"[长度：pname]\r\n            指定参数闪亮度将设置为的值。\r\n            \r\n","[requires: SGIX_tag_sample_buffer]":"[需要：SGIX_tag_sample_buffer]\r\n"," \r\n            Specify the number of texture levels.\r\n            ":" \r\n            指定纹理级别数。\r\n            \r\n","[requires: ARB_vertex_buffer_object]\r\n            Returns a subset of a buffer object's data store\r\n            ":"[需要：ARB_vertex_buffer_object]\r\n            返回缓冲区对象数据存储的子集\r\n            \r\n","\r\n            Original was GL_MODELVIEW24_ARB = 0x8738\r\n            ":"\r\n            原来是 GL_MODELVIEW24_ARB = 0x8738\r\n            \r\n","\r\n            Original was GL_POINT_SIZE_MAX_ARB = 0x8127\r\n            ":"\r\n            原来是 GL_POINT_SIZE_MAX_ARB = 0x8127\r\n            \r\n","\r\n            Original was GL_NUM_GENERAL_COMBINERS_NV = 0x854E\r\n            ":"\r\n            原来是 GL_NUM_GENERAL_COMBINERS_NV = 0x854E\r\n            \r\n","\r\n            Original was GL_LINE_QUALITY_HINT_SGIX = 0x835B\r\n            ":"\r\n            原来是 GL_LINE_QUALITY_HINT_SGIX = 0x835B\r\n            \r\n","\r\n            Original was GL_MAP2_GRID_SEGMENTS = 0x0DD3\r\n            ":"\r\n            原来是 GL_MAP2_GRID_SEGMENTS = 0x0DD3\r\n            \r\n","The int value that your method returns":"您的方法返回的 int 值\r\n","[length: format,stride]":"[长度：格式，步幅]\r\n","[requires: v1.1][deprecated: v3.2]":"[要求：v1.1][弃用：v3.2]\r\n"," \r\n            Specifies the number of sampler object names to generate.\r\n            ":" \r\n            指定要生成的采样器对象名称的数量。\r\n            \r\n"," \r\n            Specifies the byte offset between consecutive texture coordinate sets. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.\r\n            ":" \r\n            指定连续纹理坐标集之间的字节偏移量。如果步幅为 0，则数组元素被认为是紧密排列的。初始值为 0。\r\n            \r\n","\r\n            Used in GL.Ext.GetHistogramParameter\r\n            ":"\r\n            在 GL.Ext.GetHistogramParameter 中使用\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E\r\n            \r\n","[length: 1] \r\n            Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.\r\n            ":"[长度：1]\r\n            指定 s、t、r 和 q 纹理坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n","\r\n            Occurs when it is time to update a frame.\r\n            ":"\r\n            在更新帧时发生。\r\n            \r\n","FreeStringPtr":"自由字符串指针\r\n","\r\n            Original was GL_SRGB_EXT = 0x8C40\r\n            ":"\r\n            原来是 GL_SRGB_EXT = 0x8C40\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB = 0x8C48\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB = 0x8C48\r\n            \r\n","\r\n            Original was GL_422_REV_AVERAGE_EXT = 0x80CF\r\n            ":"\r\n            原来是 GL_422_REV_AVERAGE_EXT = 0x80CF\r\n            \r\n"," \r\n            The name of the program containing the block whose binding to change.\r\n            ":" \r\n            包含要更改其绑定的块的程序的名称。\r\n            \r\n","[requires: SGIX_sprite]":"[要求：SGIX_sprite]\r\n","\r\n            Original was GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3\r\n            \r\n","Contains information regarding a monitor's display resolution.":"包含有关监视器显示分辨率的信息。\r\n"," \r\n            Specifies the address of an variable to receive the number of integers placed in values.\r\n            ":" \r\n            指定变量的地址以接收放置在值中的整数数量。\r\n            \r\n","\r\n            Used in GL.NV.CombinerInput, GL.NV.CombinerOutput and 5 other functions\r\n            ":"\r\n            用于GL.NV.CombinerInput、GL.NV.CombinerOutput等5个函数\r\n            \r\n","[length: primcount] \r\n            Points to an array of the number of indices to be rendered.\r\n            ":"[长度：primcount]\r\n            指向要呈现的索引数的数组。\r\n            \r\n","Contains information necessary for frame updating.":"包含帧更新所需的信息。\r\n","\r\n            Original was GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2\r\n            ":"\r\n            原来是 GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2\r\n            \r\n","\r\n            Original was GL_VERTEX_TEXTURE = 0x829B\r\n            ":"\r\n            原来是 GL_VERTEX_TEXTURE = 0x829B\r\n            \r\n","\r\n            Original was GL_INT16_VEC2_NV = 0x8FE5\r\n            ":"\r\n            原来是 GL_INT16_VEC2_NV = 0x8FE5\r\n            \r\n"," \r\n            The name of the user-defined varying out variable whose binding to modify\r\n            ":" \r\n            要修改其绑定的用户定义变量的名称\r\n            \r\n","\r\n            Original was GL_MATRIX15_ARB = 0x88CF\r\n            ":"\r\n            原来是 GL_MATRIX15_ARB = 0x88CF\r\n            \r\n"," \r\n            Specifies the number of sampler objects to be deleted.\r\n            ":" \r\n            指定要删除的采样器对象的数量。\r\n            \r\n","\r\n            Occurs before the window is destroyed.\r\n            ":"\r\n            在窗口被销毁之前发生。\r\n            \r\n","\r\n            Original was GL_BLUE_MIN_CLAMP_INGR = 0x8562\r\n            ":"\r\n            原来是 GL_BLUE_MIN_CLAMP_INGR = 0x8562\r\n            \r\n","\r\n            Original was GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF\r\n            ":"\r\n            原来是 GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF\r\n            \r\n","\r\n            Original was GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E\r\n            ":"\r\n            原来是 GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E\r\n            \r\n","[in] Specifies the maximum number of characters to copy to the buffer, including the NULL character. If the text exceeds this limit, it is truncated.":"[in] 指定要复制到缓冲区的最大字符数，包括 NULL 字符。如果文本超过此限制，则会被截断。\r\n","The matrix to transpose":"要转置的矩阵\r\n","\r\n            Original was GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C\r\n            \r\n","\r\n            Original was GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44\r\n            ":"\r\n            原来是 GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44\r\n            \r\n","\r\n            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.\r\n            ":"\r\n            指定连续顶点之间的字节偏移量。如果步幅为 0，则顶点被理解为紧密排列在数组中。初始值为 0。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Replace the current matrix with the identity matrix\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            用单位矩阵替换当前矩阵\r\n            \r\n","Loads the specified extension for the specified class. This function is intended\r\n            for OpenGL, Wgl, Glx, OpenAL etc.":"加载指定类的指定扩展。此功能旨在\r\n            适用于 OpenGL、Wgl、Glx、OpenAL 等。\r\n","[requires: v1.0 and 1.0]\r\n            Multiply the current matrix by a perspective matrix\r\n            ":"[要求：v1.0 和 1.0]\r\n            将当前矩阵乘以透视矩阵\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123\r\n            ":"原来是 GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123\r\n            \r\n","\r\n            Original was GL_MODELVIEW27_ARB = 0x873B\r\n            ":"\r\n            原来是 GL_MODELVIEW27_ARB = 0x873B\r\n            \r\n","\r\n            that are currently pressed.\r\n            ":"\r\n            当前按下的。\r\n            \r\n","\r\n            Used in GL.GetConvolutionParameter\r\n            ":"\r\n            在 GL.GetConvolutionParameter 中使用\r\n            \r\n","\r\n            Original was GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128\r\n            ":"\r\n            原来是 GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128\r\n            \r\n","\r\n            Returns a System.String that represents the current Matrix2x3.\r\n            ":"\r\n            返回表示当前 Matrix2x3 的 System.String。\r\n            \r\n","\r\n            If the pRawInputDevices buffer is too small or NULL, the function sets\r\n            the last error as ERROR_INSUFFICIENT_BUFFER, returns -1,\r\n            and sets NumDevices to the required number of devices.\r\n            ":"\r\n            如果 pRawInputDevices 缓冲区太小或为 NULL，则函数设置\r\n            最后一个错误为 ERROR_INSUFFICIENT_BUFFER，返回 -1，\r\n            并将 NumDevices 设置为所需的设备数量。\r\n            \r\n","\r\n            Original was GL_CON_15_ATI = 0x8950\r\n            ":"\r\n            原来是 GL_CON_15_ATI = 0x8950\r\n            \r\n","[length: target,format,type] \r\n            A pointer to storage for the returned values.\r\n            ":"[长度：目标、格式、类型]\r\n            指向存储返回值的指针。\r\n            \r\n"," \r\n            The name of the user-defined varying out variable whose index to query\r\n            ":" \r\n            要查询其索引的用户定义变量的名称\r\n            \r\n"," device has changed.\r\n            ":" 设备已更改。\r\n            \r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B\r\n            \r\n","\r\n            Used in GL.Ext.IndexFunc\r\n            ":"\r\n            在 GL.Ext.IndexFunc 中使用\r\n            \r\n","\r\n            Retrieves the points using the display resolution.\r\n            ":"\r\n            使用显示分辨率检索点。\r\n            \r\n"," \r\n            Specifies the generic vertex attribute parameter to be queried.\r\n            ":" \r\n            指定要查询的通用顶点属性参数。\r\n            \r\n","\r\n            Original was GL_INTENSITY = 0x8049\r\n            ":"\r\n            原来是 GL_INTENSITY = 0x8049\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Delete named buffer objects\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            删除命名缓冲区对象\r\n            \r\n","\r\n            Original was GL_USE_MISSING_GLYPH_NV = 0x90AA\r\n            ":"\r\n            原来是 GL_USE_MISSING_GLYPH_NV = 0x90AA\r\n            \r\n","\r\n            Original was GL_TEXTURE12 = 0x84CC\r\n            ":"\r\n            原来是 GL_TEXTURE12 = 0x84CC\r\n            \r\n","\r\n            Called when the WindowState of this NativeWindow has changed.\r\n            ":"\r\n            在此 NativeWindow 的 WindowState 发生更改时调用。\r\n            \r\n","\r\n            Original was GL_LIGHT_ENV_MODE_SGIX = 0x8407\r\n            ":"\r\n            原来是 GL_LIGHT_ENV_MODE_SGIX = 0x8407\r\n            \r\n","\r\n            Original was GL_BITMAP = 0x1A00\r\n            ":"\r\n            原来是 GL_BITMAP = 0x1A00\r\n            \r\n","\r\n            Original was GL_OP_LOG_BASE_2_EXT = 0x8792\r\n            ":"\r\n            原来是 GL_OP_LOG_BASE_2_EXT = 0x8792\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA\r\n            \r\n","\r\n            Original was GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B\r\n            ":"\r\n            原来是 GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B\r\n            \r\n"," \r\n            Specifies the name of a program containing uniforms whose indices to query.\r\n            ":" \r\n            指定包含要查询其索引的制服的程序的名称。\r\n            \r\n","\r\n            The rate of the generated KeyDown events is controlled by the Operating System. Usually,\r\n            one KeyDown event will be reported, followed by a small (250-1000ms) pause and several\r\n            more KeyDown events (6-30 events per second).\r\n            ":"\r\n            生成的 KeyDown 事件的速率由操作系统控制。通常，\r\n            将报告一个 KeyDown 事件，然后是一个小的（250-1000 毫秒）暂停和几个\r\n            更多 KeyDown 事件（每秒 6-30 个事件）。\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD\r\n            \r\n","[length: n] \r\n            Specifies an array in which the generated renderbuffer object names are stored.\r\n            ":"[长度：n]\r\n            指定一个数组，其中存储生成的渲染缓冲区对象名称。\r\n            \r\n","\r\n            Used in GL.ActiveTexture, GL.ClientActiveTexture and 1 other function\r\n            ":"\r\n            用于 GL.ActiveTexture、GL.ClientActiveTexture 和其他 1 个函数\r\n            \r\n"," if this instance has a left shoulder button; otherwise, ":" 如果这个实例有一个左肩按钮；否则，\r\n","\r\n            Original was GL_CLIP_DISTANCE1 = 0x3001\r\n            ":"\r\n            原来是 GL_CLIP_DISTANCE1 = 0x3001\r\n            \r\n","\r\n            Original was GL_FLOAT_MAT2x3_NV = 0x8B65\r\n            ":"\r\n            原来是 GL_FLOAT_MAT2x3_NV = 0x8B65\r\n            \r\n","\r\n            Original was GL_SWIZZLE_STRQ_DQ_ATI = 0x897B\r\n            ":"\r\n            原来是 GL_SWIZZLE_STRQ_DQ_ATI = 0x897B\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_UNITS_OES = 0x86A4\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_UNITS_OES = 0x86A4\r\n            \r\n","\r\n            Original was GL_RGB8_EXT = 0x8051\r\n            ":"\r\n            原来是 GL_RGB8_EXT = 0x8051\r\n            \r\n","[requires: ATI_separate_stencil]\r\n            Set front and/or back function and reference value for stencil testing\r\n            ":"[需要：ATI_separate_stencil]\r\n            设置模板测试的正面和/或背面功能和参考值\r\n            \r\n","\r\n            Original was GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038\r\n            ":"\r\n            原来是 GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038\r\n            \r\n","[length: drawcount] \r\n            Specifies a pointer to the location where the indices are stored.\r\n            ":"[长度：drawcount]\r\n            指定指向存储索引的位置的指针。\r\n            \r\n","\r\n            Original was GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034\r\n            \r\n","\r\n            Original was GL_RGBA_FLOAT16_ATI = 0x881A\r\n            ":"\r\n            原来是 GL_RGBA_FLOAT16_ATI = 0x881A\r\n            \r\n","\r\n            Original was GL_OP_SET_LT_EXT = 0x878D\r\n            ":"\r\n            原来是 GL_OP_SET_LT_EXT = 0x878D\r\n            \r\n","\r\n            Closes the NativeWindow.\r\n            ":"\r\n            关闭 NativeWindow。\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Establish data storage, format and dimensions of a renderbuffer object's image\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            建立渲染缓冲区对象图像的数据存储、格式和尺寸\r\n            \r\n","\r\n            Original was GL_CLIP_DISTANCE2 = 0x3002\r\n            ":"\r\n            原来是 GL_CLIP_DISTANCE2 = 0x3002\r\n            \r\n","\r\n            Original was GL_ARC_TO_NV = 0xFE\r\n            ":"\r\n            原来是 GL_ARC_TO_NV = 0xFE\r\n            \r\n","[requires: APPLE_vertex_array_range]":"[需要：APPLE_vertex_array_range]\r\n","\r\n            Original was GL_HSL_COLOR_KHR = 0x92AF\r\n            ":"原来是 GL_HSL_COLOR_KHR = 0x92AF\r\n            \r\n"," \r\n            Specifies name of the sampler object from which to retrieve parameters.\r\n            ":" \r\n            指定从中检索参数的采样器对象的名称。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Block and wait for a sync object to become signaled\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            阻塞并等待同步对象发出信号\r\n            \r\n"," for the specified keyboard device.\r\n            This method is equivalent to ":" 对于指定的键盘设备。\r\n            这个方法相当于\r\n","Note that the logical state of a device (as seen by client applications) may lag the physical state if device event processing is frozen.":"请注意，如果设备事件处理被冻结，设备的逻辑状态（如客户端应用程序所见）可能会滞后于物理状态。\r\n"," \r\n            Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.\r\n            ":" \r\n            指定纹理图像的宽度。所有实现都支持至少 16 纹素宽的 3D 纹理图像。\r\n            \r\n","\r\n            Original was GL_MAX_ELEMENT_INDEX = 0x8D6B\r\n            ":"\r\n            原来是 GL_MAX_ELEMENT_INDEX = 0x8D6B\r\n            \r\n","\r\n            Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or GL_SHADING_LANGUAGE_VERSION. Additionally, glGetStringi accepts the GL_EXTENSIONS token.\r\n            ":"\r\n            指定一个符号常量，GL_VENDOR、GL_RENDERER、GL_VERSION 或 GL_SHADING_LANGUAGE_VERSION 之一。此外，glGetStringi 接受 GL_EXTENSIONS 令牌。\r\n            \r\n"," \r\n            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.\r\n            ":" \r\n            指定要查询的顶点属性参数的符号名称。接受的值为 VertexAttribArrayBufferBinding、VertexAttribArrayEnabled、VertexAttribArraySize、VertexAttribArrayStride、VertexAttribArrayType、VertexAttribArrayNormalized 或 CurrentVertexAttrib。\r\n            \r\n","\r\n            Gets a System.Boolean that indicates whether this NativeWindow has input focus.\r\n            ":"\r\n            获取一个 System.Boolean，它指示此 NativeWindow 是否具有输入焦点。\r\n            \r\n","\r\n            Original was GL_LIGHT4 = 0x4004\r\n            ":"\r\n            原来是 GL_LIGHT4 = 0x4004\r\n            \r\n","\r\n            Original was GL_Sampler2D = 0X8b5e\r\n            ":"\r\n            原来是 GL_Sampler2D = 0X8b5e\r\n            \r\n","\r\n            Specifies the entry point of the OpenGL function.\r\n            ":"\r\n            指定 OpenGL 函数的入口点。\r\n            \r\n","[length: stride,count] \r\n            Specifies a pointer to the first edge flag in the array. The initial value is 0.\r\n            ":"[长度：步幅，计数]\r\n            指定指向数组中第一个边缘标志的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_TEXTURE_LIGHT_EXT = 0x8350\r\n            ":"\r\n            原来是 GL_TEXTURE_LIGHT_EXT = 0x8350\r\n            \r\n","\r\n            Original was GL_TEXTURE3_ARB = 0x84C3\r\n            ":"\r\n            原来是 GL_TEXTURE3_ARB = 0x84C3\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6\r\n            \r\n","\r\n            Left stick right direction button\r\n            ":"\r\n            左摇杆右方向键\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RG_RGTC2 = 0x8DBD\r\n            ":"\r\n            原来是 GL_COMPRESSED_RG_RGTC2 = 0x8DBD\r\n            \r\n","\r\n            Closes this window.\r\n            ":"\r\n            关闭此窗口。\r\n            \r\n","\r\n            Original was GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858\r\n            ":"\r\n            原来是 GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858\r\n            \r\n","[length: 4] \r\n            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.\r\n            ":"[长度：4]\r\n            指定顶点的 x、y、z 和 w 坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n","\r\n            Called when the frame is updated.\r\n            ":"\r\n            框架更新时调用。\r\n            \r\n","\r\n            Original was GL_RGB32I_EXT = 0x8D83\r\n            ":"\r\n            原来是 GL_RGB32I_EXT = 0x8D83\r\n            \r\n"," \r\n            The level of detail of the texture object within which the region resides.\r\n            ":" \r\n            区域所在的纹理对象的详细程度。\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D\r\n            \r\n","\r\n            Original was GL_MAX_CLIP_PLANES = 0x0D32\r\n            ":"\r\n            原来是 GL_MAX_CLIP_PLANES = 0x0D32\r\n            \r\n"," has\r\n            a left thumbstick with a x-axis.\r\n            ":" 有\r\n            带有 x 轴的左摇杆。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A\r\n            \r\n","\r\n            Used in GL.StencilFunc\r\n            ":"\r\n            在 GL.StencilFunc 中使用\r\n            \r\n","[length: format,type,width,height]":"[长度：格式、类型、宽度、高度]\r\n","\r\n            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.\r\n            ":"\r\n            指定目标纹理。 Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.\r\n            \r\n","\r\n            Original was GL_SAMPLE_SHADING = 0x8C36\r\n            ":"\r\n            原来是 GL_SAMPLE_SHADING = 0x8C36\r\n            \r\n","\r\n            Original was GL_MULTIPLY_NV = 0x9294\r\n            ":"\r\n            原来是 GL_MULTIPLY_NV = 0x9294\r\n            \r\n","\r\n            Original was GL_FUNC_SUBTRACT_OES = 0x800A\r\n            ":"\r\n            原来是 GL_FUNC_SUBTRACT_OES = 0x800A\r\n            \r\n","\r\n            Specifies the x and y coordinates of the upper-left corner of the smallest rectangle that completely encloses the glyph.\r\n            ":"\r\n            指定完全包围字形的最小矩形的左上角的 x 和 y 坐标。\r\n            \r\n","\r\n            Original was GL_LAYOUT_LINEAR_INTEL = 1\r\n            ":"\r\n            原来是 GL_LAYOUT_LINEAR_INTEL = 1\r\n            \r\n"," \r\n            For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be ReadOnly, WriteOnly, or ReadWrite.\r\n            ":" \r\n            仅适用于 glMapBuffer，指定访问策略，指示是否可以读取、写入或同时读取和写入缓冲区对象的映射数据存储。符号常量必须是 ReadOnly、WriteOnly 或 ReadWrite。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_24_8_OES = 0x84FA\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_24_8_OES = 0x84FA\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 0x8518\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 0x8518\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_SIZE_EXT = 0x8081\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_SIZE_EXT = 0x8081\r\n            \r\n","X translation.":"X翻译。\r\n","\r\n            Gets or sets an OpenTK.Vector3 with the Y, Z, and X components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Y、Z 和 X 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Original was GL_RGB9_E5 = 0x8C3D\r\n            ":"\r\n            原来是 GL_RGB9_E5 = 0x8C3D\r\n            \r\n","A new Matrix3 which holds the result of the multiplication":"保存乘法结果的新 Matrix3\r\n"," \r\n            Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.\r\n            ":" \r\n            指定目标缓冲区对象。符号常量必须是 ArrayBuffer、AtomicCounterBuffer、CopyReadBuffer、CopyWriteBuffer、DrawIndirectBuffer、DispatchIndirectBuffer、ElementArrayBuffer、PixelPackBuffer、PixelUnpackBuffer、QueryBuffer、ShaderStorageBuffer、TextureBuffer、TransformFeedbackBuffer 或 UniformBuffer。\r\n            \r\n","\r\n            Original was GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9\r\n            ":"\r\n            原来是 GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9\r\n            \r\n","[requires: SGI_color_table]\r\n            Copy pixels into a color table\r\n            ":"[要求：SGI_color_table]\r\n            将像素复制到颜色表中\r\n            \r\n","[requires: v2.0]\r\n            Compiles a shader object\r\n            ":"[要求：v2.0]\r\n            编译着色器对象\r\n            \r\n","\r\n            Original was GL_TEXTURE_3D_OES = 0x806F\r\n            ":"\r\n            原来是 GL_TEXTURE_3D_OES = 0x806F\r\n            \r\n","The absolute value of the joystick axis.":"操纵杆轴的绝对值。\r\n"," structure representing the state for the specified mouse device.":" 表示指定鼠标设备状态的结构。\r\n","\r\n            Original was GL_TEXTURE5 = 0x84C5\r\n            ":"\r\n            原来是 GL_TEXTURE5 = 0x84C5\r\n            \r\n"," \r\n            Specifies the integer value for grid domain variable .\r\n            ":" \r\n            指定网格域变量的整数值。\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671\r\n            \r\n","\r\n            Original was GL_MODELVIEW12_ARB = 0x872C\r\n            ":"\r\n            原来是 GL_MODELVIEW12_ARB = 0x872C\r\n            \r\n"," \r\n            Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.\r\n            ":" \r\n            指定目标纹理。必须是 Texture3D、ProxyTexture3D、Texture2DArray 或 ProxyTexture2DArray。\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT16_NONLINEAR_NV = 0x8E2C\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT16_NONLINEAR_NV = 0x8E2C\r\n            \r\n","\r\n            Original was GL_LOSE_CONTEXT_ON_RESET_EXT = 0x8252\r\n            ":"\r\n            原来是 GL_LOSE_CONTEXT_ON_RESET_EXT = 0x8252\r\n            \r\n","\r\n            Original was GL_TRACK_MATRIX_NV = 0x8648\r\n            ":"\r\n            原来是 GL_TRACK_MATRIX_NV = 0x8648\r\n            \r\n","\r\n            Specifies an array in which the generated texture names are stored.\r\n            ":"\r\n            指定存储生成的纹理名称的数组。\r\n            \r\n","\r\n            Used in GL.ColorP3, GL.ColorP4 and 17 other functions\r\n            ":"\r\n            用于GL.ColorP3、GL.ColorP4等17个函数\r\n            \r\n","[requires: ARB_vertex_buffer_object]\r\n            Return parameters of a buffer object\r\n            ":"[需要：ARB_vertex_buffer_object]\r\n            缓冲区对象的返回参数\r\n            \r\n","\r\n            Used in GL.Sgix.FragmentLight, GL.Sgix.FragmentLightModel and 2 other functions\r\n            ":"\r\n            用于 GL.Sgix.FragmentLight、GL.Sgix.FragmentLightModel 和其他 2 个函数\r\n            \r\n"," \r\n            Specifies the symbolic name of a single-valued sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureMinLod, TextureMaxLod, TextureCompareMode, or TextureCompareFunc.\r\n            ":" \r\n            指定单值采样器参数的符号名称。 pname 可以是以下之一：TextureWrapS、TextureWrapT、TextureWrapR、TextureMinFilter、TextureMagFilter、TextureMinLod、TextureMaxLod、TextureCompareMode 或 TextureCompareFunc。\r\n            \r\n","\r\n            Gets an integer representing the absolute y position of the pointer, in window pixel coordinates.\r\n            ":"\r\n            获取一个整数，表示指针在窗口像素坐标中的绝对 y 位置。\r\n            \r\n","Specifies the event mask.":"指定事件掩码。\r\n","\r\n            Original was GL_IntVec2 = 0X8b53\r\n            ":"\r\n            原来是 GL_IntVec2 = 0X8b53\r\n            \r\n","\r\n            Calculates the hash code for this instance.\r\n            ":"\r\n            计算此实例的哈希码。\r\n            \r\n","\r\n            Original was GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026\r\n            ":"\r\n            原来是 GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Generate texture names\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            生成纹理名称\r\n            \r\n","[length: 1] \r\n            Specifies the address of an variable to receive the number of integers placed in values.\r\n            ":"[长度：1]\r\n            指定变量的地址以接收放置在值中的整数数量。\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_STENCIL_SIZE_OES = 0x8D55\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_STENCIL_SIZE_OES = 0x8D55\r\n            \r\n","\r\n            Returns the size of a single array element in bytes or 0 if the element is not blittable.\r\n            ":"\r\n            返回单个数组元素的大小（以字节为单位），如果该元素不可 blittable，则返回 0。\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX4_EXT = 0x8D47\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX4_EXT = 0x8D47\r\n            \r\n","The vector part":"矢量部分\r\n","\r\n            Original was GL_DRAW_BUFFER1_ARB = 0x8826\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER1_ARB = 0x8826\r\n            \r\n","\r\n            Original was GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244\r\n            ":"\r\n            原来是 GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244\r\n            \r\n"," \r\n            Specifies the width of the texture, in texels.\r\n            ":" \r\n            指定纹理的宽度，以纹素为单位。\r\n            \r\n","\r\n            Original was GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A\r\n            ":"\r\n            原来是 GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A\r\n            \r\n","[requires: NV_vertex_buffer_unified_memory]":"[需要：NV_vertex_buffer_unified_memory]\r\n","right-hand operand":"右手操作数\r\n","\r\n            Original was GL_4PASS_3_SGIS = 0x80A7\r\n            ":"\r\n            原来是 GL_4PASS_3_SGIS = 0x80A7\r\n            \r\n","\r\n            Original was GL_DstColor = 0X0306\r\n            ":"\r\n            原来是 GL_DstColor = 0X0306\r\n            \r\n","\r\n            Used in GL.GetTransformFeedback, GL.GetTransformFeedbacki64_\r\n            ":"\r\n            在GL.GetTransformFeedback、GL.GetTransformFeedbacki64_中使用\r\n            \r\n"," \r\n            Specifies whether a layered texture binding is to be established.\r\n            ":" \r\n            指定是否要建立分层纹理绑定。\r\n            \r\n","\r\n            Used in GL.Ext.GetTexParameterI\r\n            ":"\r\n            在 GL.Ext.GetTexParameterI 中使用\r\n            \r\n","The fifth axis of the JoystickDevice.":"JoystickDevice 的第五轴。\r\n","\r\n            Original was GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080\r\n            \r\n","\r\n            Original was GL_RESET_NOTIFICATION_STRATEGY_EXT = 0x8256\r\n            ":"\r\n            原来是 GL_RESET_NOTIFICATION_STRATEGY_EXT = 0x8256\r\n            \r\n","The F26 key.":"F26 键。\r\n","\r\n            Original was GL_REG_13_ATI = 0x892E\r\n            ":"\r\n            原来是 GL_REG_13_ATI = 0x892E\r\n            \r\n","A new Matrix2x3d which holds the result of the addition":"保存加法结果的新 Matrix2x3d\r\n","\r\n            Original was GL_STANDARD_FONT_NAME_NV = 0x9072\r\n            ":"\r\n            原来是 GL_STANDARD_FONT_NAME_NV = 0x9072\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Link a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            链接程序对象\r\n            \r\n","\r\n            Original was GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129\r\n            ":"\r\n            原来是 GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129\r\n            \r\n","\r\n            Original was GL_Texture22 = 0X84d6\r\n            ":"\r\n            原来是 GL_Texture22 = 0X84d6\r\n            \r\n"," \r\n            Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.\r\n            ":" \r\n            指定纹理图像的高度。所有实现都支持至少 256 纹素高的 3D 纹理图像。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Map a section of a buffer object's data store\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            映射缓冲区对象数据存储的一部分\r\n            \r\n","[requires: NV_path_rendering]\r\n            Retrieve values for multiple properties of a single active resource within a program object\r\n            ":"[要求：NV_path_rendering]\r\n            检索程序对象中单个活动资源的多个属性的值\r\n            \r\n","\r\n            Original was GL_STREAM_READ_ARB = 0x88E1\r\n            ":"\r\n            原来是 GL_STREAM_READ_ARB = 0x88E1\r\n            \r\n","\r\n            Original was GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14\r\n            ":"\r\n            原来是 GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14\r\n            \r\n","\r\n            Original was GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642\r\n            ":"\r\n            原来是 GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642\r\n            \r\n"," \r\n            Specifies the index of the transform feedback stream from which to retrieve a primitive count.\r\n            ":" \r\n            指定要从中检索基元计数的变换反馈流的索引。\r\n            \r\n","[requires: ARB_cl_event]":"[要求：ARB_cl_event]\r\n","\r\n            Original was GL_TEXTURE_COMPARE_FUNC_EXT = 0x884D\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPARE_FUNC_EXT = 0x884D\r\n            \r\n","\r\n            Sets the timing resolution of the GetTime (?) method.\r\n            ":"\r\n            设置 GetTime (?) 方法的计时分辨率。\r\n            \r\n","\r\n            Original was GL_SOFTLIGHT_NV = 0x929C\r\n            ":"\r\n            原来是 GL_SOFTLIGHT_NV = 0x929C\r\n            \r\n"," if this instance has a left thumbstick with a y-axis; otherwise, ":" 如果这个实例有一个带 y 轴的左摇杆；否则，\r\n","\r\n            Original was GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D\r\n            \r\n","[requires: ARB_shader_objects]\r\n            Validates a program object\r\n            ":"[需要：ARB_shader_objects]\r\n            验证程序对象\r\n            \r\n","\r\n            Get histogram table\r\n            ":"\r\n            获取直方图表\r\n            \r\n"," \r\n            Specifies the width of the renderbuffer, in pixels.\r\n            ":" \r\n            指定渲染缓冲区的宽度，以像素为单位。\r\n            \r\n","\r\n            Original was GL_RGB32UI_EXT = 0x8D71\r\n            ":"\r\n            原来是 GL_RGB32UI_EXT = 0x8D71\r\n            \r\n","[requires: KHR_robustness]":"[要求：KHR_robustness]\r\n","\r\n            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.\r\n            ":"\r\n            指定详细级别编号。级别 0 是基础映像级别。级别 n 是第 n 个 mipmap 缩减图像。如果目标是 GL_TEXTURE_RECTANGLE 或 GL_PROXY_TEXTURE_RECTANGLE，level 必须是 0。\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_ARB = 0x809D\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_ARB = 0x809D\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B\r\n            ":"\r\n            原来是 GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B\r\n            \r\n","[requires: v3.2 or ARB_sync|VERSION_3_2]\r\n            Block and wait for a sync object to become signaled\r\n            ":"[要求：v3.2 或 ARB_sync|VERSION_3_2]\r\n            阻塞并等待同步对象发出信号\r\n            \r\n","\r\n            Original was GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368\r\n            ":"\r\n            原来是 GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368\r\n            \r\n","\r\n            Original was GL_INT8_NV = 0x8FE0\r\n            ":"\r\n            原来是 GL_INT8_NV = 0x8FE0\r\n            \r\n","\r\n            Original was GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A\r\n            ":"\r\n            原来是 GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A\r\n            \r\n","\r\n            Original was GL_DEPTH_STENCIL_ATTACHMENT = 0x821A\r\n            ":"\r\n            原来是 GL_DEPTH_STENCIL_ATTACHMENT = 0x821A\r\n            \r\n"," indicating\r\n            whether this hat lies in the top hemicircle.\r\n            ":" 表明\r\n            这顶帽子是否位于顶部半圆中。\r\n            \r\n"," \r\n            The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.\r\n            ":" \r\n            超时，以纳秒为单位指定，实现应等待同步信号发出。\r\n            \r\n","Constructs a new GraphicsException.":"构造一个新的 GraphicsException。\r\n"," for event-based mouse input.\r\n            ":" 用于基于事件的鼠标输入。\r\n            \r\n"," \r\n            A token identifying the interface within program to query.\r\n            ":" \r\n            标识程序中要查询的接口的令牌。\r\n            \r\n","\r\n            Original was GL_PROXY_COLOR_TABLE = 0x80D3\r\n            ":"\r\n            原来是 GL_PROXY_COLOR_TABLE = 0x80D3\r\n            \r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085\r\n            \r\n","\r\n            Original was GL_DST_NV = 0x9287\r\n            ":"\r\n            原来是 GL_DST_NV = 0x9287\r\n            \r\n"," \r\n            Specifies the internal format to use for the renderbuffer object's image.\r\n            ":" \r\n            指定用于渲染缓冲区对象图像的内部格式。\r\n            \r\n","If the function succeeds, the return value is nonzero.":"如果函数成功，则返回值为非零。\r\n","\r\n            Used in GL.Apple.BufferParameter\r\n            ":"\r\n            在 GL.Apple.BufferParameter 中使用\r\n            \r\n","\r\n            Original was GL_PACK_IMAGE_HEIGHT = 0x806C\r\n            ":"\r\n            原来是 GL_PACK_IMAGE_HEIGHT = 0x806C\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify whether front- or back-facing polygons can be culled\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            指定是否可以剔除正面或背面的多边形\r\n            \r\n","\r\n            Original was GL_DOT3_RGB_EXT = 0x8740\r\n            ":"\r\n            原来是 GL_DOT3_RGB_EXT = 0x8740\r\n            \r\n","\r\n            Original was GL_PRIMITIVE_BOUNDING_BOX_EXT = 0x92BE\r\n            ":"\r\n            原来是 GL_PRIMITIVE_BOUNDING_BOX_EXT = 0x92BE\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660\r\n            ":"原来是 GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660\r\n            \r\n","\r\n            Original was GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024\r\n            ":"\r\n            原来是 GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024\r\n            \r\n","\r\n            Original was GL_RGB_INTEGER_EXT = 0x8D98\r\n            ":"\r\n            原来是 GL_RGB_INTEGER_EXT = 0x8D98\r\n            \r\n"," \r\n            Specifies the number of renderbuffer object names to generate.\r\n            ":" \r\n            指定要生成的渲染缓冲区对象名称的数量。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516\r\n            \r\n","\r\n            Original was GL_IUI_V2F_EXT = 0x81AD\r\n            ":"\r\n            原来是 GL_IUI_V2F_EXT = 0x81AD\r\n            \r\n","\r\n            Original was GL_TEXTURE_DEPTH = 0x8071\r\n            ":"\r\n            原来是 GL_TEXTURE_DEPTH = 0x8071\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF\r\n            \r\n","\r\n            Original was GL_MAX_IMAGE_SAMPLES = 0x906D\r\n            ":"\r\n            原来是 GL_MAX_IMAGE_SAMPLES = 0x906D\r\n            \r\n","\r\n            Original was GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29\r\n            \r\n","keycode_count * keysyms_per_keycode_return ":"keycode_count * keysyms_per_keycode_return\r\n","\r\n            Motion in the X direction. This is signed relative motion or absolute motion, depending on the value of usFlags.\r\n            ":"\r\n            X 方向的运动。这是有符号的相对运动或绝对运动，具体取决于 usFlags 的值。\r\n            \r\n","[requires: OES_blend_func_separate]\r\n            Specify pixel arithmetic for RGB and alpha components separately\r\n            ":"[要求：OES_blend_func_separate]\r\n            分别为 RGB 和 alpha 分量指定像素算法\r\n            \r\n","\r\n            Destroys an icon and frees any memory the icon occupied.\r\n            ":"\r\n            销毁图标并释放图标占用的所有内存。\r\n            \r\n","[length: 4] \r\n            Returns the requested object parameter.\r\n            ":"[长度：4]\r\n            返回请求的对象参数。\r\n            \r\n","\r\n            Original was GL_TEXTURE10 = 0x84CA\r\n            ":"\r\n            原来是 GL_TEXTURE10 = 0x84CA\r\n            \r\n","\r\n            Original was GL_R16F_EXT = 0x822D\r\n            ":"\r\n            原来是 GL_R16F_EXT = 0x822D\r\n            \r\n","\r\n            Original was GL_Texture29 = 0X84dd\r\n            ":"\r\n            原来是 GL_Texture29 = 0X84dd\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE\r\n            \r\n"," \r\n            Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.\r\n            ":" \r\n            指定帧缓冲区对象附加点的符号名称。接受的值为 ColorAttachment0、DepthAttachment 和 StencilAttachment。\r\n            \r\n","\r\n            Original was GL_ALL_COMPLETED_NV = 0x84F2\r\n            ":"\r\n            原来是 GL_ALL_COMPLETED_NV = 0x84F2\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C\r\n            \r\n","\r\n            Original was GL_REFLECTION_MAP_NV = 0x8512\r\n            ":"原来是 GL_REFLECTION_MAP_NV = 0x8512\r\n            \r\n","\r\n            Top level collection Usage for the raw input device.\r\n            ":"\r\n            原始输入设备的顶级集合用法。\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105\r\n            \r\n","\r\n            Original was GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853\r\n            ":"\r\n            原来是 GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853\r\n            \r\n","\r\n            A blittable value type is a struct that only references other value types recursively,\r\n            which allows it to be passed to unmanaged code directly.\r\n            ":"\r\n            一个 blittable 值类型是一个只递归引用其他值类型的结构，\r\n            这允许它直接传递给非托管代码。\r\n            \r\n","\r\n            Original was GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5\r\n            ":"\r\n            原来是 GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5\r\n            \r\n","\r\n            Original was GL_MIRRORED_REPEAT_OES = 0x8370\r\n            ":"\r\n            原来是 GL_MIRRORED_REPEAT_OES = 0x8370\r\n            \r\n","\r\n            Used in GL.StencilOp, GL.StencilOpSeparate\r\n            ":"\r\n            在GL.StencilOp中使用，GL.StencilOpSeparate\r\n            \r\n","\r\n            Ensures that this NativeWindow has not been disposed.\r\n            ":"\r\n            确保尚未释放此 NativeWindow。\r\n            \r\n","Values lower than 1.0Hz are clamped to 0.0. Values higher than 500.0Hz are clamped to 500.0Hz.":"低于 1.0Hz 的值被限制为 0.0。高于 500.0Hz 的值被限制在 500.0Hz。\r\n","\r\n            Enumerates available buttons for a ":"\r\n            枚举可用按钮\r\n","\r\n            Specifies the data type of the pixel data. The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.\r\n            ":"\r\n            指定像素数据的数据类型。 The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = 0x93C0\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = 0x93C0\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_SINK = 0x802D\r\n            ":"\r\n            原来是 GL_HISTOGRAM_SINK = 0x802D\r\n            \r\n","\r\n            Original was GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C\r\n            ":"\r\n            原来是 GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C\r\n            \r\n","\r\n            Original was GL_PATH_FORMAT_PS_NV = 0x9071\r\n            ":"\r\n            原来是 GL_PATH_FORMAT_PS_NV = 0x9071\r\n            \r\n","\r\n            Used in GL.Ext.BeginTransformFeedback, GL.Ext.BindBufferBase and 4 other functions\r\n            ":"\r\n            用于 GL.Ext.BeginTransformFeedback、GL.Ext.BindBufferBase 和其他 4 个函数\r\n            \r\n","\r\n            Original was GL_Luminance = 0X1909\r\n            ":"\r\n            原来是 GL_Luminance = 0X1909\r\n            \r\n","\r\n            Original was GL_INVALID_INDEX = 0xFFFFFFFF\r\n            ":"\r\n            原来是 GL_INVALID_INDEX = 0xFFFFFFFF\r\n            \r\n","\r\n            Original was GL_QUAD_LUMINANCE4_SGIS = 0x8120\r\n            ":"\r\n            原来是 GL_QUAD_LUMINANCE4_SGIS = 0x8120\r\n            \r\n"," \r\n            Specifies the program object whose information log is to be queried.\r\n            ":" \r\n            指定要查询其信息日志的程序对象。\r\n            \r\n","\r\n            Sets the current process as dots per inch (dpi) aware.\r\n            Note: SetProcessDPIAware is subject to a possible race condition\r\n            if a DLL caches dpi settings during initialization.\r\n            For this reason, it is recommended that dpi-aware be set through\r\n            the application (.exe) manifest rather than by calling SetProcessDPIAware.\r\n            ":"\r\n            将当前进程设置为每英寸点数 (dpi) 感知。\r\n            注意：SetProcessDPIAware 可能存在竞争条件\r\n            如果 DLL 在初始化期间缓存 dpi 设置。\r\n            为此，建议通过以下方式设置 dpi-aware\r\n            应用程序 (.exe) 清单，而不是通过调用 SetProcessDPIAware。\r\n            \r\n","\r\n            Original was GL_PROGRAM_ADDRESS_REGISTERS = 0x88B0\r\n            ":"\r\n            原来是 GL_PROGRAM_ADDRESS_REGISTERS = 0x88B0\r\n            \r\n","[length: name] \r\n            The name of the resource to query the location of.\r\n            ":"[长度：姓名]\r\n            要查询其位置的资源的名称。\r\n            \r\n","\r\n            Original was GL_SRGB8_ALPHA8 = 0x8C43\r\n            ":"\r\n            原来是 GL_SRGB8_ALPHA8 = 0x8C43\r\n            \r\n","\r\n            Activates the window and displays it as a maximized window.\r\n            ":"\r\n            激活窗口并将其显示为最大化窗口。\r\n            \r\n","\r\n            Original was GL_STATIC_DRAW_ARB = 0x88E4\r\n            ":"\r\n            原来是 GL_STATIC_DRAW_ARB = 0x88E4\r\n            \r\n","[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]\r\n            Reserve program pipeline object names\r\n            ":"[要求：v4.1 或 ARB_separate_shader_objects|VERSION_4_1]\r\n            保留程序管道对象名称\r\n            \r\n","\r\n            Original was GL_HALF_APPLE = 0x140B\r\n            ":"\r\n            原来是 GL_HALF_APPLE = 0x140B\r\n            \r\n","[requires: v4.5]":"[要求：v4.5]\r\n","\r\n            Original was GL_CLIP_PLANE3 = 0x3003\r\n            ":"\r\n            原来是 GL_CLIP_PLANE3 = 0x3003\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT0_EXT = 0x8CE0\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT0_EXT = 0x8CE0\r\n            \r\n","[requires: v4.0]\r\n            Set the RGB blend equation and the alpha blend equation separately\r\n            ":"[要求：v4.0]\r\n            分别设置RGB混合方程和alpha混合方程\r\n            \r\n","\r\n            Original was GL_LUMINANCE16_ALPHA8_ICC_SGIX = 0x846B\r\n            ":"\r\n            原来是 GL_LUMINANCE16_ALPHA8_ICC_SGIX = 0x846B\r\n            \r\n","\r\n            Original was GL_FOG_COORD_ARRAY_POINTER = 0x8456\r\n            ":"\r\n            原来是 GL_FOG_COORD_ARRAY_POINTER = 0x8456\r\n            \r\n","\r\n            Original was GL_QUADRATIC_ATTENUATION = 0x1209\r\n            ":"\r\n            原来是 GL_QUADRATIC_ATTENUATION = 0x1209\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RED_RGTC1 = 0x8DBB\r\n            ":"\r\n            原来是 GL_COMPRESSED_RED_RGTC1 = 0x8DBB\r\n            \r\n","[requires: OES_framebuffer_object]\r\n            Generate framebuffer object names\r\n            ":"[要求：OES_framebuffer_object]\r\n            生成帧缓冲区对象名称\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the W, Z, and Y components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 W、Z 和 Y 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Original was GL_DOT2_ADD_ATI = 0x896C\r\n            ":"\r\n            原来是 GL_DOT2_ADD_ATI = 0x896C\r\n            \r\n","\r\n            Original was GL_VERTEX_SHADER = 0x8B31\r\n            ":"\r\n            原来是 GL_VERTEX_SHADER = 0x8B31\r\n            \r\n","\r\n            Used in GL.Clear\r\n            ":"\r\n            用于 GL.Clear\r\n            \r\n","\r\n            Original was GL_RED_MIN_CLAMP_INGR = 0x8560\r\n            ":"原来是 GL_RED_MIN_CLAMP_INGR = 0x8560\r\n            \r\n","\r\n            Original was GL_INVERSE_TRANSPOSE_NV = 0x862D\r\n            ":"\r\n            原来是 GL_INVERSE_TRANSPOSE_NV = 0x862D\r\n            \r\n","The left win key (equivalent to WinLeft).":"左赢键（相当于 WinLeft）。\r\n","[requires: EXT_texture_object]\r\n            Generate texture names\r\n            ":"[需要：EXT_texture_object]\r\n            生成纹理名称\r\n            \r\n"," \r\n            The index of the binding whose divisor to modify.\r\n            ":" \r\n            要修改其除数的绑定的索引。\r\n            \r\n","[requires: OES_texture_3D]\r\n            Specify a three-dimensional texture image\r\n            ":"[要求：OES_texture_3D]\r\n            指定三维纹理图像\r\n            \r\n","\r\n            Original was GL_MALI_SHADER_BINARY_ARM = 0x8F60\r\n            ":"\r\n            原来是 GL_MALI_SHADER_BINARY_ARM = 0x8F60\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1\r\n            \r\n","\r\n            Used in GL.MemoryBarrier\r\n            ":"\r\n            在 GL.MemoryBarrier 中使用\r\n            \r\n","[length: target,format,type,height] \r\n            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.\r\n            ":"[长度：目标、格式、类型、高度]\r\n            指向经过处理以构建列过滤器内核的一维像素数据数组的指针。\r\n            \r\n","\r\n            Original was GL_COPY_WRITE_BUFFER_NV = 0x8F37\r\n            ":"\r\n            原来是 GL_COPY_WRITE_BUFFER_NV = 0x8F37\r\n            \r\n"," that represents the absolute x position of the cursor in screen coordinates.\r\n             ":" 表示光标在屏幕坐标中的绝对 x 位置。\r\n             \r\n","\r\n            Original was GL_COORD_REPLACE_NV = 0x8862\r\n            ":"\r\n            原来是 GL_COORD_REPLACE_NV = 0x8862\r\n            \r\n","\r\n            Original was GL_TIMESTAMP_EXT = 0x8E28\r\n            ":"\r\n            原来是 GL_TIMESTAMP_EXT = 0x8E28\r\n            \r\n"," \r\n            The filter whose parameters are to be retrieved. Must be one of Convolution1D, Convolution2D, or Separable2D.\r\n            ":"要检索其参数的过滤器。必须是 Convolution1D、Convolution2D 或 Separable2D 之一。\r\n            \r\n","\r\n            Original was GL_RGB5_A1 = 0x8057\r\n            ":"\r\n            原来是 GL_RGB5_A1 = 0x8057\r\n            \r\n","\r\n            Original was GL_PROGRAM_STRING = 0x8628\r\n            ":"\r\n            原来是 GL_PROGRAM_STRING = 0x8628\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return the value of a uniform variable\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回统一变量的值\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_NV = 0x852D\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_NV = 0x852D\r\n            \r\n","\r\n            Retrieve messages from the debug message log\r\n            ":"\r\n            从调试消息日志中检索消息\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_OES = 0x8D41\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_OES = 0x8D41\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311\r\n            \r\n","\r\n            Original was GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128\r\n            ":"\r\n            原来是 GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128\r\n            \r\n","\r\n            Original was GL_COLOR_INDEX1_EXT = 0x80E2\r\n            ":"\r\n            原来是 GL_COLOR_INDEX1_EXT = 0x80E2\r\n            \r\n","\r\n            Original was GL_RGBA32F_ARB = 0x8814\r\n            ":"\r\n            原来是 GL_RGBA32F_ARB = 0x8814\r\n            \r\n","\r\n            Original was GL_RGB_422_APPLE = 0x8A1F\r\n            ":"\r\n            原来是 GL_RGB_422_APPLE = 0x8A1F\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_POP_GROUP_KHR = 0x826A\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_POP_GROUP_KHR = 0x826A\r\n            \r\n","\r\n            Original was GL_SIGNED_INTENSITY8_NV = 0x8708\r\n            ":"\r\n            原来是 GL_SIGNED_INTENSITY8_NV = 0x8708\r\n            \r\n","[requires: v1.0]\r\n            Set the current normal vector\r\n            ":"[要求：v1.0]\r\n            设置当前法向量\r\n            \r\n","\r\n            Original was GL_BGRA_IMG = 0x80E1\r\n            ":"\r\n            原来是 GL_BGRA_IMG = 0x80E1\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6\r\n            ":"原来是 GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6\r\n            \r\n","\r\n            Used in GL.GetColorTableParameter\r\n            ":"\r\n            在 GL.GetColorTableParameter 中使用\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC\r\n            \r\n","\r\n            Original was GL_DEPTH_TEXTURE_MODE_ARB = 0x884B\r\n            ":"\r\n            原来是 GL_DEPTH_TEXTURE_MODE_ARB = 0x884B\r\n            \r\n","\r\n            Original was GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10\r\n            ":"\r\n            原来是 GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10\r\n            \r\n"," \r\n            Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.\r\n            ":" \r\n            指定纹理中的图像应附加到的附加点。必须是以下符号常量之一：ColorAttachment0、DepthAttachment 或 StencilAttachment。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5\r\n            \r\n","\r\n            Original was GL_VERTEX_STATE_PROGRAM_NV = 0x8621\r\n            ":"\r\n            原来是 GL_VERTEX_STATE_PROGRAM_NV = 0x8621\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 0x8A56\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 0x8A56\r\n            \r\n","\r\n            Encapsulates the state of a Keyboard device.\r\n            ":"\r\n            封装键盘设备的状态。\r\n            \r\n","\r\n            The hat is in its bottom position.\r\n            ":"\r\n            帽子处于底部位置。\r\n            \r\n","\r\n            Original was GL_TEXTURE_SPARSE_ARB = 0x91A6\r\n            ":"\r\n            原来是 GL_TEXTURE_SPARSE_ARB = 0x91A6\r\n            \r\n","\r\n            Original was GL_INT_VEC4_ARB = 0x8B55\r\n            ":"\r\n            原来是 GL_INT_VEC4_ARB = 0x8B55\r\n            \r\n"," \r\n            Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.\r\n            ":" \r\n            指定渲染缓冲区目标。符号常量必须是 Renderbuffer。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_MATRICES_ARB = 0x862F\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_MATRICES_ARB = 0x862F\r\n            \r\n","\r\n            Gets or sets the VSyncMode.\r\n            ":"\r\n            获取或设置 VSyncMode。\r\n            \r\n","\r\n            Original was GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202\r\n            ":"\r\n            原来是 GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D\r\n            \r\n"," \r\n            The name of a texture or renderbuffer object from which to copy.\r\n            ":" \r\n            要从中复制的纹理或渲染缓冲区对象的名称。\r\n            \r\n","\r\n            Original was GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE\r\n            ":"\r\n            原来是 GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE\r\n            \r\n","\r\n            Original was GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060\r\n            ":"\r\n            原来是 GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060\r\n            \r\n"," if this hat lies in the left hemicircle; otherwise, ":" 如果这顶帽子位于左半圆；否则，\r\n","[requires: v1.0 and 1.0]\r\n            Set the current texture coordinates\r\n            ":"[要求：v1.0 和 1.0]\r\n            设置当前纹理坐标\r\n            \r\n","\r\n            Sets the vibration intensity for the left and right motors of this ":"\r\n            设置本机左右电机的振动强度\r\n","\r\n            Original was GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912\r\n            ":"\r\n            原来是 GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5\r\n            \r\n","\r\n            Used in GL.GetProgramResource\r\n            ":"\r\n            在 GL.GetProgramResource 中使用\r\n            \r\n"," describing the state of the left thumb stick.\r\n            ":" 描述左拇指杆的状态。\r\n            \r\n","\r\n            Original was GL_VALIDATE_STATUS = 0x8B83\r\n            ":"\r\n            原来是 GL_VALIDATE_STATUS = 0x8B83\r\n            \r\n","\r\n            Original was GL_TEXTURE30 = 0x84DE\r\n            ":"\r\n            原来是 GL_TEXTURE30 = 0x84DE\r\n            \r\n","\r\n            Used in GL.Sgi.ColorTableParameter\r\n            ":"\r\n            在 GL.Sgi.ColorTableParameter 中使用\r\n            \r\n","\r\n            Original was GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9\r\n            ":"\r\n            原来是 GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9\r\n            \r\n","\r\n            Original was GL_MODELVIEW31_ARB = 0x873F\r\n            ":"\r\n            原来是 GL_MODELVIEW31_ARB = 0x873F\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Render primitives from array data\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            从数组数据渲染图元\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_PREFERRED = 0x8270\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_PREFERRED = 0x8270\r\n            \r\n","\r\n            Original was GL_TESS_EVALUATION_PROGRAM_NV = 0x891F\r\n            ":"\r\n            原来是 GL_TESS_EVALUATION_PROGRAM_NV = 0x891F\r\n            \r\n","[requires: v1.0]\r\n            Force execution of GL commands in finite time\r\n            ":"[要求：v1.0]\r\n            在有限时间内强制执行 GL 命令\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084\r\n            \r\n"," \r\n            Specifies the number of elements in the array addressed by indirect.\r\n            ":" \r\n            指定间接寻址的数组中的元素数。\r\n            \r\n","\r\n            Used in GL.Arb.ActiveTexture, GL.Arb.ClientActiveTexture and 55 other functions\r\n            ":"\r\n            用于 GL.Arb.ActiveTexture、GL.Arb.ClientActiveTexture 和 55 个其他函数\r\n            \r\n","\r\n            Original was GL_TESS_CONTROL_SHADER = 0x8E88\r\n            ":"\r\n            原来是 GL_TESS_CONTROL_SHADER = 0x8E88\r\n            \r\n","A handle to the icon or cursor.":"图标或光标的句柄。\r\n","\r\n            Original was GL_INDEX_ARRAY_EXT = 0x8077\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_EXT = 0x8077\r\n            \r\n","The Type must contain a nested class called \"Delegates\".":"Type 必须包含一个名为“Delegates”的嵌套类。\r\n","\r\n            Original was GL_LowInt = 0X8df3\r\n            ":"\r\n            原来是 GL_LowInt = 0X8df3\r\n            \r\n"," \r\n            The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, and LuminanceAlpha.\r\n            ":" \r\n            数据中像素数据的格式。允许的值为 Red、Green、Blue、Alpha、Rgb、Bgr、Rgba、Bgra、Luminance 和 LuminanceAlpha。\r\n            \r\n","The resulting Matrix4 instance.":"生成的 Matrix4 实例。\r\n","\r\n            Original was GL_COMBINER1_NV = 0x8551\r\n            ":"\r\n            原来是 GL_COMBINER1_NV = 0x8551\r\n            \r\n","\r\n            Retrieves a platform-specific handle to this window.\r\n            ":"\r\n            检索此窗口的特定于平台的句柄。\r\n            \r\n","\r\n            Original was GL_MaxVaryingVectors = 0X8dfc\r\n            ":"\r\n            原来是 GL_MaxVaryingVectors = 0X8dfc\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Delete renderbuffer objects\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            删除渲染缓冲区对象\r\n            \r\n","\r\n            Original was GL_Texture7 = 0X84c7\r\n            ":"\r\n            原来是 GL_Texture7 = 0X84c7\r\n            \r\n","\r\n            Original was GL_CON_1_ATI = 0x8942\r\n            ":"\r\n            原来是 GL_CON_1_ATI = 0x8942\r\n            \r\n","\r\n            Original was GL_FRAGMENT_PROGRAM_NV = 0x8870\r\n            ":"\r\n            原来是 GL_FRAGMENT_PROGRAM_NV = 0x8870\r\n            \r\n","\r\n            Original was GL_VERTEX_BINDING_OFFSET = 0x82D7\r\n            ":"\r\n            原来是 GL_VERTEX_BINDING_OFFSET = 0x82D7\r\n            \r\n","\r\n            Original was GL_TWO = 2\r\n            ":"\r\n            原来是 GL_TWO = 2\r\n            \r\n","\r\n            Original was GL_MAD_ATI = 0x8968\r\n            ":"\r\n            原来是 GL_MAD_ATI = 0x8968\r\n            \r\n","\r\n            Original was GL_TEXTURE13 = 0x84CD\r\n            ":"\r\n            原来是 GL_TEXTURE13 = 0x84CD\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT13 = 0x8CED\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT13 = 0x8CED\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3\r\n            \r\n","\r\n            Original was GL_COLORDODGE_KHR = 0x9299\r\n            ":"\r\n            原来是 GL_COLORDODGE_KHR = 0x9299\r\n            \r\n","\r\n            Original was GL_ArrayBufferBinding = 0X8894\r\n            ":"\r\n            原来是 GL_ArrayBufferBinding = 0X8894\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB\r\n            \r\n","\r\n            Original was GL_REFLECTION_MAP_OES = 0x8512\r\n            ":"\r\n            原来是 GL_REFLECTION_MAP_OES = 0x8512\r\n            \r\n","\r\n            Original was GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14\r\n            ":"\r\n            原来是 GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14\r\n            \r\n","\r\n            Gets a System.Single indicating the absolute position of the JoystickAxis with the specified index.\r\n            ":"\r\n            获取一个 System.Single，它指示具有指定索引的 JoystickAxis 的绝对位置。\r\n            \r\n","\r\n            By convention, the right and bottom edges of the rectangle are normally considered exclusive. In other words, the pixel whose coordinates are (right, bottom) lies immediately outside of the the rectangle. For example, when RECT is passed to the FillRect function, the rectangle is filled up to, but not including, the right column and bottom row of pixels. This structure is identical to the RECTL structure.\r\n            ":"\r\n            按照惯例，矩形的右边缘和下边缘通常被认为是排他性的。换句话说，坐标为 (right, bottom) 的像素正好位于矩形之外。例如，当 RECT 传递给 FillRect 函数时，矩形被填充到但不包括右列和底行像素。此结构与 RECTL 结构相同。\r\n            \r\n","\r\n            Original was GL_LOWER_LEFT = 0x8CA1\r\n            ":"\r\n            原来是 GL_LOWER_LEFT = 0x8CA1\r\n            \r\n","\r\n            Inverts the Vector3 component of this Quaternion.\r\n            ":"\r\n            反转此四元数的 Vector3 分量。\r\n            \r\n","\r\n            Draws a frame (defined in the window's class description) around the window.\r\n            ":"\r\n            在窗口周围绘制框架（在窗口的类描述中定义）。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER = 0X8d40\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER = 0X8d40\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPRESSED = 0x86A1\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPRESSED = 0x86A1\r\n            \r\n","\r\n            Total number of keys on the keyboard.\r\n            ":"\r\n            键盘上的按键总数。\r\n            \r\n","\r\n            Original was GL_PALETTE4_RGB5_A1_OES = 0x8B94\r\n            ":"\r\n            原来是 GL_PALETTE4_RGB5_A1_OES = 0x8B94\r\n            \r\n","[requires: ARB_shader_objects]\r\n            Replaces the source code in a shader object\r\n            ":"[需要：ARB_shader_objects]\r\n            替换着色器对象中的源代码\r\n            \r\n","\r\n            The time stamp of the mouse coordinate.\r\n            ":"\r\n            鼠标坐标的时间戳。\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_3DFX = 0x86B2\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_3DFX = 0x86B2\r\n            \r\n","[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]\r\n            Determine if a name corresponds to a program pipeline object\r\n            ":"[要求：v4.1 或 ARB_separate_shader_objects|VERSION_4_1]\r\n            判断名称是否对应程序管道对象\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_SCALE_SGI = 0x80D6\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_SCALE_SGI = 0x80D6\r\n            \r\n","[requires: v1.3][deprecated: v3.2]\r\n            Replace the current matrix with the specified row-major ordered matrix\r\n            ":"[要求：v1.3][弃用：v3.2]\r\n            用指定的行优先有序矩阵替换当前矩阵\r\n            \r\n","\r\n            Specifies which matrix stack is the target for subsequent matrix operations. Three values are accepted: GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE. The initial value is GL_MODELVIEW. Additionally, if the ARB_imaging extension is supported, GL_COLOR is also accepted.\r\n            ":"\r\n            指定哪个矩阵堆栈是后续矩阵运算的目标。接受三个值：GL_MODELVIEW、GL_PROJECTION 和 GL_TEXTURE。初始值为 GL_MODELVIEW。此外，如果支持 ARB_imaging 扩展，则也接受 GL_COLOR。\r\n            \r\n","\r\n            Total vertical pixels\r\n            ":"\r\n            总垂直像素\r\n            \r\n","[requires: EXT_map_buffer_range]\r\n            Indicate modifications to a range of a mapped buffer\r\n            ":"[需要：EXT_map_buffer_range]\r\n            指示对映射缓冲区范围的修改\r\n            \r\n","\r\n            Original was GL_REG_17_ATI = 0x8932\r\n            ":"\r\n            原来是 GL_REG_17_ATI = 0x8932\r\n            \r\n","The zero-based index of a gamepad device.":"游戏手柄设备的从零开始的索引。\r\n","The other object to be used in the comparison.":"要在比较中使用的其他对象。\r\n"," \r\n            Specifies the shader object that is to be attached.\r\n            ":" \r\n            指定要附加的着色器对象。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A\r\n            \r\n","Specify the width, which is the created window's inside dimensions and do not include the created window's borders.":"指定宽度，即创建窗口的内部尺寸，不包括创建窗口的边框。\r\n","The z component":"z 分量\r\n"," \r\n            Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.\r\n            ":" \r\n            指定纹理图像的深度，或纹理数组中的层数。所有实现都支持至少 256 纹素深的 3D 纹理图像，以及至少 256 层深的纹理数组。\r\n            \r\n","\r\n            Original was GL_TEXTURE_MAX_LEVEL = 0x813D\r\n            ":"\r\n            原来是 GL_TEXTURE_MAX_LEVEL = 0x813D\r\n            \r\n","\r\n            Original was GL_INTENSITY_FLOAT32_ATI = 0x8817\r\n            ":"\r\n            原来是 GL_INTENSITY_FLOAT32_ATI = 0x8817\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Test whether a capability is enabled\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            测试一个能力是否开启\r\n            \r\n","\r\n            Original was GL_MODELVIEW14_ARB = 0x872E\r\n            ":"\r\n            原来是 GL_MODELVIEW14_ARB = 0x872E\r\n            \r\n","\r\n            Used in GL.Ext.TextureNormal\r\n            ":"\r\n            在 GL.Ext.TextureNormal 中使用\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518\r\n            \r\n"," \r\n            The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.\r\n            ":" \r\n            参数值。必须是 Reduce、ConstantBorder、ReplicateBorder 之一。\r\n            \r\n","\r\n            Gets the information about the raw input devices for the current application.\r\n            ":"\r\n            获取有关当前应用程序的原始输入设备的信息。\r\n            \r\n","\r\n            Original was GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188\r\n            ":"\r\n            原来是 GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188\r\n            \r\n"," input device.\r\n            ":" 输入设备。\r\n            \r\n","\r\n            Original was GL_RG8 = 0x822B\r\n            ":"\r\n            原来是 GL_RG8 = 0x822B\r\n            \r\n"," \r\n            Specifies the name of the vertex array to bind.\r\n            ":" \r\n            指定要绑定的顶点数组的名称。\r\n            \r\n","\r\n            If the function succeeds, the return value is true.\r\n            Otherwise, the return value is false.\r\n            ":"\r\n            如果函数成功，则返回值为真。\r\n            否则，返回值为假。\r\n            \r\n","[requires: EXT_framebuffer_object]":"[需要：EXT_framebuffer_object]\r\n","\r\n            Original was GL_REG_30_ATI = 0x893F\r\n            ":"\r\n            原来是 GL_REG_30_ATI = 0x893F\r\n            \r\n","\r\n            Original was GL_TESSELLATION_MODE_AMD = 0x9004\r\n            ":"\r\n            原来是 GL_TESSELLATION_MODE_AMD = 0x9004\r\n            \r\n","The right win key.":"正确的胜利键。\r\n","\r\n            Original was GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4\r\n            ":"\r\n            原来是 GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4\r\n            \r\n","\r\n            If set, this enables the caller to receive input in the background only if the foreground application\r\n            does not process it. In other words, if the foreground application is not registered for raw input,\r\n            then the background application that is registered will receive the input.\r\n            ":"\r\n            如果设置，则只有在前台应用程序运行时，调用者才能在后台接收输入\r\n            不处理它。换句话说，如果前台应用程序没有注册原始输入，\r\n            然后注册的后台应用程序将接收输入。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Release resources consumed by the implementation's shader compiler\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            释放实现的着色器编译器消耗的资源\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F\r\n            \r\n","\r\n            Builds a rotation matrix for a rotation around the y-axis.\r\n            ":"\r\n            构建一个围绕 y 轴旋转的旋转矩阵。\r\n            \r\n","[length: format,type,count] \r\n            Pointer to a one-dimensional array of pixel data that is processed to replace the specified region of the color table.\r\n            ":"[长度：格式、类型、计数]\r\n            指向经过处理以替换颜色表的指定区域的像素数据的一维数组的指针。\r\n            \r\n","\r\n            Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTUREi, where i ranges from 0 (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1). The initial value is GL_TEXTURE0.\r\n            ":"\r\n            指定激活哪个纹理单元。纹理单元的数量取决于实现，但必须至少为两个。纹理必须是 GL_TEXTUREi 之一，其中 i 的范围为 0 (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1)。初始值为 GL_TEXTURE0。\r\n            \r\n"," \r\n            A bitfield controlling the command flushing behavior. flags must be zero.\r\n            ":" \r\n            控制命令刷新行为的位域。标志必须为零。\r\n            \r\n","Specifies the window whose events you are interested in.":"指定您对其事件感兴趣的窗口。\r\n"," \r\n            Specifies the data type of each fog coordinate. Symbolic constants Float, or Double are accepted. The initial value is Float.\r\n            ":" \r\n            指定每个雾坐标的数据类型。接受符号常量 Float 或 Double。初始值为浮点数。\r\n            \r\n"," \r\n            Specifies the target to which the texture is bound. Must be one of Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMap, TextureCubeMapArray, TextureBuffer, Texture2DMultisample or Texture2DMultisampleArray.\r\n            ":" \r\n            指定纹理绑定到的目标。必须是 Texture1D、Texture2D、Texture3D、Texture1DArray、Texture2DArray、TextureRectangle、TextureCubeMap、TextureCubeMapArray、TextureBuffer、Texture2DMultisample 或 Texture2DMultisampleArray 之一。\r\n            \r\n","[length: bufsize] \r\n            The address of an array of variables to receive the lengths of the received messages.\r\n            ":"[长度：bufsize]\r\n            用于接收接收到的消息长度的变量数组的地址。\r\n            \r\n"," has\r\n            a left shoulder button.\r\n            ":" 有\r\n            一个左肩按钮。\r\n            \r\n"," category for this debug message.":" 此调试消息的类别。\r\n"," instance\r\n            containing the desired options.":" 实例\r\n            包含所需的选项。\r\n","[requires: v1.3]\r\n            Specify a two-dimensional texture image in a compressed format\r\n            ":"[要求：v1.3]\r\n            以压缩格式指定二维纹理图像\r\n            \r\n","\r\n            Original was GL_ALPHA_SNORM = 0x9010\r\n            ":"\r\n            原来是 GL_ALPHA_SNORM = 0x9010\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 0x8D56\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 0x8D56\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Delete framebuffer objects\r\n            ":"[需要：EXT_framebuffer_object]\r\n            删除帧缓冲区对象\r\n            \r\n","\r\n            Original was GL_RGB16_SNORM = 0x8F9A\r\n            ":"\r\n            原来是 GL_RGB16_SNORM = 0x8F9A\r\n            \r\n","[requires: EXT_texture_border_clamp]":"[需要：EXT_texture_border_clamp]\r\n","Fourth item of the second row of the matrix.":"矩阵第二行的第四项。\r\n","\r\n            Original was GL_MAX_DRAW_BUFFERS_EXT = 0x8824\r\n            ":"\r\n            原来是 GL_MAX_DRAW_BUFFERS_EXT = 0x8824\r\n            \r\n","The page up key.":"向上翻页键。\r\n","[requires: SGIX_polynomial_ffd]":"[要求：SGIX_polynomial_ffd]\r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 0x90CC\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 0x90CC\r\n            \r\n"," \r\n            Specifies the size of the count and indices arrays.\r\n            ":" \r\n            指定计数和索引数组的大小。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Specify the alpha test function\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            指定 alpha 测试函数\r\n            \r\n","\r\n            Used in GL.Arb.GetBufferPointer\r\n            ":"\r\n            在 GL.Arb.GetBufferPointer 中使用\r\n            \r\n","\r\n            Original was GL_VARIABLE_E_NV = 0x8527\r\n            ":"\r\n            原来是 GL_VARIABLE_E_NV = 0x8527\r\n            \r\n","\r\n            Original was GL_DEBUG_OUTPUT = 0x92E0\r\n            ":"\r\n            原来是 GL_DEBUG_OUTPUT = 0x92E0\r\n            \r\n","\r\n            Original was GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8\r\n            ":"\r\n            原来是 GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8\r\n            \r\n","\r\n            Original was GL_ELEMENT_ARRAY_BUFFER = 0x8893\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_BUFFER = 0x8893\r\n            \r\n","\r\n            Original was GL_T4F_V4F = 0x2A28\r\n            ":"\r\n            原来是 GL_T4F_V4F = 0x2A28\r\n            \r\n"," \r\n            If True, each component counter that is actually returned is reset to zero.  (Other counters are unaffected.) If False, none of the counters in the histogram table is modified.\r\n            ":" \r\n            如果为 True，则实际返回的每个组件计数器都重置为零。 （其他计数器不受影响。）如果为 False，则直方图表中的任何计数器都不会被修改。\r\n            \r\n","\r\n            Used in GL.Ati.ElementPointer\r\n            ":"\r\n            在 GL.Ati.ElementPointer 中使用\r\n            \r\n","\r\n            Original was GL_ISOLINES_EXT = 0x8E7A\r\n            ":"\r\n            原来是 GL_ISOLINES_EXT = 0x8E7A\r\n            \r\n","\r\n            Vertical sync end\r\n            ":"\r\n            垂直同步结束\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E\r\n            \r\n","\r\n            Original was GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A\r\n            ":"\r\n            原来是 GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A\r\n            \r\n","\r\n            Original was GL_OVERLAY_NV = 0x9296\r\n            ":"\r\n            原来是 GL_OVERLAY_NV = 0x9296\r\n            \r\n"," \r\n            Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.\r\n            ":" \r\n            指定模板测试的参考值。 ref 被限制在 [0, 2 sup n - 1] 范围内，其中是模板缓冲区中位平面的数量。初始值为 0。\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_FORMAT = 0x8027\r\n            ":"\r\n            原来是 GL_HISTOGRAM_FORMAT = 0x8027\r\n            \r\n","\r\n            Original was GL_CLIP_PLANE4 = 0x3004\r\n            ":"\r\n            原来是 GL_CLIP_PLANE4 = 0x3004\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE_SOURCE = 0x8450\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_SOURCE = 0x8450\r\n            \r\n"," is currently released.\r\n            ":" 目前已发布。\r\n            \r\n","\r\n            Original was GL_UNPACK_SKIP_IMAGES = 0x806D\r\n            ":"\r\n            原来是 GL_UNPACK_SKIP_IMAGES = 0x806D\r\n            \r\n","\r\n            Used in GL.Ext.SamplePattern\r\n            ":"\r\n            在 GL.Ext.SamplePattern 中使用\r\n            \r\n","\r\n            Original was GL_ROUNDED_RECT4_NV = 0xEC\r\n            ":"\r\n            原来是 GL_ROUNDED_RECT4_NV = 0xEC\r\n            \r\n","The System.Object to check against.":"要检查的 System.Object。\r\n","The highest supported axis of the JoystickDevice.":"JoystickDevice 的最高支持轴。\r\n","\r\n            Original was GL_IMAGE_3D_EXT = 0x904E\r\n            ":"\r\n            原来是 GL_IMAGE_3D_EXT = 0x904E\r\n            \r\n","\r\n            Used in GL.TexImage2DMultisample, GL.TexImage3DMultisample\r\n            ":"\r\n            用于GL.TexImage2DMultisample、GL.TexImage3DMultisample\r\n            \r\n","[requires: NV_transform_feedback]\r\n            Bind a range within a buffer object to an indexed buffer target\r\n            ":"[需要：NV_transform_feedback]\r\n            将缓冲区对象中的范围绑定到索引缓冲区目标\r\n            \r\n"," is released.\r\n            ":" 发行了。\r\n            \r\n","\r\n            Original was GL_LUMINANCE16UI_EXT = 0x8D7A\r\n            ":"\r\n            原来是 GL_LUMINANCE16UI_EXT = 0x8D7A\r\n            \r\n","[requires: EXT_vertex_attrib_64bit]":"[要求：EXT_vertex_attrib_64bit]\r\n","\r\n            Original was GL_RGBA16UI = 0x8D76\r\n            ":"\r\n            原来是 GL_RGBA16UI = 0x8D76\r\n            \r\n","\r\n            Original was GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37\r\n            ":"\r\n            原来是 GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37\r\n            \r\n","\r\n            Original was GL_MODELVIEW25_ARB = 0x8739\r\n            ":"\r\n            原来是 GL_MODELVIEW25_ARB = 0x8739\r\n            \r\n","[requires: SGIX_framezoom]":"[要求：SGIX_framezoom]\r\n","[requires: APPLE_vertex_array_object]\r\n            Delete vertex array objects\r\n            ":"[需要：APPLE_vertex_array_object]\r\n            删除顶点数组对象\r\n            \r\n","Set to true if windowHandle corresponds to a System.Windows.Forms control.":"如果 windowHandle 对应于 System.Windows.Forms 控件，则设置为 true。\r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_EXT = 0x8078\r\n            ":"原来是 GL_TEXTURE_COORD_ARRAY_EXT = 0x8078\r\n            \r\n","\r\n            Original was GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C\r\n            ":"\r\n            原来是 GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C\r\n            \r\n","\r\n            Original was GL_HALF_BIAS_NORMAL_NV = 0x853A\r\n            ":"\r\n            原来是 GL_HALF_BIAS_NORMAL_NV = 0x853A\r\n            \r\n","\r\n            Original was GL_SAMPLE_BUFFERS_SGIS = 0x80A8\r\n            ":"\r\n            原来是 GL_SAMPLE_BUFFERS_SGIS = 0x80A8\r\n            \r\n","[requires: ATI_vertex_array_object]":"[需要：ATI_vertex_array_object]\r\n","\r\n            The XQueryKeymap() function returns a bit vector for the logical state of the keyboard, where each bit set to 1 indicates that the corresponding key is currently pressed down. The vector is represented as 32 bytes. Byte N (from 0) contains the bits for keys 8N to 8N + 7 with the least-significant bit in the byte representing key 8N.\r\n            ":"XQueryKeymap() 函数返回键盘逻辑状态的位向量，其中每个位设置为 1 表示相应的键当前被按下。矢量表示为 32 个字节。字节 N（从 0 开始）包含密钥 8N 到 8N + 7 的位，字节中的最低有效位表示密钥 8N。\r\n            \r\n","\r\n            Gets the Y position of the mouse for the event.\r\n            ":"\r\n            获取鼠标在事件中的 Y 位置。\r\n            \r\n","\r\n            Gets the packet number for this ":"\r\n            获取此包号\r\n","\r\n            Original was GL_T2F_IUI_V3F_EXT = 0x81B2\r\n            ":"\r\n            原来是 GL_T2F_IUI_V3F_EXT = 0x81B2\r\n            \r\n","\r\n            Specifies the width of the texture subimage.\r\n            ":"\r\n            指定纹理子图像的宽度。\r\n            \r\n"," \r\n            Specifies a pixel type for the returned data. The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, and Float32UnsignedInt248Rev.\r\n            ":" \r\n            指定返回数据的像素类型。 The supported types are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev,和 Float32UnsignedInt248Rev。\r\n            \r\n","\r\n            Original was GL_YCRCB_422_SGIX = 0x81BB\r\n            ":"\r\n            原来是 GL_YCRCB_422_SGIX = 0x81BB\r\n            \r\n","\r\n            Original was GL_NORMAL_MAP_ARB = 0x8511\r\n            ":"\r\n            原来是 GL_NORMAL_MAP_ARB = 0x8511\r\n            \r\n","\r\n            Gets or sets the value at row 4, column 2 of this instance.\r\n            ":"\r\n            获取或设置此实例第 4 行第 2 列的值。\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 0x92D4\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 0x92D4\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the W, Y, and Z components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 W、Y 和 Z 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Original was GL_MATRIX21_ARB = 0x88D5\r\n            ":"\r\n            原来是 GL_MATRIX21_ARB = 0x88D5\r\n            \r\n","\r\n            Original was GL_GEOMETRY_DEFORMATION_SGIX = 0x8194\r\n            ":"\r\n            原来是 GL_GEOMETRY_DEFORMATION_SGIX = 0x8194\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364\r\n            \r\n","[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]\r\n            Reserve transform feedback object names\r\n            ":"[要求：v4.0 或 ARB_transform_feedback2|VERSION_4_0]\r\n            保留变换反馈对象名称\r\n            \r\n","\r\n            Used in GL.Ext.GetHistogram, GL.Ext.GetHistogramParameter and 6 other functions\r\n            ":"\r\n            用于GL.Ext.GetHistogram、GL.Ext.GetHistogramParameter等6个函数\r\n            \r\n","[requires: v3.2]\r\n            Return parameters of a buffer object\r\n            ":"[要求：v3.2]\r\n            缓冲区对象的返回参数\r\n            \r\n","\r\n            Original was GL_SRC_ATOP_NV = 0x928E\r\n            ":"\r\n            原来是 GL_SRC_ATOP_NV = 0x928E\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23\r\n            \r\n","\r\n            A WM_MOUSEMOVE message is in the queue.\r\n            ":"\r\n            WM_MOUSEMOVE 消息在队列中。\r\n            \r\n","\r\n            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.\r\n            ":"\r\n            指定连续法线之间的字节偏移量。如果步幅为 0，则法线被理解为紧密排列在数组中。初始值为 0。\r\n            \r\n","\r\n            Original was GL_RENDERER = 0x1F01\r\n            ":"\r\n            原来是 GL_RENDERER = 0x1F01\r\n            \r\n"," \r\n            Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.\r\n            ":" \r\n            指定要返回的数组或缓冲区指针。接受符号常量 ColorArrayPointer、EdgeFlagArrayPointer、FogCoordArrayPointer、FeedbackBufferPointer、IndexArrayPointer、NormalArrayPointer、SecondaryColorArrayPointer、SelectionBufferPointer、TextureCoordArrayPointer 或 VertexArrayPointer。\r\n            \r\n"," \r\n            Specifies a marker value to be placed in the feedback buffer following a PassThroughToken.\r\n            ":" \r\n            指定要放置在 PassThroughToken 之后的反馈缓冲区中的标记值。\r\n            \r\n","\r\n            Original was GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15\r\n            ":"\r\n            原来是 GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15\r\n            \r\n","\r\n            Original was GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF\r\n            ":"\r\n            原来是 GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF\r\n            \r\n","\r\n            border pixel value\r\n            ":"\r\n            边框像素值\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT64_NV = 0x140F\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT64_NV = 0x140F\r\n            \r\n","\r\n            Original was GL_REG_21_ATI = 0x8936\r\n            ":"\r\n            原来是 GL_REG_21_ATI = 0x8936\r\n            \r\n","\r\n            Original was GL_COPY_WRITE_BUFFER_BINDING = 0x8F37\r\n            ":"\r\n            原来是 GL_COPY_WRITE_BUFFER_BINDING = 0x8F37\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector4 with the Y, X, W, and Z components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Y、X、W 和 Z 组件的 OpenTK.Vector4。\r\n            \r\n","\r\n            Original was GL_TEXTURE_LOD_BIAS_EXT = 0x8501\r\n            ":"\r\n            原来是 GL_TEXTURE_LOD_BIAS_EXT = 0x8501\r\n            \r\n","\r\n            Original was GL_BUFFER_ACCESS_ARB = 0x88BB\r\n            ":"\r\n            原来是 GL_BUFFER_ACCESS_ARB = 0x88BB\r\n            \r\n",", if a graphics mode parameter was relaxed, ":"，如果放宽了图形模式参数，\r\n","\r\n            Original was GL_RGB5_A1_EXT = 0x8057\r\n            ":"\r\n            原来是 GL_RGB5_A1_EXT = 0x8057\r\n            \r\n"," indicating whether the first extra mouse button is pressed.\r\n            This property is intended for XNA compatibility.\r\n            ":" 指示是否按下了第一个额外的鼠标按钮。\r\n            此属性旨在实现 XNA 兼容性。\r\n            \r\n","[length: 1] \r\n            Returns the pointer value.\r\n            ":"[长度：1]\r\n            返回指针值。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Multiply the current matrix with an orthographic matrix\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            将当前矩阵与正交矩阵相乘\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214\r\n            \r\n","\r\n            Scan code mode.\r\n            ":"\r\n            扫码模式。\r\n            \r\n","\r\n            Original was GL_INT_IMAGE_1D_EXT = 0x9057\r\n            ":"\r\n            原来是 GL_INT_IMAGE_1D_EXT = 0x9057\r\n            \r\n","[length: fontTarget,fontName]":"[长度：字体目标，字体名称]\r\n","\r\n            Used in GL.Angle.BlitFramebuffer, GL.NV.BlitFramebuffer\r\n            ":"\r\n            用于GL.Angle.BlitFramebuffer、GL.NV.BlitFramebuffer\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F\r\n            \r\n","\r\n            Original was GL_RG32F = 0x8230\r\n            ":"\r\n            原来是 GL_RG32F = 0x8230\r\n            \r\n"," \r\n            Specifies the value that parameter Shininess will be set to.\r\n            ":" \r\n            指定参数闪亮度将设置为的值。\r\n            \r\n","\r\n            Original was GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74\r\n            ":"\r\n            原来是 GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74\r\n            \r\n","[requires: ARB_sample_shading]\r\n            Specifies minimum rate at which sample shaing takes place\r\n            ":"[需要：ARB_sample_shading]\r\n            指定样本着色发生的最小速率\r\n            \r\n","\r\n            Construct a new Quaternion\r\n            ":"\r\n            构造一个新的四元数\r\n            \r\n","[length: bufSize] \r\n            Specifies an array of characters that is used to return the information log.\r\n            ":"[长度：bufSize]\r\n            指定用于返回信息日志的字符数组。\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Delete framebuffer objects\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            删除帧缓冲区对象\r\n            \r\n","\r\n            Original was GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1\r\n            ":"\r\n            原来是 GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1\r\n            \r\n"," \r\n            If layered is False, specifies the layer of texture to be bound to the image unit. Ignored otherwise.\r\n            ":" \r\n            如果 layered 为 False，则指定要绑定到图像单元的纹理层。否则忽略。\r\n            \r\n","\r\n            Original was GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054\r\n            ":"\r\n            原来是 GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054\r\n            \r\n","\r\n            Gets an OpenTK.Input.InputDeviceType value, representing the device type of this IInputDevice instance.\r\n            ":"\r\n            获取一个 OpenTK.Input.InputDeviceType 值，表示此 IInputDevice 实例的设备类型。\r\n            \r\n","\r\n            Original was GL_BEVEL_NV = 0x90A6\r\n            ":"\r\n            原来是 GL_BEVEL_NV = 0x90A6\r\n            \r\n","\r\n            Original was GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D\r\n            ":"\r\n            原来是 GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D\r\n            \r\n","[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]\r\n            Specify the value of a uniform variable for the current program object\r\n            ":"[要求：v4.0 或 ARB_gpu_shader_fp64|VERSION_4_0]\r\n            为当前程序对象指定统一变量的值\r\n            \r\n"," \r\n            Specifies the texture object to be initialized as a view.\r\n            ":" \r\n            指定要初始化为视图的纹理对象。\r\n            \r\n","Horizontal screen space coordinate of the NativeWindow's origin.":"NativeWindow 原点的水平屏幕空间坐标。\r\n","\r\n            Original was GL_INTENSITY16_ICC_SGIX = 0x846A\r\n            ":"\r\n            原来是 GL_INTENSITY16_ICC_SGIX = 0x846A\r\n            \r\n","\r\n            Original was GL_DISTANCE_ATTENUATION_SGIS = 0x8129\r\n            ":"\r\n            原来是 GL_DISTANCE_ATTENUATION_SGIS = 0x8129\r\n            \r\n","\r\n            Original was GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8\r\n            ":"\r\n            原来是 GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8\r\n            \r\n","\r\n            Original was GL_TRANSLATE_3D_NV = 0x9091\r\n            ":"\r\n            原来是 GL_TRANSLATE_3D_NV = 0x9091\r\n            \r\n","\r\n            Original was GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143\r\n            ":"\r\n            原来是 GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143\r\n            \r\n","\r\n            Original was GL_NEGATIVE_Z_EXT = 0x87DB\r\n            ":"\r\n            原来是 GL_NEGATIVE_Z_EXT = 0x87DB\r\n            \r\n","\r\n            Original was GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5\r\n            ":"\r\n            原来是 GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7\r\n            \r\n"," \r\n            Specifies the type of array to enable. Symbolic constants V2f, V3f, C4ubV2f, C4ubV3f, C3fV3f, N3fV3f, C4fN3fV3f, T2fV3f, T4fV4f, T2fC4ubV3f, T2fC3fV3f, T2fN3fV3f, T2fC4fN3fV3f, and T4fC4fN3fV4f are accepted.\r\n            ":" \r\n            指定要启用的数组类型。接受符号常量 V2f、V3f、C4ubV2f、C4ubV3f、C3fV3f、N3fV3f、C4fN3fV3f、T2fV3f、T4fV4f、T2fC4ubV3f、T2fC3fV3f、T2fN3fV3f、T2fC4fN3fV3f 和 T4fC4fN3fV4f。\r\n            \r\n"," \r\n            Specifies a multiplier for each bit in the line stipple pattern. If factor is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used. factor is clamped to the range [1, 256] and defaults to 1.\r\n            ":" \r\n            为线条点画图案中的每一位指定一个乘数。例如，如果 factor 为 3，则在使用模式中的下一位之前，模式中的每个位都会使用三次。 factor 被限制在 [1, 256] 范围内，默认为 1。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6\r\n            \r\n","\r\n            Enumerates available ":"\r\n            枚举可用\r\n","\r\n            Original was GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D\r\n            ":"\r\n            原来是 GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D\r\n            \r\n","Scale factors for the x and y axes.":"x 和 y 轴的比例因子。\r\n","\r\n            Original was GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025\r\n            ":"\r\n            原来是 GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082\r\n            \r\n","\r\n            Original was GL_STENCIL_BUFFER_BIT4_QCOM = 0x00100000\r\n            ":"\r\n            原来是 GL_STENCIL_BUFFER_BIT4_QCOM = 0x00100000\r\n            \r\n"," \r\n            The name of a texture or renderbuffer object to which to copy.\r\n            ":" \r\n            要复制到的纹理或渲染缓冲区对象的名称。\r\n            \r\n"," \r\n            The symbolic name of a texture color lookup table parameter. Must be one of ColorTableScale or ColorTableBias.\r\n            ":" \r\n            纹理颜色查找表参数的符号名称。必须是 ColorTableScale 或 ColorTableBias 之一。\r\n            \r\n","\r\n            planes to be preserved if possible\r\n            ":"\r\n            尽可能保留飞机\r\n            \r\n","\r\n            Original was GL_PROGRAM_PIPELINE_BINDING = 0x825A\r\n            ":"\r\n            原来是 GL_PROGRAM_PIPELINE_BINDING = 0x825A\r\n            \r\n","\r\n            Original was GL_POINT_FADE_THRESHOLD_SIZE = 0x8128\r\n            ":"\r\n            原来是 GL_POINT_FADE_THRESHOLD_SIZE = 0x8128\r\n            \r\n","\r\n            Specifies the horizontal (x) coordinate of a point.\r\n            ":"\r\n            指定点的水平 (x) 坐标。\r\n            \r\n","\r\n            Original was GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF\r\n            ":"\r\n            原来是 GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF\r\n            \r\n","\r\n            Indicates the last available mouse button.\r\n            ":"\r\n            指示最后一个可用的鼠标按钮。\r\n            \r\n","[requires: OES_framebuffer_object]\r\n            Retrieve information about a bound renderbuffer object\r\n            ":"[要求：OES_framebuffer_object]\r\n            检索有关绑定渲染缓冲区对象的信息\r\n            \r\n","The object to check against.":"要检查的对象。\r\n","\r\n            Original was GL_STENCIL_BACK_FAIL = 0x8801\r\n            ":"\r\n            原来是 GL_STENCIL_BACK_FAIL = 0x8801\r\n            \r\n"," \r\n            Specifies which texture unit to make active. The number of texture units is implementation-dependent, but must be at least 32. texture must be one of Texturei, where i ranges from zero to the value of MaxCombinedTextureImageUnits minus one. The initial value is Texture0.\r\n            ":" \r\n            指定激活哪个纹理单元。纹理单元的数量取决于实现，但必须至少为 32。纹理必须是 Texturei 之一，其中 i 的范围从零到 MaxCombinedTextureImageUnits 的值减一。初始值为 Texture0。\r\n            \r\n","\r\n            Original was GL_RGBA16I_EXT = 0x8D88\r\n            ":"\r\n            原来是 GL_RGBA16I_EXT = 0x8D88\r\n            \r\n","[requires: v4.3 or KHR_debug|VERSION_4_3]\r\n            Specify a callback to receive debugging messages from the GL\r\n            ":"[要求：v4.3 或 KHR_debug|VERSION_4_3]\r\n            指定回调以接收来自 GL 的调试消息\r\n            \r\n"," \r\n            Specifies up to four color buffers to be drawn into. Symbolic constants None, FrontLeft, FrontRight, BackLeft, BackRight, Front, Back, Left, Right, and FrontAndBack are accepted. The initial value is Front for single-buffered contexts, and Back for double-buffered contexts.\r\n            ":" \r\n            指定最多四个要绘制到的颜色缓冲区。接受符号常量 None、FrontLeft、FrontRight、BackLeft、BackRight、Front、Back、Left、Right 和 FrontAndBack。对于单缓冲上下文，初始值为 Front，对于双缓冲上下文，初始值为 Back。\r\n            \r\n","\r\n            Original was GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E\r\n            ":"\r\n            原来是 GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_COMPLETE_OES = 0x8CD5\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_COMPLETE_OES = 0x8CD5\r\n            \r\n"," \r\n            Specifies whether to apply color clamping. clamp must be True or False.\r\n            ":" \r\n            指定是否应用颜色限制。 clamp 必须为 True 或 False。\r\n            \r\n","\r\n            Used in GL.TexStorage2DMultisample\r\n            ":"\r\n            用于 GL.TexStorage2DMultisample\r\n            \r\n","[requires: NV_shader_buffer_load]\r\n            Specify the value of a uniform variable for a specified program object\r\n            ":"[要求：NV_shader_buffer_load]\r\n            为指定的程序对象指定统一变量的值\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A\r\n            \r\n","\r\n            Pointer to an array of RawInputDevice structures that represent the devices that supply the raw input.\r\n            ":"\r\n            指向 RawInputDevice 结构数组的指针，这些结构表示提供原始输入的设备。\r\n            \r\n","\r\n            Original was GL_T = 0x2001\r\n            ":"\r\n            原来是 GL_T = 0x2001\r\n            \r\n","\r\n            Original was GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F\r\n            ":"\r\n            原来是 GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C\r\n            \r\n","\r\n            Original was GL_HARDLIGHT_KHR = 0x929B\r\n            ":"\r\n            原来是 GL_HARDLIGHT_KHR = 0x929B\r\n            \r\n","A valid NSView reference.":"有效的 NSView 引用。\r\n","[length: count] \r\n            The address of an array of unsigned integers contianing the ids of the messages to enable or disable.\r\n            ":"[长度：计数]\r\n            包含要启用或禁用的消息 ID 的无符号整数数组的地址。\r\n            \r\n","true if the current matrix is equal to the matrix parameter; otherwise, false.":"如果当前矩阵等于矩阵参数，则为真；否则，假的。\r\n","A pointer to a XVisualInfo structure obtained through XGetVisualInfo.":"通过 XGetVisualInfo 获得的指向 XVisualInfo 结构的指针。\r\n","\r\n            Original was GL_NEGATIVE_W_EXT = 0x87DC\r\n            ":"\r\n            原来是 GL_NEGATIVE_W_EXT = 0x87DC\r\n            \r\n","Contains information necessary for frame rendering.":"包含帧渲染所需的信息。\r\n","[length: 1] \r\n            Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName.\r\n            ":"[长度：1]\r\n            指定一个变量的地址，该变量将接收已经或将要写入由 uniformName 寻址的缓冲区的字符数。\r\n            \r\n","[length: target,format,type] \r\n            Pointer to storage for the row filter image.\r\n            ":"[长度：目标、格式、类型]\r\n            指向行过滤器图像存储的指针。\r\n            \r\n","Size, in bytes, of RawInputHeader.":"RawInputHeader 的大小（以字节为单位）。\r\n","\r\n            Original was GL_RENDERBUFFER_GREEN_SIZE_OES = 0x8D51\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_GREEN_SIZE_OES = 0x8D51\r\n            \r\n","[requires: EXT_tessellation_shader]\r\n            Specifies the parameters for patch primitives\r\n            ":"[需要：EXT_tessellation_shader]\r\n            指定补丁原语的参数\r\n            \r\n","\r\n            Occurs whenever the mouse is moved.\r\n            ":"\r\n            每当移动鼠标时发生。\r\n            \r\n","\r\n            Original was GL_RG32F_EXT = 0x8230\r\n            ":"\r\n            原来是 GL_RG32F_EXT = 0x8230\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_PARAMETERS = 0x88A9\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_PARAMETERS = 0x88A9\r\n            \r\n","[requires: v1.5]":"[要求：v1.5]\r\n","\r\n            Original was GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E\r\n            ":"\r\n            原来是 GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E\r\n            \r\n","\r\n            Original was GL_FRONT = 0X0404\r\n            ":"\r\n            原来是 GL_FRONT = 0X0404\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905\r\n            \r\n","\r\n            Original was GL_MAX_CONVOLUTION_HEIGHT = 0x801B\r\n            ":"\r\n            原来是 GL_MAX_CONVOLUTION_HEIGHT = 0x801B\r\n            \r\n","\r\n            Original was GL_COLOR_MATRIX = 0x80B1\r\n            ":"\r\n            原来是 GL_COLOR_MATRIX = 0x80B1\r\n            \r\n","[length: 3] \r\n            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.\r\n            ":"[长度：3]\r\n            指定目标纹理单元的 s、t、r 和 q 纹理坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n"," if this instance has a high frequency vibration motor; otherwise, ":" 如果这个实例有一个高频振动马达；否则，\r\n","\r\n            Original was GL_INVERT_OVG_NV = 0x92B4\r\n            ":"\r\n            原来是 GL_INVERT_OVG_NV = 0x92B4\r\n            \r\n","\r\n            Contains methods to register for and process mouse WM_INPUT messages.\r\n            ":"\r\n            包含注册和处理鼠标 WM_INPUT 消息的方法。\r\n            \r\n","The resulting Matrix2x4d instance.":"生成的 Matrix2x4d 实例。\r\n","\r\n            Enumerates discrete positions for a joystick hat.\r\n            ":"\r\n            枚举操纵杆帽子的离散位置。\r\n            \r\n","The comma key.":"逗号键。\r\n","[requires: v1.0 and 1.0]\r\n            Specify mapping of depth values from normalized device coordinates to window coordinates\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定深度值从规范化设备坐标到窗口坐标的映射\r\n            \r\n","\r\n            Original was GL_BLEND_DST_RGB = 0x80C8\r\n            ":"\r\n            原来是 GL_BLEND_DST_RGB = 0x80C8\r\n            \r\n","\r\n            Original was GL_CLIP_PLANE3_IMG = 0x3003\r\n            ":"\r\n            原来是 GL_CLIP_PLANE3_IMG = 0x3003\r\n            \r\n","[requires: EXT_debug_marker]":"[需要：EXT_debug_marker]\r\n","\r\n            Original was GL_QUERY_BUFFER_AMD = 0x9192\r\n            ":"\r\n            原来是 GL_QUERY_BUFFER_AMD = 0x9192\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER3 = 0x8828\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER3 = 0x8828\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6\r\n            \r\n","\r\n            Original was GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F\r\n            ":"\r\n            原来是 GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F\r\n            \r\n"," \r\n            Specifies a length of the range to be mapped.\r\n            ":" \r\n            指定要映射的范围的长度。\r\n            \r\n","\r\n            Used in GL.Arb.MatrixIndexPointer\r\n            ":"\r\n            在 GL.Arb.MatrixIndexPointer 中使用\r\n            \r\n",".\r\n            Pointer ballistics (acceleration) are applied. Resolution is limited to the\r\n            resolution of the ":".\r\n            应用了指针弹道学（加速度）。分辨率仅限于\r\n            的决议\r\n","\r\n            Original was GL_MEDIUM_FLOAT = 0x8DF1\r\n            ":"\r\n            原来是 GL_MEDIUM_FLOAT = 0x8DF1\r\n            \r\n","\r\n            Specifies the extended window style for the new window.\r\n            ":"\r\n            指定新窗口的扩展窗口样式。\r\n            \r\n","True, if this method was called by the application; false if this was called by the finalizer thread.":"是的，如果应用程序调用了此方法；如果这是由终结器线程调用的，则为 false。\r\n","\r\n            Original was GL_FRACTIONAL_EVEN_EXT = 0x8E7C\r\n            ":"\r\n            原来是 GL_FRACTIONAL_EVEN_EXT = 0x8E7C\r\n            \r\n","[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]\r\n            Retrieve the location of a subroutine uniform of a given shader stage within a program\r\n            ":"[需要：v4.0 或 ARB_shader_subroutine|VERSION_4_0]\r\n            检索程序中给定着色器阶段的子例程制服的位置\r\n            \r\n","\r\n            Gets the fourth column of this matrix.\r\n            ":"\r\n            获取此矩阵的第四列。\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX1 = 0x8D46\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX1 = 0x8D46\r\n            \r\n","\r\n            The window class atom (see RegisterClass). \r\n            ":"\r\n            窗口类原子（参见 RegisterClass）。\r\n            \r\n","Scale factor for the x axis.":"x 轴的比例因子。\r\n","\r\n            Gets or sets an OpenTK.Vector3 with the W, X, and Y components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 W、X 和 Y 组件的 OpenTK.Vector3。\r\n            \r\n"," \r\n            Specifies a light source. The number of possible lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light  where  ranges from 0 to the value of MaxLights - 1.\r\n            ":" \r\n            指定光源。可能的灯的数量取决于实现，但至少支持八个灯。它们由 Light 形式的符号名称标识，范围从 0 到 MaxLights - 1 的值。\r\n            \r\n","[length: target,query] \r\n            Returns the requested data.\r\n            ":"[长度：目标，查询]\r\n            返回请求的数据。\r\n            \r\n","[length: 1] \r\n            The address of a variable that will recieve the type of the varying.\r\n            ":"[长度：1]\r\n            将接收变量类型的变量的地址。\r\n            \r\n","\r\n            Specifies the y-coordinate of the lower-right corner of the rectangle.\r\n            ":"\r\n            指定矩形右下角的 y 坐标。\r\n            \r\n"," \r\n            Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.\r\n            ":" \r\n            指定如何计算红色、绿色、蓝色和 alpha 源混合因子。接受以下符号常量：零、一、SrcColor、OneMinusSrcColor、DstColor、OneMinusDstColor、SrcAlpha、OneMinusSrcAlpha、DstAlpha、OneMinusDstAlpha、ConstantColor、OneMinusConstantColor、ConstantAlpha、OneMinusConstantAlpha 和 SrcAlphaSaturate。初始值为一。\r\n            \r\n","\r\n            If set, this specifies all devices whose top level collection is from the specified UsagePage.\r\n            Note that usUsage must be zero. To exclude a particular top level collection, use EXCLUDE.\r\n            ":"\r\n            如果设置，这将指定其顶级集合来自指定 UsagePage 的所有设备。\r\n            请注意，usUsage 必须为零。要排除特定的顶级集合，请使用 EXCLUDE。\r\n            \r\n","\r\n            Original was GL_ARRAY_BUFFER_BINDING = 0x8894\r\n            ":"\r\n            原来是 GL_ARRAY_BUFFER_BINDING = 0x8894\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F\r\n            \r\n","Specifies the connection to the X server.":"指定与 X 服务器的连接。\r\n","\r\n            Original was GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB\r\n            \r\n","\r\n            Used in GL.GetMinmax, GL.GetMinmaxParameter and 2 other functions\r\n            ":"\r\n            用于 GL.GetMinmax、GL.GetMinmaxParameter 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1\r\n            \r\n","\r\n            Original was GL_T2F_IUI_V2F_EXT = 0x81B1\r\n            ":"\r\n            原来是 GL_T2F_IUI_V2F_EXT = 0x81B1\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT4 = 0x8CE4\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT4 = 0x8CE4\r\n            \r\n","\r\n            Original was GL_Texture15 = 0X84cf\r\n            ":"\r\n            原来是 GL_Texture15 = 0X84cf\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify pixel arithmetic\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            指定像素算法\r\n            \r\n"," \r\n            Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer, or ShaderStorageBuffer.\r\n            ":" \r\n            指定绑定操作的目标。 target 必须是 AtomicCounterBuffer、TransformFeedbackBuffer、UniformBuffer 或 ShaderStorageBuffer 之一。\r\n            \r\n","[requires: ARB_multisample]\r\n            Specify multisample coverage parameters\r\n            ":"[需要：ARB_multisample]\r\n            指定多样本覆盖参数\r\n            \r\n","The length of the string array.":"字符串数组的长度。\r\n","\r\n            Original was GL_DSDT_MAG_VIB_NV = 0x86F7\r\n            ":"\r\n            原来是 GL_DSDT_MAG_VIB_NV = 0x86F7\r\n            \r\n","\r\n            Original was GL_CAVEAT_SUPPORT = 0x82B8\r\n            ":"\r\n            原来是 GL_CAVEAT_SUPPORT = 0x82B8\r\n            \r\n"," buttons.\r\n            ":" 纽扣。\r\n            \r\n","[requires: v1.0]\r\n            Specify a two-dimensional texture subimage in a compressed format\r\n            ":"[要求：v1.0]\r\n            以压缩格式指定二维纹理子图像\r\n            \r\n","[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]\r\n            Modify the rate at which generic vertex attributes advance\r\n            ":"[要求：v4.3 或 ARB_vertex_attrib_binding|VERSION_4_3]\r\n            修改通用顶点属性前进的速率\r\n            \r\n"," \r\n            Specifies the data type of each color index in the array. Symbolic constants UnsignedByte, Short, Int, Float, and Double are accepted. The initial value is Float.\r\n            ":" \r\n            指定数组中每个颜色索引的数据类型。接受符号常量 UnsignedByte、Short、Int、Float 和 Double。初始值为浮点数。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Specify a vertex\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            指定顶点\r\n            \r\n","The fourth button of the JoystickDevice.":"JoystickDevice 的第四个按钮。\r\n","\r\n            Used in GL.NamedFramebufferReadBuffer, GL.ReadBuffer\r\n            ":"\r\n            在GL.NamedFramebufferReadBuffer、GL.ReadBuffer中使用\r\n            \r\n","\r\n            Original was GL_PROGRAM_PIPELINE_BINDING_EXT = 0x825A\r\n            ":"\r\n            原来是 GL_PROGRAM_PIPELINE_BINDING_EXT = 0x825A\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER15_ATI = 0x8834\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER15_ATI = 0x8834\r\n            \r\n","\r\n            Original was GL_MODELVIEW21_ARB = 0x8735\r\n            ":"\r\n            原来是 GL_MODELVIEW21_ARB = 0x8735\r\n            \r\n","\r\n            Original was GL_TEXTURE_VIEW = 0x82B5\r\n            ":"\r\n            原来是 GL_TEXTURE_VIEW = 0x82B5\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2\r\n            \r\n","Toolkit.Init":"工具包.Init\r\n","[requires: EXT_draw_buffers_indexed]\r\n            Specify the equation used for both the RGB blend equation and the Alpha blend equation\r\n            ":"[需要：EXT_draw_buffers_indexed]\r\n            指定用于 RGB 混合方程和 Alpha 混合方程的方程\r\n            \r\n"," \r\n            The name of the sync object whose label to retrieve.\r\n            ":" \r\n            要检索其标签的同步对象的名称。\r\n            \r\n"," \r\n            Specifies the name of the buffer object whose storage to attach to the active buffer texture.\r\n            ":" \r\n            指定缓冲区对象的名称，其存储附加到活动缓冲区纹理。\r\n            \r\n","The inverse of the given quaternion":"给定四元数的倒数\r\n","\r\n            Original was GL_AND = 0x1501\r\n            ":"\r\n            原来是 GL_AND = 0x1501\r\n            \r\n","\r\n            Used in GL.InterleavedArrays\r\n            ":"\r\n            在 GL.InterleavedArrays 中使用\r\n            \r\n","\r\n            Right stick right direction button\r\n            ":"\r\n            右摇杆右方向按钮\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Returns information about an active uniform variable for the specified program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回有关指定程序对象的活动统一变量的信息\r\n            \r\n","\r\n            Original was GL_CURRENT_FOG_COORDINATE_EXT = 0x8453\r\n            ":"\r\n            原来是 GL_CURRENT_FOG_COORDINATE_EXT = 0x8453\r\n            \r\n","\r\n            Gets information about the raw input device.\r\n            ":"\r\n            获取有关原始输入设备的信息。\r\n            \r\n","\r\n            Defines the identity quaternion.\r\n            ":"\r\n            定义身份四元数。\r\n            \r\n","\r\n            Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position. An application should specify this flag when restoring a minimized window.\r\n            ":"\r\n            激活并显示窗口。如果窗口被最小化或最大化，系统会将其恢复到原来的大小和位置。应用程序应在恢复最小化窗口时指定此标志。\r\n            \r\n","\r\n            Original was GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8\r\n            ":"\r\n            原来是 GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8\r\n            \r\n","\r\n            Original was GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E\r\n            ":"\r\n            原来是 GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER9 = 0x882E\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER9 = 0x882E\r\n            \r\n","\r\n            Original was GL_SAMPLER_EXTERNAL_OES = 0x8D66\r\n            ":"\r\n            原来是 GL_SAMPLER_EXTERNAL_OES = 0x8D66\r\n            \r\n"," \r\n            Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.\r\n            ":" \r\n            指定剪刀框的宽度和高度。当 GL 上下文首次附加到窗口时，宽度和高度将设置为该窗口的尺寸。\r\n            \r\n","True if there is a message pending.":"如果有待处理的消息，则为真。\r\n","\r\n            Original was GL_SLUMINANCE_ALPHA_NV = 0x8C44\r\n            ":"\r\n            原来是 GL_SLUMINANCE_ALPHA_NV = 0x8C44\r\n            \r\n","\r\n            Original was GL_RENDER = 0x1C00\r\n            ":"\r\n            原来是 GL_RENDER = 0x1C00\r\n            \r\n","\r\n            Defines a unit-length Vector4 that points towards the W-axis.\r\n            ":"\r\n            定义指向 W 轴的单位长度 Vector4。\r\n            \r\n"," \r\n            Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.\r\n            ":" \r\n            指定将同步对象的状态设置为有信号必须满足的条件。条件必须是 SyncGpuCommandsComplete。\r\n            \r\n","\r\n            Original was GL_INTERPOLATE = 0x8575\r\n            ":"\r\n            原来是 GL_INTERPOLATE = 0x8575\r\n            \r\n","\r\n            Original was GL_LUMINANCE6_ALPHA2_EXT = 0x8044\r\n            ":"\r\n            原来是 GL_LUMINANCE6_ALPHA2_EXT = 0x8044\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7\r\n            \r\n","[requires: APPLE_framebuffer_multisample]\r\n            Establish data storage, format, dimensions and sample count of a renderbuffer object's image\r\n            ":"[需要：APPLE_framebuffer_multisample]\r\n            建立渲染缓冲区对象图像的数据存储、格式、尺寸和样本计数\r\n            \r\n","\r\n            Retains the current position (ignores the x and y parameters).\r\n            ":"\r\n            保留当前位置（忽略 x 和 y 参数）。\r\n            \r\n","\r\n            Original was GL_DRAW_FRAMEBUFFER_NV = 0x8CA9\r\n            ":"\r\n            原来是 GL_DRAW_FRAMEBUFFER_NV = 0x8CA9\r\n            \r\n","[requires: EXT_direct_state_access|EXT_draw_buffers2]":"[需要：EXT_direct_state_access|EXT_draw_buffers2]\r\n","[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]\r\n            Invalidate a region of a buffer object's data store\r\n            ":"[要求：v4.3 或 ARB_invalidate_subdata|VERSION_4_3]\r\n            使缓冲区对象的数据存储区域无效\r\n            \r\n","The left arrow key.":"左箭头键。\r\n","\r\n            Original was GL_PLUS_NV = 0x9291\r\n            ":"\r\n            原来是 GL_PLUS_NV = 0x9291\r\n            \r\n"," \r\n            Specifies the intended usage of the buffer's data store. Must be a bitwise combination of the following flags. DynamicStorageBit, MapReadBitMapWriteBit, MapPersistentBit, MapCoherentBit, and ClientStorageBit.\r\n            ":" \r\n            指定缓冲区数据存储的预期用途。必须是以下标志的按位组合。 DynamicStorageBit、MapReadBitMapWriteBit、MapPersistentBit、MapCoherentBit 和 ClientStorageBit。\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E\r\n            \r\n"," indicating whether\r\n            OpenTK is running on an Android device.\r\n            ":" 表明是否\r\n            OpenTK 在 Android 设备上运行。\r\n            \r\n","\r\n            Original was GL_VARIANT_DATATYPE_EXT = 0x87E5\r\n            ":"\r\n            原来是 GL_VARIANT_DATATYPE_EXT = 0x87E5\r\n            \r\n"," \r\n            The width of the pixel array to copy.\r\n            ":" \r\n            要复制的像素数组的宽度。\r\n            \r\n","\r\n            Original was GL_LUMINANCE8_ALPHA8_OES = 0x8045\r\n            ":"\r\n            原来是 GL_LUMINANCE8_ALPHA8_OES = 0x8045\r\n            \r\n","\r\n            Occurs whenever the mouse cursor enters the window ":"\r\n            每当鼠标光标进入窗口时发生\r\n","\r\n            Original was GL_MAP2_BINORMAL_EXT = 0x8447\r\n            ":"\r\n            原来是 GL_MAP2_BINORMAL_EXT = 0x8447\r\n            \r\n","\r\n            Constructs a new ContextExistsException instance.\r\n            ":"\r\n            构造一个新的 ContextExistsException 实例。\r\n            \r\n","\r\n            Used in GL.ColorSubTable, GL.ColorTable and 5 other functions\r\n            ":"\r\n            用于GL.ColorSubTable、GL.ColorTable等5个函数\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B\r\n            \r\n","\r\n            Represents a 3x3 matrix containing 3D rotation and scale.\r\n            ":"\r\n            表示包含 3D 旋转和缩放的 3x3 矩阵。\r\n            \r\n","\r\n            Used in GL.Ext.ProgramParameter\r\n            ":"\r\n            在 GL.Ext.ProgramParameter 中使用\r\n            \r\n","\r\n            Original was GL_BLOCK_INDEX = 0x92FD\r\n            ":"\r\n            原来是 GL_BLOCK_INDEX = 0x92FD\r\n            \r\n","The minimum output value (inclusive)":"最小输出值（含）\r\n","\r\n            Original was GL_RGBA = 0X1908\r\n            ":"\r\n            原来是 GL_RGBA = 0X1908\r\n            \r\n","\r\n            Original was GL_VERTEX_STREAM0_ATI = 0x876C\r\n            ":"\r\n            原来是 GL_VERTEX_STREAM0_ATI = 0x876C\r\n            \r\n","\r\n            Original was GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846\r\n            ":"\r\n            原来是 GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846\r\n            \r\n","[requires: v4.0]\r\n            Specify pixel arithmetic\r\n            ":"[要求：v4.0]\r\n            指定像素算法\r\n            \r\n","\r\n            Handle to the raw input device.\r\n            ":"\r\n            原始输入设备的句柄。\r\n            \r\n","\r\n            Original was GL_ACTIVE_PROGRAM_EXT = 0x8B8D\r\n            ":"\r\n            原来是 GL_ACTIVE_PROGRAM_EXT = 0x8B8D\r\n            \r\n","An matrix to compare with this matrix.":"要与此矩阵进行比较的矩阵。\r\n"," \r\n            Specifies a potential shader object.\r\n            ":" \r\n            指定一个潜在的着色器对象。\r\n            \r\n","\r\n            Original was GL_MODULATE = 0x2100\r\n            ":"\r\n            原来是 GL_MODULATE = 0x2100\r\n            \r\n","[requires: v4.1 or ARB_viewport_array|VERSION_4_1]\r\n            Set a specified viewport\r\n            ":"[要求：v4.1 或 ARB_viewport_array|VERSION_4_1]\r\n            设置指定视口\r\n            \r\n","\r\n            Original was GL_MAX_ELEMENTS_VERTICES = 0x80E8\r\n            ":"\r\n            原来是 GL_MAX_ELEMENTS_VERTICES = 0x80E8\r\n            \r\n","\r\n            Original was GL_PROGRAM_LENGTH = 0x8627\r\n            ":"\r\n            原来是 GL_PROGRAM_LENGTH = 0x8627\r\n            \r\n","[requires: NV_fragment_program]":"[需要：NV_fragment_program]\r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F\r\n            \r\n","\r\n            Original was GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D\r\n            ":"\r\n            原来是 GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D\r\n            \r\n","\r\n            Original was GL_TEXTURE_ALPHA_TYPE = 0x8C13\r\n            ":"\r\n            原来是 GL_TEXTURE_ALPHA_TYPE = 0x8C13\r\n            \r\n","The other Quaternion to be used in the comparison.":"比较中要使用的另一个四元数。\r\n"," value indicating\r\n            the position of this hat. \r\n            ":" 值表示\r\n            这顶帽子的位置。\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_POINTER_EXT = 0x808E\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_POINTER_EXT = 0x808E\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the Y, W, and X components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Y、W 和 X 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Original was GL_TEXTURE2 = 0x84C2\r\n            ":"\r\n            原来是 GL_TEXTURE2 = 0x84C2\r\n            \r\n","True if obj is a ContextHandle that is equal to this instance; false otherwise.":"如果 obj 是等于此实例的 ContextHandle，则为真；否则为假。\r\n","[requires: EXT_secondary_color]\r\n            Define an array of secondary colors\r\n            ":"[要求：EXT_secondary_color]\r\n            定义一个二次色数组\r\n            \r\n","\r\n            The available keyboard keys.\r\n            ":"\r\n            可用的键盘键。\r\n            \r\n","A new instance containing the result of the calculation.":"包含计算结果的新实例。\r\n","\r\n            Original was GL_TYPE = 0x92FA\r\n            ":"\r\n            原来是 GL_TYPE = 0x92FA\r\n            \r\n","[length: 4] \r\n            For glViewportIndexedfv, specifies the address of an array containing the viewport parameters.\r\n            ":"[长度：4]\r\n            对于 glViewportIndexedfv，指定包含视口参数的数组的地址。\r\n            \r\n"," \r\n            Data type of components in the output image. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            ":" \r\n            输出图像中组件的数据类型。 Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            \r\n"," \r\n            Specifies which of the two materials is being queried. Front or Back are accepted, representing the front and back materials, respectively.\r\n            ":" \r\n            指定要查询的是两种材料中的哪一种。接受 Front 或 Back，分别代表正面和背面材料。\r\n            \r\n"," indicating whether this key is down.\r\n            ":" 指示此键是否按下。\r\n            \r\n","The handle of the NSWindow.":"NSWindow 的句柄。\r\n","\r\n            Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.\r\n            ":"\r\n            指定与传入的 alpha 值进行比较的参考值。该值限制在 [0,1] 范围内，其中 0 表示可能的最低 alpha 值，1 表示可能的最高值。初始参考值为 0。\r\n            \r\n","\r\n            Original was GL_PHONG_HINT_WIN = 0x80EB\r\n            ":"\r\n            原来是 GL_PHONG_HINT_WIN = 0x80EB\r\n            \r\n","[length: target]":"[长度：目标]\r\n","[requires: v1.0 and 1.0]\r\n            Clear buffers to preset values\r\n            ":"[要求：v1.0 和 1.0]\r\n            清除缓冲区以预设值\r\n            \r\n","\r\n            Original was GL_BLEND_DST_RGB_OES = 0x80C8\r\n            ":"\r\n            原来是 GL_BLEND_DST_RGB_OES = 0x80C8\r\n            \r\n","\r\n            Gets a value indicating whether this instance refers to a System.Windows.Forms.Control.\r\n            ":"\r\n            获取一个值，该值指示此实例是否引用 System.Windows.Forms.Control。\r\n            \r\n","\r\n            Used in GL.QueryCounter\r\n            ":"\r\n            在 GL.QueryCounter 中使用\r\n            \r\n","\r\n            Original was GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A\r\n            ":"\r\n            原来是 GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A\r\n            \r\n","\r\n            Processes operating system events until the NativeWindow becomes idle.\r\n            ":"\r\n            处理操作系统事件，直到 NativeWindow 变为空闲状态。\r\n            \r\n","[requires: EXT_draw_buffers_indexed]\r\n            Enable and disable writing of frame buffer color components\r\n            ":"[需要：EXT_draw_buffers_indexed]\r\n            启用和禁用帧缓冲区颜色分量的写入\r\n            \r\n"," \r\n            For glBlendFunci, specifies the index of the draw buffer for which to set the blend function.\r\n            ":" \r\n            对于 glBlendFunci，指定要为其设置混合函数的绘制缓冲区的索引。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Push and pop the current matrix stack\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            压入和弹出当前矩阵栈\r\n            \r\n","\r\n            Original was GL_DUAL_INTENSITY4_SGIS = 0x8118\r\n            ":"\r\n            原来是 GL_DUAL_INTENSITY4_SGIS = 0x8118\r\n            \r\n","\r\n            Original was GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704\r\n            ":"\r\n            原来是 GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704\r\n            \r\n","\r\n            Original was GL_ARRAY_SIZE = 0x92FB\r\n            ":"\r\n            原来是 GL_ARRAY_SIZE = 0x92FB\r\n            \r\n","\r\n            set of events that should not propagate\r\n            ":"\r\n            不应传播的事件集\r\n            \r\n","\r\n            Original was GL_COMBINE_RGB_EXT = 0x8571\r\n            ":"\r\n            原来是 GL_COMBINE_RGB_EXT = 0x8571\r\n            \r\n","\r\n            Original was GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E\r\n            ":"\r\n            原来是 GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E\r\n            \r\n","\r\n            Original was GL_DYNAMIC_READ = 0x88E9\r\n            ":"\r\n            原来是 GL_DYNAMIC_READ = 0x88E9\r\n            \r\n","\r\n            Gets or states the border of the NativeWindow.\r\n            ":"\r\n            获取或声明 NativeWindow 的边框。\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_BIT_3DFX = 0x20000000\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_BIT_3DFX = 0x20000000\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER8_NV = 0x882D\r\n            ":"原来是 GL_DRAW_BUFFER8_NV = 0x882D\r\n            \r\n","\r\n            Original was GL_ALIASED_LINE_WIDTH_RANGE = 0x846E\r\n            ":"\r\n            原来是 GL_ALIASED_LINE_WIDTH_RANGE = 0x846E\r\n            \r\n","Third row of the matrix":"矩阵的第三行\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Generate mipmaps for a specified texture target\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            为指定的纹理目标生成 mipmap\r\n            \r\n"," structure the contains the external bounds of this window, in screen coordinates.\r\n            External bounds include the title bar, borders and drawing area of the window.\r\n            ":" 结构包含此窗口的外部边界，以屏幕坐标表示。\r\n            外部边界包括窗口的标题栏、边框和绘图区域。\r\n            \r\n","A pointer to a user-specified parameter.":"指向用户指定参数的指针。\r\n","\r\n            Used in GL.NV.BeginTransformFeedback, GL.NV.BindBufferBase and 6 other functions\r\n            ":"\r\n            用于 GL.NV.BeginTransformFeedback、GL.NV.BindBufferBase 等 6 个函数\r\n            \r\n","\r\n            Used in GL.GetHistogramParameter\r\n            ":"\r\n            在 GL.GetHistogramParameter 中使用\r\n            \r\n","True if the MouseButton is pressed, false otherwise.":"如果按下 MouseButton，则为 True，否则为 false。\r\n","\r\n            Retrieve the label of a sync object identified by a pointer\r\n            ":"\r\n            检索由指针标识的同步对象的标签\r\n            \r\n","The number 9 key.":"9 号键。\r\n","\r\n            Original was GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B\r\n            \r\n","\r\n            Original was GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8\r\n            ":"\r\n            原来是 GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 0x8D56\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 0x8D56\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Validate a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            验证程序对象\r\n            \r\n","[requires: EXT_framebuffer_multisample]\r\n            Establish data storage, format, dimensions and sample count of a renderbuffer object's image\r\n            ":"[需要：EXT_framebuffer_multisample]\r\n            建立渲染缓冲区对象图像的数据存储、格式、尺寸和样本计数\r\n            \r\n","\r\n            Original was GL_VIVIDLIGHT_NV = 0x92A6\r\n            ":"\r\n            原来是 GL_VIVIDLIGHT_NV = 0x92A6\r\n            \r\n","\r\n            Occurs when a button is pressed.\r\n            ":"\r\n            按下按钮时发生。\r\n            \r\n","[length: bufSize] \r\n            The address of a buffer into which will be written the name of the varying.\r\n            ":"[长度：bufSize]\r\n            将写入 varying 名称的缓冲区的地址。\r\n            \r\n","\r\n            Original was GL_DeleteStatus = 0X8b80\r\n            ":"\r\n            原来是 GL_DeleteStatus = 0X8b80\r\n            \r\n"," \r\n            Specifies the width of rasterized lines. The initial value is 1.\r\n            ":" \r\n            指定光栅化线条的宽度。初始值为 1。\r\n            \r\n","[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]\r\n            Retrieve the location of a sample\r\n            ":"[要求：v3.2 或 ARB_texture_multisample|VERSION_3_2]\r\n            检索样本的位置\r\n            \r\n","\r\n            Used in GL.Disable, GL.Enable and 1 other function\r\n            ":"\r\n            用于 GL.Disable、GL.Enable 和 1 个其他函数\r\n            \r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D\r\n            \r\n","\r\n            Helper function that defines the coordinate origin of the Point Sprite.\r\n            ":"\r\n            定义 Point Sprite 坐标原点的辅助函数。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify the clear value for the stencil buffer\r\n            ":"[要求：v1.0 和 1.0]\r\n            为模板缓冲区指定清除值\r\n            \r\n","[requires: v1.0]\r\n            Specify point parameters\r\n            ":"[要求：v1.0]\r\n            指定点参数\r\n            \r\n","\r\n            Original was GL_CON_4_ATI = 0x8945\r\n            ":"\r\n            原来是 GL_CON_4_ATI = 0x8945\r\n            \r\n","\r\n            Original was GL_DOT3_RGBA_IMG = 0x86AF\r\n            ":"\r\n            原来是 GL_DOT3_RGBA_IMG = 0x86AF\r\n            \r\n","\r\n            Original was GL_PIXEL_UNPACK_BUFFER = 0x88EC\r\n            ":"\r\n            原来是 GL_PIXEL_UNPACK_BUFFER = 0x88EC\r\n            \r\n","\r\n            Converts the specified ContextHandle to the equivalent IntPtr.\r\n            ":"\r\n            将指定的 ContextHandle 转换为等效的 IntPtr。\r\n            \r\n"," \r\n            Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.\r\n            ":"指定像素数据的数据类型。 The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.\r\n            \r\n"," \r\n            Specifies the internal format of the data in the store belonging to buffer.\r\n            ":" \r\n            指定属于缓冲区的存储中数据的内部格式。\r\n            \r\n","\r\n            Original was GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E\r\n            ":"\r\n            原来是 GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E\r\n            \r\n","[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]":"[要求：v4.3 或 ARB_vertex_attrib_binding|VERSION_4_3]\r\n","\r\n            Original was GL_MATRIX6_NV = 0x8636\r\n            ":"\r\n            原来是 GL_MATRIX6_NV = 0x8636\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_MARKER_KHR = 0x8268\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_MARKER_KHR = 0x8268\r\n            \r\n"," \r\n            Specify the counter to query. target must be Timestamp.\r\n            ":" \r\n            指定要查询的计数器。目标必须是时间戳。\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D\r\n            \r\n","\r\n            Retrieve the label of a named object identified within a namespace\r\n            ":"\r\n            检索命名空间中标识的命名对象的标签\r\n            \r\n","[requires: OES_get_program_binary]\r\n            Load a program object with a program binary\r\n            ":"[要求：OES_get_program_binary]\r\n            使用程序二进制文件加载程序对象\r\n            \r\n","[length: count] \r\n            The address of an array of variables to receive the sources of the retrieved messages.\r\n            ":"[长度：计数]\r\n            用于接收检索到的消息源的变量数组的地址。\r\n            \r\n","\r\n            Specifies whether front- or back-facing facets are candidates for culling. Symbolic constants GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK are accepted. The initial value is GL_BACK.\r\n            ":"\r\n            指定正面或背面面是剔除的候选面。接受符号常量 GL_FRONT、GL_BACK 和 GL_FRONT_AND_BACK。初始值为 GL_BACK。\r\n            \r\n","\r\n            Original was GL_COMBINER4_NV = 0x8554\r\n            ":"\r\n            原来是 GL_COMBINER4_NV = 0x8554\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD\r\n            \r\n","\r\n            Original was GL_IMAGE_BINDING_NAME_EXT = 0x8F3A\r\n            ":"\r\n            原来是 GL_IMAGE_BINDING_NAME_EXT = 0x8F3A\r\n            \r\n","[requires: EXT_vertex_array]\r\n            Render primitives from array data\r\n            ":"[需要：EXT_vertex_array]\r\n            从数组数据渲染图元\r\n            \r\n","[requires: OES_byte_coordinates]\r\n            Set the current texture coordinates\r\n            ":"[要求：OES_byte_coordinates]\r\n            设置当前纹理坐标\r\n            \r\n","\r\n            Used in GL.Arb.WeightPointer\r\n            ":"\r\n            在 GL.Arb.WeightPointer 中使用\r\n            \r\n","\r\n            Original was GL_PACK_SKIP_IMAGES = 0x806B\r\n            ":"\r\n            原来是 GL_PACK_SKIP_IMAGES = 0x806B\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify the width of rasterized lines\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定栅格化线条的宽度\r\n            \r\n"," \r\n            Specifies the new value of the mask sub-word.\r\n            ":" \r\n            指定掩码子字的新值。\r\n            \r\n"," has\r\n            a high-frequency vibration motor.\r\n            ":" 有\r\n            高频振动电机。\r\n            \r\n","\r\n            Original was GL_BLUE_MAX_CLAMP_INGR = 0x8566\r\n            ":"\r\n            原来是 GL_BLUE_MAX_CLAMP_INGR = 0x8566\r\n            \r\n","\r\n            Original was GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145\r\n            ":"\r\n            原来是 GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145\r\n            \r\n"," \r\n            Specifies the polygons that mode applies to. Must be FrontAndBack for front- and back-facing polygons.\r\n            ":" \r\n            指定模式适用的多边形。对于正面和背面的多边形，必须是 FrontAndBack。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Copy a three-dimensional texture subimage\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            复制三维纹理子图像\r\n            \r\n","\r\n            Specifies the height of the texture subimage.\r\n            ":"\r\n            指定纹理子图像的高度。\r\n            \r\n","\r\n            Used in GL.Arb.DebugMessageControl, GL.Arb.DebugMessageInsert and 1 other function\r\n            ":"\r\n            用于 GL.Arb.DebugMessageControl、GL.Arb.DebugMessageInsert 和 1 个其他函数\r\n            \r\n","\r\n            Number of RawInputDevice structures pointed to by RawInputDevices.\r\n            ":"\r\n            RawInputDevices 指向的 RawInputDevice 结构数。\r\n            \r\n","\r\n            Original was GL_INTENSITY16I_EXT = 0x8D8B\r\n            ":"\r\n            原来是 GL_INTENSITY16I_EXT = 0x8D8B\r\n            \r\n","\r\n            Used in GL.Apple.GetTexParameterPointer, GL.Apple.TextureRange\r\n            ":"\r\n            用于GL.Apple.GetTexParameterPointer, GL.Apple.TextureRange\r\n            \r\n"," \r\n            The format of the data in memory addressed by data.\r\n            ":" \r\n            数据寻址的内存中数据的格式。\r\n            \r\n","\r\n            Original was GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E\r\n            ":"\r\n            原来是 GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E\r\n            \r\n","\r\n            Original was GL_HALF_FLOAT = 0x140B\r\n            ":"\r\n            原来是 GL_HALF_FLOAT = 0x140B\r\n            \r\n","\r\n            Original was GL_FLOAT16_VEC3_NV = 0x8FFA\r\n            ":"\r\n            原来是 GL_FLOAT16_VEC3_NV = 0x8FFA\r\n            \r\n","\r\n            Gets or states the state of the NativeWindow.\r\n            ":"\r\n            获取或声明 NativeWindow 的状态。\r\n            \r\n"," \r\n            Specifies a mask that indicates which attributes to save.  Values for mask are listed below.\r\n            ":" \r\n            指定指示要保存哪些属性的掩码。下面列出了掩码的值。\r\n            \r\n","\r\n            Used in GL.Sgis.GetPixelTexGenParameter, GL.Sgis.PixelTexGenParameter\r\n            ":"\r\n            在GL.Sgis.GetPixelTexGenParameter、GL.Sgis.PixelTexGenParameter中使用\r\n            \r\n","\r\n            Original was GL_SOURCE0_ALPHA = 0x8588\r\n            ":"\r\n            原来是 GL_SOURCE0_ALPHA = 0x8588\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5\r\n            \r\n","[requires: NV_transform_feedback2]\r\n            Resume transform feedback operations\r\n            ":"[需要：NV_transform_feedback2]\r\n            恢复变换反馈操作\r\n            \r\n","\r\n            Original was GL_ROUNDED_RECT2_NV = 0xEA\r\n            ":"\r\n            原来是 GL_ROUNDED_RECT2_NV = 0xEA\r\n            \r\n","\r\n            Original was GL_COLOR_BUFFER_BIT5_QCOM = 0x00000020\r\n            ":"\r\n            原来是 GL_COLOR_BUFFER_BIT5_QCOM = 0x00000020\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034\r\n            \r\n","\r\n            Original was GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA\r\n            \r\n"," to retrieve the number of supported\r\n            axes and buttons on a given device.\r\n            Use ":" 检索支持的数量\r\n            给定设备上的轴和按钮。\r\n            使用\r\n","[length: size,type,stride] \r\n            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.\r\n            ":"[长度：尺寸、类型、步幅]\r\n            指定指向数组中第一个顶点的第一个坐标的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC\r\n            ":"\r\n            原来是 GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC\r\n            \r\n","[requires: NV_bindless_multi_draw_indirect]":"[需要：NV_bindless_multi_draw_indirect]\r\n","\r\n            The WindowPosition structure contains information about the size and position of a window.\r\n            ":"\r\n            WindowPosition 结构包含有关窗口大小和位置的信息。\r\n            \r\n","\r\n            Defines the size of the Vector4 struct in bytes.\r\n            ":"\r\n            以字节为单位定义 Vector4 结构的大小。\r\n            \r\n","\r\n            Original was GL_MAP1_GRID_SEGMENTS = 0x0DD1\r\n            ":"\r\n            原来是 GL_MAP1_GRID_SEGMENTS = 0x0DD1\r\n            \r\n","\r\n            Original was GL_SRGB_ALPHA = 0x8C42\r\n            ":"\r\n            原来是 GL_SRGB_ALPHA = 0x8C42\r\n            \r\n","[length: bufSize] \r\n            Specifies an array of characters that is used to return the source code string.\r\n            ":"[长度：bufSize]\r\n            指定用于返回源代码字符串的字符数组。\r\n            \r\n"," \r\n            Specifies the symbolic name of the target texture. Texture1D, Texture2D, Texture1DArray, Texture2DArray, Texture3D, TextureRectangle, TextureCubeMap, and TextureCubeMapArray are accepted.\r\n            ":" \r\n            指定目标纹理的符号名称。接受 Texture1D、Texture2D、Texture1DArray、Texture2DArray、Texture3D、TextureRectangle、TextureCubeMap 和 TextureCubeMapArray。\r\n            \r\n","\r\n            Original was GL_OES_texture_mirrored_repeat = 1\r\n            ":"\r\n            原来是 GL_OES_texture_mirrored_repeat = 1\r\n            \r\n","\r\n            Original was GL_SELECTION_BUFFER_SIZE = 0x0DF4\r\n            ":"\r\n            原来是 GL_SELECTION_BUFFER_SIZE = 0x0DF4\r\n            \r\n","\r\n            Original was GL_SAMPLER_3D_ARB = 0x8B5F\r\n            ":"\r\n            原来是 GL_SAMPLER_3D_ARB = 0x8B5F\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENTS = 0x8284\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENTS = 0x8284\r\n            \r\n","\r\n            Original was GL_DOUBLE_VEC3_EXT = 0x8FFD\r\n            ":"\r\n            原来是 GL_DOUBLE_VEC3_EXT = 0x8FFD\r\n            \r\n","True if the Key is pressed, false otherwise.":"如果按下 Key，则为 True，否则为 false。\r\n","[length: 1] \r\n            Returns the size of the attribute variable.\r\n            ":"[长度：1]\r\n            返回属性变量的大小。\r\n            \r\n","\r\n            Original was GL_CURRENT_SECONDARY_COLOR = 0x8459\r\n            ":"\r\n            原来是 GL_CURRENT_SECONDARY_COLOR = 0x8459\r\n            \r\n","\r\n            Original was GL_Greater = 0X0204\r\n            ":"\r\n            原来是 GL_Greater = 0X0204\r\n            \r\n","[requires: APPLE_sync]":"[需要：APPLE_sync]\r\n","\r\n            Original was GL_BLEND_SRC_ALPHA = 0x80CB\r\n            ":"\r\n            原来是 GL_BLEND_SRC_ALPHA = 0x80CB\r\n            \r\n","[length: count] \r\n            Specifies an array of sampler objects to be deleted.\r\n            ":"[长度：计数]\r\n            指定要删除的采样器对象数组。\r\n            \r\n","\r\n            Original was GL_MAX_VARYING_COMPONENTS = 0x8B4B\r\n            ":"原来是 GL_MAX_VARYING_COMPONENTS = 0x8B4B\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101\r\n            \r\n"," \r\n            Specifies the number of framebuffer objects to be deleted.\r\n            ":" \r\n            指定要删除的帧缓冲区对象的数量。\r\n            \r\n","[length: target,format,type] \r\n            Pointer to storage for the column filter image.\r\n            ":"[长度：目标、格式、类型]\r\n            指向列过滤器图像存储的指针。\r\n            \r\n","\r\n            Specifies a pointer to the compressed image data in memory.\r\n            ":"\r\n            指定指向内存中压缩图像数据的指针。\r\n            \r\n","\r\n            Original was GL_ATC_RGB_AMD = 0x8C92\r\n            ":"\r\n            原来是 GL_ATC_RGB_AMD = 0x8C92\r\n            \r\n","\r\n            Original was GL_POINT_SIZE_MAX = 0x8127\r\n            ":"\r\n            原来是 GL_POINT_SIZE_MAX = 0x8127\r\n            \r\n","\r\n            Original was GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16\r\n            ":"\r\n            原来是 GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16\r\n            \r\n","\r\n            Occurs whenever a keyboard key is released.\r\n            ":"\r\n            每当释放键盘键时发生。\r\n            \r\n","[length: bufSize] \r\n            Specifies the address of an array of characters into which will be written the info log for pipeline.\r\n            ":"[长度：bufSize]\r\n            指定将写入管道信息日志的字符数组的地址。\r\n            \r\n","\r\n            Original was GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11\r\n            ":"\r\n            原来是 GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11\r\n            \r\n","\r\n            Original was GL_Rgb5A1 = 0X8057\r\n            ":"\r\n            原来是 GL_Rgb5A1 = 0X8057\r\n            \r\n","\r\n            Original was GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904\r\n            ":"\r\n            原来是 GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904\r\n            \r\n","\r\n            Original was GL_LUMINANCE32F_EXT = 0x8818\r\n            ":"\r\n            原来是 GL_LUMINANCE32F_EXT = 0x8818\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Push and pop the server attribute stack\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            推送和弹出服务器属性堆栈\r\n            \r\n","\r\n            Total horizontal pixel\r\n            ":"\r\n            总水平像素\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA\r\n            \r\n","\r\n            Original was GL_OBJECT_BUFFER_USAGE_ATI = 0x8765\r\n            ":"\r\n            原来是 GL_OBJECT_BUFFER_USAGE_ATI = 0x8765\r\n            \r\n","\r\n            Original was GL_MATRIX13 = 0x88CD\r\n            ":"\r\n            原来是 GL_MATRIX13 = 0x88CD\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249\r\n            \r\n","[length: 3] \r\n            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.\r\n            ":"[长度：3]\r\n            对于矢量命令 (glVertexAttrib*v)，指定指向要用于通用顶点属性的值数组的指针。\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_1D_EXT = 0x8010\r\n            ":"\r\n            原来是 GL_CONVOLUTION_1D_EXT = 0x8010\r\n            \r\n","\r\n            Original was GL_FENCE_CONDITION_NV = 0x84F4\r\n            ":"原来是 GL_FENCE_CONDITION_NV = 0x84F4\r\n            \r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER11 = 0x8830\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER11 = 0x8830\r\n            \r\n","[length: n] \r\n            Specifies an array of into which the reserved names will be written.\r\n            ":"[长度：n]\r\n            指定将写入保留名称的数组。\r\n            \r\n","\r\n            Original was GL_BUMP_ENVMAP_ATI = 0x877B\r\n            ":"\r\n            原来是 GL_BUMP_ENVMAP_ATI = 0x877B\r\n            \r\n","\r\n            Original was GL_MAP_STENCIL = 0x0D11\r\n            ":"\r\n            原来是 GL_MAP_STENCIL = 0x0D11\r\n            \r\n"," \r\n            Specifies the width of the border. Must be 0.\r\n            ":" \r\n            指定边框的宽度。必须为 0。\r\n            \r\n","\r\n            Original was GL_FuncAdd = 0X8006\r\n            ":"\r\n            原来是 GL_FuncAdd = 0X8006\r\n            \r\n","\r\n            Original was GL_SOURCE2_RGB = 0x8582\r\n            ":"\r\n            原来是 GL_SOURCE2_RGB = 0x8582\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86\r\n            \r\n","The z component of the Vector4.":"Vector4 的 z 分量。\r\n","\r\n            Original was GL_LUMINANCE32I_EXT = 0x8D86\r\n            ":"\r\n            原来是 GL_LUMINANCE32I_EXT = 0x8D86\r\n            \r\n","\r\n            Original was GL_FOG_COORD = 0x8451\r\n            ":"\r\n            原来是 GL_FOG_COORD = 0x8451\r\n            \r\n","\r\n            Original was GL_NORMAL_MAP = 0x8511\r\n            ":"\r\n            原来是 GL_NORMAL_MAP = 0x8511\r\n            \r\n","\r\n            Original was GL_PALETTE8_RGBA4_OES = 0x8B98\r\n            ":"\r\n            原来是 GL_PALETTE8_RGBA4_OES = 0x8B98\r\n            \r\n","\r\n            Original was GL_FRAGMENT_DEPTH = 0x8452\r\n            ":"\r\n            原来是 GL_FRAGMENT_DEPTH = 0x8452\r\n            \r\n","\r\n            Original was GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C\r\n            ":"\r\n            原来是 GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C\r\n            \r\n","[requires: ARB_vertex_shader]\r\n            Returns information about an active attribute variable for the specified program object\r\n            ":"[需要：ARB_vertex_shader]\r\n            返回有关指定程序对象的活动属性变量的信息\r\n            \r\n","[requires: APPLE_vertex_program_evaluators]":"[需要：APPLE_vertex_program_evaluators]\r\n","[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]\r\n            Bind a transform feedback object\r\n            ":"[要求：v4.0 或 ARB_transform_feedback2|VERSION_4_0]\r\n            绑定一个变换反馈对象\r\n            \r\n","[length: pname] \r\n            Returns the texture parameter.\r\n            ":"[长度：pname]\r\n            返回纹理参数。\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CE\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CE\r\n            \r\n","\r\n            Original was GL_SM_COUNT_NV = 0x933B\r\n            ":"\r\n            原来是 GL_SM_COUNT_NV = 0x933B\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Query information about an active uniform block\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            查询活动统一块的信息\r\n            \r\n","[requires: EXT_direct_state_access]\r\n            Enable or disable client-side capability\r\n            ":"[需要：EXT_direct_state_access]\r\n            启用或禁用客户端功能\r\n            \r\n"," \r\n            Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.\r\n            ":" \r\n            指定图像被拉伸时要应用的插值。必须是最近的或线性的。\r\n            \r\n","\r\n            Original was GL_ALL_STATIC_DATA_IBM = 103060\r\n            ":"\r\n            原来是 GL_ALL_STATIC_DATA_IBM = 103060\r\n            \r\n","\r\n            Original was GL_SUBTRACT_ARB = 0x84E7\r\n            ":"\r\n            原来是 GL_SUBTRACT_ARB = 0x84E7\r\n            \r\n","[requires: OES_framebuffer_object]\r\n            Bind a named framebuffer object\r\n            ":"[要求：OES_framebuffer_object]\r\n            绑定一个命名的帧缓冲区对象\r\n            \r\n","\r\n            Original was GL_OES_stencil_wrap = 1\r\n            ":"\r\n            原来是 GL_OES_stencil_wrap = 1\r\n            \r\n","\r\n            Original was GL_RED_EXT = 0x1903\r\n            ":"\r\n            原来是 GL_RED_EXT = 0x1903\r\n            \r\n","\r\n            Device is a mouse.\r\n            ":"\r\n            设备是鼠标。\r\n            \r\n","\r\n            Original was GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13\r\n            ":"\r\n            原来是 GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13\r\n            \r\n","[length: length] \r\n            Specifies a pointer to the shader binary data in client memory.\r\n            ":"[长度：长度]\r\n            指定指向客户端内存中着色器二进制数据的指针。\r\n            \r\n","\r\n            Original was GL_DUAL_INTENSITY8_SGIS = 0x8119\r\n            ":"\r\n            原来是 GL_DUAL_INTENSITY8_SGIS = 0x8119\r\n            \r\n","\r\n            Original was GL_FORCE_BLUE_TO_ONE_NV = 0x8860\r\n            ":"\r\n            原来是 GL_FORCE_BLUE_TO_ONE_NV = 0x8860\r\n            \r\n","\r\n            Original was GL_StencilBackPassDepthPass = 0X8803\r\n            ":"\r\n            原来是 GL_StencilBackPassDepthPass = 0X8803\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 0x8CD3\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 0x8CD3\r\n            \r\n"," \r\n            Specifies the integer value for grid domain variable  (glEvalPoint2 only).\r\n            ":" \r\n            指定网格域变量的整数值（仅限 glEvalPoint2）。\r\n            \r\n","\r\n            Original was GL_NEAREST_MIPMAP_NEAREST = 0x2700\r\n            ":"\r\n            原来是 GL_NEAREST_MIPMAP_NEAREST = 0x2700\r\n            \r\n","[length: count*2] \r\n            Specifies the new values to be used for the specified uniform variable.\r\n            ":"[长度：计数*2]\r\n            指定要用于指定统一变量的新值。\r\n            \r\n","\r\n            Original was GL_LUMINANCE_FLOAT16_APPLE = 0x881E\r\n            ":"\r\n            原来是 GL_LUMINANCE_FLOAT16_APPLE = 0x881E\r\n            \r\n","\r\n            Original was GL_MINMAX_SINK = 0x8030\r\n            ":"\r\n            原来是 GL_MINMAX_SINK = 0x8030\r\n            \r\n","\r\n            Original was GL_IMAGE_TEXEL_SIZE = 0x82A7\r\n            ":"\r\n            原来是 GL_IMAGE_TEXEL_SIZE = 0x82A7\r\n            \r\n","\r\n            Original was GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038\r\n            ":"\r\n            原来是 GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Invalidate portions of the contents of attachments within a framebuffer\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            使帧缓冲区中附件的部分内容无效\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT15_NV = 0x8CEF\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT15_NV = 0x8CEF\r\n            \r\n","[length: uniformCount,pname] \r\n            Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.\r\n            ":"[长度：uniformCount,pname]\r\n            指定 uniformCount 整数数组的地址，这些整数将接收 uniformIndices 中每个制服的 pname 值。\r\n            \r\n","[requires: EXT_draw_instanced|EXT_instanced_arrays]\r\n            Draw multiple instances of a set of elements\r\n            ":"[需要：EXT_draw_instanced|EXT_instanced_arrays]\r\n            绘制一组元素的多个实例\r\n            \r\n","\r\n            Original was GL_CURRENT_TANGENT_EXT = 0x843B\r\n            ":"\r\n            原来是 GL_CURRENT_TANGENT_EXT = 0x843B\r\n            \r\n","\r\n            Bitwise OR of masks that indicate the buffers to be cleared. The three masks are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, and GL_STENCIL_BUFFER_BIT.\r\n            ":"\r\n            指示要清除的缓冲区的掩码的按位或。这三个掩码是 GL_COLOR_BUFFER_BIT、GL_DEPTH_BUFFER_BIT 和 GL_STENCIL_BUFFER_BIT。\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7\r\n            \r\n","\r\n            Original was GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF\r\n            ":"\r\n            原来是 GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF\r\n            \r\n","\r\n            Original was GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE\r\n            \r\n","[requires: OES_single_precision]\r\n            Specify the clear value for the depth buffer\r\n            ":"[要求：OES_single_precision]\r\n            为深度缓冲区指定清除值\r\n            \r\n","\r\n            Original was GL_DISPATCH_INDIRECT_BUFFER = 0x90EE\r\n            ":"\r\n            原来是 GL_DISPATCH_INDIRECT_BUFFER = 0x90EE\r\n            \r\n","\r\n            Original was GL_TESS_EVALUATION_SHADER_EXT = 0x8E87\r\n            ":"\r\n            原来是 GL_TESS_EVALUATION_SHADER_EXT = 0x8E87\r\n            \r\n","\r\n            Original was GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510\r\n            ":"\r\n            原来是 GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510\r\n            \r\n","\r\n            Original was GL_TEXTURE15_ARB = 0x84CF\r\n            ":"\r\n            原来是 GL_TEXTURE15_ARB = 0x84CF\r\n            \r\n","[requires: ARB_compute_variable_group_size]":"[要求：ARB_compute_variable_group_size]\r\n","\r\n            Bottom row of the matrix.\r\n            ":"\r\n            矩阵的底行。\r\n            \r\n"," \r\n            Specifies the index of the switch to disable (for glEnablei and glDisablei only).\r\n            ":" \r\n            指定要禁用的开关的索引（仅适用于 glEnablei 和 glDisablei）。\r\n            \r\n","Right operand. This parameter is only read from.":"右操作数。此参数仅供读取。\r\n","\r\n            Original was GL_DEPTH_COMPONENT16_OES = 0x81A5\r\n            ":"原来是 GL_DEPTH_COMPONENT16_OES = 0x81A5\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2\r\n            \r\n","\r\n            Original was GL_INTERLEAVED_ATTRIBS = 0x8C8C\r\n            ":"\r\n            原来是 GL_INTERLEAVED_ATTRIBS = 0x8C8C\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 0x8CD2\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 0x8CD2\r\n            \r\n","\r\n            Describes the current thumb stick state of a ":"描述当前的摇杆状态\r\n","[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]\r\n            Retrieve the range and precision for numeric formats supported by the shader compiler\r\n            ":"[要求：v4.1 或 ARB_ES2_compatibility|VERSION_4_1]\r\n            检索着色器编译器支持的数字格式的范围和精度\r\n            \r\n","\r\n            Original was GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B\r\n            ":"\r\n            原来是 GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B\r\n            \r\n","[requires: EXT_texture3D]\r\n            Specify a three-dimensional texture image\r\n            ":"[需要：EXT_texture3D]\r\n            指定三维纹理图像\r\n            \r\n","\r\n            Original was GL_NO_RESET_NOTIFICATION_EXT = 0x8261\r\n            ":"\r\n            原来是 GL_NO_RESET_NOTIFICATION_EXT = 0x8261\r\n            \r\n","\r\n            Original was GL_SOURCE3_RGB_NV = 0x8583\r\n            ":"\r\n            原来是 GL_SOURCE3_RGB_NV = 0x8583\r\n            \r\n","[length: drawcount,stride] \r\n            Specifies the address of a structure containing an array of draw parameters.\r\n            ":"[长度：drawcount，步幅]\r\n            指定包含绘制参数数组的结构的地址。\r\n            \r\n","\r\n            Number of function keys on the keyboard.\r\n            ":"\r\n            键盘上功能键的数量。\r\n            \r\n","\r\n            Original was GL_R11F_G11F_B10F_EXT = 0x8C3A\r\n            ":"\r\n            原来是 GL_R11F_G11F_B10F_EXT = 0x8C3A\r\n            \r\n","\r\n            Original was GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D\r\n            ":"\r\n            原来是 GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D\r\n            \r\n"," \r\n            The starting index of the portion of the color table to be replaced.\r\n            ":" \r\n            要替换的颜色表部分的起始索引。\r\n            \r\n"," \r\n            Specifies the bottom origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).\r\n            ":" \r\n            指定要失效的像素矩形的底部原点，左下角位于 (0,0)。\r\n            \r\n"," \r\n            Specifies the number of transform feedback object names to reserve.\r\n            ":" \r\n            指定要保留的变换反馈对象名称的数量。\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB\r\n            \r\n","\r\n            Used in GL.PixelTransfer\r\n            ":"\r\n            在 GL.PixelTransfer 中使用\r\n            \r\n","\r\n            Original was GL_MOV_ATI = 0x8961\r\n            ":"\r\n            原来是 GL_MOV_ATI = 0x8961\r\n            \r\n","\r\n            Original was GL_MOVE_TO_CONTINUES_NV = 0x90B6\r\n            ":"\r\n            原来是 GL_MOVE_TO_CONTINUES_NV = 0x90B6\r\n            \r\n","\r\n            Gets the hat.\r\n            ":"\r\n            得到帽子。\r\n            \r\n","[requires: v4.1 or ARB_viewport_array|VERSION_4_1]\r\n            Specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport\r\n            ":"[要求：v4.1 或 ARB_viewport_array|VERSION_4_1]\r\n            指定深度值从规范化设备坐标到指定视口窗口坐标的映射\r\n            \r\n","\r\n            Original was GL_Gequal = 0X0206\r\n            ":"\r\n            原来是 GL_Gequal = 0X0206\r\n            \r\n"," \r\n            Specifies the barriers to insert. Must be a bitwise combination of VertexAttribArrayBarrierBit, ElementArrayBarrierBit, UniformBarrierBit, TextureFetchBarrierBit, ShaderImageAccessBarrierBit, CommandBarrierBit, PixelBufferBarrierBit, TextureUpdateBarrierBit, BufferUpdateBarrierBit, FramebufferBarrierBit, TransformFeedbackBarrierBit, AtomicCounterBarrierBit, or ShaderStorageBarrierBit. If the special value AllBarrierBits is specified, all supported barriers will be inserted.\r\n            ":" \r\n            指定要插入的障碍。必须是 VertexAttribArrayBarrierBit、ElementArrayBarrierBit、UniformBarrierBit、TextureFetchBarrierBit、ShaderImageAccessBarrierBit、CommandBarrierBit、PixelBufferBarrierBit、TextureUpdateBarrierBit、BufferUpdateBarrierBit、FramebufferBarrierBit、TransformFeedbackBarrierBit、AtomicCounterBarrierBitStorBar 或 ShaderImageAccessBarrierBit 的按位组合如果指定特殊值 AllBarrierBits，将插入所有支持的障碍。\r\n            \r\n","\r\n            Original was GL_COVERAGE_EDGE_FRAGMENTS_NV = 0x8ED6\r\n            ":"\r\n            原来是 GL_COVERAGE_EDGE_FRAGMENTS_NV = 0x8ED6\r\n            \r\n","\r\n            Original was GL_GUILTY_CONTEXT_RESET_EXT = 0x8253\r\n            ":"\r\n            原来是 GL_GUILTY_CONTEXT_RESET_EXT = 0x8253\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Bind a renderbuffer to a renderbuffer target\r\n            ":"[需要：EXT_framebuffer_object]\r\n            将渲染缓冲区绑定到渲染缓冲区目标\r\n            \r\n","\r\n            Original was GL_Texture24 = 0X84d8\r\n            ":"\r\n            原来是 GL_Texture24 = 0X84d8\r\n            \r\n"," \r\n            Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).\r\n            ":" \r\n            以像素为单位指定视口矩形的左下角。初始值为 (0,0)。\r\n            \r\n","A new Matrix4x2 which holds the result of the addition":"保存加法结果的新 Matrix4x2\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Update a subset of a buffer object's data store\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            更新缓冲区对象数据存储的子集\r\n            \r\n","[length: program,location] \r\n            Returns the value of the specified uniform variable.\r\n            ":"[长度：节目，地点]\r\n            返回指定统一变量的值。\r\n            \r\n"," \r\n            Specifies the number of textures to be queried.\r\n            ":" \r\n            指定要查询的纹理数。\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER15_EXT = 0x8834\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER15_EXT = 0x8834\r\n            \r\n"," \r\n            Specifies the target texture. Must be Texture3D, or Texture2DArray.\r\n            ":" \r\n            指定目标纹理。必须是 Texture3D 或 Texture2DArray。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0\r\n            \r\n","\r\n            Original was GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910C\r\n            ":"\r\n            原来是 GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910C\r\n            \r\n","\r\n            Original was GL_DEPTH_STENCIL = 0x84F9\r\n            ":"\r\n            原来是 GL_DEPTH_STENCIL = 0x84F9\r\n            \r\n","\r\n            Original was GL_DS_SCALE_NV = 0x8710\r\n            ":"\r\n            原来是 GL_DS_SCALE_NV = 0x8710\r\n            \r\n","\r\n            Returns the name of the gamepad if the gamepad is connected.\r\n            Otherwise returns an empty string.\r\n            ":"\r\n            如果游戏手柄已连接，则返回游戏手柄的名称。\r\n            否则返回一个空字符串。\r\n            \r\n","\r\n            3rd row of the matrix\r\n            ":"\r\n            矩阵的第 3 行\r\n            \r\n","\r\n            Original was GL_BUFFER_USAGE = 0x8765\r\n            ":"\r\n            原来是 GL_BUFFER_USAGE = 0x8765\r\n            \r\n","\r\n            A WM_PAINT message is in the queue.\r\n            ":"\r\n            WM_PAINT 消息在队列中。\r\n            \r\n"," \r\n            The separable filter to be retrieved. Must be Separable2D.\r\n            ":" \r\n            要检索的可分离过滤器。必须是 Separable2D。\r\n            \r\n","The index of the joystick axis that was moved.":"移动的操纵杆轴的索引。\r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71\r\n            ":"\r\n            原来是 GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71\r\n            \r\n","[requires: NV_depth_buffer_float]\r\n            Specify mapping of depth values from normalized device coordinates to window coordinates\r\n            ":"[要求：NV_depth_buffer_float]\r\n            指定深度值从规范化设备坐标到窗口坐标的映射\r\n            \r\n","[requires: SGIX_async]":"[要求：SGIX_async]\r\n"," \r\n            The format of values to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.\r\n            ":" \r\n            要在值中返回的值的格式。必须是 Red、Green、Blue、Alpha、Rgb、Bgr、Rgba、Bgra、Luminance 或 LuminanceAlpha 之一。\r\n            \r\n","\r\n            Original was GL_MATRIX29 = 0x88DD\r\n            ":"\r\n            原来是 GL_MATRIX29 = 0x88DD\r\n            \r\n","\r\n            Original was GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8\r\n            ":"\r\n            原来是 GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8\r\n            \r\n","[in] Indicates how the graphics mode should be changed.":"[in] 指示应如何更改图形模式。\r\n","[requires: SGIS_point_parameters]\r\n            Specify point parameters\r\n            ":"[要求：SGIS_point_parameters]\r\n            指定点参数\r\n            \r\n","The resulting Matrix2d instance.":"生成的 Matrix2d 实例。\r\n","\r\n            Gets or sets the values along the main diagonal of the matrix.\r\n            ":"\r\n            获取或设置沿矩阵主对角线的值。\r\n            \r\n","[requires: APPLE_copy_texture_levels]":"[需要：APPLE_copy_texture_levels]\r\n","\r\n            Original was GL_RGBA8UI = 0x8D7C\r\n            ":"\r\n            原来是 GL_RGBA8UI = 0x8D7C\r\n            \r\n","\r\n            Gets or sets a System.Boolean indicating key repeat status.\r\n            ":"\r\n            获取或设置一个 System.Boolean 指示键重复状态。\r\n            \r\n"," \r\n            The format of the pixel data in row and column. The allowable values are Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Intensity, Luminance, and LuminanceAlpha.\r\n            ":"行和列中像素数据的格式。允许的值为 Red、Green、Blue、Alpha、Rgb、Bgr、Rgba、Bgra、Intensity、Luminance 和 LuminanceAlpha。\r\n            \r\n"," \r\n            Specifies the value to be interpreted as the primitive restart index.\r\n            ":" \r\n            指定要解释为原始重启索引的值。\r\n            \r\n","\r\n            The hat is in its right position.\r\n            ":"\r\n            帽子处于正确的位置。\r\n            \r\n","\r\n            For glGetStringi, specifies the index of the string to return.\r\n            ":"\r\n            对于 glGetStringi，指定要返回的字符串的索引。\r\n            \r\n","Specifies the user-supplied argument that will be passed to the predicate procedure.":"指定将传递给谓词过程的用户提供的参数。\r\n","\r\n            Original was GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC\r\n            ":"\r\n            原来是 GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC\r\n            \r\n","\r\n            Original was GL_FIXED = 0x140C\r\n            ":"\r\n            原来是 GL_FIXED = 0x140C\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Set front and back function and reference value for stencil testing\r\n            ":"[要求：v1.0 和 1.0]\r\n            设置钢网测试的前后功能和参考值\r\n            \r\n","\r\n            Original was GL_DEBUG_CALLBACK_USER_PARAM = 0x8245\r\n            ":"\r\n            原来是 GL_DEBUG_CALLBACK_USER_PARAM = 0x8245\r\n            \r\n","\r\n            Original was GL_ACTIVE_ATTRIBUTES = 0x8B89\r\n            ":"\r\n            原来是 GL_ACTIVE_ATTRIBUTES = 0x8B89\r\n            \r\n","\r\n            Original was GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA\r\n            ":"\r\n            原来是 GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA\r\n            \r\n","[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]\r\n            Generate query object names\r\n            ":"[需要：EXT_disjoint_timer_query|EXT_occlusion_query_boolean]\r\n            生成查询对象名称\r\n            \r\n","The scan code to check.":"扫码查询。\r\n","\r\n            Original was GL_VIBRANCE_SCALE_NV = 0x8713\r\n            ":"\r\n            原来是 GL_VIBRANCE_SCALE_NV = 0x8713\r\n            \r\n","\r\n            Original was GL_TEXTURE_RESIDENT = 0x8067\r\n            ":"\r\n            原来是 GL_TEXTURE_RESIDENT = 0x8067\r\n            \r\n","\r\n            should bits under be saved? (popups)\r\n            ":"\r\n            应该保存位吗？ （弹出窗口）\r\n            \r\n","\r\n            Original was GL_STORAGE_CACHED_APPLE = 0x85BE\r\n            ":"\r\n            原来是 GL_STORAGE_CACHED_APPLE = 0x85BE\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Establish data storage, format, dimensions and sample count of a renderbuffer object's image\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            建立渲染缓冲区对象图像的数据存储、格式、尺寸和样本计数\r\n            \r\n","\r\n            Original was GL_Ccw = 0X0901\r\n            ":"\r\n            原来是 GL_Ccw = 0X0901\r\n            \r\n","\r\n            An input message is in the queue. This is composed of KEY, MOUSE and RAWINPUT.\r\n            Windows XP and higher only.\r\n            ":"\r\n            输入消息在队列中。它由 KEY、MOUSE 和 RAWINPUT 组成。\r\n            仅限 Windows XP 及更高版本。\r\n            \r\n","\r\n            Original was GL_DOT3_RGB_ARB = 0x86AE\r\n            ":"\r\n            原来是 GL_DOT3_RGB_ARB = 0x86AE\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 0x8CD7\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 0x8CD7\r\n            \r\n"," \r\n            The width of the region to be cleared.\r\n            ":" \r\n            要清除的区域的宽度。\r\n            \r\n","\r\n            Original was GL_FRAGMENT_LIGHTING_SGIX = 0x8400\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHTING_SGIX = 0x8400\r\n            \r\n","[requires: v1.1][deprecated: v3.2]\r\n            Set the current color index\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            设置当前颜色索引\r\n            \r\n","Specifies the procedure that is to be called to determine if the next event in the queue matches what you want":"指定要调用的过程以确定队列中的下一个事件是否与您想要的匹配\r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB\r\n            \r\n","[requires: EXT_gpu_shader4]\r\n            Returns the value of a uniform variable\r\n            ":"[需要：EXT_gpu_shader4]\r\n            返回统一变量的值\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify whether front- or back-facing facets can be culled\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定是否可以剔除正面或背面面\r\n            \r\n","A System.IntPtr equivalent to the specified ContextHandle.":"等效于指定的 ContextHandle 的 System.IntPtr。\r\n","\r\n            Original was GL_Fastest = 0X1101\r\n            ":"\r\n            原来是 GL_Fastest = 0X1101\r\n            \r\n","Hat.":"帽子。\r\n"," \r\n            For glVertexAttribPointer, specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.\r\n            ":" \r\n            对于 glVertexAttribPointer，指定在访问定点数据值时是应该规范化 (True) 还是直接将其转换为定点值 (False)。\r\n            \r\n","\r\n            Original was GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11\r\n            ":"\r\n            原来是 GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11\r\n            \r\n","\r\n            Used in GL.Apple.DrawElementArray, GL.Apple.DrawRangeElementArray and 27 other functions\r\n            ":"\r\n            用于 GL.Apple.DrawElementArray、GL.Apple.DrawRangeElementArray 和其他 27 个函数\r\n            \r\n","\r\n            If usButtonFlags is RI_MOUSE_WHEEL, this member is a signed value that specifies the wheel delta.\r\n            ":"\r\n            如果 usButtonFlags 是 RI_MOUSE_WHEEL，则此成员是一个有符号值，用于指定滚轮增量。\r\n            \r\n","\r\n            Creates an IWindowInfo instance for the dummy platform.\r\n            ":"\r\n            为虚拟平台创建一个 IWindowInfo 实例。\r\n            \r\n","\r\n            Original was GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9\r\n            ":"\r\n            原来是 GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9\r\n            \r\n","\r\n            Used in GL.Arb.BeginQuery, GL.Arb.EndQuery and 2 other functions\r\n            ":"\r\n            用于 GL.Arb.BeginQuery、GL.Arb.EndQuery 和其他 2 个函数\r\n            \r\n"," \r\n            Specifies the number of buffers in bufs.\r\n            ":" \r\n            指定 bufs 中的缓冲区数。\r\n            \r\n"," \r\n            Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StreamRead, StreamCopy, StaticDraw, StaticRead, StaticCopy, DynamicDraw, DynamicRead, or DynamicCopy.\r\n            ":" \r\n            指定数据存储的预期使用模式。符号常量必须是 StreamDraw、StreamRead、StreamCopy、StaticDraw、StaticRead、StaticCopy、DynamicDraw、DynamicRead 或 DynamicCopy。\r\n            \r\n","[requires: EXT_histogram]\r\n            Get histogram parameters\r\n            ":"[需要：EXT_histogram]\r\n            获取直方图参数\r\n            \r\n","\r\n            Original was GL_CLAMP_TO_EDGE = 0x812F\r\n            ":"\r\n            原来是 GL_CLAMP_TO_EDGE = 0x812F\r\n            \r\n","[length: size] \r\n            Returns the selection data.\r\n            ":"[长度：尺寸]\r\n            返回选择数据。\r\n            \r\n","\r\n            Defines a collection of JoystickAxes.\r\n            ":"\r\n            定义 JoystickAxes 的集合。\r\n            \r\n","The F25 key.":"F25 键。\r\n","\r\n            Original was GL_RGBA8_OES = 0x8058\r\n            ":"\r\n            原来是 GL_RGBA8_OES = 0x8058\r\n            \r\n","\r\n            Returns a System.String that represents the current Quaternion.\r\n            ":"\r\n            返回表示当前四元数的 System.String。\r\n            \r\n","\r\n            Original was GL_DOUBLE_MAT4_EXT = 0x8F48\r\n            ":"\r\n            原来是 GL_DOUBLE_MAT4_EXT = 0x8F48\r\n            \r\n","\r\n            Original was GL_REG_28_ATI = 0x893D\r\n            ":"\r\n            原来是 GL_REG_28_ATI = 0x893D\r\n            \r\n","The inverse of the given matrix if it has one, or the input if it is singular":"给定矩阵的逆如果它有一个，或者输入如果它是奇异的\r\n","\r\n            Original was GL_SRGB8_EXT = 0x8C41\r\n            ":"\r\n            原来是 GL_SRGB8_EXT = 0x8C41\r\n            \r\n","\r\n            Gets the primary Mouse device, or null if no Mouse exists.\r\n            ":"\r\n            获取主要的 Mouse 设备，如果不存在 Mouse，则返回 null。\r\n            \r\n","The index of the gamepad device.":"游戏手柄设备的索引。\r\n"," \r\n            Specifies the distance in basic machine units between elements of the draw parameter array.\r\n            ":" \r\n            指定绘制参数数组元素之间的基本机器单位距离。\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Attach a single layer of a texture to a framebuffer\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            将单层纹理附加到帧缓冲区\r\n            \r\n","The counter-clockwise angle in radians.":"以弧度为单位的逆时针角度。\r\n","[requires: v3.0]\r\n            Enable and disable writing of frame buffer color components\r\n            ":"[要求：v3.0]\r\n            启用和禁用帧缓冲区颜色分量的写入\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668\r\n            \r\n","\r\n            Original was GL_ALL_SHADER_BITS = 0xFFFFFFFF\r\n            ":"\r\n            原来是 GL_ALL_SHADER_BITS = 0xFFFFFFFF\r\n            \r\n","\r\n            Original was GL_LUMINANCE16_SNORM = 0x9019\r\n            ":"\r\n            原来是 GL_LUMINANCE16_SNORM = 0x9019\r\n            \r\n","\r\n            Original was GL_CON_19_ATI = 0x8954\r\n            ":"\r\n            原来是 GL_CON_19_ATI = 0x8954\r\n            \r\n","[requires: v3.2]":"[要求：v3.2]\r\n","\r\n            Original was GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000\r\n            \r\n","\r\n            Top row of the matrix.\r\n            ":"\r\n            矩阵的顶行。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Determine if a name corresponds to a sampler object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            确定名称是否对应于采样器对象\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Create and initialize a renderbuffer object's data store\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            创建并初始化渲染缓冲区对象的数据存储\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RED = 0x8225\r\n            ":"\r\n            原来是 GL_COMPRESSED_RED = 0x8225\r\n            \r\n","\r\n            Original was GL_MATRIX27 = 0x88DB\r\n            ":"\r\n            原来是 GL_MATRIX27 = 0x88DB\r\n            \r\n","An instance of the value type.":"值类型的实例。\r\n","\r\n            Return the name for an openend game controller instance.\r\n            ":"\r\n            返回开放式游戏控制器实例的名称。\r\n            \r\n","\r\n            Represents a handle to an OpenGL or OpenAL context.\r\n            ":"\r\n            表示 OpenGL 或 OpenAL 上下文的句柄。\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092\r\n            \r\n","\r\n            Original was GL_TEXTURE_IMAGE_VALID_QCOM = 0x8BD8\r\n            ":"\r\n            原来是 GL_TEXTURE_IMAGE_VALID_QCOM = 0x8BD8\r\n            \r\n","\r\n            Value passed in the wParam parameter of the WM_INPUT message.\r\n            ":"\r\n            在 WM_INPUT 消息的 wParam 参数中传递的值。\r\n            \r\n","\r\n            Used in GL.GetFramebufferAttachmentParameter, GL.GetNamedFramebufferAttachmentParameter and 2 other functions\r\n            ":"\r\n            用于 GL.GetFramebufferAttachmentParameter、GL.GetNamedFramebufferAttachmentParameter 和其他 2 个函数\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Control the front and/or back writing of individual bits in the stencil planes\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            控制模板平面中单个位的正面和/或背面写入\r\n            \r\n","\r\n            Original was GL_TEXCOORD2_BIT_PGI = 0x20000000\r\n            ":"\r\n            原来是 GL_TEXCOORD2_BIT_PGI = 0x20000000\r\n            \r\n","\r\n            Defines the raw input data coming from any device.\r\n            ":"\r\n            定义来自任何设备的原始输入数据。\r\n            \r\n","The end key.":"结束键。\r\n","The keypad 1 key.":"键盘 1 键。\r\n","\r\n            Used in GL.StencilFuncSeparate\r\n            ":"\r\n            在 GL.StencilFuncSeparate 中使用\r\n            \r\n","\r\n            Used in GL.Angle.BlitFramebuffer, GL.Clear and 1 other function\r\n            ":"\r\n            用于 GL.Angle.BlitFramebuffer、GL.Clear 和其他 1 个函数\r\n            \r\n","[requires: v1.0]\r\n            Specify clear values for the color buffers\r\n            ":"[要求：v1.0]\r\n            为颜色缓冲区指定明确的值\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9\r\n            \r\n","\r\n            Original was GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3\r\n            ":"\r\n            原来是 GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3\r\n            \r\n","[requires: v1.0]\r\n            Set front and back stencil test actions\r\n            ":"[要求：v1.0]\r\n            设置前后模板测试动作\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify pixel arithmetic\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定像素算法\r\n            \r\n","\r\n            Original was GL_LUMINANCE16_ALPHA16 = 0x8048\r\n            ":"\r\n            原来是 GL_LUMINANCE16_ALPHA16 = 0x8048\r\n            \r\n","\r\n            Original was GL_GLYPH_HAS_KERNING_BIT_NV = 0x100\r\n            ":"\r\n            原来是 GL_GLYPH_HAS_KERNING_BIT_NV = 0x100\r\n            \r\n","\r\n            Gets the length (magnitude) of the vector.\r\n            ":"\r\n            获取向量的长度（大小）。\r\n            \r\n","\r\n            Gets or sets the first column of this matrix.\r\n            ":"\r\n            获取或设置此矩阵的第一列。\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_BINDING = 0x85B5\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_BINDING = 0x85B5\r\n            \r\n","[requires: EXT_draw_buffers_indexed]\r\n            Set the RGB blend equation and the alpha blend equation separately\r\n            ":"[需要：EXT_draw_buffers_indexed]\r\n            分别设置RGB混合方程和alpha混合方程\r\n            \r\n","\r\n            Specifies the data type of each texture coordinate. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.\r\n            ":"\r\n            指定每个纹理坐标的数据类型。接受符号常量 GL_SHORT、GL_INT、GL_FLOAT 或 GL_DOUBLE。初始值为 GL_FLOAT。\r\n            \r\n","\r\n            Original was GL_PALETTE8_RGBA8_OES = 0x8B96\r\n            ":"\r\n            原来是 GL_PALETTE8_RGBA8_OES = 0x8B96\r\n            \r\n","\r\n            Original was GL_INTENSITY16 = 0x804D\r\n            ":"\r\n            原来是 GL_INTENSITY16 = 0x804D\r\n            \r\n","The index of the keyboard device.":"键盘设备的索引。\r\n","[requires: OES_framebuffer_object]\r\n            Create and initialize a renderbuffer object's data store\r\n            ":"[要求：OES_framebuffer_object]\r\n            创建并初始化渲染缓冲区对象的数据存储\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SIGNED_R11_EAC = 0x9271\r\n            ":"\r\n            原来是 GL_COMPRESSED_SIGNED_R11_EAC = 0x9271\r\n            \r\n","\r\n            Original was GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854\r\n            ":"\r\n            原来是 GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854\r\n            \r\n","\r\n            Original was GL_STORAGE_CLIENT_APPLE = 0x85B4\r\n            ":"\r\n            原来是 GL_STORAGE_CLIENT_APPLE = 0x85B4\r\n            \r\n"," \r\n            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.\r\n            ":" \r\n            指定网格范围区间 [u1, u2] 中的分区数。必须是积极的。\r\n            \r\n"," \r\n            Specifies the number of query object names to be generated.\r\n            ":" \r\n            指定要生成的查询对象名称的数量。\r\n            \r\n","\r\n            Specifies an array of textures to be deleted.\r\n            ":"\r\n            指定要删除的纹理数组。\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_HEIGHT = 0x8019\r\n            ":"\r\n            原来是 GL_CONVOLUTION_HEIGHT = 0x8019\r\n            \r\n","[length: size,stride,order]":"[长度：尺寸、步幅、顺序]\r\n","\r\n            Original was GL_STATE_RESTORE = 0x8BDC\r\n            ":"\r\n            原来是 GL_STATE_RESTORE = 0x8BDC\r\n            \r\n","\r\n            Used in GL.Apple.GetInteger64, GL.GetBoolean and 2 other functions\r\n            ":"\r\n            用于 GL.Apple.GetInteger64、GL.GetBoolean 和其他 2 个函数\r\n            \r\n"," \r\n            Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.\r\n            ":" \r\n            指定要查询的数字格式，对应于着色器精度限定符和变量类型。必须是 LowFloat、MediumFloat、HighFloat、LowInt、MediumInt 或 HighInt 之一。\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ICC_SGIX = 0x8463\r\n            ":"\r\n            原来是 GL_LUMINANCE_ICC_SGIX = 0x8463\r\n            \r\n","\r\n            Original was GL_YCBYCR8_422_NV = 0x9031\r\n            ":"\r\n            原来是 GL_YCBYCR8_422_NV = 0x9031\r\n            \r\n","\r\n            Original was GL_ONE_EXT = 0x87DE\r\n            ":"\r\n            原来是 GL_ONE_EXT = 0x87DE\r\n            \r\n","\r\n            Original was GL_IGNORE_BORDER_HP = 0x8150\r\n            ":"\r\n            原来是 GL_IGNORE_BORDER_HP = 0x8150\r\n            \r\n","\r\n            Original was GL_CLIENT_ACTIVE_TEXTURE = 0x84E1\r\n            ":"\r\n            原来是 GL_CLIENT_ACTIVE_TEXTURE = 0x84E1\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Control the front and back writing of individual bits in the stencil planes\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            控制模板平面中各个位的正面和背面写入\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Push and pop the name stack\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            压入并弹出名称堆栈\r\n            \r\n","\r\n            You *must* call this method if you are combining OpenTK with a\r\n            third-party windowing toolkit (e.g. GTK#). In this case, this should be the\r\n            first method called by your application:\r\n            ":"\r\n            如果您将 OpenTK 与\r\n            第三方窗口工具包（例如 GTK#）。在这种情况下，这应该是\r\n            您的应用程序调用的第一个方法：\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Control the generation of texture coordinates\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            控制纹理坐标的生成\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE\r\n            ":"\r\n            原来是 GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE\r\n            \r\n","\r\n            Original was GL_FENCE_APPLE = 0x8A0B\r\n            ":"\r\n            原来是 GL_FENCE_APPLE = 0x8A0B\r\n            \r\n","\r\n            Original was GL_MAP_COLOR = 0x0D10\r\n            ":"\r\n            原来是 GL_MAP_COLOR = 0x0D10\r\n            \r\n","\r\n            Original was GL_HSL_COLOR_NV = 0x92AF\r\n            ":"\r\n            原来是 GL_HSL_COLOR_NV = 0x92AF\r\n            \r\n","\r\n            Original was GL_SOURCE3_ALPHA_NV = 0x858B\r\n            ":"\r\n            原来是 GL_SOURCE3_ALPHA_NV = 0x858B\r\n            \r\n"," \r\n            Specifies the number of unsigned bytes of image data starting at the address specified by data.\r\n            ":" \r\n            指定从 data 指定的地址开始的图像数据的无符号字节数。\r\n            \r\n","The value specified in first_keycode must be greater than or equal to min_keycode as returned by XDisplayKeycodes(), or a BadValue error results. In addition, the following expression must be less than or equal to max_keycode as returned by XDisplayKeycodes(): ":"first_keycode 中指定的值必须大于或等于 XDisplayKeycodes() 返回的 min_keycode，否则将导致 BadValue 错误。此外，以下表达式必须小于或等于 XDisplayKeycodes() 返回的 max_keycode：\r\n","\r\n            Original was GL_PRIMITIVE_RESTART_NV = 0x8558\r\n            ":"\r\n            原来是 GL_PRIMITIVE_RESTART_NV = 0x8558\r\n            \r\n","\r\n            Original was GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD\r\n            ":"\r\n            原来是 GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD\r\n            \r\n","\r\n            Specifies the diameter of rasterized points. The initial value is 1.\r\n            ":"\r\n            指定光栅化点的直径。初始值为 1。\r\n            \r\n","The right shift key.":"右移键。\r\n","\r\n            Original was GL_VIDEO_BUFFER_NV = 0x9020\r\n            ":"\r\n            原来是 GL_VIDEO_BUFFER_NV = 0x9020\r\n            \r\n",".\r\n            If the specified axis does not exist, then the return value is 0.0. Use ":".\r\n            如果指定的轴不存在，则返回值为 0.0。使用\r\n","\r\n            Original was GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF\r\n            \r\n","\r\n            Original was GL_WAIT_FAILED_APPLE = 0x911D\r\n            ":"\r\n            原来是 GL_WAIT_FAILED_APPLE = 0x911D\r\n            \r\n","[requires: v1.0]\r\n            Multiply the current matrix with an orthographic matrix\r\n            ":"[要求：v1.0]\r\n            将当前矩阵与正交矩阵相乘\r\n            \r\n"," \r\n            Specifies the number of buffer objects to be deleted.\r\n            ":" \r\n            指定要删除的缓冲区对象的数量。\r\n            \r\n","A new IWindowInfo instance.":"一个新的 IWindowInfo 实例。\r\n","[requires: v3.0]":"[要求：v3.0]\r\n","[length: maxRenderbuffers]":"[长度：maxRenderbuffers]\r\n","\r\n            Original was GL_RENDERBUFFER_WIDTH_EXT = 0x8D42\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_WIDTH_EXT = 0x8D42\r\n            \r\n"," \r\n            Specifies the index used when the color index buffers are cleared. The initial value is 0.\r\n            ":" \r\n            指定清除颜色索引缓冲区时使用的索引。初始值为 0。\r\n            \r\n","[requires: v4.5 or ARB_ES3_1_compatibility|VERSION_4_5]":"[要求：v4.5 或 ARB_ES3_1_compatibility|VERSION_4_5]\r\n","\r\n            Gets or sets an OpenTK.Vector4 with the X, W, Z, and Y components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 X、W、Z 和 Y 组件的 OpenTK.Vector4。\r\n            \r\n","\r\n            Used in GL.Ati.ArrayObject, GL.Ati.GetArrayObject and 7 other functions\r\n            ":"\r\n            用于GL.Ati.ArrayObject、GL.Ati.GetArrayObject等7个函数\r\n            \r\n"," \r\n            Must be one of ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.\r\n            ":" \r\n            必须是 ColorTable、PostConvolutionColorTable、PostColorMatrixColorTable、ProxyColorTable、ProxyPostConvolutionColorTable 或 ProxyPostColorMatrixColorTable 之一。\r\n            \r\n","\r\n            The SetWindowText function changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, SetWindowText cannot change the text of a control in another application.\r\n            ":"\r\n            SetWindowText 函数更改指定窗口标题栏（如果有的话）的文本。如果指定的窗口是一个控件，则更改控件的文本。但是，SetWindowText 不能更改另一个应用程序中控件的文本。\r\n            \r\n","\r\n            Original was GL_RGB5_A1_OES = 0x8057\r\n            ":"\r\n            原来是 GL_RGB5_A1_OES = 0x8057\r\n            \r\n"," \r\n            Specifies the number of display lists to delete.\r\n            ":" \r\n            指定要删除的显示列表的数量。\r\n            \r\n","\r\n            Encapsulates the state of a mouse device.\r\n            ":"\r\n            封装鼠标设备的状态。\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5\r\n            \r\n","\r\n            Original was GL_MIN_LOD_WARNING_AMD = 0x919C\r\n            ":"\r\n            原来是 GL_MIN_LOD_WARNING_AMD = 0x919C\r\n            \r\n","[requires: v1.5]\r\n            Delete named query objects\r\n            ":"[要求：v1.5]\r\n            删除命名查询对象\r\n            \r\n","[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]\r\n            Query the name of an active shader subroutine uniform\r\n            ":"[需要：v4.0 或 ARB_shader_subroutine|VERSION_4_0]\r\n            查询一个活跃的shader子程序uniform的名称\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Bind a framebuffer to a framebuffer target\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            将帧缓冲区绑定到帧缓冲区目标\r\n            \r\n","\r\n            Original was GL_MIN_SPARSE_LEVEL_ARB = 0x919B\r\n            ":"\r\n            原来是 GL_MIN_SPARSE_LEVEL_ARB = 0x919B\r\n            \r\n","\r\n            Original was GL_INTENSITY16_SNORM = 0x901B\r\n            ":"\r\n            原来是 GL_INTENSITY16_SNORM = 0x901B\r\n            \r\n","\r\n            Original was GL_MODELVIEW4_ARB = 0x8724\r\n            ":"\r\n            原来是 GL_MODELVIEW4_ARB = 0x8724\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217\r\n            \r\n","[length: type]":"[长度：类型]\r\n","\r\n            Original was GL_FAILURE_NV = 0x9030\r\n            ":"\r\n            原来是 GL_FAILURE_NV = 0x9030\r\n            \r\n"," that represents the absolute y position of the cursor in screen coordinates.\r\n             ":" 表示光标在屏幕坐标中的绝对 y 位置。\r\n             \r\n","\r\n            Original was GL_STREAM_READ = 0x88E1\r\n            ":"\r\n            原来是 GL_STREAM_READ = 0x88E1\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER5_ARB = 0x882A\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER5_ARB = 0x882A\r\n            \r\n","\r\n            The right mouse button.\r\n            ":"\r\n            鼠标右键。\r\n            \r\n","\r\n            Original was GL_INTENSITY32UI_EXT = 0x8D73\r\n            ":"\r\n            原来是 GL_INTENSITY32UI_EXT = 0x8D73\r\n            \r\n","\r\n            Used in GL.GetLight, GL.Light\r\n            ":"\r\n            用于 GL.GetLight, GL.Light\r\n            \r\n"," \r\n            The symbolic name of a color lookup table parameter. Must be one of ColorTableBias, ColorTableScale, ColorTableFormat, ColorTableWidth, ColorTableRedSize, ColorTableGreenSize, ColorTableBlueSize, ColorTableAlphaSize, ColorTableLuminanceSize, or ColorTableIntensitySize.\r\n            ":" \r\n            颜色查找表参数的符号名称。必须是 ColorTableBias、ColorTableScale、ColorTableFormat、ColorTableWidth、ColorTableRedSize、ColorTableGreenSize、ColorTableBlueSize、ColorTableAlphaSize、ColorTableLuminanceSize 或 ColorTableIntensitySize 之一。\r\n            \r\n","\r\n            A pointer to an IconInfo structure. The function fills in the \r\n            structure's members.\r\n            ":"\r\n            指向 IconInfo 结构的指针。该函数填写\r\n            结构的成员。\r\n            \r\n","\r\n            Original was GL_LUMINANCE16I_EXT = 0x8D8C\r\n            ":"\r\n            原来是 GL_LUMINANCE16I_EXT = 0x8D8C\r\n            \r\n","  value describing the type of a ":"  描述类型的值\r\n","\r\n            Original was GL_COLOR_BUFFER_BIT3_QCOM = 0x00000008\r\n            ":"\r\n            原来是 GL_COLOR_BUFFER_BIT3_QCOM = 0x00000008\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Define a one- or two-dimensional mesh\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            定义一维或二维网格\r\n            \r\n","\r\n            Original was GL_MATRIX4_ARB = 0x88C4\r\n            ":"\r\n            原来是 GL_MATRIX4_ARB = 0x88C4\r\n            \r\n","\r\n            Original was GL_MITER_TRUNCATE_NV = 0x90A8\r\n            ":"\r\n            原来是 GL_MITER_TRUNCATE_NV = 0x90A8\r\n            \r\n","[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]\r\n            Retrieve properties of a program pipeline object\r\n            ":"[要求：v4.1 或 ARB_separate_shader_objects|VERSION_4_1]\r\n            检索程序管道对象的属性\r\n            \r\n","\r\n            Original was GL_SLUMINANCE_NV = 0x8C46\r\n            ":"\r\n            原来是 GL_SLUMINANCE_NV = 0x8C46\r\n            \r\n","\r\n            Used in GL.MapBufferRange, GL.MapNamedBufferRange\r\n            ":"\r\n            在GL.MapBufferRange、GL.MapNamedBufferRange中使用\r\n            \r\n","\r\n            Original was GL_REG_24_ATI = 0x8939\r\n            ":"\r\n            原来是 GL_REG_24_ATI = 0x8939\r\n            \r\n","[requires: EXT_discard_framebuffer]":"[需要：EXT_discard_framebuffer]\r\n","\r\n            Original was GL_ADD_BLEND_IMG = 0x8C09\r\n            ":"\r\n            原来是 GL_ADD_BLEND_IMG = 0x8C09\r\n            \r\n","\r\n            Original was GL_TIMEOUT_EXPIRED_APPLE = 0x911B\r\n            ":"\r\n            原来是 GL_TIMEOUT_EXPIRED_APPLE = 0x911B\r\n            \r\n","\r\n            Original was GL_FLOAT = 0X1406\r\n            ":"\r\n            原来是 GL_FLOAT = 0X1406\r\n            \r\n","\r\n            Original was GL_RGB8UI = 0x8D7D\r\n            ":"\r\n            原来是 GL_RGB8UI = 0x8D7D\r\n            \r\n","A new Matrix4x3 which holds the result of the multiplication":"保存乘法结果的新 Matrix4x3\r\n","\r\n            Original was GL_MODELVIEW = 0x1700\r\n            ":"\r\n            原来是 GL_MODELVIEW = 0x1700\r\n            \r\n","\r\n            Used in GL.UseProgramStages\r\n            ":"\r\n            在 GL.UseProgramStages 中使用\r\n            \r\n"," \r\n            Specifies the symbolic name of a sampler parameter. pname can be one of the following: TextureWrapS, TextureWrapT, TextureWrapR, TextureMinFilter, TextureMagFilter, TextureBorderColor, TextureMinLod, TextureMaxLod, TextureLodBiasTextureCompareMode, or TextureCompareFunc.\r\n            ":" \r\n            指定采样器参数的符号名称。 pname 可以是以下之一：TextureWrapS、TextureWrapT、TextureWrapR、TextureMinFilter、TextureMagFilter、TextureBorderColor、TextureMinLod、TextureMaxLod、TextureLodBiasTextureCompareMode 或 TextureCompareFunc。\r\n            \r\n"," indicating whether this scan code is down.\r\n            ":" 表示该扫码是否down。\r\n            \r\n","The right control key.":"右控制键。\r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88\r\n            \r\n","\r\n            Original was GL_MaxFragmentUniformVectors = 0X8dfd\r\n            ":"\r\n            原来是 GL_MaxFragmentUniformVectors = 0X8dfd\r\n            \r\n","\r\n            Original was GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 0x8F67\r\n            ":"\r\n            原来是 GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 0x8F67\r\n            \r\n","\r\n            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)\r\n            ":"\r\n            行引用的像素数组中的元素数。 （这是可分离滤波器内核的宽度。）\r\n            \r\n","\r\n            Original was GL_SEPARATE_ATTRIBS = 0x8C8D\r\n            ":"\r\n            原来是 GL_SEPARATE_ATTRIBS = 0x8C8D\r\n            \r\n","\r\n            Original was GL_BLEND_DST_ALPHA_OES = 0x80CA\r\n            ":"\r\n            原来是 GL_BLEND_DST_ALPHA_OES = 0x80CA\r\n            \r\n","\r\n            Used in GL.Sgis.GetTexFilterFunc, GL.Sgis.TexFilterFunc\r\n            ":"\r\n            在GL.Sgis.GetTexFilterFunc、GL.Sgis.TexFilterFunc中使用\r\n            \r\n","\r\n            Original was GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004\r\n            ":"\r\n            原来是 GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004\r\n            \r\n"," \r\n            Specifies the height of the texture image. All implementations support 2D and cube-mapped texture images that are at least 2048 texels high.\r\n            ":" \r\n            指定纹理图像的高度。所有实现都支持至少 2048 纹素高的 2D 和立方体贴图纹理图像。\r\n            \r\n","\r\n            Original was GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2\r\n            ":"\r\n            原来是 GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2\r\n            \r\n","\r\n            Original was GL_POINT_SIZE_ARRAY_OES = 0x8B9C\r\n            ":"\r\n            原来是 GL_POINT_SIZE_ARRAY_OES = 0x8B9C\r\n            \r\n","\r\n            Used in GL.GetInteger64, GL.ProgramParameter\r\n            ":"\r\n            用于GL.GetInteger64、GL.ProgramParameter\r\n            \r\n","\r\n            Original was GL_OPERAND2_ALPHA_EXT = 0x859A\r\n            ":"\r\n            原来是 GL_OPERAND2_ALPHA_EXT = 0x859A\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA\r\n            \r\n","[requires: EXT_texture_object]\r\n            Set texture residence priority\r\n            ":"[需要：EXT_texture_object]\r\n            设置纹理驻留优先级\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673\r\n            \r\n","[requires: EXT_multiview_draw_buffers]":"[需要：EXT_multiview_draw_buffers]\r\n","\r\n            Subtracts one instance from another.\r\n            ":"\r\n            从一个实例中减去另一个实例。\r\n            \r\n","\r\n            Original was GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143\r\n            ":"\r\n            原来是 GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143\r\n            \r\n","\r\n            Original was GL_C3F_V3F = 0x2A24\r\n            ":"\r\n            原来是 GL_C3F_V3F = 0x2A24\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Return parameters of a query object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            查询对象的返回参数\r\n            \r\n","\r\n            Original was GL_HSL_LUMINOSITY_NV = 0x92B0\r\n            ":"\r\n            原来是 GL_HSL_LUMINOSITY_NV = 0x92B0\r\n            \r\n","[length: stringlen]":"[长度：stringlen]\r\n","\r\n            Original was GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86\r\n            ":"\r\n            原来是 GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86\r\n            \r\n","\r\n            Original was GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0\r\n            ":"\r\n            原来是 GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0\r\n            \r\n","\r\n            Original was GL_COMBINER_MUX_SUM_NV = 0x8547\r\n            ":"\r\n            原来是 GL_COMBINER_MUX_SUM_NV = 0x8547\r\n            \r\n"," \r\n            The format of entries in the histogram table. Must be one of Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.\r\n            ":" \r\n            直方图表中条目的格式。必须是 Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, R3G3B2, Rgb, Rgb4, Rgb0,5, Rgb 之一Rgb12、Rgb16、Rgba、Rgba2、Rgba4、Rgb5A1、Rgba8、Rgb10A2、Rgba12 或 Rgba16。\r\n            \r\n","\r\n            Original was GL_ADD_SIGNED_EXT = 0x8574\r\n            ":"\r\n            原来是 GL_ADD_SIGNED_EXT = 0x8574\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_RED_SIZE = 0x8D50\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_RED_SIZE = 0x8D50\r\n            \r\n","\r\n            Original was GL_CURRENT_VERTEX_ATTRIB = 0x8626\r\n            ":"\r\n            原来是 GL_CURRENT_VERTEX_ATTRIB = 0x8626\r\n            \r\n","\r\n            If set, this specifies the top level collections to exclude when reading a complete usage page.\r\n            This flag only affects a TLC whose usage page is already specified with RawInputDeviceEnum.PAGEONLY. \r\n            ":"\r\n            如果设置，这将指定在阅读完整用法页面时要排除的顶级集合。\r\n            此标志仅影响已使用 RawInputDeviceEnum.PAGEONLY 指定其使用页面的 TLC。\r\n            \r\n","[requires: ARB_occlusion_query]\r\n            Determine if a name corresponds to a query object\r\n            ":"[需要：ARB_occlusion_query]\r\n            确定名称是否对应于查询对象\r\n            \r\n","\r\n            Gets an approximation of the vector length (magnitude).\r\n            ":"\r\n            获取矢量长度（幅度）的近似值。\r\n            \r\n","\r\n            Original was GL_Samples = 0X80a9\r\n            ":"\r\n            原来是 GL_Samples = 0X80a9\r\n            \r\n","\r\n            Original was GL_VERTEX_WEIGHTING_EXT = 0x8509\r\n            ":"\r\n            原来是 GL_VERTEX_WEIGHTING_EXT = 0x8509\r\n            \r\n","[length: target,format,type] \r\n            Pointer to a one-dimensional array of pixel data containing the contents of the color table.\r\n            ":"[长度：目标、格式、类型]\r\n            指向包含颜色表内容的一维像素数据数组的指针。\r\n            \r\n","[requires: SGIS_pixel_texture]":"[要求：SGIS_pixel_texture]\r\n","[requires: v1.0]\r\n            Multiply the current matrix by a rotation matrix\r\n            ":"[要求：v1.0]\r\n            将当前矩阵乘以旋转矩阵\r\n            \r\n","\r\n            Original was GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441\r\n            ":"\r\n            原来是 GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441\r\n            \r\n","\r\n            Original was GL_SPOT_EXPONENT = 0x1205\r\n            ":"\r\n            原来是 GL_SPOT_EXPONENT = 0x1205\r\n            \r\n","[length: count] \r\n            Specifies the address of an array containing the near and far values for the depth range of each modified viewport.\r\n            ":"[长度：计数]\r\n            指定包含每个已修改视口的深度范围的近距和远距值的数组的地址。\r\n            \r\n","Number of antialiasing samples.":"抗锯齿样本数。\r\n","\r\n            Original was GL_ALPHA8_EXT = 0x803C\r\n            ":"\r\n            原来是 GL_ALPHA8_EXT = 0x803C\r\n            \r\n","Second item of the third row of the matrix.":"矩阵第三行的第二项。\r\n","\r\n            Original was GL_SRC2_ALPHA = 0x858A\r\n            ":"\r\n            原来是 GL_SRC2_ALPHA = 0x858A\r\n            \r\n","\r\n            Original was GL_Texture10 = 0X84ca\r\n            ":"\r\n            原来是 GL_Texture10 = 0X84ca\r\n            \r\n","[length: uniformCount] \r\n            Specifies the address of an array that will receive the indices of the uniforms.\r\n            ":"[长度：uniformCount]\r\n            指定将接收制服索引的数组的地址。\r\n            \r\n","\r\n            Original was GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F\r\n            ":"\r\n            原来是 GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F\r\n            \r\n","\r\n            Original was GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1\r\n            ":"\r\n            原来是 GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1\r\n            \r\n","\r\n            Original was GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64\r\n            ":"\r\n            原来是 GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64\r\n            \r\n","\r\n            Loads all OpenGL entry points (core and extension).\r\n            This method is provided for compatibility purposes with older OpenTK versions.\r\n            ":"\r\n            加载所有 OpenGL 入口点（核心和扩展）。\r\n            提供此方法是为了与旧版 OpenTK 兼容。\r\n            \r\n","\r\n            Enumerates possible mouse button states.\r\n            ":"\r\n            枚举可能的鼠标按钮状态。\r\n            \r\n","\r\n            Original was GL_INVARIANT_VALUE_EXT = 0x87EA\r\n            ":"\r\n            原来是 GL_INVARIANT_VALUE_EXT = 0x87EA\r\n            \r\n","\r\n            Defines the interface for KeyboardDevice drivers.\r\n            ":"\r\n            定义 KeyboardDevice 驱动程序的接口。\r\n            \r\n","[requires: v1.5]\r\n            Updates a subset of a buffer object's data store\r\n            ":"[要求：v1.5]\r\n            更新缓冲区对象数据存储的子集\r\n            \r\n","\r\n            Original was GL_SRGB_READ = 0x8297\r\n            ":"\r\n            原来是 GL_SRGB_READ = 0x8297\r\n            \r\n","\r\n            Original was GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8\r\n            ":"\r\n            原来是 GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8\r\n            \r\n","\r\n            Used in GL.CopyTexImage2D\r\n            ":"\r\n            用于 GL.CopyTexImage2D\r\n            \r\n","\r\n            Original was GL_Texture11 = 0X84cb\r\n            ":"\r\n            原来是 GL_Texture11 = 0X84cb\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1\r\n            \r\n","[requires: v4.1 or ARB_viewport_array|VERSION_4_1]\r\n            Specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports\r\n            ":"[要求：v4.1 或 ARB_viewport_array|VERSION_4_1]\r\n            指定一组指定视口的深度值从规范化设备坐标到窗口坐标的映射\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Detaches a shader object from a program object to which it is attached\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            将着色器对象从它附加到的程序对象中分离出来\r\n            \r\n","[length: n] \r\n            Specifies the program object to be deleted.\r\n            ":"[长度：n]\r\n            指定要删除的程序对象。\r\n            \r\n","\r\n            Original was GL_FloatVec3 = 0X8b51\r\n            ":"\r\n            原来是 GL_FloatVec3 = 0X8b51\r\n            \r\n","\r\n            Creates an IWindowInfo instance for the windows platform.\r\n            ":"\r\n            为 windows 平台创建一个 IWindowInfo 实例。\r\n            \r\n","[length: type,stride] \r\n            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.\r\n            ":"[长度：类型，步幅]\r\n            指定指向数组中第一条法线的第一个坐标的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808\r\n            \r\n","[length: target,ustride,uorder,vstride,vorder,wstride,worder]":"[长度：目标、ustride、uorder、vstride、vorder、wstride、worder]\r\n","\r\n            Original was GL_SOURCE2_RGB_EXT = 0x8582\r\n            ":"\r\n            原来是 GL_SOURCE2_RGB_EXT = 0x8582\r\n            \r\n"," \r\n            Specifies the target texture, which must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap.\r\n            ":" \r\n            指定目标纹理，它必须是 Texture2D、Texture3D、Texture2DArray 或 TextureCubeMap。\r\n            \r\n","\r\n            Original was GL_MIN_SAMPLE_SHADING_VALUE_OES = 0x8C37\r\n            ":"\r\n            原来是 GL_MIN_SAMPLE_SHADING_VALUE_OES = 0x8C37\r\n            \r\n","\r\n            Original was GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541\r\n            ":"\r\n            原来是 GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541\r\n            \r\n","\r\n            Original was GL_DOT4_ATI = 0x8967\r\n            ":"\r\n            原来是 GL_DOT4_ATI = 0x8967\r\n            \r\n","\r\n            Original was GL_TESS_CONTROL_SHADER_EXT = 0x8E88\r\n            ":"\r\n            原来是 GL_TESS_CONTROL_SHADER_EXT = 0x8E88\r\n            \r\n","\r\n            Original was GL_QUERY_RESULT_AVAILABLE = 0x8867\r\n            ":"\r\n            原来是 GL_QUERY_RESULT_AVAILABLE = 0x8867\r\n            \r\n","[requires: v1.0]\r\n            Set front and back function and reference value for stencil testing\r\n            ":"[要求：v1.0]\r\n            设置钢网测试的前后功能和参考值\r\n            \r\n","\r\n            Original was GL_DOUBLE_MAT4x3_EXT = 0x8F4E\r\n            ":"\r\n            原来是 GL_DOUBLE_MAT4x3_EXT = 0x8F4E\r\n            \r\n","[requires: v2.0]\r\n            Set the RGB blend equation and the alpha blend equation separately\r\n            ":"[要求：v2.0]\r\n            分别设置RGB混合方程和alpha混合方程\r\n            \r\n"," \r\n            Specifies which parameter to return. Symbolic names Coeff, Order, and Domain are accepted.\r\n            ":" \r\n            指定要返回的参数。接受符号名称 Coeff、Order 和 Domain。\r\n            \r\n","\r\n            Specifies the value of pname.\r\n            ":"\r\n            指定 pname 的值。\r\n            \r\n","The resulting Matrix2x3 instance.":"生成的 Matrix2x3 实例。\r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623\r\n            \r\n","The twentyeighth button of the JoystickDevice.":"JoystickDevice 的第二十八个按钮。\r\n"," structure describing the capabilities of the gamepad device.":" 描述游戏手柄设备功能的结构。\r\n","[requires: ARB_occlusion_query]\r\n            Generate query object names\r\n            ":"[需要：ARB_occlusion_query]\r\n            生成查询对象名称\r\n            \r\n","[requires: EXT_separate_shader_objects]\r\n            Bind stages of a program object to a program pipeline\r\n            ":"[需要：EXT_separate_shader_objects]\r\n            将程序对象的阶段绑定到程序管道\r\n            \r\n"," \r\n            Specifies the number of control points. Must be positive.\r\n            ":" \r\n            指定控制点的数量。必须是积极的。\r\n            \r\n","\r\n            Used in GL.MapBufferRange\r\n            ":"\r\n            在 GL.MapBufferRange 中使用\r\n            \r\n","\r\n            Original was GL_FLOAT_RG16_NV = 0x8886\r\n            ":"\r\n            原来是 GL_FLOAT_RG16_NV = 0x8886\r\n            \r\n","\r\n            Original was GL_SAMPLE_MASK_EXT = 0x80A0\r\n            ":"\r\n            原来是 GL_SAMPLE_MASK_EXT = 0x80A0\r\n            \r\n"," \r\n            Specifies a new alpha value for the current color. Included only in the four-argument glColor4 commands.\r\n            ":" \r\n            为当前颜色指定一个新的 alpha 值。仅包含在四参数 glColor4 命令中。\r\n            \r\n","\r\n            Original was GL_ALPHA16I_EXT = 0x8D8A\r\n            ":"\r\n            原来是 GL_ALPHA16I_EXT = 0x8D8A\r\n            \r\n","\r\n            Gets or sets the value at row 4, column 1 of this instance.\r\n            ":"\r\n            获取或设置此实例第 4 行第 1 列的值。\r\n            \r\n","\r\n            Original was GL_SKIP_MISSING_GLYPH_NV = 0x90A9\r\n            ":"\r\n            原来是 GL_SKIP_MISSING_GLYPH_NV = 0x90A9\r\n            \r\n","[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]\r\n            Determine if a name corresponds to a vertex array object\r\n            ":"[要求：v3.0 或 ARB_vertex_array_object|VERSION_3_0]\r\n            判断名称是否对应于顶点数组对象\r\n            \r\n","\r\n            Used in GL.Arb.DrawElementsInstanced, GL.DrawElements and 13 other functions\r\n            ":"\r\n            用于 GL.Arb.DrawElementsInstanced、GL.DrawElements 和其他 13 个函数\r\n            \r\n","\r\n            Original was GL_BUFFER_OBJECT_EXT = 0x9151\r\n            ":"\r\n            原来是 GL_BUFFER_OBJECT_EXT = 0x9151\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_64_BITS = 0x82C6\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_64_BITS = 0x82C6\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT0_OES = 0x8CE0\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT0_OES = 0x8CE0\r\n            \r\n","\r\n            Signals the end of a set of touchpoints at one device sample\r\n            time. This event has no coordinate information attached.\r\n            ":"\r\n            在一个设备样本上发出一组接触点结束的信号\r\n            时间。此事件没有附加坐标信息。\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD\r\n            \r\n","\r\n            Original was GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195\r\n            ":"\r\n            原来是 GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195\r\n            \r\n"," has\r\n            a left stick button.\r\n            ":" 有\r\n            一个左摇杆按钮。\r\n            \r\n","If Data is NULL and the function is successful, the return value is 0. If Data is not NULL and the function is successful, the return value is the number of bytes copied into Data.":"如果Data为NULL且函数成功，则返回值为0。如果Data不为NULL且函数成功，则返回值为复制到Data中的字节数。\r\n","\r\n            Original was GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909\r\n            \r\n","The frequency of RenderFrame events.":"RenderFrame 事件的频率。\r\n","[requires: v4.3 or ARB_texture_storage_multisample|VERSION_4_3]\r\n            Specify storage for a two-dimensional multisample array texture\r\n            ":"[要求：v4.3 或 ARB_texture_storage_multisample|VERSION_4_3]\r\n            为二维多样本数组纹理指定存储\r\n            \r\n","\r\n            Original was GL_ELEMENT_ARRAY_APPLE = 0x8A0C\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_APPLE = 0x8A0C\r\n            \r\n","\r\n            Original was GL_TEXTURE18_ARB = 0x84D2\r\n            ":"\r\n            原来是 GL_TEXTURE18_ARB = 0x84D2\r\n            \r\n","\r\n            Original was GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1\r\n            ":"\r\n            原来是 GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1\r\n            \r\n","The right alt key (equivalent to AltRight).":"右 alt 键（相当于 AltRight）。\r\n","\r\n            Original was GL_RGB_S3TC = 0x83A0\r\n            ":"\r\n            原来是 GL_RGB_S3TC = 0x83A0\r\n            \r\n","\r\n            Original was GL_VARIABLE_F_NV = 0x8528\r\n            ":"\r\n            原来是 GL_VARIABLE_F_NV = 0x8528\r\n            \r\n","\r\n            Original was GL_PROGRAM_PARAMETERS = 0x88A8\r\n            ":"\r\n            原来是 GL_PROGRAM_PARAMETERS = 0x88A8\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4\r\n            \r\n","\r\n            Original was GL_MULTIVIEW_EXT = 0x90F1\r\n            ":"\r\n            原来是 GL_MULTIVIEW_EXT = 0x90F1\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 0x93E1\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 0x93E1\r\n            \r\n","\r\n            Scalar multiplication.\r\n            ":"\r\n            标量乘法。\r\n            \r\n","\r\n            Original was GL_TEXTURE_2D_BINDING_EXT = 0x8069\r\n            ":"\r\n            原来是 GL_TEXTURE_2D_BINDING_EXT = 0x8069\r\n            \r\n","[length: maxBuffers]":"[长度：最大缓冲区]\r\n","Gets a System.Boolean indicating whether OpenTK is running on the Linux kernel.":"获取一个 System.Boolean，指示 OpenTK 是否在 Linux 内核上运行。\r\n","\r\n            Original was GL_FOUR = 4\r\n            ":"\r\n            原来是 GL_FOUR = 4\r\n            \r\n","\r\n            Original was GL_DOT3_RGBA_ARB = 0x86AF\r\n            ":"\r\n            原来是 GL_DOT3_RGBA_ARB = 0x86AF\r\n            \r\n","\r\n            Original was GL_MAX_FRAMEBUFFER_LAYERS = 0x9317\r\n            ":"\r\n            原来是 GL_MAX_FRAMEBUFFER_LAYERS = 0x9317\r\n            \r\n","\r\n            Original was GL_VIEW_COMPATIBILITY_CLASS = 0x82B6\r\n            ":"\r\n            原来是 GL_VIEW_COMPATIBILITY_CLASS = 0x82B6\r\n            \r\n","\r\n            Used in GL.GetTexGen, GL.TexGend and 5 other functions\r\n            ":"\r\n            用于 GL.GetTexGen、GL.TexGend 和其他 5 个函数\r\n            \r\n"," \r\n            For the scalar commands, specifies the new values to be used for the specified vertex attribute.\r\n            ":" \r\n            对于标量命令，指定要用于指定顶点属性的新值。\r\n            \r\n","\r\n            Used in GL.Sgi.GetColorTableParameter\r\n            ":"\r\n            在 GL.Sgi.GetColorTableParameter 中使用\r\n            \r\n","\r\n            Original was GL_MATRIX28 = 0x88DC\r\n            ":"\r\n            原来是 GL_MATRIX28 = 0x88DC\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52\r\n            \r\n"," \r\n            The distance between elements within the buffer.\r\n            ":" \r\n            缓冲区内元素之间的距离。\r\n            \r\n","A System.String explaining the cause of this exception.":"解释此异常原因的 System.String。\r\n","\r\n            Original was GL_RESAMPLE_DECIMATE_OML = 0x8989\r\n            ":"\r\n            原来是 GL_RESAMPLE_DECIMATE_OML = 0x8989\r\n            \r\n","\r\n            Original was GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133\r\n            ":"\r\n            原来是 GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT15_EXT = 0x8CEF\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT15_EXT = 0x8CEF\r\n            \r\n","\r\n            Original was GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 0x8B9F\r\n            ":"\r\n            原来是 GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 0x8B9F\r\n            \r\n","\r\n            Original was GL_QUAD_LUMINANCE8_SGIS = 0x8121\r\n            ":"\r\n            原来是 GL_QUAD_LUMINANCE8_SGIS = 0x8121\r\n            \r\n","\r\n            Original was GL_PROGRAM_ERROR_POSITION_NV = 0x864B\r\n            ":"\r\n            原来是 GL_PROGRAM_ERROR_POSITION_NV = 0x864B\r\n            \r\n","[requires: v1.0]\r\n            Return a texture image\r\n            ":"[要求：v1.0]\r\n            返回纹理图像\r\n            \r\n"," if the right button is pressed; otherwise, ":" 如果按下右按钮；否则，\r\n","\r\n            Original was GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8\r\n            ":"\r\n            原来是 GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8\r\n            \r\n","\r\n            Device is a Human Interface Device. Joysticks, joypads, pens\r\n            and some specific usb keyboards/mice fall into this category.\r\n            ":"\r\n            设备是人机接口设备。操纵杆、操纵杆、笔\r\n            一些特定的 USB 键盘/鼠标属于这一类。\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_EXT = 0x8D41\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_EXT = 0x8D41\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_48_BITS = 0x82C7\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_48_BITS = 0x82C7\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC\r\n            \r\n","\r\n            Converts this instance into its inverse.\r\n            ":"\r\n            将此实例转换为其逆。\r\n            \r\n","\r\n            Original was GL_422_REV_EXT = 0x80CD\r\n            ":"\r\n            原来是 GL_422_REV_EXT = 0x80CD\r\n            \r\n"," event instead of overriding this method.\r\n            ":" 事件而不是覆盖此方法。\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB\r\n            \r\n","\r\n            Enumerates available window states.\r\n            ":"\r\n            枚举可用的窗口状态。\r\n            \r\n","A new Matrix2d which holds the result of the addition":"保存加法结果的新 Matrix2d\r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83\r\n            \r\n","\r\n            Original was GL_TEXTURE30_ARB = 0x84DE\r\n            ":"\r\n            原来是 GL_TEXTURE30_ARB = 0x84DE\r\n            \r\n","[requires: NV_coverage_sample]":"[需要：NV_coverage_sample]\r\n"," \r\n            Specifies a single-valued fog parameter. FogMode, FogDensity, FogStart, FogEnd, FogIndex, and FogCoordSrc are accepted.\r\n            ":" \r\n            指定单值雾参数。接受 FogMode、FogDensity、FogStart、FogEnd、FogIndex 和 FogCoordSrc。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9\r\n            \r\n","\r\n            Original was GL_WEIGHT_ARRAY_SIZE_OES = 0x86AB\r\n            ":"\r\n            原来是 GL_WEIGHT_ARRAY_SIZE_OES = 0x86AB\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER_SIZE = 0x919E\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_SIZE = 0x919E\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2\r\n            \r\n"," \r\n            Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.\r\n            ":" \r\n            指定是否可以将红色、绿色、蓝色和 alpha 写入帧缓冲区。初始值为True，表示可以写入颜色分量。\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE_SOURCE_EXT = 0x8450\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_SOURCE_EXT = 0x8450\r\n            \r\n","\r\n            Specifies the orientation of front-facing polygons. GL_CW and GL_CCW are accepted. The initial value is GL_CCW.\r\n            ":"指定正面多边形的方向。接受 GL_CW 和 GL_CCW。初始值为 GL_CCW。\r\n            \r\n","\r\n            Original was GL_CURRENT_FOG_COORDINATE = 0x8453\r\n            ":"\r\n            原来是 GL_CURRENT_FOG_COORDINATE = 0x8453\r\n            \r\n","\r\n            Original was GL_PALETTE4_R5_G6_B5_OES = 0x8B92\r\n            ":"\r\n            原来是 GL_PALETTE4_R5_G6_B5_OES = 0x8B92\r\n            \r\n","\r\n            Original was GL_BlendSrcRgb = 0X80c9\r\n            ":"\r\n            原来是 GL_BlendSrcRgb = 0X80c9\r\n            \r\n","[requires: v3.0]\r\n            Clear individual buffers of the currently bound draw framebuffer\r\n            ":"[要求：v3.0]\r\n            清除当前绑定的绘制帧缓冲区的各个缓冲区\r\n            \r\n","[requires: v1.0]\r\n            Return the address of the specified pointer\r\n            ":"[要求：v1.0]\r\n            返回指定指针的地址\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B\r\n            \r\n"," if this instance has a start button; otherwise, ":" 如果这个实例有一个开始按钮；否则，\r\n","\r\n            Specifies a pointer to the location where the indices are stored.\r\n            ":"\r\n            指定指向存储索引的位置的指针。\r\n            \r\n","\r\n            Original was GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F\r\n            ":"\r\n            原来是 GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F\r\n            \r\n","true if the specified button is pressed; otherwise, false.":"如果指定的按钮被按下则为真；否则，假的。\r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4\r\n            \r\n","\r\n            Original was GL_MaxVertexTextureImageUnits = 0X8b4c\r\n            ":"\r\n            原来是 GL_MaxVertexTextureImageUnits = 0X8b4c\r\n            \r\n","\r\n            Original was GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE\r\n            ":"\r\n            原来是 GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_SUPPORTED = 0x826F\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_SUPPORTED = 0x826F\r\n            \r\n","[length: format,type,width,height] \r\n            Specifies a pointer to the image data in memory.\r\n            ":"[长度：格式、类型、宽度、高度]\r\n            指定指向内存中图像数据的指针。\r\n            \r\n"," \r\n            Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.\r\n            ":" \r\n            指定渲染缓冲区应附加到的附加点。必须是以下符号常量之一：ColorAttachment0、DepthAttachment 或 StencilAttachment。\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector2 with the W and X components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 W 和 X 组件的 OpenTK.Vector2。\r\n            \r\n","\r\n            Original was GL_DSDT_MAG_INTENSITY_NV = 0x86DC\r\n            ":"\r\n            原来是 GL_DSDT_MAG_INTENSITY_NV = 0x86DC\r\n            \r\n","\r\n            Original was GL_BUFFER_ACCESS_OES = 0x88BB\r\n            ":"\r\n            原来是 GL_BUFFER_ACCESS_OES = 0x88BB\r\n            \r\n","\r\n            Original was GL_LUMINANCE = 0x1909\r\n            ":"\r\n            原来是 GL_LUMINANCE = 0x1909\r\n            \r\n","[requires: EXT_transform_feedback]\r\n            Start transform feedback operation\r\n            ":"[需要：EXT_transform_feedback]\r\n            开始变换反馈操作\r\n            \r\n","\r\n            Gets a double representing the period of RenderFrame events, in seconds.\r\n            ":"\r\n            获取表示 RenderFrame 事件周期的双精度值，以秒为单位。\r\n            \r\n","\r\n            Original was GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D\r\n            ":"\r\n            原来是 GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D\r\n            \r\n","[requires: v2.0]\r\n            Deletes a program object\r\n            ":"[要求：v2.0]\r\n            删除程序对象\r\n            \r\n","\r\n            Used in GL.EvalMesh2\r\n            ":"\r\n            在 GL.EvalMesh2 中使用\r\n            \r\n","The quaternion to normalize":"四元数归一化\r\n","\r\n            An input message is in the queue. This is composed of QS_KEY and QS_MOUSE.\r\n            Windows 2000 and earlier.\r\n            ":"\r\n            输入消息在队列中。这由QS_KEY 和QS_MOUSE 组成。\r\n            Windows 2000 及更早版本。\r\n            \r\n","\r\n            Original was GL_RED_BIAS = 0x0D15\r\n            ":"\r\n            原来是 GL_RED_BIAS = 0x0D15\r\n            \r\n","\r\n            Original was GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE\r\n            ":"\r\n            原来是 GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE\r\n            \r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093\r\n            \r\n","\r\n            The presence of a QS_ flag in the return value does not guarantee that\r\n            a subsequent call to the GetMessage or PeekMessage function will return a message.\r\n            GetMessage and PeekMessage perform some internal filtering that may cause the message\r\n            to be processed internally. For this reason, the return value from GetQueueStatus\r\n            should be considered only a hint as to whether GetMessage or PeekMessage should be called. \r\n            ":"\r\n            返回值中存在 QS_ 标志并不能保证\r\n            随后调用 GetMessage 或 PeekMessage 函数将返回一条消息。\r\n            GetMessage 和 PeekMessage 执行一些可能导致消息的内部过滤\r\n            内部进行处理。为此，GetQueueStatus 的返回值\r\n            应仅将其视为是否应调用 GetMessage 或 PeekMessage 的提示。\r\n            \r\n","\r\n            The left mouse button.\r\n            ":"\r\n            鼠标左键。\r\n            \r\n","\r\n            Original was GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B\r\n            ":"\r\n            原来是 GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B\r\n            \r\n","\r\n            Original was GL_SHADER_STORAGE_BLOCK = 0x92E6\r\n            ":"\r\n            原来是 GL_SHADER_STORAGE_BLOCK = 0x92E6\r\n            \r\n","\r\n            Processes pending window events.\r\n            ":"\r\n            处理挂起的窗口事件。\r\n            \r\n","[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]\r\n            Retrieve the info log string from a program pipeline object\r\n            ":"[要求：v4.1 或 ARB_separate_shader_objects|VERSION_4_1]\r\n            从程序管道对象中检索信息日志字符串\r\n            \r\n","\r\n            Original was GL_COLOR_COMPONENTS = 0x8283\r\n            ":"\r\n            原来是 GL_COLOR_COMPONENTS = 0x8283\r\n            \r\n","True if this instance is equal to other; false otherwise.":"如果此实例等于其他实例，则为真；否则为假。\r\n","\r\n            Original was GL_NEAREST_MIPMAP_LINEAR = 0x2702\r\n            ":"\r\n            原来是 GL_NEAREST_MIPMAP_LINEAR = 0x2702\r\n            \r\n","\r\n            This property uses an approximation of the square root function to calculate vector magnitude, with\r\n            an upper error bound of 0.001.\r\n            ":"\r\n            此属性使用平方根函数的近似值来计算矢量幅度，其中\r\n            误差上限为 0.001。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_8_8_8_8 = 0x8035\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_8_8_8_8 = 0x8035\r\n            \r\n","\r\n            Original was GL_TRANSLATE_X_NV = 0x908E\r\n            ":"\r\n            原来是 GL_TRANSLATE_X_NV = 0x908E\r\n            \r\n","\r\n            Original was GL_TextureCompareMode = 0x884C\r\n            ":"原来是 GL_TextureCompareMode = 0x884C\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8\r\n            \r\n","[requires: ARB_vertex_buffer_object]\r\n            Map a buffer object's data store\r\n            ":"[需要：ARB_vertex_buffer_object]\r\n            映射缓冲区对象的数据存储\r\n            \r\n","\r\n            Original was GL_RED_NV = 0x1903\r\n            ":"\r\n            原来是 GL_RED_NV = 0x1903\r\n            \r\n","[requires: ATI_fragment_shader]":"[需要：ATI_fragment_shader]\r\n","\r\n            Original was GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047\r\n            ":"\r\n            原来是 GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047\r\n            \r\n","\r\n            Used in GL.Ext.FogCoordPointer\r\n            ":"\r\n            在 GL.Ext.FogCoordPointer 中使用\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Multiply the current matrix by a perspective matrix\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            将当前矩阵乘以透视矩阵\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Generate texture names\r\n            ":"[要求：v1.0 和 1.0]\r\n            生成纹理名称\r\n            \r\n","\r\n            Contains window information.\r\n            ":"\r\n            包含窗口信息。\r\n            \r\n","\r\n            Original was GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204\r\n            ":"\r\n            原来是 GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204\r\n            \r\n","\r\n            Original was GL_Short = 0X1402\r\n            ":"\r\n            原来是 GL_Short = 0X1402\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return the source code string from a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            从着色器对象返回源代码字符串\r\n            \r\n","[length: map] \r\n            Returns the pixel map contents.\r\n            ":"[长度：地图]\r\n            返回像素图内容。\r\n            \r\n","\r\n            Original was GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B\r\n            ":"\r\n            原来是 GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B\r\n            \r\n","\r\n            Original was GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E\r\n            ":"\r\n            原来是 GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E\r\n            \r\n","[requires: EXT_shader_image_load_store]\r\n            Bind a level of a texture to an image unit\r\n            ":"[需要：EXT_shader_image_load_store]\r\n            将纹理的级别绑定到图像单元\r\n            \r\n"," indicating whether this button is down.\r\n            ":" 指示此按钮是否按下。\r\n            \r\n","[requires: 3DFX_tbuffer]":"[需要：3DFX_tbuffer]\r\n","\r\n            Original was GL_TEXTURE_COMPRESSION_HINT = 0x84EF\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPRESSION_HINT = 0x84EF\r\n            \r\n","\r\n            Original was GL_ALPHA_BIAS = 0x0D1D\r\n            ":"\r\n            原来是 GL_ALPHA_BIAS = 0x0D1D\r\n            \r\n","\r\n            Original was GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE\r\n            ":"\r\n            原来是 GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE\r\n            \r\n","\r\n            Add two quaternions\r\n            ":"\r\n            添加两个四元数\r\n            \r\n","[requires: MESA_resize_buffers]":"[需要：MESA_resize_buffers]\r\n","\r\n            Original was GL_Texture30 = 0X84de\r\n            ":"\r\n            原来是 GL_Texture30 = 0X84de\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092\r\n            \r\n","\r\n            Original was GL_BLEND_OVERLAP_NV = 0x9281\r\n            ":"\r\n            原来是 GL_BLEND_OVERLAP_NV = 0x9281\r\n            \r\n","\r\n            Original was GL_ETC1_SRGB8_NV = 0x88EE\r\n            ":"\r\n            原来是 GL_ETC1_SRGB8_NV = 0x88EE\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76\r\n            \r\n","\r\n            The hat is in its centered (neutral) position\r\n            ":"\r\n            帽子处于居中（中性）位置\r\n            \r\n","\r\n            Original was GL_FOG_OFFSET_VALUE_SGIX = 0x8199\r\n            ":"\r\n            原来是 GL_FOG_OFFSET_VALUE_SGIX = 0x8199\r\n            \r\n","[requires: EXT_texture_object]\r\n            Determine if a name corresponds to a texture\r\n            ":"[需要：EXT_texture_object]\r\n            确定名称是否对应于纹理\r\n            \r\n"," \r\n            Specifies the renderbuffer target of the binding operation. target must be Renderbuffer.\r\n            ":" \r\n            指定绑定操作的渲染缓冲区目标。目标必须是 Renderbuffer。\r\n            \r\n","The id of this debug message.":"此调试消息的 ID。\r\n","\r\n            Multiplies two instances.\r\n            ":"\r\n            将两个实例相乘。\r\n            \r\n"," if this instance has a low-frequency vibration motor; otherwise, ":" 如果这个实例有一个低频振动马达；否则，\r\n","[length: size] \r\n            Returns the feedback data.\r\n            ":"[长度：尺寸]\r\n            返回反馈数据。\r\n            \r\n","\r\n            Original was GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EE\r\n            ":"\r\n            原来是 GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EE\r\n            \r\n","\r\n            Original was GL_INT64_NV = 0x140E\r\n            ":"\r\n            原来是 GL_INT64_NV = 0x140E\r\n            \r\n","The F30 key.":"F30 键。\r\n","[requires: APPLE_vertex_array_object]\r\n            Generate vertex array object names\r\n            ":"[需要：APPLE_vertex_array_object]\r\n            生成顶点数组对象名称\r\n            \r\n","\r\n            Original was GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20\r\n            ":"\r\n            原来是 GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20\r\n            \r\n"," is pressed.\r\n            ":" 被按下。\r\n            \r\n","\r\n            Define minmax table\r\n            ":"\r\n            定义最小最大表\r\n            \r\n","\r\n            Used in GL.BindBufferBase, GL.BindBufferRange\r\n            ":"\r\n            用于GL.BindBufferBase、GL.BindBufferRange\r\n            \r\n"," \r\n            Specifies the left origin of the pixel rectangle to invalidate, with lower left hand corner at (0,0).\r\n            ":" \r\n            指定要失效的像素矩形的左原点，左下角位于 (0,0)。\r\n            \r\n","\r\n            Original was GL_UNSIGNALED_APPLE = 0x9118\r\n            ":"\r\n            原来是 GL_UNSIGNALED_APPLE = 0x9118\r\n            \r\n","[out] Pointer to the buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a NULL character.":"[out] 指向将接收文本的缓冲区的指针。如果字符串与缓冲区一样长或更长，则字符串被截断并以 NULL 字符终止。\r\n","\r\n            set of events that should be saved\r\n            ":"\r\n            应保存的事件集\r\n            \r\n","\r\n            Original was GL_HSL_SATURATION_KHR = 0x92AE\r\n            ":"\r\n            原来是 GL_HSL_SATURATION_KHR = 0x92AE\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F\r\n            \r\n","[length: size,type,stride] \r\n            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.\r\n            ":"[长度：尺寸、类型、步幅]\r\n            指定指向数组中第一个纹理坐标集的第一个坐标的指针。初始值为 0。\r\n            \r\n","[length: count]":"[长度：计数]\r\n","[length: format,type,width] \r\n            Pointer to a one-dimensional array of pixel data that is processed to build the color table.\r\n            ":"[长度：格式，类型，宽度]\r\n            指向经过处理以构建颜色表的像素数据的一维数组的指针。\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD\r\n            \r\n","\r\n            Define a color lookup table\r\n            ":"\r\n            定义颜色查找表\r\n            \r\n","\r\n            Used in GL.Amd.TexStorageSparse, GL.Amd.TextureStorageSparse\r\n            ":"\r\n            在 GL.Amd.TexStorageSparse、GL.Amd.TextureStorageSparse 中使用\r\n            \r\n","\r\n            Used in GL.Ext.ApplyTexture, GL.Ext.TextureLight\r\n            ":"\r\n            用于GL.Ext.ApplyTexture, GL.Ext.TextureLight\r\n            \r\n","[length: 4]":"[长度：4]\r\n"," \r\n            Specifies the maximum array index contained in indices.\r\n            ":" \r\n            指定索引中包含的最大数组索引。\r\n            \r\n","\r\n            Original was GL_CLIP_PLANE5_IMG = 0x3005\r\n            ":"\r\n            原来是 GL_CLIP_PLANE5_IMG = 0x3005\r\n            \r\n"," \r\n            Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.\r\n            ":" \r\n            指定位掩码以启用和禁用在模板平面中写入各个位。最初，掩码全为 1。\r\n            \r\n","[requires: EXT_convolution]\r\n            Get convolution parameters\r\n            ":"[需要：EXT_convolution]\r\n            获取卷积参数\r\n            \r\n"," \r\n            Specifies the handle of the program object in which the association is to be made.\r\n            ":" \r\n            指定要在其中建立关联的程序对象的句柄。\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Generate renderbuffer object names\r\n            ":"[需要：EXT_framebuffer_object]\r\n            生成渲染缓冲区对象名称\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3\r\n            \r\n","\r\n            Used in GL.Ext.TexStorage3D, GL.Oes.CompressedTexImage3D and 4 other functions\r\n            ":"\r\n            用于 GL.Ext.TexStorage3D、GL.Oes.CompressedTexImage3D 和其他 4 个函数\r\n            \r\n","[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]\r\n            Returns the value of a uniform variable\r\n            ":"[要求：v4.0 或 ARB_gpu_shader_fp64|VERSION_4_0]\r\n            返回统一变量的值\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F\r\n            \r\n","\r\n            Original was GL_T2F_C4F_N3F_V3F = 0x2A2C\r\n            ":"\r\n            原来是 GL_T2F_C4F_N3F_V3F = 0x2A2C\r\n            \r\n","[requires: OES_vertex_array_object]\r\n            Delete vertex array objects\r\n            ":"[要求：OES_vertex_array_object]\r\n            删除顶点数组对象\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279\r\n            \r\n","\r\n            Original was GL_MATRIX19_ARB = 0x88D3\r\n            ":"\r\n            原来是 GL_MATRIX19_ARB = 0x88D3\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER7_EXT = 0x882C\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER7_EXT = 0x882C\r\n            \r\n","[length: count*1] \r\n            Specifies the new values to be used for the specified uniform variable.\r\n            ":"[长度：计数*1]\r\n            指定要用于指定统一变量的新值。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73\r\n            ":"\r\n            原来是 GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73\r\n            \r\n","\r\n            Occurs when a button of this JoystickDevice is released.\r\n            ":"\r\n            释放此 JoystickDevice 的按钮时发生。\r\n            \r\n","\r\n            Original was GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B\r\n            ":"\r\n            原来是 GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA\r\n            \r\n","The right shift key (equivalent to ShiftRight).":"右移键（相当于 ShiftRight）。\r\n","\r\n            Original was GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037\r\n            ":"\r\n            原来是 GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037\r\n            \r\n"," has\r\n            a left thumbstick with a y-axis.\r\n            ":" 有\r\n            带有 y 轴的左摇杆。\r\n            \r\n","[length: size,type,stride] \r\n            Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.\r\n            ":"[长度：尺寸、类型、步幅]\r\n            指定当前绑定到 ArrayBuffer 目标的缓冲区的数据存储中数组中第一个通用顶点属性的第一个组件的偏移量。初始值为 0。\r\n            \r\n","\r\n            Original was GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB\r\n            ":"\r\n            原来是 GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276\r\n            ":"原来是 GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276\r\n            \r\n","\r\n            Original was GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4\r\n            ":"\r\n            原来是 GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4\r\n            \r\n"," is a bass guitar.\r\n            ":" 是低音吉他。\r\n            \r\n","[requires: OES_single_precision]\r\n            Specify mapping of depth values from normalized device coordinates to window coordinates\r\n            ":"[要求：OES_single_precision]\r\n            指定深度值从规范化设备坐标到窗口坐标的映射\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_EXT = 0x8074\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_EXT = 0x8074\r\n            \r\n","\r\n            Original was GL_PROGRAM_ERROR_POSITION_ARB = 0x864B\r\n            ":"\r\n            原来是 GL_PROGRAM_ERROR_POSITION_ARB = 0x864B\r\n            \r\n","\r\n            Original was GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A\r\n            ":"\r\n            原来是 GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF\r\n            \r\n","\r\n            Original was GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185\r\n            ":"\r\n            原来是 GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185\r\n            \r\n","[requires: EXT_draw_instanced|EXT_instanced_arrays]\r\n            Draw multiple instances of a range of elements\r\n            ":"[需要：EXT_draw_instanced|EXT_instanced_arrays]\r\n            绘制一系列元素的多个实例\r\n            \r\n","[requires: NV_pixel_data_range]":"[要求：NV_pixel_data_range]\r\n","\r\n            Original was GL_COMPRESSED_RGBA = 0x84EE\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA = 0x84EE\r\n            \r\n","[requires: EXT_fog_coord]\r\n            Set the current fog coordinates\r\n            ":"[需要：EXT_fog_coord]\r\n            设置当前雾坐标\r\n            \r\n","The value type. Must be blittable.":"值类型。必须是 blittable 的。\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Attaches a shader object to a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            将着色器对象附加到程序对象\r\n            \r\n","\r\n            Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the CreateWindow function to create a window whose client area is the desired size.\r\n            ":"\r\n            根据所需的客户端矩形大小计算所需的窗口矩形大小。然后可以将窗口矩形传递给 CreateWindow 函数以创建其客户区大小为所需大小的窗口。\r\n            \r\n","[requires: OES_texture_cube_map]\r\n            Return texture coordinate generation parameters\r\n            ":"[需要：OES_texture_cube_map]\r\n            返回纹理坐标生成参数\r\n            \r\n","\r\n            Original was GL_INTERLACE_READ_OML = 0x8981\r\n            ":"\r\n            原来是 GL_INTERLACE_READ_OML = 0x8981\r\n            \r\n","[requires: EXT_bindable_uniform]":"[需要：EXT_bindable_uniform]\r\n","\r\n            Original was GL_COLOR_ENCODING = 0x8296\r\n            ":"\r\n            原来是 GL_COLOR_ENCODING = 0x8296\r\n            \r\n","\r\n            Original was GL_STENCIL_EXT = 0x1802\r\n            ":"\r\n            原来是 GL_STENCIL_EXT = 0x1802\r\n            \r\n","\r\n            Original was GL_PERFQUERY_WAIT_INTEL = 0x83FB\r\n            ":"\r\n            原来是 GL_PERFQUERY_WAIT_INTEL = 0x83FB\r\n            \r\n","[length: 4] \r\n            Specify the , ,  coordinates for the raster position.\r\n            ":"[长度：4]\r\n            指定光栅位置的 , , 坐标。\r\n            \r\n","\r\n            Used in GL.TexParameter, GL.TexParameterI and 6 other functions\r\n            ":"\r\n            用于 GL.TexParameter、GL.TexParameterI 和其他 6 个函数\r\n            \r\n","\r\n            Original was GL_2PASS_1_EXT = 0x80A3\r\n            ":"\r\n            原来是 GL_2PASS_1_EXT = 0x80A3\r\n            \r\n","\r\n            Original was GL_VERTEX_STREAM6_ATI = 0x8772\r\n            ":"\r\n            原来是 GL_VERTEX_STREAM6_ATI = 0x8772\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31\r\n            \r\n","\r\n            Original was GL_TEXTURE_NUM_LEVELS_QCOM = 0x8BD9\r\n            ":"\r\n            原来是 GL_TEXTURE_NUM_LEVELS_QCOM = 0x8BD9\r\n            \r\n","[requires: KHR_debug]\r\n            Label a named object identified within a namespace\r\n            ":"[要求：KHR_debug]\r\n            标记命名空间中标识的命名对象\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B\r\n            \r\n","\r\n            Either a pointer to a null-terminated string or an atom that specifies the class name\r\n            of the new window.\r\n            ":"\r\n            指向以 null 结尾的字符串的指针或指定类名的原子\r\n            的新窗口。\r\n            \r\n","\r\n            Original was GL_GPU_DISJOINT_EXT = 0x8FBB\r\n            ":"\r\n            原来是 GL_GPU_DISJOINT_EXT = 0x8FBB\r\n            \r\n","\r\n            Original was GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48\r\n            ":"\r\n            原来是 GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48\r\n            \r\n"," \r\n            For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.\r\n            ":" \r\n            对于向量和矩阵命令，指定一个指向计数值数组的指针，该数组将用于更新指定的统一变量。\r\n            \r\n","\r\n            Original was GL_DT_BIAS_NV = 0x8717\r\n            ":"\r\n            原来是 GL_DT_BIAS_NV = 0x8717\r\n            \r\n","\r\n            Original was GL_OPERAND2_RGB_EXT = 0x8592\r\n            ":"\r\n            原来是 GL_OPERAND2_RGB_EXT = 0x8592\r\n            \r\n","\r\n            Gets the precise value of the wheel in floating-point units.\r\n            ":"\r\n            以浮点单位获取轮子的精确值。\r\n            \r\n","\r\n            Original was GL_BUFFER_IMMUTABLE_STORAGE = 0x821F\r\n            ":"\r\n            原来是 GL_BUFFER_IMMUTABLE_STORAGE = 0x821F\r\n            \r\n","\r\n            Original was GL_MAX_INTEGER_SAMPLES = 0x9110\r\n            ":"\r\n            原来是 GL_MAX_INTEGER_SAMPLES = 0x9110\r\n            \r\n"," \r\n            Specify the target of the operation. target must be one of Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, or ProxyTextureCubeMap.\r\n            ":" \r\n            指定操作的目标。目标必须是 Texture2D、ProxyTexture2D、Texture1DArray、ProxyTexture1DArray、TextureRectangle、ProxyTextureRectangle 或 ProxyTextureCubeMap 之一。\r\n            \r\n","[requires: v1.0]\r\n            Specify multisample coverage parameters\r\n            ":"[要求：v1.0]\r\n            指定多样本覆盖参数\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT8 = 0x8CE8\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT8 = 0x8CE8\r\n            \r\n","\r\n            Original was GL_REPLICATE_BORDER_HP = 0x8153\r\n            ":"\r\n            原来是 GL_REPLICATE_BORDER_HP = 0x8153\r\n            \r\n","\r\n            Original was GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500\r\n            ":"\r\n            原来是 GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500\r\n            \r\n","\r\n            Original was GL_COMPUTE_PROGRAM_NV = 0x90FB\r\n            ":"\r\n            原来是 GL_COMPUTE_PROGRAM_NV = 0x90FB\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Return texture coordinate generation parameters\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            返回纹理坐标生成参数\r\n            \r\n","\r\n            Original was GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF\r\n            ":"\r\n            原来是 GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF\r\n            \r\n","\r\n            Converts the specified IntPtr to the equivalent ContextHandle.\r\n            ":"\r\n            将指定的 IntPtr 转换为等效的 ContextHandle。\r\n            \r\n","\r\n            Right thumbstick up direction button\r\n            ":"\r\n            右拇指向上方向按钮\r\n            \r\n","\r\n            Original was GL_CurrentProgram = 0X8b8d\r\n            ":"\r\n            原来是 GL_CurrentProgram = 0X8b8d\r\n            \r\n","[length: bufSize] \r\n            Returns a null terminated string containing the name of the uniform variable.\r\n            ":"[长度：bufSize]\r\n            返回包含统一变量名称的空终止字符串。\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER13_NV = 0x8832\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER13_NV = 0x8832\r\n            \r\n","\r\n            Original was GL_SLUMINANCE = 0x8C46\r\n            ":"\r\n            原来是 GL_SLUMINANCE = 0x8C46\r\n            \r\n","\r\n            Original was GL_WARPS_PER_SM_NV = 0x933A\r\n            ":"\r\n            原来是 GL_WARPS_PER_SM_NV = 0x933A\r\n            \r\n","\r\n            Original was GL_PRIMITIVE_ID_NV = 0x8C7C\r\n            ":"\r\n            原来是 GL_PRIMITIVE_ID_NV = 0x8C7C\r\n            \r\n","\r\n            Original was GL_TEXTURE_SHADOW = 0x82A1\r\n            ":"\r\n            原来是 GL_TEXTURE_SHADOW = 0x82A1\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D\r\n            \r\n","\r\n            Original was GL_Rgba = 0X1908\r\n            ":"\r\n            原来是 GL_Rgba = 0X1908\r\n            \r\n","\r\n            Original was GL_TEXTURE_RECTANGLE_NV = 0x84F5\r\n            ":"\r\n            原来是 GL_TEXTURE_RECTANGLE_NV = 0x84F5\r\n            \r\n","\r\n            Original was GL_RG8UI = 0x8238\r\n            ":"\r\n            原来是 GL_RG8UI = 0x8238\r\n            \r\n","\r\n            Original was GL_COMPUTE_SUBROUTINE = 0x92ED\r\n            ":"\r\n            原来是 GL_COMPUTE_SUBROUTINE = 0x92ED\r\n            \r\n","\r\n            Gets the square of the vector length (magnitude).\r\n            ":"\r\n            获取矢量长度（幅值）的平方。\r\n            \r\n","\r\n            Original was GL_TIMEOUT_EXPIRED = 0x911B\r\n            ":"\r\n            原来是 GL_TIMEOUT_EXPIRED = 0x911B\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE_EXT = 0x8451\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_EXT = 0x8451\r\n            \r\n","\r\n            Original was GL_ADJACENT_PAIRS_NV = 0x90AE\r\n            ":"\r\n            原来是 GL_ADJACENT_PAIRS_NV = 0x90AE\r\n            \r\n","\r\n            Original was GL_INTENSITY16UI_EXT = 0x8D79\r\n            ":"\r\n            原来是 GL_INTENSITY16UI_EXT = 0x8D79\r\n            \r\n"," \r\n            A pointer identifying a sync object.\r\n            ":" \r\n            标识同步对象的指针。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGB8_ETC2 = 0x9274\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGB8_ETC2 = 0x9274\r\n            \r\n"," \r\n            Specifies the starting offset within the buffer of the range to be mapped.\r\n            ":" \r\n            指定要映射的范围缓冲区内的起始偏移量。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Set the polygon stippling pattern\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            设置多边形点画图案\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Copy pixels into a 2D texture image\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            将像素复制到二维纹理图像中\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER1_EXT = 0x8826\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER1_EXT = 0x8826\r\n            \r\n","\r\n            Original was GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA\r\n            ":"\r\n            原来是 GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA\r\n            \r\n","[requires: v4.0 or ARB_draw_indirect|VERSION_4_0]\r\n            Render indexed primitives from array data, taking parameters from memory\r\n            ":"[要求：v4.0 或 ARB_draw_indirect|VERSION_4_0]\r\n            从数组数据渲染索引基元，从内存中获取参数\r\n            \r\n","\r\n            Original was GL_RGBA_FLOAT16_APPLE = 0x881A\r\n            ":"\r\n            原来是 GL_RGBA_FLOAT16_APPLE = 0x881A\r\n            \r\n","\r\n            Original was GL_MODULATE_SUBTRACT_ATI = 0x8746\r\n            ":"\r\n            原来是 GL_MODULATE_SUBTRACT_ATI = 0x8746\r\n            \r\n","[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]\r\n            Bind a program pipeline to the current context\r\n            ":"[要求：v4.1 或 ARB_separate_shader_objects|VERSION_4_1]\r\n            将程序管道绑定到当前上下文\r\n            \r\n","\r\n            Original was GL_OES_packed_depth_stencil = 1\r\n            ":"\r\n            原来是 GL_OES_packed_depth_stencil = 1\r\n            \r\n","\r\n            Original was GL_COMPRESSED_INTENSITY_ARB = 0x84EC\r\n            ":"\r\n            原来是 GL_COMPRESSED_INTENSITY_ARB = 0x84EC\r\n            \r\n"," \r\n            Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback.\r\n            ":" \r\n            指定将记录到为变换反馈绑定的缓冲区对象中的基元的输出类型。\r\n            \r\n","Vertical screen space coordinate of the NativeWindow's origin.":"NativeWindow 原点的垂直屏幕空间坐标。\r\n"," \r\n            Specifies the length of the shader binary data in bytes.\r\n            ":" \r\n            以字节为单位指定着色器二进制数据的长度。\r\n            \r\n","\r\n            Builds a Quaternion from the given euler angles\r\n            ":"\r\n            从给定的欧拉角构建四元数\r\n            \r\n","\r\n            Used in GL.BeginQuery, GL.BeginQueryIndexed and 5 other functions\r\n            ":"\r\n            用于 GL.BeginQuery、GL.BeginQueryIndexed 和其他 5 个函数\r\n            \r\n","[length: count] \r\n            Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.\r\n            ":"[长度：计数]\r\n            指定指向着色器二进制文件将加载到的着色器对象句柄数组的指针。\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the X, Y, and Z components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 X、Y 和 Z 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Right thumbstick down direction button\r\n            ":"\r\n            右摇杆向下方向按钮\r\n            \r\n","\r\n            Original was GL_BLEND_DST_ALPHA_EXT = 0x80CA\r\n            ":"\r\n            原来是 GL_BLEND_DST_ALPHA_EXT = 0x80CA\r\n            \r\n","\r\n            Original was GL_TEXTURE19_ARB = 0x84D3\r\n            ":"\r\n            原来是 GL_TEXTURE19_ARB = 0x84D3\r\n            \r\n","\r\n            Original was GL_FOG_FUNC_POINTS_SGIS = 0x812B\r\n            ":"\r\n            原来是 GL_FOG_FUNC_POINTS_SGIS = 0x812B\r\n            \r\n","[length: count*9]":"[长度：计数*9]\r\n","\r\n            Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.\r\n            ":"\r\n            指定剪刀框的宽度和高度。当 GL 上下文首次附加到窗口时，宽度和高度将设置为该窗口的尺寸。\r\n            \r\n","[length: pathListMode,numPaths]":"[长度：pathListMode，numPaths]\r\n","\r\n            Original was GL_PROGRAM_SEPARABLE_EXT = 0x8258\r\n            ":"\r\n            原来是 GL_PROGRAM_SEPARABLE_EXT = 0x8258\r\n            \r\n","\r\n            true, if this event was caused by the user holding down\r\n            a key; false, if this was caused by the user pressing a\r\n            key for the first time.\r\n            ":"\r\n            true，如果此事件是由用户按住\r\n            关键; false，如果这是由用户按下\r\n            钥匙第一次。\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Bind a buffer object to an indexed buffer target\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            将缓冲区对象绑定到索引缓冲区目标\r\n            \r\n","[length: n,type] \r\n            Specifies the address of an array of name offsets in the display list. The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type.\r\n            ":"[长度：n，类型]\r\n            指定显示列表中名称偏移数组的地址。指针类型为 void，因为偏移量可以是字节、短整型、整数或浮点数，具体取决于类型的值。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify pixel arithmetic for RGB and alpha components separately\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            分别为 RGB 和 alpha 分量指定像素算法\r\n            \r\n","\r\n            Original was GL_WRITE_DISCARD_NV = 0x88BE\r\n            ":"\r\n            原来是 GL_WRITE_DISCARD_NV = 0x88BE\r\n            \r\n","Scalar operand.":"标量操作数。\r\n","\r\n            Original was GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7\r\n            \r\n","\r\n            LastX/Y indicate absolute motion.\r\n            ":"\r\n            LastX/Y 表示绝对运动。\r\n            \r\n"," to retrieve the combined state of all mouse devices.\r\n            Use ":" 检索所有鼠标设备的组合状态。\r\n            使用\r\n","[length: type,stride,count] \r\n            Specifies a pointer to the first index in the array. The initial value is 0.\r\n            ":"[长度：类型、步幅、计数]\r\n            指定指向数组中第一个索引的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 0x9307\r\n            ":"原来是 GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 0x9307\r\n            \r\n","\r\n            Original was GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D\r\n            ":"原来是 GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D\r\n            \r\n","\r\n            Original was GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640\r\n            ":"\r\n            原来是 GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640\r\n            \r\n","\r\n            Constructs a new instance with the specified handle.\r\n            ":"\r\n            构造具有指定句柄的新实例。\r\n            \r\n","\r\n            Gets the window reference for this instance.\r\n            ":"\r\n            获取此实例的窗口引用。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7\r\n            \r\n","\r\n            Handle to the module that owns the new window.\r\n            ":"\r\n            拥有新窗口的模块的句柄。\r\n            \r\n","\r\n            Original was GL_TextureMaxLod = 0x813B\r\n            ":"\r\n            原来是 GL_TextureMaxLod = 0x813B\r\n            \r\n","[requires: IMG_user_clip_plane]":"[需要：IMG_user_clip_plane]\r\n","\r\n            Original was GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545\r\n            ":"\r\n            原来是 GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545\r\n            \r\n","[requires: NV_parameter_buffer_object]":"[要求：NV_parameter_buffer_object]\r\n"," \r\n            The name of the object to label.\r\n            ":" \r\n            要标记的对象的名称。\r\n            \r\n","\r\n            Used in GL.GetBufferPointer, GL.Oes.GetBufferPointer\r\n            ":"\r\n            在GL.GetBufferPointer、GL.Oes.GetBufferPointer中使用\r\n            \r\n","\r\n            Specify a single boolean value representing if the coverage masks should be inverted. GL_TRUE and GL_FALSE are accepted. The initial value is GL_FALSE.\r\n            ":"\r\n            指定一个布尔值，表示是否应反转覆盖遮罩。接受 GL_TRUE 和 GL_FALSE。初始值为 GL_FALSE。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3\r\n            \r\n","\r\n            Original was GL_TEXTURE_RECTANGLE = 0x84F5\r\n            ":"\r\n            原来是 GL_TEXTURE_RECTANGLE = 0x84F5\r\n            \r\n"," \r\n            The format of entries in the minmax table. Must be one of Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.\r\n            ":" \r\n            minmax 表中条目的格式。必须是 Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, R3G3B2, Rgb, Rgb4, Rgb0,5, Rgb 之一Rgb12、Rgb16、Rgba、Rgba2、Rgba4、Rgb5A1、Rgba8、Rgb10A2、Rgba12 或 Rgba16。\r\n            \r\n","\r\n            Original was GL_EXPAND_NEGATE_NV = 0x8539\r\n            ":"\r\n            原来是 GL_EXPAND_NEGATE_NV = 0x8539\r\n            \r\n"," \r\n            The X offset of the region to be invalidated.\r\n            ":" \r\n            要失效的区域的 X 偏移量。\r\n            \r\n","\r\n            Original was GL_TEXTURE9 = 0x84C9\r\n            ":"\r\n            原来是 GL_TEXTURE9 = 0x84C9\r\n            \r\n","\r\n            Original was GL_NEGATIVE_X_EXT = 0x87D9\r\n            ":"\r\n            原来是 GL_NEGATIVE_X_EXT = 0x87D9\r\n            \r\n","[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]\r\n            Delete named query objects\r\n            ":"[需要：EXT_disjoint_timer_query|EXT_occlusion_query_boolean]\r\n            删除命名查询对象\r\n            \r\n","[requires: v4.4 or ARB_multi_bind|VERSION_4_4]\r\n            Bind ranges of one or more buffer objects to a sequence of indexed buffer targets\r\n            ":"[要求：v4.4 或 ARB_multi_bind|VERSION_4_4]\r\n            将一个或多个缓冲区对象的范围绑定到一系列索引缓冲区目标\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_SIZE = 0x807A\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_SIZE = 0x807A\r\n            \r\n","\r\n            Original was GL_FLOAT_R32_NV = 0x8885\r\n            ":"\r\n            原来是 GL_FLOAT_R32_NV = 0x8885\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]":"[要求：v2.0 或 ES_VERSION_2_0]\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Returns information about an active attribute variable for the specified program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回有关指定程序对象的活动属性变量的信息\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the Y, X, and Z components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Y、X 和 Z 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Original was GL_R1UI_T2F_V3F_SUN = 0x85C9\r\n            ":"\r\n            原来是 GL_R1UI_T2F_V3F_SUN = 0x85C9\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return attachment parameters of a framebuffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回帧缓冲区对象的附件参数\r\n            \r\n","[requires: v1.0 and 1.0]":"[要求：v1.0 和 1.0]\r\n","\r\n            Original was GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER7 = 0x882C\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER7 = 0x882C\r\n            \r\n","[requires: AMD_multi_draw_indirect]\r\n            Render indexed primitives from array data, taking parameters from memory\r\n            ":"[需要：AMD_multi_draw_indirect]\r\n            从数组数据渲染索引基元，从内存中获取参数\r\n            \r\n","[requires: v1.4]\r\n            Render multiple sets of primitives from array data\r\n            ":"[要求：v1.4]\r\n            从数组数据渲染多组图元\r\n            \r\n"," \r\n            Specifies the sync object whose status to wait on.\r\n            ":" \r\n            指定要等待其状态的同步对象。\r\n            \r\n","[requires: v4.1 or ARB_viewport_array|VERSION_4_1]\r\n            Define the scissor box for multiple viewports\r\n            ":"[要求：v4.1 或 ARB_viewport_array|VERSION_4_1]\r\n            为多个视口定义剪刀框\r\n            \r\n","\r\n            Used in GL.GetVertexArrayIndexed64\r\n            ":"\r\n            在 GL.GetVertexArrayIndexed64 中使用\r\n            \r\n","\r\n            Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO.\r\n            ":"\r\n            指定如何计算红色、绿色、蓝色和 alpha 目标混合因子。接受以下符号常量：GL_ZERO、GL_ONE、GL_SRC_COLOR、GL_ONE_MINUS_SRC_COLOR、GL_DST_COLOR、GL_ONE_MINUS_DST_COLOR、GL_SRC_ALPHA、GL_ONE_MINUS_SRC_ALPHA、GL_DST_ALPHA、GL_ONE_MINUS_DST_ALPHA。 GL_CONSTANT_COLOR、GL_ONE_MINUS_CONSTANT_COLOR、GL_CONSTANT_ALPHA 和 GL_ONE_MINUS_CONSTANT_ALPHA。初始值为 GL_ZERO。\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55\r\n            \r\n","\r\n            Used in GL.GetQueryObject\r\n            ":"\r\n            在 GL.GetQueryObject 中使用\r\n            \r\n","\r\n            Original was GL_RG8I = 0x8237\r\n            ":"\r\n            原来是 GL_RG8I = 0x8237\r\n            \r\n","Pointer to an array of RawInput structures.":"指向 RawInput 结构数组的指针。\r\n"," \r\n            Specifies the size of the buffer whose address is given by binary.\r\n            ":" \r\n            指定地址由二进制给出的缓冲区的大小。\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10\r\n            \r\n","\r\n            Original was GL_FRAGMENT_PROGRAM_ARB = 0x8804\r\n            ":"\r\n            原来是 GL_FRAGMENT_PROGRAM_ARB = 0x8804\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER0_ATI = 0x8825\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER0_ATI = 0x8825\r\n            \r\n","\r\n            Original was GL_ARRAY_DIVISOR = 0x88FE\r\n            ":"\r\n            原来是 GL_ARRAY_DIVISOR = 0x88FE\r\n            \r\n","\r\n            Original was GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5\r\n            ":"\r\n            原来是 GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5\r\n            \r\n","\r\n            Represents a mouse device and provides methods to query its status.\r\n            ":"\r\n            表示鼠标设备并提供查询其状态的方法。\r\n            \r\n","\r\n            You will typically wish to update your viewport whenever\r\n            the window is resized. See the\r\n            ":"\r\n            您通常希望在任何时候更新您的视口\r\n            窗口大小被调整。见\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D\r\n            \r\n","\r\n            Original was GL_COPY_READ_BUFFER_NV = 0x8F36\r\n            ":"\r\n            原来是 GL_COPY_READ_BUFFER_NV = 0x8F36\r\n            \r\n"," \r\n            Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.\r\n            ":" \r\n            指定如何计算红色、绿色、蓝色和 alpha 目标混合因子。接受以下符号常量：零、一、SrcColor、OneMinusSrcColor、DstColor、OneMinusDstColor、SrcAlpha、OneMinusSrcAlpha、DstAlpha、OneMinusDstAlpha。 ConstantColor、OneMinusConstantColor、ConstantAlpha 和 OneMinusConstantAlpha。初始值为零。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Copy a two-dimensional texture subimage\r\n            ":"[要求：v1.0 和 1.0]\r\n            复制二维纹理子图像\r\n            \r\n","[length: program,pname]":"[长度：程序，pname]\r\n","The thirtyfirst button of the JoystickDevice.":"JoystickDevice 的第三十一个按钮。\r\n","[requires: v2.0]\r\n            Creates a program object\r\n            ":"[要求：v2.0]\r\n            创建程序对象\r\n            \r\n","\r\n            Original was GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2\r\n            ":"\r\n            原来是 GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2\r\n            \r\n","[length: bufSize] \r\n            Specifies the address of an array to receive the values of the queried parameter.\r\n            ":"[长度：bufSize]\r\n            指定数组的地址以接收查询参数的值。\r\n            \r\n","\r\n            Used in GL.ClipPlane, GL.GetClipPlane\r\n            ":"\r\n            用于GL.ClipPlane, GL.GetClipPlane\r\n            \r\n","\r\n            Original was GL_INT16_VEC4_NV = 0x8FE7\r\n            ":"\r\n            原来是 GL_INT16_VEC4_NV = 0x8FE7\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER7_NV = 0x882C\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER7_NV = 0x882C\r\n            \r\n","A System.Int32 containing the unique hashcode for this instance.":"包含此实例的唯一哈希码的 System.Int32。\r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Query the properties of a sync object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            查询同步对象的属性\r\n            \r\n","\r\n            Used in GL.NamedRenderbufferStorage, GL.NamedRenderbufferStorageMultisample and 2 other functions\r\n            ":"\r\n            用于 GL.NamedRenderbufferStorage、GL.NamedRenderbufferStorageMultisample 和其他 2 个函数\r\n            \r\n","\r\n            You may retrieve the entry point for an OpenGL function using the GL.GetDelegate method.\r\n            ":"\r\n            您可以使用 GL.GetDelegate 方法检索 OpenGL 函数的入口点。\r\n            \r\n","\r\n            Original was GL_BOOL_ARB = 0x8B56\r\n            ":"\r\n            原来是 GL_BOOL_ARB = 0x8B56\r\n            \r\n"," is a driving wheel.\r\n            ":" 是驱动轮。\r\n            \r\n","\r\n            Original was GL_CON_31_ATI = 0x8960\r\n            ":"\r\n            原来是 GL_CON_31_ATI = 0x8960\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x8C4E\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x8C4E\r\n            \r\n","\r\n            Original was GL_TEXTURE_WIDTH = 0x1000\r\n            ":"\r\n            原来是 GL_TEXTURE_WIDTH = 0x1000\r\n            \r\n","\r\n            Specifies the position of the left edge of the window.\r\n            ":"\r\n            指定窗口左边缘的位置。\r\n            \r\n","\r\n            Original was GL_BYTE = 0x1400\r\n            ":"\r\n            原来是 GL_BYTE = 0x1400\r\n            \r\n","\r\n            Original was GL_CONSTANT = 0x8576\r\n            ":"\r\n            原来是 GL_CONSTANT = 0x8576\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 0x93E4\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 0x93E4\r\n            \r\n","\r\n            To get more information on the device, use hDevice in a call to GetRawInputDeviceInfo.\r\n            ":"\r\n            要获取有关设备的更多信息，请在对 GetRawInputDeviceInfo 的调用中使用 hDevice。\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC\r\n            \r\n","[requires: AMD_vertex_shader_tessellator]":"[需要：AMD_vertex_shader_tessellator]\r\n","\r\n            Original was GL_TEXTURE_FORMAT_QCOM = 0x8BD6\r\n            ":"\r\n            原来是 GL_TEXTURE_FORMAT_QCOM = 0x8BD6\r\n            \r\n","\r\n            Original was GL_SMALL_CW_ARC_TO_NV = 0x14\r\n            ":"\r\n            原来是 GL_SMALL_CW_ARC_TO_NV = 0x14\r\n            \r\n","\r\n            The window is in its normal state.\r\n            ":"\r\n            窗口处于正常状态。\r\n            \r\n","\r\n            Original was GL_3_BYTES_NV = 0x1408\r\n            ":"\r\n            原来是 GL_3_BYTES_NV = 0x1408\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Bind a vertex array object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            绑定一个顶点数组对象\r\n            \r\n","\r\n            Original was GL_OFFSET = 0x92FC\r\n            ":"\r\n            原来是 GL_OFFSET = 0x92FC\r\n            \r\n","\r\n            Original was GL_MODELVIEW1_MATRIX_EXT = 0x8506\r\n            ":"\r\n            原来是 GL_MODELVIEW1_MATRIX_EXT = 0x8506\r\n            \r\n"," \r\n            Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureWrapS, TextureWrapT, TextureWrapR, TextureCompareMode, and TextureCompareFunc are accepted.\r\n            ":" \r\n            指定采样器参数的符号名称。 TextureMagFilter、TextureMinFilter、TextureMinLod、TextureMaxLod、TextureWrapS、TextureWrapT、TextureWrapR、TextureCompareMode 和 TextureCompareFunc 被接受。\r\n            \r\n","\r\n            Represents a joystick device and provides methods to query its status.\r\n            ":"\r\n            表示操纵杆设备并提供查询其状态的方法。\r\n            \r\n","\r\n            Original was GL_TriangleStrip = 0X0005\r\n            ":"\r\n            原来是 GL_TriangleStrip = 0X0005\r\n            \r\n","\r\n            Original was GL_COLOR_SUM_EXT = 0x8458\r\n            ":"\r\n            原来是 GL_COLOR_SUM_EXT = 0x8458\r\n            \r\n","\r\n            Original was GL_SIGNED_IDENTITY_NV = 0x853C\r\n            ":"\r\n            原来是 GL_SIGNED_IDENTITY_NV = 0x853C\r\n            \r\n","[requires: EXT_framebuffer_blit]\r\n            Copy a block of pixels from the read framebuffer to the draw framebuffer\r\n            ":"[需要：EXT_framebuffer_blit]\r\n            将像素块从读取帧缓冲区复制到绘制帧缓冲区\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT16 = 0x81a5\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT16 = 0x81a5\r\n            \r\n","\r\n            Original was GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0\r\n            ":"\r\n            原来是 GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0\r\n            \r\n"," \r\n            Specifies a query object target. Must be SamplesPassed, AnySamplesPassed, AnySamplesPassedConservativePrimitivesGenerated, TransformFeedbackPrimitivesWritten, TimeElapsed, or Timestamp.\r\n            ":" \r\n            指定查询对象目标。必须是 SamplesPassed、AnySamplesPassed、AnySamplesPassedConservativePrimitivesGenerated、TransformFeedbackPrimitivesWritten、TimeElapsed 或 Timestamp。\r\n            \r\n"," \r\n            Specifies the number of instances of the geometry to render.\r\n            ":" \r\n            指定要渲染的几何体实例数。\r\n            \r\n","\r\n            Original was GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B\r\n            ":"\r\n            原来是 GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B\r\n            \r\n","[length: type,stride] \r\n            Specifies a pointer to the first index in the array. The initial value is 0.\r\n            ":"[长度：类型，步幅]\r\n            指定指向数组中第一个索引的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_RGBA_INTEGER_MODE_EXT = 0x8D9E\r\n            ":"\r\n            原来是 GL_RGBA_INTEGER_MODE_EXT = 0x8D9E\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the Z, Y, and W components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Z、Y 和 W 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Defines the arguments for frame events.\r\n            A FrameEventArgs instance is only valid for the duration of the relevant event;\r\n            do not store references to FrameEventArgs outside this event.\r\n            ":"\r\n            定义帧事件的参数。\r\n            FrameEventArgs 实例仅在相关事件持续期间有效；\r\n            不要在此事件之外存储对 FrameEventArgs 的引用。\r\n            \r\n","The System.IntPtr to convert.":"要转换的 System.IntPtr。\r\n","\r\n            Original was GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 0x90CB\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 0x90CB\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify the value of a uniform variable for the current program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            为当前程序对象指定统一变量的值\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086\r\n            \r\n","\r\n            Original was GL_ASYNC_MARKER_SGIX = 0x8329\r\n            ":"\r\n            原来是 GL_ASYNC_MARKER_SGIX = 0x8329\r\n            \r\n","\r\n            Specifies the number of indices to be rendered.\r\n            ":"\r\n            指定要呈现的索引数。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8\r\n            \r\n","\r\n            Original was GL_OES_fixed_point = 1\r\n            ":"\r\n            原来是 GL_OES_fixed_point = 1\r\n            \r\n","[requires: KHR_debug]\r\n            Specify a callback to receive debugging messages from the GL\r\n            ":"[要求：KHR_debug]\r\n            指定回调以接收来自 GL 的调试消息\r\n            \r\n","The quaternion to invert":"要反转的四元数\r\n","[length: 1] \r\n            Returns the data type of the uniform variable.\r\n            ":"[长度：1]\r\n            返回统一变量的数据类型。\r\n            \r\n","\r\n            Original was GL_PACK_SKIP_PIXELS = 0x0D04\r\n            ":"\r\n            原来是 GL_PACK_SKIP_PIXELS = 0x0D04\r\n            \r\n"," \r\n            Specifies the internal format of the texture. Must be one of the following symbolic constants: CompressedRed, CompressedRg, CompressedRgb, CompressedRgba. CompressedSrgb, CompressedSrgbAlpha. DepthComponent, DepthComponent16, DepthComponent24, DepthComponent32, StencilIndex8, Red, Rg, Rgb, R3G3B2, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, Rgba16, Srgb, Srgb8, SrgbAlpha, or Srgb8Alpha8.\r\n            ":" \r\n            指定纹理的内部格式。必须是以下符号常量之一：CompressedRed、CompressedRg、CompressedRgb、CompressedRgba。压缩 Srgb，压缩 SrgbAlpha。 DepthComponent, DepthComponent16, DepthComponent24, DepthComponent32, StencilIndex8, 红色, Rg, Rgb, R3G3B2, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, Srgba16 SrgbAlpha 或 Srgb8Alpha8。\r\n            \r\n","\r\n            Occurs whenever the window is resized. \r\n            ":"\r\n            每当调整窗口大小时发生。\r\n            \r\n"," structure describing the\r\n            capabilities of a gamepad device.\r\n            ":" 描述的结构\r\n            游戏手柄设备的功能。\r\n            \r\n","[requires: ARB_indirect_parameters]":"[需要：ARB_indirect_parameters]\r\n","[requires: NV_vertex_program]\r\n            Returns a parameter from a program object\r\n            ":"[要求：NV_vertex_program]\r\n            从程序对象返回参数\r\n            \r\n","The grave key (equivaent to Tilde).":"坟墓钥匙（相当于波浪号）。\r\n","[requires: v1.0]\r\n            Set light source parameters\r\n            ":"[要求：v1.0]\r\n            设置光源参数\r\n            \r\n","\r\n            Original was GL_COLOR_BUFFER_BIT1_QCOM = 0x00000002\r\n            ":"\r\n            原来是 GL_COLOR_BUFFER_BIT1_QCOM = 0x00000002\r\n            \r\n","\r\n            Original was GL_AMD_compressed_ATC_texture = 1\r\n            ":"\r\n            原来是 GL_AMD_compressed_ATC_texture = 1\r\n            \r\n"," \r\n            The name of the object whose label to retrieve.\r\n            ":" \r\n            要检索其标签的对象的名称。\r\n            \r\n","\r\n            Gets a value between -1.0 and 1.0 representing the current offset of the specified  ":"\r\n            获取一个介于 -1.0 和 1.0 之间的值，表示指定的当前偏移量\r\n"," \r\n            The name of a texture object a subregion of which to invalidate.\r\n            ":" \r\n            要使其无效的子区域的纹理对象的名称。\r\n            \r\n","\r\n            Original was GL_OR_INVERTED = 0x150D\r\n            ":"\r\n            原来是 GL_OR_INVERTED = 0x150D\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 0x8A2C\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 0x8A2C\r\n            \r\n","\r\n            Specifies whether this structure defines an icon or a cursor. A \r\n            value of TRUE specifies an icon; FALSE specifies a cursor\r\n            ":"\r\n            指定此结构是定义图标还是光标。 A\r\n            值为 TRUE 指定一个图标； FALSE 指定游标\r\n            \r\n","\r\n            Original was GL_PURGEABLE_APPLE = 0x8A1D\r\n            ":"\r\n            原来是 GL_PURGEABLE_APPLE = 0x8A1D\r\n            \r\n","\r\n            Original was GL_CLIP_NEAR_HINT_PGI = 0x1A220\r\n            ":"\r\n            原来是 GL_CLIP_NEAR_HINT_PGI = 0x1A220\r\n            \r\n","[requires: v1.0]\r\n            Specify material parameters for the lighting model\r\n            ":"[要求：v1.0]\r\n            为光照模型指定材质参数\r\n            \r\n","\r\n            Original was GL_RASTERIZER_DISCARD = 0x8C89\r\n            ":"\r\n            原来是 GL_RASTERIZER_DISCARD = 0x8C89\r\n            \r\n","\r\n            Specifies a single-valued lighting model parameter. GL_LIGHT_MODEL_LOCAL_VIEWER, GL_LIGHT_MODEL_COLOR_CONTROL, and GL_LIGHT_MODEL_TWO_SIDE are accepted.\r\n            ":"\r\n            指定单值光照模型参数。接受 GL_LIGHT_MODEL_LOCAL_VIEWER、GL_LIGHT_MODEL_COLOR_CONTROL 和 GL_LIGHT_MODEL_TWO_SIDE。\r\n            \r\n","\r\n            Original was GL_TEXTURE_SWIZZLE_B = 0x8E44\r\n            ":"\r\n            原来是 GL_TEXTURE_SWIZZLE_B = 0x8E44\r\n            \r\n"," \r\n            Specify a linear mapping of , as presented to glEvalCoord1, to u hat, the variable that is evaluated by the equations specified by this command.\r\n            ":" \r\n            指定 的线性映射，如提供给 glEvalCoord1 的那样，到您的帽子，由此命令指定的方程式评估的变量。\r\n            \r\n","\r\n            Original was GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15\r\n            ":"\r\n            原来是 GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15\r\n            \r\n"," \r\n            Specifies the data type for data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            ":" \r\n            指定数据的数据类型。 Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A\r\n            \r\n","\r\n            Original was GL_StencilBackRef = 0X8ca3\r\n            ":"\r\n            原来是 GL_StencilBackRef = 0X8ca3\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1\r\n            \r\n"," \r\n            The Z coordinate of the near edge of the destination region.\r\n            ":" \r\n            目标区域近边缘的 Z 坐标。\r\n            \r\n","[length: target,uorder,vorder]":"[长度：目标，uorder，vorder]\r\n"," \r\n            Specifies the mipmap level of the texture image to be attached, which must be 0.\r\n            ":" \r\n            指定要附加的纹理图像的 mipmap 级别，必须为 0。\r\n            \r\n","\r\n            Specifies a symbolic constant indicating the behavior to be controlled. GL_LINE_SMOOTH_HINT, GL_POLYGON_SMOOTH_HINT, GL_TEXTURE_COMPRESSION_HINT, and GL_FRAGMENT_SHADER_DERIVATIVE_HINT are accepted.\r\n            ":"\r\n            指定一个符号常量，指示要控制的行为。接受 GL_LINE_SMOOTH_HINT、GL_POLYGON_SMOOTH_HINT、GL_TEXTURE_COMPRESSION_HINT 和 GL_FRAGMENT_SHADER_DERIVATIVE_HINT。\r\n            \r\n","\r\n            Original was GL_COMPUTE_WORK_GROUP_SIZE = 0x8267\r\n            ":"\r\n            原来是 GL_COMPUTE_WORK_GROUP_SIZE = 0x8267\r\n            \r\n","\r\n            Original was GL_LINE_STRIP_ADJACENCY = 0xB\r\n            ":"\r\n            原来是 GL_LINE_STRIP_ADJACENCY = 0xB\r\n            \r\n","\r\n            Used in GL.BlendFunc\r\n            ":"\r\n            用于 GL.BlendFunc\r\n            \r\n","\r\n            Original was GL_W_EXT = 0x87D8\r\n            ":"\r\n            原来是 GL_W_EXT = 0x87D8\r\n            \r\n","\r\n            Original was GL_ARRAY_SIZE = 0x8623\r\n            ":"\r\n            原来是 GL_ARRAY_SIZE = 0x8623\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8\r\n            \r\n","\r\n            Specifies the height of the new window, in pixels.\r\n            ":"\r\n            指定新窗口的高度，以像素为单位。\r\n            \r\n"," \r\n            Specifies a color buffer. Accepted values are Back, None, and ColorAttachmenti.\r\n            ":" \r\n            指定颜色缓冲区。接受的值为返回、无和 ColorAttachmenti。\r\n            \r\n","\r\n            Original was GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E\r\n            ":"\r\n            原来是 GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E\r\n            \r\n","\r\n            Handle to the device generating the raw input data.\r\n            ":"\r\n            处理生成原始输入数据的设备。\r\n            \r\n"," \r\n            For the scalar commands, specifies the new values to be used for the specified uniform variable.\r\n            ":" \r\n            对于标量命令，指定要用于指定统一变量的新值。\r\n            \r\n","\r\n            Original was GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6\r\n            ":"\r\n            原来是 GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF\r\n            \r\n","\r\n            Provides access to GamePad devices.\r\n            A GamePad device offers a well-defined layout with\r\n            one direction-pad, two thumbsticks, two triggers,\r\n            four main buttons (A, B, X, Y) and up to seven\r\n            auxilliary buttons.\r\n            Use ":"\r\n            提供对 GamePad 设备的访问。\r\n            GamePad 设备提供定义明确的布局\r\n            一个方向键，两个摇杆，两个扳机，\r\n            四个主要按钮（A、B、X、Y）和最多七个\r\n            辅助按钮。\r\n            使用\r\n","\r\n            Corresponding window message, for example WM_KEYDOWN, WM_SYSKEYDOWN, and so forth.\r\n            ":"\r\n            对应的窗口消息，例如WM_KEYDOWN、WM_SYSKEYDOWN等。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x8C4F\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x8C4F\r\n            \r\n","\r\n            Original was GL_CLEAR_BUFFER = 0x82B4\r\n            ":"\r\n            原来是 GL_CLEAR_BUFFER = 0x82B4\r\n            \r\n","\r\n            Original was GL_OneMinusDstColor = 0X0307\r\n            ":"\r\n            原来是 GL_OneMinusDstColor = 0X0307\r\n            \r\n","\r\n            Used in GL.HP.GetImageTransformParameter, GL.HP.ImageTransformParameter\r\n            ":"\r\n            在GL.HP.GetImageTransformParameter、GL.HP.ImageTransformParameter中使用\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519\r\n            \r\n","\r\n            Original was GL_FramebufferIncompleteMissingAttachment = 0X8cd7\r\n            ":"\r\n            原来是 GL_FramebufferIncompleteMissingAttachment = 0X8cd7\r\n            \r\n","The w component":"w 分量\r\n","\r\n            Original was GL_SAMPLES = 0X80a9\r\n            ":"\r\n            原来是 GL_SAMPLES = 0X80a9\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Creates a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            创建程序对象\r\n            \r\n","\r\n            Size of a RawInputDeviceList structure.\r\n            ":"\r\n            RawInputDeviceList 结构的大小。\r\n            \r\n","\r\n            Original was GL_PROGRAM_SEPARABLE = 0x8258\r\n            ":"\r\n            原来是 GL_PROGRAM_SEPARABLE = 0x8258\r\n            \r\n","\r\n            Specifies the window width, in pixels.\r\n            ":"\r\n            指定窗口宽度，以像素为单位。\r\n            \r\n","\r\n            Original was GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B\r\n            ":"\r\n            原来是 GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER1_ATI = 0x8826\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER1_ATI = 0x8826\r\n            \r\n","\r\n            Original was GL_SOURCE1_RGB_EXT = 0x8581\r\n            ":"\r\n            原来是 GL_SOURCE1_RGB_EXT = 0x8581\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2\r\n            ":"原来是 GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2\r\n            \r\n","\r\n            Original was GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B\r\n            ":"\r\n            原来是 GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B\r\n            \r\n","[requires: EXT_vertex_array]\r\n            Render a vertex using the specified vertex array element\r\n            ":"[需要：EXT_vertex_array]\r\n            使用指定的顶点数组元素渲染一个顶点\r\n            \r\n","\r\n            Original was GL_RGB16 = 0x8054\r\n            ":"\r\n            原来是 GL_RGB16 = 0x8054\r\n            \r\n","Specify the y coordinates, which are the top-left outside corner of the window's borders and are relative to the inside of the parent window's borders.":"指定 y 坐标，它是窗口边框的左上外角，并且相对于父窗口边框的内侧。\r\n","GetState":"获取状态\r\n","\r\n            Original was GL_QUERY_BUFFER = 0x9192\r\n            ":"\r\n            原来是 GL_QUERY_BUFFER = 0x9192\r\n            \r\n","\r\n            Original was GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D\r\n            ":"\r\n            原来是 GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A\r\n            ":"\r\n            原来是 GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT24 = 0x81A6\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT24 = 0x81A6\r\n            \r\n","\r\n            Gets or sets the X component of this instance.\r\n            ":"\r\n            获取或设置此实例的 X 组件。\r\n            \r\n","[length: drawcount,stride] \r\n            Specifies the address of an array of structures containing the draw parameters.\r\n            ":"[长度：drawcount，步幅]\r\n            指定包含绘图参数的结构数组的地址。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C\r\n            \r\n","\r\n            Original was GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843\r\n            ":"\r\n            原来是 GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD\r\n            \r\n","\r\n            Original was GL_INTENSITY_FLOAT16_APPLE = 0x881D\r\n            ":"\r\n            原来是 GL_INTENSITY_FLOAT16_APPLE = 0x881D\r\n            \r\n","\r\n            Original was GL_TEXTURE_BLUE_SIZE_EXT = 0x805E\r\n            ":"\r\n            原来是 GL_TEXTURE_BLUE_SIZE_EXT = 0x805E\r\n            \r\n","[requires: EXT_paletted_texture]\r\n            Get color lookup table parameters\r\n            ":"[需要：EXT_paletted_texture]\r\n            获取颜色查找表参数\r\n            \r\n","[requires: EXT_texture_storage]\r\n            Simultaneously specify storage for all levels of a two-dimensional texture\r\n            ":"[需要：EXT_texture_storage]\r\n            同时为二维纹理的所有级别指定存储\r\n            \r\n","\r\n            Original was GL_CON_30_ATI = 0x895F\r\n            ":"\r\n            原来是 GL_CON_30_ATI = 0x895F\r\n            \r\n"," \r\n            The index storage block within the program.\r\n            ":" \r\n            程序中的索引存储块。\r\n            \r\n","[requires: v1.0]\r\n            Define the scissor box\r\n            ":"[要求：v1.0]\r\n            定义剪刀框\r\n            \r\n","\r\n            Original was GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904\r\n            ":"\r\n            原来是 GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904\r\n            \r\n","\r\n            Original was GL_RGBA12 = 0x805A\r\n            ":"\r\n            原来是 GL_RGBA12 = 0x805A\r\n            \r\n","[requires: ATI_separate_stencil]\r\n            Set front and/or back stencil test actions\r\n            ":"[需要：ATI_separate_stencil]\r\n            设置正面和/或背面模板测试操作\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089\r\n            \r\n"," if this instance has a right digital pad button; otherwise, ":" 如果这个实例有一个正确的数字键盘按钮；否则，\r\n","\r\n            Original was GL_LINEARLIGHT_NV = 0x92A7\r\n            ":"\r\n            原来是 GL_LINEARLIGHT_NV = 0x92A7\r\n            \r\n","\r\n            Used in GL.GetBoolean, GL.GetDouble and 4 other functions\r\n            ":"\r\n            用于 GL.GetBoolean、GL.GetDouble 和其他 4 个函数\r\n            \r\n","\r\n            Original was GL_TIME_ELAPSED = 0x88BF\r\n            ":"\r\n            原来是 GL_TIME_ELAPSED = 0x88BF\r\n            \r\n","\r\n            Specifies the width of the texture image. Must be 0 or 2 sup n + 2 ( border ) for some integer .\r\n            ":"指定纹理图像的宽度。对于某个整数，必须是 0 或 2 sup n+2（边界）。\r\n            \r\n","\r\n            Used in GL.ReadnPixels, GL.ReadPixels and 7 other functions\r\n            ":"\r\n            用于GL.ReadnPixels、GL.ReadPixels等7个函数\r\n            \r\n","\r\n            Original was GL_VertexAttribArrayBufferBinding = 0X889f\r\n            ":"\r\n            原来是 GL_VertexAttribArrayBufferBinding = 0X889f\r\n            \r\n","[requires: v4.3 or ARB_compute_shader|VERSION_4_3]\r\n            Launch one or more compute work groups using parameters stored in a buffer\r\n            ":"[要求：v4.3 或 ARB_compute_shader|VERSION_4_3]\r\n            使用存储在缓冲区中的参数启动一个或多个计算工作组\r\n            \r\n","[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]\r\n            Bind a vertex array object\r\n            ":"[要求：v3.0 或 ARB_vertex_array_object|VERSION_3_0]\r\n            绑定一个顶点数组对象\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_GREEN_SIZE = 0x8D51\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_GREEN_SIZE = 0x8D51\r\n            \r\n","\r\n            Called when this window is resized.\r\n            ":"\r\n            调整此窗口大小时调用。\r\n            \r\n","\r\n            Used in GL.GetProgram\r\n            ":"\r\n            在 GL.GetProgram 中使用\r\n            \r\n","\r\n            Original was GL_VERTEX_BINDING_STRIDE = 0x82D8\r\n            ":"\r\n            原来是 GL_VERTEX_BINDING_STRIDE = 0x82D8\r\n            \r\n","\r\n            The window about which information is being requested.\r\n            ":"\r\n            请求信息的窗口。\r\n            \r\n","\r\n            Original was GL_STENCIL_BACK_FAIL_ATI = 0x8801\r\n            ":"\r\n            原来是 GL_STENCIL_BACK_FAIL_ATI = 0x8801\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Determine if a name corresponds to a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            确定名称是否对应于着色器对象\r\n            \r\n","\r\n            Original was GL_RESCALE_NORMAL = 0x803A\r\n            ":"\r\n            原来是 GL_RESCALE_NORMAL = 0x803A\r\n            \r\n"," if this hat lies in the bottom hemicircle; otherwise, ":" 如果这顶帽子位于下半圆；否则，\r\n","\r\n            Original was GL_IMAGE_CLASS_1_X_8 = 0x82C1\r\n            ":"\r\n            原来是 GL_IMAGE_CLASS_1_X_8 = 0x82C1\r\n            \r\n","[requires: v4.3 or KHR_debug|VERSION_4_3]\r\n            Push a named debug group into the command stream\r\n            ":"[要求：v4.3 或 KHR_debug|VERSION_4_3]\r\n            将命名的调试组推送到命令流中\r\n            \r\n","\r\n            Used in GL.GetProgramStage\r\n            ":"\r\n            在 GL.GetProgramStage 中使用\r\n            \r\n","\r\n            Hides the window and activates another window.\r\n            ":"\r\n            隐藏窗口并激活另一个窗口。\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_WIDTH_SGI = 0x80D9\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_WIDTH_SGI = 0x80D9\r\n            \r\n","[requires: EXT_texture_storage]":"[需要：EXT_texture_storage]\r\n","[requires: v1.0 and 1.0]\r\n            Enable or disable writing into the depth buffer\r\n            ":"[要求：v1.0 和 1.0]\r\n            启用或禁用写入深度缓冲区\r\n            \r\n","\r\n            If KeyRepeat is true, multiple KeyDown events will be generated while a key is being held.\r\n            Otherwise only one KeyDown event will be reported.\r\n            ":"\r\n            如果 KeyRepeat 为真，则在按住某个键时将生成多个 KeyDown 事件。\r\n            否则只会报告一个 KeyDown 事件。\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3\r\n            \r\n"," \r\n            Specifies the height of the renderbuffer in pixels.\r\n            ":" \r\n            以像素为单位指定渲染缓冲区的高度。\r\n            \r\n","\r\n            Original was GL_TRANSPOSE_COLOR_MATRIX = 0x84E6\r\n            ":"\r\n            原来是 GL_TRANSPOSE_COLOR_MATRIX = 0x84E6\r\n            \r\n","\r\n            Original was GL_TEXTURE24 = 0x84D8\r\n            ":"\r\n            原来是 GL_TEXTURE24 = 0x84D8\r\n            \r\n","[requires: v4.2 or ARB_shader_atomic_counters|VERSION_4_2]\r\n            Retrieve information about the set of active atomic counter buffers for a program\r\n            ":"[要求：v4.2 或 ARB_shader_atomic_counters|VERSION_4_2]\r\n            检索有关程序的活动原子计数器缓冲区集的信息\r\n            \r\n","\r\n            Gets or sets the value at row 2, column 4 of this instance.\r\n            ":"\r\n            获取或设置此实例第 2 行第 4 列的值。\r\n            \r\n","\r\n            Original was GL_TEXTURE_4D_SGIS = 0x8134\r\n            ":"\r\n            原来是 GL_TEXTURE_4D_SGIS = 0x8134\r\n            \r\n","\r\n            Original was GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2\r\n            ":"\r\n            原来是 GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2\r\n            \r\n","\r\n            Original was GL_QCOM_driver_control = 1\r\n            ":"\r\n            原来是 GL_QCOM_driver_control = 1\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Bind a renderbuffer to a renderbuffer target\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            将渲染缓冲区绑定到渲染缓冲区目标\r\n            \r\n","\r\n            Specifies the width of the new window, in pixels.\r\n            ":"\r\n            指定新窗口的宽度，以像素为单位。\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146\r\n            \r\n","\r\n            Type of the keyboard.\r\n            ":"\r\n            键盘类型。\r\n            \r\n","\r\n            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.\r\n            ":"\r\n            指定详细级别编号。级别 0 是基础映像级别。级别 n 是第 n 个 mipmap 缩减图像。\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E\r\n            \r\n","\r\n            Contains configuration options for OpenTK.\r\n            ":"\r\n            包含 OpenTK 的配置选项。\r\n            \r\n","\r\n            Original was GL_CUBIC_HP = 0x815F\r\n            ":"\r\n            原来是 GL_CUBIC_HP = 0x815F\r\n            \r\n","[requires: OES_framebuffer_object]\r\n            Attach a texture image to a framebuffer object\r\n            ":"[要求：OES_framebuffer_object]\r\n            将纹理图像附加到帧缓冲区对象\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT32_SGIX = 0x81A7\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT32_SGIX = 0x81A7\r\n            \r\n","\r\n            Used in GL.BindImageTexture\r\n            ":"\r\n            在 GL.BindImageTexture 中使用\r\n            \r\n","\r\n            Original was GL_Notequal = 0X0205\r\n            ":"\r\n            原来是 GL_Notequal = 0X0205\r\n            \r\n"," \r\n            Specifies the number of floats or doubles between the beginning of one control point and the beginning of the next one in the data structure referenced in points. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations.\r\n            ":" \r\n            指定以点为单位引用的数据结构中一个控制点的开头和下一个控制点的开头之间的浮点数或双精度数。这允许控制点嵌入任意数据结构中。唯一的限制是特定控制点的值必须占据连续的内存位置。\r\n            \r\n","\r\n            Original was GL_SOURCE0_RGB_ARB = 0x8580\r\n            ":"\r\n            原来是 GL_SOURCE0_RGB_ARB = 0x8580\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_POINTER = 0x808F\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_POINTER = 0x808F\r\n            \r\n","The last supported button of the JoystickDevice.":"JoystickDevice 的最后一个支持的按钮。\r\n","\r\n            Original was GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 0x8CA6\r\n            ":"\r\n            原来是 GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 0x8CA6\r\n            \r\n","A new Matrix3x4d which holds the result of the subtraction":"保存减法结果的新 Matrix3x4d\r\n","\r\n            Mouse indicator flags (found in winuser.h).\r\n            ":"\r\n            鼠标指示标志（在 winuser.h 中找到）。\r\n            \r\n","[requires: v2.0]\r\n            Return a generic vertex attribute parameter\r\n            ":"[要求：v2.0]\r\n            返回一个通用的顶点属性参数\r\n            \r\n","\r\n            Original was GL_TEXTURE_LIGHTING_MODE_HP = 0x8167\r\n            ":"\r\n            原来是 GL_TEXTURE_LIGHTING_MODE_HP = 0x8167\r\n            \r\n","\r\n            Original was GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8\r\n            ":"\r\n            原来是 GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8\r\n            \r\n","\r\n            Original was GL_SAMPLER_RENDERBUFFER_NV = 0x8E56\r\n            ":"\r\n            原来是 GL_SAMPLER_RENDERBUFFER_NV = 0x8E56\r\n            \r\n","\r\n            Original was GL_LUMINANCE16F_ARB = 0x881E\r\n            ":"\r\n            原来是 GL_LUMINANCE16F_ARB = 0x881E\r\n            \r\n","\r\n            Original was GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309\r\n            ":"\r\n            原来是 GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309\r\n            \r\n","An IGraphicsContext to share resources with.":"与之共享资源的 IGraphicsContext。\r\n","\r\n            Number of LED indicators on the keyboard.\r\n            ":"\r\n            键盘上的 LED 指示灯数量。\r\n            \r\n"," \r\n            Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.\r\n            ":" \r\n            指定帧缓冲区的附加点。附件必须是 ColorAttachmenti、DepthAttachment、StencilAttachment 或 DepthStencilAttachment。\r\n            \r\n","The size, in bytes, of the MouseMovePoint structure.":"MouseMovePoint 结构的大小（以字节为单位）。\r\n","[length: count] \r\n            Points to an array of starting indices in the enabled arrays.\r\n            ":"[长度：计数]\r\n            指向已启用数组中的起始索引数组。\r\n            \r\n","\r\n            Original was GL_MAX_ELEMENTS_INDICES = 0x80E9\r\n            ":"\r\n            原来是 GL_MAX_ELEMENTS_INDICES = 0x80E9\r\n            \r\n"," if this instance has a right thumbstick with a y-axis; otherwise, ":" 如果这个实例有一个带有 y 轴的右摇杆；否则，\r\n","\r\n            Original was GL_FIXED_OES = 0x140C\r\n            ":"\r\n            原来是 GL_FIXED_OES = 0x140C\r\n            \r\n","The conjugate of the given quaternion":"给定四元数的共轭\r\n","[requires: v1.2]\r\n            Specify a three-dimensional texture subimage\r\n            ":"[要求：v1.2]\r\n            指定三维纹理子图像\r\n            \r\n"," \r\n            Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.\r\n            ":" \r\n            指定连续通用顶点属性之间的字节偏移量。如果步幅为 0，则通用顶点属性被理解为紧密打包在数组中。初始值为 0。\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_1D_EXT = 0x8063\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_1D_EXT = 0x8063\r\n            \r\n","\r\n            Original was GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1\r\n            ":"\r\n            原来是 GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1\r\n            \r\n","\r\n            Original was GL_DEPTH_BUFFER_BIT5_QCOM = 0x00002000\r\n            ":"\r\n            原来是 GL_DEPTH_BUFFER_BIT5_QCOM = 0x00002000\r\n            \r\n","\r\n            Occurs when a key is released.\r\n            ":"\r\n            释放按键时发生。\r\n            \r\n","The second axis of the JoystickDevice.":"JoystickDevice 的第二轴。\r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER6_NV = 0x882B\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER6_NV = 0x882B\r\n            \r\n","\r\n            Original was GL_INTENSITY16F_ARB = 0x881D\r\n            ":"\r\n            原来是 GL_INTENSITY16F_ARB = 0x881D\r\n            \r\n","\r\n            Converts this instance into it's inverse by inverting the upper-left 3x3 and replacing Row3.\r\n            ":"\r\n            通过反转左上角的 3x3 并替换 Row3 将此实例转换为它的逆。\r\n            \r\n","\r\n            Constructs a new KeyboardEventArgs instance.\r\n            ":"\r\n            构造一个新的 KeyboardEventArgs 实例。\r\n            \r\n","\r\n            B button\r\n            ":"\r\n            B键\r\n            \r\n","[requires: ARB_vertex_buffer_object]\r\n            Creates and initializes a buffer object's data store\r\n            ":"[需要：ARB_vertex_buffer_object]\r\n            创建并初始化缓冲区对象的数据存储\r\n            \r\n","\r\n            Original was GL_FACTOR_MAX_AMD = 0x901D\r\n            ":"\r\n            原来是 GL_FACTOR_MAX_AMD = 0x901D\r\n            \r\n","\r\n            Original was GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F\r\n            ":"\r\n            原来是 GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F\r\n            \r\n"," \r\n            Specifies a combination of access flags indicating the desired access to the range.\r\n            ":" \r\n            指定访问标志的组合，指示对范围的所需访问。\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_8_BITS = 0x82CB\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_8_BITS = 0x82CB\r\n            \r\n","\r\n            Original was GL_REG_14_ATI = 0x892F\r\n            ":"\r\n            原来是 GL_REG_14_ATI = 0x892F\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7\r\n            \r\n","\r\n            Used in GL.Arb.GetVertexAttrib, GL.Arb.GetVertexAttribL and 1 other function\r\n            ":"\r\n            用于 GL.Arb.GetVertexAttrib、GL.Arb.GetVertexAttribL 和 1 个其他函数\r\n            \r\n"," \r\n            Specifies the numeric format whose precision and range to query.\r\n            ":" \r\n            指定要查询的精度和范围的数值格式。\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the Z, W, and X components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Z、W 和 X 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Creates an IWindowInfo instance for the Mac OS X platform with an X and Y offset for the GL viewport location.\r\n            ":"\r\n            使用 GL 视口位置的 X 和 Y 偏移量为 Mac OS X 平台创建一个 IWindowInfo 实例。\r\n            \r\n","\r\n            Original was GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2\r\n            ":"\r\n            原来是 GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2\r\n            \r\n"," \r\n            Specifies the size of the character buffer for storing the returned source code string.\r\n            ":" \r\n            指定用于存储返回的源代码字符串的字符缓冲区的大小。\r\n            \r\n","[requires: EXT_coordinate_frame]":"[需要：EXT_coordinate_frame]\r\n","\r\n            Original was GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132\r\n            ":"\r\n            原来是 GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Generate framebuffer object names\r\n            ":"[需要：EXT_framebuffer_object]\r\n            生成帧缓冲区对象名称\r\n            \r\n","\r\n            Original was GL_PATH_GEN_COMPONENTS_NV = 0x90B3\r\n            ":"\r\n            原来是 GL_PATH_GEN_COMPONENTS_NV = 0x90B3\r\n            \r\n"," \r\n            If True, pixels will be consumed by the histogramming process and no drawing or texture loading will take place. If False, pixels will proceed to the minmax process after histogramming.\r\n            ":" \r\n            如果为 True，直方图过程将消耗像素，并且不会发生绘图或纹理加载。如果为 False，像素将在直方图绘制后进行 minmax 处理。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1\r\n            \r\n"," \r\n            Specifies the width of the texture image. All implementations support 2D and cube-mapped texture images that are at least 2048 texels wide.\r\n            ":" \r\n            指定纹理图像的宽度。所有实现都支持至少 2048 纹素宽的 2D 和立方体贴图纹理图像。\r\n            \r\n","\r\n            Original was GL_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D\r\n            ":"\r\n            原来是 GL_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D\r\n            \r\n","\r\n            Used in GL.NV.FlushPixelDataRange, GL.NV.PixelDataRange\r\n            ":"\r\n            用于GL.NV.FlushPixelDataRange, GL.NV.PixelDataRange\r\n            \r\n"," \r\n            Specifies the size of the range of the buffer's data store to attach.\r\n            ":" \r\n            指定要附加的缓冲区数据存储范围的大小。\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C\r\n            \r\n","\r\n            Original was GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835\r\n            ":"\r\n            原来是 GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835\r\n            \r\n","[length: name] \r\n            The name of the user-defined varying out variable whose binding to modify\r\n            ":"[长度：姓名]\r\n            要修改其绑定的用户定义变量的名称\r\n            \r\n","[length: name]":"[长度：姓名]\r\n","\r\n            Original was GL_OPERAND0_ALPHA_EXT = 0x8598\r\n            ":"\r\n            原来是 GL_OPERAND0_ALPHA_EXT = 0x8598\r\n            \r\n","\r\n            Original was GL_RenderbufferBlueSize = 0X8d52\r\n            ":"\r\n            原来是 GL_RenderbufferBlueSize = 0X8d52\r\n            \r\n","\r\n            Original was GL_FEEDBACK_BUFFER_SIZE = 0x0DF1\r\n            ":"\r\n            原来是 GL_FEEDBACK_BUFFER_SIZE = 0x0DF1\r\n            \r\n","\r\n            Original was GL_RG8_SNORM = 0x8F95\r\n            ":"\r\n            原来是 GL_RG8_SNORM = 0x8F95\r\n            \r\n","\r\n            Original was GL_MIRRORED_REPEAT_ARB = 0x8370\r\n            ":"\r\n            原来是 GL_MIRRORED_REPEAT_ARB = 0x8370\r\n            \r\n"," \r\n            Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.\r\n            ":" \r\n            指定缓冲区对象绑定到的目标。符号常量必须是 ArrayBuffer 或 ElementArrayBuffer。\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24\r\n            \r\n","[requires: ARB_vertex_program|ARB_vertex_shader]":"[需要：ARB_vertex_program|ARB_vertex_shader]\r\n","\r\n            Original was GL_TEXTURE_3D_EXT = 0x806F\r\n            ":"\r\n            原来是 GL_TEXTURE_3D_EXT = 0x806F\r\n            \r\n","[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]\r\n            Invalidate the content of a region of some or all of a framebuffer object's attachments\r\n            ":"[要求：v4.3 或 ARB_invalidate_subdata|VERSION_4_3]\r\n            使部分或全部帧缓冲区对象附件的区域内容无效\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1\r\n            \r\n","[requires: v1.3][deprecated: v3.2]\r\n            Multiply the current matrix with the specified row-major ordered matrix\r\n            ":"[要求：v1.3][弃用：v3.2]\r\n            将当前矩阵与指定的行优先有序矩阵相乘\r\n            \r\n","\r\n            Original was GL_PRIMITIVES_GENERATED_EXT = 0x8C87\r\n            ":"\r\n            原来是 GL_PRIMITIVES_GENERATED_EXT = 0x8C87\r\n            \r\n","\r\n            Original was GL_UNPACK_SKIP_PIXELS = 0x0CF4\r\n            ":"\r\n            原来是 GL_UNPACK_SKIP_PIXELS = 0x0CF4\r\n            \r\n","\r\n            Called when the WindowInfo for this GameWindow has changed.\r\n            ":"\r\n            当此 GameWindow 的 WindowInfo 已更改时调用。\r\n            \r\n","\r\n            Original was GL_QUERY_OBJECT_EXT = 0x9153\r\n            ":"原来是 GL_QUERY_OBJECT_EXT = 0x9153\r\n            \r\n","\r\n            Original was GL_READ_FRAMEBUFFER_BINDING = 0x8CAA\r\n            ":"\r\n            原来是 GL_READ_FRAMEBUFFER_BINDING = 0x8CAA\r\n            \r\n"," \r\n            Specifies the name of the program containing shader stage.\r\n            ":" \r\n            指定包含着色器阶段的程序的名称。\r\n            \r\n","\r\n            Original was GL_SIGNED_ALPHA_NV = 0x8705\r\n            ":"\r\n            原来是 GL_SIGNED_ALPHA_NV = 0x8705\r\n            \r\n","[length: 3] \r\n            Specify the , ,  coordinates for the raster position.\r\n            ":"[长度：3]\r\n            指定光栅位置的 , , 坐标。\r\n            \r\n","\r\n            Original was GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24\r\n            \r\n","\r\n            Original was GL_TESSELLATION_FACTOR_AMD = 0x9005\r\n            ":"\r\n            原来是 GL_TESSELLATION_FACTOR_AMD = 0x9005\r\n            \r\n","[in] Handle to the window.":"[in] 窗口句柄。\r\n","\r\n            Provides cross-platform utilities to help interact with the underlying platform.\r\n            ":"\r\n            提供跨平台实用程序以帮助与底层平台交互。\r\n            \r\n"," \r\n            Specify the coordinate of the bottom left corner of the scissor box, in pixels.\r\n            ":" \r\n            指定剪刀框左下角的坐标，以像素为单位。\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D\r\n            \r\n","\r\n            Original was GL_LUMINANCE8I_EXT = 0x8D92\r\n            ":"原来是 GL_LUMINANCE8I_EXT = 0x8D92\r\n            \r\n","\r\n            Original was GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850\r\n            ":"\r\n            原来是 GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850\r\n            \r\n","\r\n            Retrieves a history of up to 64 previous coordinates of the mouse or pen.\r\n            ":"\r\n            检索最多 64 个鼠标或笔的先前坐标的历史记录。\r\n            \r\n","\r\n            Original was GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360\r\n            ":"\r\n            原来是 GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58\r\n            ":"原来是 GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58\r\n            \r\n","\r\n            Original was GL_STREAM_COPY = 0x88E2\r\n            ":"\r\n            原来是 GL_STREAM_COPY = 0x88E2\r\n            \r\n"," \r\n            Specifies the name of the renderbuffer object to bind.\r\n            ":" \r\n            指定要绑定的渲染缓冲区对象的名称。\r\n            \r\n","\r\n            Original was GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E\r\n            ":"\r\n            原来是 GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E\r\n            \r\n","\r\n            Used in GL.Sgix.Deform, GL.Sgix.LoadIdentityDeformationMap\r\n            ":"\r\n            用于GL.Sgix.Deform, GL.Sgix.LoadIdentityDeformationMap\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_LIST_IBM = 103072\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_LIST_IBM = 103072\r\n            \r\n","[length: n] \r\n            Specifies an array containing the names of the textures to be queried.\r\n            ":"[长度：n]\r\n            指定一个包含要查询的纹理名称的数组。\r\n            \r\n","[requires: v1.0]\r\n            Select flat or smooth shading\r\n            ":"[要求：v1.0]\r\n            选择平坦或平滑的阴影\r\n            \r\n","The keypad 9 key.":"键盘 9 键。\r\n","\r\n            Used in GL.GetBufferPointer, GL.GetNamedBufferPointer and 1 other function\r\n            ":"\r\n            用于 GL.GetBufferPointer、GL.GetNamedBufferPointer 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_HALF_FLOAT_NV = 0x140B\r\n            ":"\r\n            原来是 GL_HALF_FLOAT_NV = 0x140B\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009\r\n            \r\n","\r\n            Original was GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7\r\n            ":"\r\n            原来是 GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7\r\n            \r\n","\r\n            Original was GL_LUMINANCE8_SNORM = 0x9015\r\n            ":"\r\n            原来是 GL_LUMINANCE8_SNORM = 0x9015\r\n            \r\n","\r\n            Occurs when the mouse's position is moved.\r\n            ":"\r\n            移动鼠标位置时发生。\r\n            \r\n"," \r\n            Specifies a texel offset in the z direction within the texture array.\r\n            ":" \r\n            指定纹理数组中 z 方向上的纹素偏移。\r\n            \r\n","\r\n            Original was GL_TRIANGLES = 0X0004\r\n            ":"\r\n            原来是 GL_TRIANGLES = 0X0004\r\n            \r\n","\r\n            Original was GL_FILTER = 0x829A\r\n            ":"\r\n            原来是 GL_FILTER = 0x829A\r\n            \r\n","[requires: AMD_performance_monitor]":"[需要：AMD_performance_monitor]\r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE\r\n            \r\n","\r\n            This class contains all OpenGL enums and functions defined in the latest OpenGL specification.\r\n            The official .spec files can be found at: http://opengl.org/registry/.\r\n            ":"\r\n            此类包含最新 OpenGL 规范中定义的所有 OpenGL 枚举和函数。\r\n            可以在以下位置找到官方 .spec 文件：http://opengl.org/registry/。\r\n            \r\n","The F28 key.":"F28 键。\r\n","The keypad 3 key.":"键盘 3 键。\r\n","\r\n            Original was GL_PROXY_TEXTURE_1D = 0x8063\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_1D = 0x8063\r\n            \r\n","\r\n            Original was GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB\r\n            ":"\r\n            原来是 GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F\r\n            \r\n","\r\n            Used in GL.Ext.DrawBuffers, GL.NV.DrawBuffers\r\n            ":"\r\n            用于GL.Ext.DrawBuffers、GL.NV.DrawBuffers\r\n            \r\n","When the display mode is changed dynamically, the WM_DISPLAYCHANGE message is sent to all running applications.":"当显示模式动态更改时，WM_DISPLAYCHANGE 消息将发送到所有正在运行的应用程序。\r\n"," instance to test for inequality.":" 测试不平等的例子。\r\n"," for the mouse cursor.\r\n            The X and Y coordinates are defined in absolute desktop points, with the origin\r\n            placed at the top-left corner of ":" 对于鼠标光标。\r\n            X 和 Y 坐标以绝对桌面点定义，原点\r\n            放置在左上角\r\n","[length: size,type,stride] \r\n            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.\r\n            ":"[长度：尺寸、类型、步幅]\r\n            指定指向数组中第一个通用顶点属性的第一个组件的指针。初始值为 0。\r\n            \r\n","[requires: EXT_multisampled_render_to_texture]\r\n            Establish data storage, format, dimensions and sample count of a renderbuffer object's image\r\n            ":"[需要：EXT_multisampled_render_to_texture]\r\n            建立渲染缓冲区对象图像的数据存储、格式、尺寸和样本计数\r\n            \r\n","[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]\r\n            Retrieve the name of an active uniform block\r\n            ":"[要求：v3.1 或 ARB_uniform_buffer_object|VERSION_3_1]\r\n            检索活动统一块的名称\r\n            \r\n","\r\n            Original was GL_TEXTURE18 = 0x84D2\r\n            ":"\r\n            原来是 GL_TEXTURE18 = 0x84D2\r\n            \r\n","\r\n            Original was GL_Z_EXT = 0x87D7\r\n            ":"\r\n            原来是 GL_Z_EXT = 0x87D7\r\n            \r\n","\r\n            An input, WM_TIMER, WM_PAINT, WM_HOTKEY, or posted message is in the queue.\r\n            ":"\r\n            输入、WM_TIMER、WM_PAINT、WM_HOTKEY 或发布的消息在队列中。\r\n            \r\n","\r\n            Original was GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257\r\n            ":"\r\n            原来是 GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257\r\n            \r\n","[length: pname] \r\n            The address of a variable to receive the value of the parameter named pname.\r\n            ":"[长度：pname]\r\n            接收名为 pname 的参数值的变量的地址。\r\n            \r\n","\r\n            Original was GL_TEXTURE_DEPTH_EXT = 0x8071\r\n            ":"\r\n            原来是 GL_TEXTURE_DEPTH_EXT = 0x8071\r\n            \r\n","[requires: v1.0]\r\n            Delete named buffer objects\r\n            ":"[要求：v1.0]\r\n            删除命名缓冲区对象\r\n            \r\n","[requires: OES_vertex_array_object]\r\n            Determine if a name corresponds to a vertex array object\r\n            ":"[要求：OES_vertex_array_object]\r\n            判断名称是否对应于顶点数组对象\r\n            \r\n","\r\n            Original was GL_FRAGMENT_SHADER_ARB = 0x8B30\r\n            ":"\r\n            原来是 GL_FRAGMENT_SHADER_ARB = 0x8B30\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517\r\n            \r\n","\r\n            Used in GL.Apple.FenceSync, GL.FenceSync\r\n            ":"\r\n            用于GL.Apple.FenceSync, GL.FenceSync\r\n            \r\n","\r\n            Original was GL_RESET_NOTIFICATION_STRATEGY_KHR = 0x8256\r\n            ":"\r\n            原来是 GL_RESET_NOTIFICATION_STRATEGY_KHR = 0x8256\r\n            \r\n","\r\n            Original was GL_TEXTURE_NORMAL_EXT = 0x85AF\r\n            ":"\r\n            原来是 GL_TEXTURE_NORMAL_EXT = 0x85AF\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4\r\n            \r\n","\r\n            Original was GL_SampleBuffers = 0X80a8\r\n            ":"\r\n            原来是 GL_SampleBuffers = 0X80a8\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C\r\n            ":"\r\n            原来是 GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C\r\n            \r\n","\r\n            Pop the active debug group\r\n            ":"\r\n            弹出活动调试组\r\n            \r\n","\r\n            Original was GL_COORD_REPLACE = 0x8862\r\n            ":"\r\n            原来是 GL_COORD_REPLACE = 0x8862\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Enable or disable client-side capability\r\n            ":"[要求：v1.0 和 1.0]\r\n            启用或禁用客户端功能\r\n            \r\n","\r\n            Gets a System.String containing a unique description for this instance.\r\n            ":"\r\n            获取包含此实例的唯一描述的 System.String。\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C\r\n            ":"\r\n            原来是 GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C\r\n            \r\n"," \r\n            Specifies the size in bytes of the buffer object's new data store.\r\n            ":" \r\n            指定缓冲区对象的新数据存储的字节大小。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 0x8519\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 0x8519\r\n            \r\n"," \r\n            Specifies the size in bytes of the data store region being replaced.\r\n            ":" \r\n            指定被替换的数据存储区域的大小（以字节为单位）。\r\n            \r\n","\r\n            Original was GL_RECIP_ADD_SIGNED_ALPHA_IMG = 0x8C05\r\n            ":"原来是 GL_RECIP_ADD_SIGNED_ALPHA_IMG = 0x8C05\r\n            \r\n","\r\n            Gets a System.Boolean indicating whether the specified JoystickButton is pressed.\r\n            ":"\r\n            获取一个 System.Boolean，指示指定的 JoystickButton 是否被按下。\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER_EXT = 0x8C2A\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_EXT = 0x8C2A\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT32 = 0x81a7\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT32 = 0x81a7\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 0x8CD9\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 0x8CD9\r\n            \r\n","\r\n            Original was GL_RGBA2_EXT = 0x8055\r\n            ":"\r\n            原来是 GL_RGBA2_EXT = 0x8055\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Clear buffers to preset values\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            清除缓冲区以预设值\r\n            \r\n","\r\n            Original was GL_REG_31_ATI = 0x8940\r\n            ":"\r\n            原来是 GL_REG_31_ATI = 0x8940\r\n            \r\n","\r\n            Original was GL_POLYGON_OFFSET_FACTOR = 0x8038\r\n            ":"\r\n            原来是 GL_POLYGON_OFFSET_FACTOR = 0x8038\r\n            \r\n","[requires: ATI_map_object_buffer]":"[需要：ATI_map_object_buffer]\r\n","\r\n            Original was GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0\r\n            ":"\r\n            原来是 GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0\r\n            \r\n","[length: 1] \r\n            Returns the requested object parameter.\r\n            ":"[长度：1]\r\n            返回请求的对象参数。\r\n            \r\n"," with the name of the specified device or ":" 使用指定设备的名称或\r\n"," \r\n            Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.\r\n            ":" \r\n            指定绑定点，在程序中使用索引 uniformBlockIndex 将统一块绑定到该绑定点。\r\n            \r\n","\r\n            Original was GL_PACK_IMAGE_DEPTH_SGIS = 0x8131\r\n            ":"\r\n            原来是 GL_PACK_IMAGE_DEPTH_SGIS = 0x8131\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 0x9137\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 0x9137\r\n            \r\n","\r\n            Gets or sets the external width of this window.\r\n            ":"\r\n            获取或设置此窗口的外部宽度。\r\n            \r\n","\r\n            Original was GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC\r\n            ":"原来是 GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC\r\n            \r\n","\r\n            Original was GL_T2F_IUI_N3F_V2F_EXT = 0x81B3\r\n            ":"\r\n            原来是 GL_T2F_IUI_N3F_V2F_EXT = 0x81B3\r\n            \r\n"," \r\n            Specifies the address of an array of structures containing the draw parameters.\r\n            ":" \r\n            指定包含绘图参数的结构数组的地址。\r\n            \r\n","This constructor assumes that the NSWindow's contentView is the NSView we want to attach to our context.":"此构造函数假定 NSWindow 的 contentView 是我们要附加到上下文的 NSView。\r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Modify the rate at which generic vertex attributes advance during instanced rendering\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            修改实例化渲染期间通用顶点属性前进的速率\r\n            \r\n","All coordinates are device coordinates.":"所有坐标都是设备坐标。\r\n","\r\n            Original was GL_LOCATION_INDEX = 0x930F\r\n            ":"\r\n            原来是 GL_LOCATION_INDEX = 0x930F\r\n            \r\n","\r\n            Describes a pixel format. It is used when interfacing with the WINAPI to create a new Context.\r\n            Found in WinGDI.h\r\n            ":"\r\n            描述像素格式。在与 WINAPI 交互以创建新上下文时使用它。\r\n            在 WinGDI.h 中找到\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_RED_SIZE = 0x80DA\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_RED_SIZE = 0x80DA\r\n            \r\n","\r\n            Used in GL.GetBoolean, GL.GetFloat and 1 other function\r\n            ":"\r\n            用于 GL.GetBoolean、GL.GetFloat 和其他 1 个函数\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Delimit the boundaries of a query object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            划定查询对象的边界\r\n            \r\n","[requires: EXT_disjoint_timer_query]\r\n            Return parameters of a query object\r\n            ":"[需要：EXT_disjoint_timer_query]\r\n            查询对象的返回参数\r\n            \r\n"," \r\n            for glBlendEquationSeparatei, specifies the index of the draw buffer for which to set the blend equations.\r\n            ":" \r\n            对于 glBlendEquationSeparatei，指定要为其设置混合方程的绘制缓冲区的索引。\r\n            \r\n","[requires: v1.5]\r\n            Returns a subset of a buffer object's data store\r\n            ":"[要求：v1.5]\r\n            返回缓冲区对象数据存储的子集\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274\r\n            \r\n","\r\n            Original was GL_INCR = 0x1E02\r\n            ":"\r\n            原来是 GL_INCR = 0x1E02\r\n            \r\n","[length: uniformCount] \r\n            Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.\r\n            ":"[长度：uniformCount]\r\n            指定 uniformCount 整数数组的地址，其中包含应查询其参数 pname 的程序内制服的索引。\r\n            \r\n","\r\n            Used in GL.FramebufferRenderbuffer, GL.FramebufferTexture2D and 1 other function\r\n            ":"\r\n            用于 GL.FramebufferRenderbuffer、GL.FramebufferTexture2D 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_SPRITE_TRANSLATION_SGIX = 0x814B\r\n            ":"\r\n            原来是 GL_SPRITE_TRANSLATION_SGIX = 0x814B\r\n            \r\n","\r\n            Original was GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1\r\n            ":"原来是 GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1\r\n            \r\n","\r\n            Original was GL_STATIC_VERTEX_ARRAY_IBM = 103061\r\n            ":"\r\n            原来是 GL_STATIC_VERTEX_ARRAY_IBM = 103061\r\n            \r\n","\r\n            Original was GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2\r\n            ":"\r\n            原来是 GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2\r\n            \r\n","\r\n            Used in GL.NV.MultiDrawArraysIndirectBindlessCount, GL.NV.MultiDrawElementsIndirectBindlessCount\r\n            ":"\r\n            用于GL.NV.MultiDrawArraysIndirectBindlessCount, GL.NV.MultiDrawElementsIndirectBindlessCount\r\n            \r\n","\r\n            Original was GL_REPLICATE_BORDER = 0x8153\r\n            ":"\r\n            原来是 GL_REPLICATE_BORDER = 0x8153\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_DIMENSIONS = 0x8282\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_DIMENSIONS = 0x8282\r\n            \r\n","The resulting Matrix3x2d instance.":"生成的 Matrix3x2d 实例。\r\n","\r\n            Original was GL_POINT_SPRITE_ARB = 0x8861\r\n            ":"\r\n            原来是 GL_POINT_SPRITE_ARB = 0x8861\r\n            \r\n","\r\n            Original was GL_DST_IN_NV = 0x928B\r\n            ":"\r\n            原来是 GL_DST_IN_NV = 0x928B\r\n            \r\n","[length: 16]":"[长度：16]\r\n","[requires: v1.0][deprecated: v3.2]":"[要求：v1.0][弃用：v3.2]\r\n","\r\n            Original was GL_GPU_OPTIMIZED_QCOM = 0x8FB2\r\n            ":"\r\n            原来是 GL_GPU_OPTIMIZED_QCOM = 0x8FB2\r\n            \r\n","Only one client at a time can select a ButtonPress event, which is associated with the event mask ButtonPressMask. ":"一次只有一个客户端可以选择 ButtonPress 事件，该事件与事件掩码 ButtonPressMask 关联。\r\n","\r\n            Original was GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA\r\n            ":"\r\n            原来是 GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA\r\n            \r\n","Third item of the fourth row of the matrix.":"矩阵第四行的第三项。\r\n","[requires: EXT_histogram]\r\n            Get histogram table\r\n            ":"[需要：EXT_histogram]\r\n            获取直方图表\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_DEPTH_SIZE_OES = 0x8D54\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_DEPTH_SIZE_OES = 0x8D54\r\n            \r\n","[requires: IMG_user_clip_plane]\r\n            Specify a plane against which all geometry is clipped\r\n            ":"[需要：IMG_user_clip_plane]\r\n            指定一个平面，所有几何图形都将根据该平面进行剪裁\r\n            \r\n","[length: count*4] \r\n            For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.\r\n            ":"[长度：计数*4]\r\n            对于向量和矩阵命令，指定一个指向计数值数组的指针，该数组将用于更新指定的统一变量。\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER = 0x8D41\r\n            ":"\r\n            原来是 GL_RENDERBUFFER = 0x8D41\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_FORMAT_EXT = 0x8027\r\n            ":"\r\n            原来是 GL_HISTOGRAM_FORMAT_EXT = 0x8027\r\n            \r\n","[length: numCommands]":"[长度：numCommands]\r\n","\r\n            Original was GL_COMBINER_AB_OUTPUT_NV = 0x854A\r\n            ":"\r\n            原来是 GL_COMBINER_AB_OUTPUT_NV = 0x854A\r\n            \r\n","\r\n            Original was GL_SRC0_RGB = 0x8580\r\n            ":"\r\n            原来是 GL_SRC0_RGB = 0x8580\r\n            \r\n","\r\n            Original was GL_CON_5_ATI = 0x8946\r\n            ":"\r\n            原来是 GL_CON_5_ATI = 0x8946\r\n            \r\n","\r\n            Original was GL_VERTEX_PRECLIP_SGIX = 0x83EE\r\n            ":"\r\n            原来是 GL_VERTEX_PRECLIP_SGIX = 0x83EE\r\n            \r\n","\r\n            is false, then this value will be ":"\r\n            是假的，那么这个值将是\r\n","[requires: QCOM_driver_control]":"[要求：QCOM_driver_control]\r\n","\r\n            Original was GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3\r\n            ":"\r\n            原来是 GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3\r\n            \r\n","\r\n            Original was GL_MAX_PATCH_VERTICES = 0x8E7D\r\n            ":"\r\n            原来是 GL_MAX_PATCH_VERTICES = 0x8E7D\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_API_KHR = 0x8246\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_API_KHR = 0x8246\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 0x8E83\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 0x8E83\r\n            \r\n","[requires: v3.3 or ARB_blend_func_extended|VERSION_3_3]\r\n            Query the bindings of color indices to user-defined varying out variables\r\n            ":"[要求：v3.3 或 ARB_blend_func_extended|VERSION_3_3]\r\n            查询颜色索引与用户定义的变化变量的绑定\r\n            \r\n","[length: 2] \r\n            Specify s, t, r, and q  texture coordinates. Not all parameters are present in all forms of the command.\r\n            ":"[长度：2]\r\n            指定 s、t、r 和 q 纹理坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n","\r\n            Original was GL_MATRIX20 = 0x88D4\r\n            ":"\r\n            原来是 GL_MATRIX20 = 0x88D4\r\n            \r\n","\r\n            Original was GL_FIRST_TO_REST_NV = 0x90AF\r\n            ":"\r\n            原来是 GL_FIRST_TO_REST_NV = 0x90AF\r\n            \r\n","\r\n            Original was GL_MATRIX_EXT = 0x87C0\r\n            ":"\r\n            原来是 GL_MATRIX_EXT = 0x87C0\r\n            \r\n","\r\n            Original was GL_BLUE_BITS = 0x0D54\r\n            ":"\r\n            原来是 GL_BLUE_BITS = 0x0D54\r\n            \r\n","\r\n            Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP.\r\n            ":"\r\n            指定模板测试通过但深度测试失败时的模板操作。 dpfail 接受与 sfail 相同的符号常量。初始值为 GL_KEEP。\r\n            \r\n","\r\n            Used in GL.Amd.SetMultisample\r\n            ":"\r\n            用于 GL.Amd.SetMultisample\r\n            \r\n","\r\n            Gets or sets the value at row 1, column 4 of this instance.\r\n            ":"\r\n            获取或设置此实例第 1 行第 4 列的值。\r\n            \r\n","\r\n            Used in GL.GetFramebufferAttachmentParameter, GL.GetNamedFramebufferAttachmentParameter\r\n            ":"\r\n            用于GL.GetFramebufferAttachmentParameter、GL.GetNamedFramebufferAttachmentParameter\r\n            \r\n","\r\n            Original was GL_UNPACK_ALIGNMENT = 0x0CF5\r\n            ":"\r\n            原来是 GL_UNPACK_ALIGNMENT = 0x0CF5\r\n            \r\n"," \r\n            The level of texture containing the region to be cleared.\r\n            ":" \r\n            包含要清除的区域的纹理级别。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return texture parameter values\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回纹理参数值\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Return the coefficients of the specified clipping plane\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            返回指定裁剪平面的系数\r\n            \r\n","\r\n            Original was GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841\r\n            ":"\r\n            原来是 GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841\r\n            \r\n","\r\n            Original was GL_Texture27 = 0X84db\r\n            ":"\r\n            原来是 GL_Texture27 = 0X84db\r\n            \r\n","\r\n            Original was GL_TABLE_TOO_LARGE_EXT = 0x8031\r\n            ":"\r\n            原来是 GL_TABLE_TOO_LARGE_EXT = 0x8031\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Set light source parameters\r\n            ":"[要求：v1.0 和 1.0]\r\n            设置光源参数\r\n            \r\n","\r\n            Original was GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F\r\n            ":"\r\n            原来是 GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F\r\n            \r\n","\r\n            Original was GL_SAMPLE_COVERAGE_INVERT = 0x80AB\r\n            ":"\r\n            原来是 GL_SAMPLE_COVERAGE_INVERT = 0x80AB\r\n            \r\n","\r\n            Original was GL_SLUMINANCE_ALPHA_EXT = 0x8C44\r\n            ":"\r\n            原来是 GL_SLUMINANCE_ALPHA_EXT = 0x8C44\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC\r\n            \r\n","\r\n            Original was GL_SYNC_CONDITION_APPLE = 0x9113\r\n            ":"\r\n            原来是 GL_SYNC_CONDITION_APPLE = 0x9113\r\n            \r\n","[length: 1] \r\n            The address of a variable to receive the length of the object label.\r\n            ":"[长度：1]\r\n            接收对象标签长度的变量地址。\r\n            \r\n","\r\n            Original was GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16\r\n            ":"\r\n            原来是 GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16\r\n            \r\n","\r\n            Original was GL_TEXTURE7 = 0x84C7\r\n            ":"\r\n            原来是 GL_TEXTURE7 = 0x84C7\r\n            \r\n","The second button of the JoystickDevice.":"JoystickDevice 的第二个按钮。\r\n","[length: n*2]":"[长度：n*2]\r\n","\r\n            Used in GL.Arb.BufferData\r\n            ":"\r\n            在 GL.Arb.BufferData 中使用\r\n            \r\n","[requires: NV_transform_feedback2]\r\n            Pause transform feedback operations\r\n            ":"[需要：NV_transform_feedback2]\r\n            暂停变换反馈操作\r\n            \r\n"," \r\n            Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.\r\n            ":" \r\n            指定在访问定点数据值时是应该将它们归一化 (True) 还是直接转换为定点值 (False)。\r\n            \r\n","\r\n            Original was GL_EVAL_TRIANGULAR_2D_NV = 0x86C1\r\n            ":"\r\n            原来是 GL_EVAL_TRIANGULAR_2D_NV = 0x86C1\r\n            \r\n","\r\n            Original was GL_PATH_STENCIL_REF_NV = 0x90B8\r\n            ":"\r\n            原来是 GL_PATH_STENCIL_REF_NV = 0x90B8\r\n            \r\n","\r\n            Detects the unix kernel by p/invoking uname (libc).\r\n            ":"\r\n            通过 p/调用 uname (libc) 检测 unix 内核。\r\n            \r\n","\r\n            Used in GL.Ext.ImportSync\r\n            ":"\r\n            在 GL.Ext.ImportSync 中使用\r\n            \r\n","\r\n            Used in GL.DrawArraysIndirect, GL.DrawElementsIndirect\r\n            ":"\r\n            在 GL.DrawArraysIndirect, GL.DrawElementsIndirect 中使用\r\n            \r\n","\r\n            Original was GL_RGB32F_EXT = 0x8815\r\n            ":"\r\n            原来是 GL_RGB32F_EXT = 0x8815\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85\r\n            \r\n","\r\n            Original was GL_QUERY_NO_WAIT = 0x8E14\r\n            ":"\r\n            原来是 GL_QUERY_NO_WAIT = 0x8E14\r\n            \r\n","\r\n            Used in GL.Ext.ProgramEnvParameters4, GL.Ext.ProgramLocalParameters4\r\n            ":"\r\n            在GL.Ext.ProgramEnvParameters4、GL.Ext.ProgramLocalParameters4中使用\r\n            \r\n"," \r\n            Specifies the size of the buffer addressed by uniformBlockName.\r\n            ":" \r\n            指定由 uniformBlockName 寻址的缓冲区的大小。\r\n            \r\n","\r\n            Original was GL_SAMPLE_MASK_SGIS = 0x80A0\r\n            ":"\r\n            原来是 GL_SAMPLE_MASK_SGIS = 0x80A0\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F\r\n            \r\n","\r\n            Gets a double representing the time spent in the UpdateFrame function, in seconds.\r\n            ":"\r\n            获取一个双精度值，表示在 UpdateFrame 函数中花费的时间，以秒为单位。\r\n            \r\n","\r\n            Original was GL_POINT_SIZE_MIN_EXT = 0x8126\r\n            ":"\r\n            原来是 GL_POINT_SIZE_MIN_EXT = 0x8126\r\n            \r\n","\r\n            Original was GL_RGB12 = 0x8053\r\n            ":"\r\n            原来是 GL_RGB12 = 0x8053\r\n            \r\n","\r\n            Original was GL_CLIP_PLANE4_IMG = 0x3004\r\n            ":"\r\n            原来是 GL_CLIP_PLANE4_IMG = 0x3004\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Establish a buffer for selection mode values\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            为选择模式值建立缓冲区\r\n            \r\n","\r\n            Original was GL_SIGNED_RGB8_NV = 0x86FF\r\n            ":"\r\n            原来是 GL_SIGNED_RGB8_NV = 0x86FF\r\n            \r\n","\r\n            Enumerates modifier keys.\r\n            ":"\r\n            枚举修改键。\r\n            \r\n","A rotation matrix":"旋转矩阵\r\n","\r\n            Original was GL_RENDERBUFFER_SAMPLES_IMG = 0x9133\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_SAMPLES_IMG = 0x9133\r\n            \r\n","\r\n            Original was GL_FRAGMENT_LIGHT3_SGIX = 0x840F\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHT3_SGIX = 0x840F\r\n            \r\n","\r\n            Original was GL_TEXTURE_GREEN_SIZE = 0x805D\r\n            ":"\r\n            原来是 GL_TEXTURE_GREEN_SIZE = 0x805D\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0\r\n            \r\n","\r\n            Original was GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E\r\n            ":"\r\n            原来是 GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E\r\n            \r\n"," \r\n            Specifies the target of the operation and must be TextureBuffer.\r\n            ":" \r\n            指定操作的目标，必须是TextureBuffer。\r\n            \r\n","\r\n            Original was GL_WRITEONLY_RENDERING_QCOM = 0x8823\r\n            ":"\r\n            原来是 GL_WRITEONLY_RENDERING_QCOM = 0x8823\r\n            \r\n","\r\n            Original was GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD\r\n            ":"\r\n            原来是 GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD\r\n            \r\n","\r\n            Original was GL_REFLECTION_MAP = 0x8512\r\n            ":"\r\n            原来是 GL_REFLECTION_MAP = 0x8512\r\n            \r\n","[length: pname] \r\n            Specifies the address of a variable receive the value of pname for attachment.\r\n            ":"[长度：pname]\r\n            指定变量的地址接收附件的 pname 值。\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Determine if a name corresponds to a framebuffer object\r\n            ":"[需要：EXT_framebuffer_object]\r\n            确定名称是否对应于帧缓冲区对象\r\n            \r\n"," event.\r\n            This class is cached for performance reasons - avoid storing references outside the scope of the event.\r\n            ":" 事件。\r\n            出于性能原因缓存此类 - 避免在事件范围之外存储引用。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Load a program object with a program binary\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            使用程序二进制文件加载程序对象\r\n            \r\n"," \r\n            Specifies the number of contiguous empty display lists to be generated.\r\n            ":" \r\n            指定要生成的连续空显示列表的数量。\r\n            \r\n","\r\n            Original was GL_MATRIX7_ARB = 0x88C7\r\n            ":"\r\n            原来是 GL_MATRIX7_ARB = 0x88C7\r\n            \r\n","\r\n            Original was GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E\r\n            ":"\r\n            原来是 GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E\r\n            \r\n"," \r\n            Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide. The height of the 1D texture image is 1.\r\n            ":" \r\n            指定纹理图像的宽度。所有实现都支持至少 1024 纹素宽的纹理图像。一维纹理图像的高度为 1。\r\n            \r\n","A System.Int32 that may serve as a hash code for this resolution.":"一个 System.Int32，可用作此解决方案的哈希码。\r\n","\r\n            Implements IGamePadDriver using OpenTK.Input.Joystick\r\n            and a gamepad-specific axis/button mapping.\r\n            ":"\r\n            使用 OpenTK.Input.Joystick 实现 IGamePadDriver\r\n            和游戏手柄特定的轴/按钮映射。\r\n            \r\n","[requires: ARB_vertex_buffer_object]\r\n            Bind a named buffer object\r\n            ":"[需要：ARB_vertex_buffer_object]\r\n            绑定命名缓冲区对象\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Attach a renderbuffer as a logical buffer to the currently bound framebuffer object\r\n            ":"[需要：EXT_framebuffer_object]\r\n            将渲染缓冲区作为逻辑缓冲区附加到当前绑定的帧缓冲区对象\r\n            \r\n","[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]\r\n            Returns information about several active uniform variables for the specified program object\r\n            ":"[要求：v3.1 或 ARB_uniform_buffer_object|VERSION_3_1]\r\n            返回有关指定程序对象的几个活动统一变量的信息\r\n            \r\n","\r\n            Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is GL_ONE.\r\n            ":"\r\n            指定如何计算红色、绿色、蓝色和 alpha 源混合因子。初始值为 GL_ONE。\r\n            \r\n","\r\n            Used in GL.Ext.PointParameter\r\n            ":"\r\n            在 GL.Ext.PointParameter 中使用\r\n            \r\n","\r\n            Original was GL_INDEX_TEST_FUNC_EXT = 0x81B6\r\n            ":"\r\n            原来是 GL_INDEX_TEST_FUNC_EXT = 0x81B6\r\n            \r\n","\r\n            Original was GL_MATRIX28_ARB = 0x88DC\r\n            ":"\r\n            原来是 GL_MATRIX28_ARB = 0x88DC\r\n            \r\n","\r\n            Original was GL_MAX_HEIGHT = 0x827F\r\n            ":"\r\n            原来是 GL_MAX_HEIGHT = 0x827F\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB\r\n            \r\n","Returns a unique hash representing this resolution.":"返回表示此分辨率的唯一哈希。\r\n","\r\n            Original was GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150\r\n            ":"\r\n            原来是 GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150\r\n            \r\n","\r\n            Original was GL_TESS_GEN_MODE_EXT = 0x8E76\r\n            ":"\r\n            原来是 GL_TESS_GEN_MODE_EXT = 0x8E76\r\n            \r\n","The vibration intensity for the left motor, between 0.0 and 1.0.":"左侧电机的振动强度，介于 0.0 和 1.0 之间。\r\n","Pointer to a variable that specifies the size, in bytes, of a RawInput structure.":"指向指定 RawInput 结构大小（以字节为单位）的变量的指针。\r\n","\r\n            Original was GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154\r\n            ":"\r\n            原来是 GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154\r\n            \r\n","\r\n            Original was GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7\r\n            ":"原来是 GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Detach a shader object from a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            从程序对象中分离着色器对象\r\n            \r\n","\r\n            The alt key modifier (option on Mac).\r\n            ":"\r\n            alt 键修饰符（Mac 上的选项）。\r\n            \r\n","\r\n            Gets the primary Keyboard device, or null if no Keyboard exists.\r\n            ":"\r\n            获取主键盘设备，如果不存在键盘，则为 null。\r\n            \r\n","[requires: OES_get_program_binary]\r\n            Return a binary representation of a program object's compiled and linked executable source\r\n            ":"[要求：OES_get_program_binary]\r\n            返回程序对象的已编译和链接的可执行源的二进制表示\r\n            \r\n","[length: maxLength] \r\n            Specifies an array of characters that is used to return the source code string.\r\n            ":"[长度：最大长度]\r\n            指定用于返回源代码字符串的字符数组。\r\n            \r\n","[requires: EXT_vertex_array]\r\n            Define an array of texture coordinates\r\n            ":"[需要：EXT_vertex_array]\r\n            定义一个纹理坐标数组\r\n            \r\n","\r\n            Gets the change in Y position produced by this event.\r\n            ":"\r\n            获取由此事件产生的 Y 位置变化。\r\n            \r\n","\r\n            GetRawInputData gets the raw input one RawInput structure at a time. In contrast, GetRawInputBuffer gets an array of RawInput structures.\r\n            ":"\r\n            GetRawInputData 一次获取原始输入一个 RawInput 结构。相反，GetRawInputBuffer 获取一个 RawInput 结构数组。\r\n            \r\n","\r\n            Original was GL_IMAGE_BINDING_FORMAT = 0x906E\r\n            ":"\r\n            原来是 GL_IMAGE_BINDING_FORMAT = 0x906E\r\n            \r\n","\r\n            Original was GL_RGB8I = 0x8D8F\r\n            ":"\r\n            原来是 GL_RGB8I = 0x8D8F\r\n            \r\n","\r\n            Provides methods to create and control an opengl context on the X11 platform.\r\n            This class supports OpenTK, and is not intended for use by OpenTK programs.\r\n            ":"提供在 X11 平台上创建和控制 opengl 上下文的方法。\r\n            此类支持 OpenTK，并不打算供 OpenTK 程序使用。\r\n            \r\n","\r\n            Original was GL_Lines = 0X0001\r\n            ":"\r\n            原来是 GL_Lines = 0X0001\r\n            \r\n","\r\n            Original was GL_GLOBAL_ALPHA_SUN = 0x81D9\r\n            ":"\r\n            原来是 GL_GLOBAL_ALPHA_SUN = 0x81D9\r\n            \r\n","\r\n            Original was GL_ALPHA8UI_EXT = 0x8D7E\r\n            ":"\r\n            原来是 GL_ALPHA8UI_EXT = 0x8D7E\r\n            \r\n"," \r\n            Specifies the size of the buffer whose address is given in values.\r\n            ":" \r\n            指定其地址以值给出的缓冲区的大小。\r\n            \r\n","\r\n            Used in GL.BindFramebuffer, GL.CheckFramebufferStatus and 7 other functions\r\n            ":"\r\n            用于GL.BindFramebuffer、GL.CheckFramebufferStatus等7个函数\r\n            \r\n","\r\n            Original was GL_TEXTURE8_ARB = 0x84C8\r\n            ":"\r\n            原来是 GL_TEXTURE8_ARB = 0x84C8\r\n            \r\n","\r\n            Original was GL_HI_BIAS_NV = 0x8714\r\n            ":"\r\n            原来是 GL_HI_BIAS_NV = 0x8714\r\n            \r\n","[requires: v1.0]\r\n            Test whether a capability is enabled\r\n            ":"[要求：v1.0]\r\n            测试一个能力是否开启\r\n            \r\n","\r\n            Original was GL_BGRA_INTEGER_EXT = 0x8D9B\r\n            ":"\r\n            原来是 GL_BGRA_INTEGER_EXT = 0x8D9B\r\n            \r\n","\r\n            Provides access to keyboard devices. Note: this API is not implemented yet.\r\n            ":"\r\n            提供对键盘设备的访问。注意：此 API 尚未实现。\r\n            \r\n"," property of the window changes.\r\n            ":" 窗口的属性发生变化。\r\n            \r\n","\r\n            Compares two KeyboardState instances.\r\n            ":"\r\n            比较两个 KeyboardState 实例。\r\n            \r\n","\r\n            Original was GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B\r\n            ":"\r\n            原来是 GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_2D = 0x8064\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_2D = 0x8064\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return the location of a uniform variable\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回统一变量的位置\r\n            \r\n","\r\n            Original was GL_LUMINANCE8_OES = 0x8040\r\n            ":"\r\n            原来是 GL_LUMINANCE8_OES = 0x8040\r\n            \r\n","A new Matrix3x2d which holds the result of the multiplication":"保存乘法结果的新 Matrix3x2d\r\n","\r\n            Used in GL.MapBuffer, GL.MapNamedBuffer\r\n            ":"\r\n            在GL.MapBuffer、GL.MapNamedBuffer中使用\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER10_NV = 0x882F\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER10_NV = 0x882F\r\n            \r\n","\r\n            Used in GL.Fog\r\n            ":"\r\n            用于 GL.Fog\r\n            \r\n","In conformance with conventions for the RECT structure, the bottom-right coordinates of the returned rectangle are exclusive. In other words, the pixel at (right, bottom) lies immediately outside the rectangle.":"根据 RECT 结构的约定，返回的矩形的右下角坐标是唯一的。换句话说，（右下角）处的像素紧靠在矩形之外。\r\n","\r\n            Original was GL_COMPRESSED_ALPHA_ARB = 0x84E9\r\n            ":"\r\n            原来是 GL_COMPRESSED_ALPHA_ARB = 0x84E9\r\n            \r\n","\r\n            Retains the current Z order (ignores the hwndInsertAfter parameter).\r\n            ":"\r\n            保留当前的 ​​Z 顺序（忽略 hwndInsertAfter 参数）。\r\n            \r\n","\r\n            Original was GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1\r\n            ":"\r\n            原来是 GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1\r\n            \r\n","\r\n            Original was GL_2PASS_1_SGIS = 0x80A3\r\n            ":"\r\n            原来是 GL_2PASS_1_SGIS = 0x80A3\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_EXT = 0x8075\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_EXT = 0x8075\r\n            \r\n","\r\n            Original was GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061\r\n            ":"\r\n            原来是 GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER14_EXT = 0x8833\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER14_EXT = 0x8833\r\n            \r\n"," \r\n            Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.\r\n            ":" \r\n            指定纹理图像的宽度。所有实现都支持至少 64 纹素宽的 2D 纹理图像和至少 16 纹素宽的立方体贴图纹理图像。\r\n            \r\n","\r\n            Original was GL_READ_WRITE_ARB = 0x88BA\r\n            ":"\r\n            原来是 GL_READ_WRITE_ARB = 0x88BA\r\n            \r\n","[requires: v3.0]\r\n            Bind a user-defined varying out variable to a fragment shader color number\r\n            ":"[要求：v3.0]\r\n            将用户定义的 varying out 变量绑定到片段着色器颜色编号\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER2_NV = 0x8827\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER2_NV = 0x8827\r\n            \r\n","\r\n            Original was GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector2 with the W and Y components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 W 和 Y 组件的 OpenTK.Vector2。\r\n            \r\n","\r\n            Specifies the value that param will be set to.\r\n            ":"\r\n            指定参数将设置为的值。\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_2D_EXT = 0x8011\r\n            ":"\r\n            原来是 GL_CONVOLUTION_2D_EXT = 0x8011\r\n            \r\n","\r\n            Original was GL_DEPTH_BUFFER_BIT7_QCOM = 0x00008000\r\n            ":"\r\n            原来是 GL_DEPTH_BUFFER_BIT7_QCOM = 0x00008000\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F\r\n            \r\n","[requires: GREMEDY_frame_terminator]":"[需要：GREMEDY_frame_terminator]\r\n","[length: n] \r\n            Specifies an array containing the names of the textures to be prioritized.\r\n            ":"[长度：n]\r\n            指定包含要确定优先级的纹理名称的数组。\r\n            \r\n","[length: name] \r\n            The name of the resource to query the index of.\r\n            ":"[长度：姓名]\r\n            要查询其索引的资源的名称。\r\n            \r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA\r\n            \r\n"," for the Y button.\r\n            ":" 对于 Y 按钮。\r\n            \r\n","\r\n            Original was GL_PRIMITIVES_GENERATED = 0x8C87\r\n            ":"\r\n            原来是 GL_PRIMITIVES_GENERATED = 0x8C87\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D\r\n            ":"原来是 GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D\r\n            \r\n","\r\n            Original was GL_TEXTURE22_ARB = 0x84D6\r\n            ":"\r\n            原来是 GL_TEXTURE22_ARB = 0x84D6\r\n            \r\n","[requires: v3.2 or ARB_draw_elements_base_vertex|VERSION_3_2]\r\n            Render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index\r\n            ":"[要求：v3.2 或 ARB_draw_elements_base_vertex|VERSION_3_2]\r\n            通过指定数组数据元素的索引和应用于每个索引的索引来呈现多组图元\r\n            \r\n","\r\n            Specifies what data will be returned in pData. It can be one of the following values. \r\n            RawInputDeviceInfoEnum.PREPARSEDDATA\r\n            Data points to the previously parsed data.\r\n            RawInputDeviceInfoEnum.DEVICENAME\r\n            Data points to a string that contains the device name. \r\n            For this Command only, the value in Size is the character count (not the byte count).\r\n            RawInputDeviceInfoEnum.DEVICEINFO\r\n            Data points to an RawInputDeviceInfo structure.\r\n            ":"\r\n            指定将在 pData 中返回的数据。它可以是以下值之一。\r\n            RawInputDeviceInfoEnum.PREPARSEDDATA\r\n            数据指向之前解析的数据。\r\n            RawInputDeviceInfoEnum.DEVICENAME\r\n            数据指向包含设备名称的字符串。\r\n            仅对于此命令，Size 中的值是字符数（而不是字节数）。\r\n            RawInputDeviceInfoEnum.DEVICEINFO\r\n            数据指向 RawInputDeviceInfo 结构。\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_HIGH = 0x9146\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_HIGH = 0x9146\r\n            \r\n","[requires: QCOM_extended_get]":"[要求：QCOM_extended_get]\r\n","\r\n            Original was GL_RESAMPLE_AVERAGE_OML = 0x8988\r\n            ":"\r\n            原来是 GL_RESAMPLE_AVERAGE_OML = 0x8988\r\n            \r\n","\r\n            Original was GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43\r\n            ":"\r\n            原来是 GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43\r\n            \r\n","The length of this debug message.":"此调试消息的长度。\r\n","\r\n            Original was GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B\r\n            ":"\r\n            原来是 GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B\r\n            \r\n","\r\n            Original was GL_SET = 0x150F\r\n            ":"\r\n            原来是 GL_SET = 0x150F\r\n            \r\n","\r\n            Original was GL_RG_INTEGER = 0x8228\r\n            ":"\r\n            原来是 GL_RG_INTEGER = 0x8228\r\n            \r\n"," \r\n            Specifies the maximum number of integers that may be written to params by the function.\r\n            ":" \r\n            指定函数可以写入参数的最大整数数。\r\n            \r\n","[requires: v1.0]\r\n            Specify a one-dimensional texture image\r\n            ":"[要求：v1.0]\r\n            指定一维纹理图像\r\n            \r\n","\r\n            Original was GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107\r\n            ":"\r\n            原来是 GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107\r\n            \r\n","\r\n            Original was GL_FOG_OFFSET_SGIX = 0x8198\r\n            ":"\r\n            原来是 GL_FOG_OFFSET_SGIX = 0x8198\r\n            \r\n","\r\n            Original was GL_StreamDraw = 0X88e0\r\n            ":"\r\n            原来是 GL_StreamDraw = 0X88e0\r\n            \r\n","[requires: OES_framebuffer_object]\r\n            Determine if a name corresponds to a renderbuffer object\r\n            ":"[要求：OES_framebuffer_object]\r\n            确定名称是否对应于渲染缓冲区对象\r\n            \r\n"," \r\n            Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.\r\n            ":" \r\n            指定像素数据的格式。接受以下符号值：Alpha、Rgb、Rgba、Luminance 和 LuminanceAlpha。\r\n            \r\n","\r\n            Original was GL_BUFFER_MAPPED = 0x88BC\r\n            ":"\r\n            原来是 GL_BUFFER_MAPPED = 0x88BC\r\n            \r\n","Thrown if the Matrix3 is singular.":"如果 Matrix3 是奇异的则抛出。\r\n"," \r\n            The depth of the region to be copied.\r\n            ":" \r\n            要复制的区域的深度。\r\n            \r\n","\r\n            Top row of the matrix\r\n            ":"\r\n            矩阵的顶行\r\n            \r\n","\r\n            Original was GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B\r\n            ":"\r\n            原来是 GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B\r\n            \r\n","\r\n            A handle to the cursor. The cursor must have been created by the \r\n            CreateCursor function or loaded by the LoadCursor or LoadImage \r\n            function. If this parameter is IntPtr.Zero, the cursor is removed \r\n            from the screen.\r\n            ":"\r\n            光标句柄。游标必须由\r\n            CreateCursor 函数或由 LoadCursor 或 LoadImage 加载\r\n            功能。如果此参数为 IntPtr.Zero，则删除光标\r\n            从屏幕上。\r\n            \r\n","\r\n            Original was GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C\r\n            ":"\r\n            原来是 GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C\r\n            \r\n","\r\n            Original was GL_SMOOTH = 0x1D01\r\n            ":"\r\n            原来是 GL_SMOOTH = 0x1D01\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_UNDEFINED_OES = 0x8219\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_UNDEFINED_OES = 0x8219\r\n            \r\n","[requires: v1.0]\r\n            Select a color buffer source for pixels\r\n            ":"[要求：v1.0]\r\n            为像素选择颜色缓冲源\r\n            \r\n","\r\n            Original was GL_LOSE_CONTEXT_ON_RESET = 0x8252\r\n            ":"\r\n            原来是 GL_LOSE_CONTEXT_ON_RESET = 0x8252\r\n            \r\n"," \r\n            The width of the pixel rectangle.\r\n            ":" \r\n            像素矩形的宽度。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515\r\n            \r\n"," \r\n            Specifies the name of the parameter to retrieve.\r\n            ":" \r\n            指定要检索的参数的名称。\r\n            \r\n","\r\n            Original was GL_READ_PIXELS_TYPE = 0x828E\r\n            ":"\r\n            原来是 GL_READ_PIXELS_TYPE = 0x828E\r\n            \r\n","\r\n            Original was GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035\r\n            ":"\r\n            原来是 GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035\r\n            \r\n","\r\n            Original was GL_TEXTURE = 0x1702\r\n            ":"\r\n            原来是 GL_TEXTURE = 0x1702\r\n            \r\n","\r\n            Original was GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8\r\n            ":"\r\n            原来是 GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8\r\n            \r\n","\r\n            Size, in bytes, of the entire input packet of data. This includes the RawInput struct plus possible extra input reports in the RAWHID variable length array.\r\n            ":"\r\n            整个输入数据包的大小（以字节为单位）。这包括 RawInput 结构以及 RAWHID 可变长度数组中可能的额外输入报告。\r\n            \r\n"," \r\n            Specifies the width of the texture image.\r\n            ":" \r\n            指定纹理图像的宽度。\r\n            \r\n","\r\n            Original was GL_TextureCubeMapPositiveX = 0X8515\r\n            ":"\r\n            原来是 GL_TextureCubeMapPositiveX = 0X8515\r\n            \r\n","[requires: ARB_occlusion_query]":"[需要：ARB_occlusion_query]\r\n","\r\n            Original was GL_MAX_TEXTURE_COORDS = 0x8871\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_COORDS = 0x8871\r\n            \r\n","The modifiers.":"修饰符。\r\n","\r\n            Specifies the type of the values in indices. Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.\r\n            ":"\r\n            指定索引中值的类型。必须是 GL_UNSIGNED_BYTE、GL_UNSIGNED_SHORT 或 GL_UNSIGNED_INT 之一。\r\n            \r\n","\r\n            Original was GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5\r\n            ":"\r\n            原来是 GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19\r\n            \r\n","\r\n            Original was GL_PATH_FILL_COVER_MODE_NV = 0x9082\r\n            ":"\r\n            原来是 GL_PATH_FILL_COVER_MODE_NV = 0x9082\r\n            \r\n","\r\n            Original was GL_DOUBLE_MAT3_EXT = 0x8F47\r\n            ":"\r\n            原来是 GL_DOUBLE_MAT3_EXT = 0x8F47\r\n            \r\n","[requires: ARB_draw_buffers_blend]\r\n            Specify pixel arithmetic\r\n            ":"[需要：ARB_draw_buffers_blend]\r\n            指定像素算法\r\n            \r\n","\r\n            Original was GL_FLOAT16_NV = 0x8FF8\r\n            ":"\r\n            原来是 GL_FLOAT16_NV = 0x8FF8\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_STRIDE = 0x807F\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_STRIDE = 0x807F\r\n            \r\n","[requires: NV_blend_equation_advanced]":"[需要：NV_blend_equation_advanced]\r\n","\r\n            Used in GL.TexImage2D, GL.TexImage3D and 1 other function\r\n            ":"\r\n            用于 GL.TexImage2D、GL.TexImage3D 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_RGBA8I = 0x8D8E\r\n            ":"\r\n            原来是 GL_RGBA8I = 0x8D8E\r\n            \r\n","\r\n            Represents the state of a mouse wheel.\r\n            ":"\r\n            表示鼠标滚轮的状态。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622\r\n            \r\n","\r\n            Original was GL_AVERAGE_HP = 0x8160\r\n            ":"\r\n            原来是 GL_AVERAGE_HP = 0x8160\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_5_6_5 = 0x8363\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_5_6_5 = 0x8363\r\n            \r\n","[requires: v1.0]\r\n            Bind a named buffer object\r\n            ":"[要求：v1.0]\r\n            绑定命名缓冲区对象\r\n            \r\n","\r\n            Used in GL.GetPixelMapx, GL.PixelMapx and 32 other functions\r\n            ":"\r\n            用于GL.GetPixelMapx、GL.PixelMapx等32个函数\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250\r\n            \r\n","\r\n            Original was GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D\r\n            ":"\r\n            原来是 GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D\r\n            \r\n","\r\n            Original was GL_RGBA16 = 0x805B\r\n            ":"\r\n            原来是 GL_RGBA16 = 0x805B\r\n            \r\n","\r\n            Original was GL_MODELVIEW2_ARB = 0x8722\r\n            ":"\r\n            原来是 GL_MODELVIEW2_ARB = 0x8722\r\n            \r\n","\r\n            Original was GL_TEXTURE21 = 0x84D5\r\n            ":"\r\n            原来是 GL_TEXTURE21 = 0x84D5\r\n            \r\n","\r\n            Original was GL_MINUS_NV = 0x929F\r\n            ":"\r\n            原来是 GL_MINUS_NV = 0x929F\r\n            \r\n","[requires: v1.3][deprecated: v3.2]\r\n            Set the current texture coordinates\r\n            ":"[要求：v1.3][弃用：v3.2]\r\n            设置当前纹理坐标\r\n            \r\n","\r\n            Gets or sets the value at row 3, column 1 of this instance.\r\n            ":"\r\n            获取或设置此实例第 3 行第 1 列的值。\r\n            \r\n"," \r\n            The index of the active uniform block within program whose binding to assign.\r\n            ":" \r\n            要分配其绑定的程序中活动统一块的索引。\r\n            \r\n","\r\n            Original was GL_ATTRIB_ARRAY_SIZE_NV = 0x8623\r\n            ":"\r\n            原来是 GL_ATTRIB_ARRAY_SIZE_NV = 0x8623\r\n            \r\n","\r\n            Used in GL.GetActiveAttrib\r\n            ":"\r\n            在 GL.GetActiveAttrib 中使用\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD\r\n            \r\n","\r\n            Original was GL_SCREEN_KHR = 0x9295\r\n            ":"\r\n            原来是 GL_SCREEN_KHR = 0x9295\r\n            \r\n","\r\n            Original was GL_ALL_ATTRIB_BITS = 0xFFFFFFFF\r\n            ":"\r\n            原来是 GL_ALL_ATTRIB_BITS = 0xFFFFFFFF\r\n            \r\n","\r\n            Used in GL.ClearBuffer\r\n            ":"\r\n            在 GL.ClearBuffer 中使用\r\n            \r\n","\r\n            Used in GL.ReadPixels, GL.TexImage2D and 1 other function\r\n            ":"\r\n            用于 GL.ReadPixels、GL.TexImage2D 和其他 1 个函数\r\n            \r\n","[requires: ARB_shader_objects]\r\n            Links a program object\r\n            ":"[需要：ARB_shader_objects]\r\n            链接程序对象\r\n            \r\n","\r\n            Original was GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C\r\n            ":"\r\n            原来是 GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C\r\n            \r\n"," structure containing the state of the keyboard device.":" 包含键盘设备状态的结构。\r\n","\r\n            Original was GL_FULL_RANGE_EXT = 0x87E1\r\n            ":"\r\n            原来是 GL_FULL_RANGE_EXT = 0x87E1\r\n            \r\n","\r\n            Original was GL_CLAMP_VERTEX_COLOR_ARB = 0x891A\r\n            ":"\r\n            原来是 GL_CLAMP_VERTEX_COLOR_ARB = 0x891A\r\n            \r\n","\r\n            Original was GL_DISCARD_NV = 0x8530\r\n            ":"\r\n            原来是 GL_DISCARD_NV = 0x8530\r\n            \r\n","\r\n            Original was GL_OPERAND0_ALPHA = 0x8598\r\n            ":"\r\n            原来是 GL_OPERAND0_ALPHA = 0x8598\r\n            \r\n","\r\n            Original was GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F\r\n            ":"\r\n            原来是 GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F\r\n            \r\n","\r\n            Occurs when it is time to render a frame.\r\n            ":"\r\n            在渲染帧时发生。\r\n            \r\n","\r\n            The high-order word of the return value indicates the types of messages currently in the queue.\r\n            The low-order word indicates the types of messages that have been added to the queue and that are still\r\n            in the queue since the last call to the GetQueueStatus, GetMessage, or PeekMessage function.\r\n            ":"\r\n            返回值的高位字表示队列中当前消息的类型。\r\n            低位字表示已添加到队列中的消息类型\r\n            自上次调用 GetQueueStatus、GetMessage 或 PeekMessage 函数以来在队列中。\r\n            \r\n","\r\n            Original was GL_OPERAND2_ALPHA = 0x859A\r\n            ":"\r\n            原来是 GL_OPERAND2_ALPHA = 0x859A\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022\r\n            \r\n","[length: 4] \r\n            Returns the requested data.\r\n            ":"[长度：4]\r\n            返回请求的数据。\r\n            \r\n","\r\n            Original was GL_OBJECT_LINE_SGIS = 0x81F7\r\n            ":"\r\n            原来是 GL_OBJECT_LINE_SGIS = 0x81F7\r\n            \r\n"," if this instance is connected; otherwise, ":" 如果此实例已连接；否则，\r\n","\r\n            Used in GL.NV.GetProgramEnvParameterI, GL.NV.GetProgramLocalParameterI and 4 other functions\r\n            ":"\r\n            用于GL.NV.GetProgramEnvParameterI、GL.NV.GetProgramLocalParameterI等4个函数\r\n            \r\n","\r\n            Original was GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF\r\n            ":"\r\n            原来是 GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Returns the value of a uniform variable\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回统一变量的值\r\n            \r\n","\r\n            Original was GL_TextureCubeMapNegativeY = 0X8518\r\n            ":"\r\n            原来是 GL_TextureCubeMapNegativeY = 0X8518\r\n            \r\n"," \r\n            Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha.\r\n            ":" \r\n            指定像素数据的格式。接受以下符号值：Red、RedInteger、Rg、RgInteger、Rgb、RgbInteger、Rgba、RgbaInteger、DepthComponent、DepthStencil、LuminanceAlpha、Luminance 和 Alpha。\r\n            \r\n","\r\n            Original was GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3\r\n            ":"\r\n            原来是 GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3\r\n            \r\n","\r\n            Original was GL_ANY_SAMPLES_PASSED = 0x8C2F\r\n            ":"\r\n            原来是 GL_ANY_SAMPLES_PASSED = 0x8C2F\r\n            \r\n","\r\n            Provides access to OpenGL ES 2.0 methods.\r\n            ":"\r\n            提供对 OpenGL ES 2.0 方法的访问。\r\n            \r\n","The third axis of the JoystickDevice.":"JoystickDevice 的第三轴。\r\n","[requires: ARB_shader_objects]\r\n            Compiles a shader object\r\n            ":"[需要：ARB_shader_objects]\r\n            编译着色器对象\r\n            \r\n","\r\n            Indicates default construction options.\r\n            ":"\r\n            指示默认构造选项。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518\r\n            \r\n","\r\n            Original was GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC\r\n            ":"\r\n            原来是 GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC\r\n            \r\n","\r\n            Original was GL_TESS_GEN_POINT_MODE_EXT = 0x8E79\r\n            ":"\r\n            原来是 GL_TESS_GEN_POINT_MODE_EXT = 0x8E79\r\n            \r\n","Specifies the width of the created window's border in pixels.":"指定创建的窗口边框的宽度（以像素为单位）。\r\n","\r\n            Original was GL_LUMINANCE_ALPHA8I_EXT = 0x8D93\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA8I_EXT = 0x8D93\r\n            \r\n","\r\n            Original was GL_BLEND_EQUATION_EXT = 0x8009\r\n            ":"\r\n            原来是 GL_BLEND_EQUATION_EXT = 0x8009\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B\r\n            \r\n","\r\n            Transforms the specified point from client to screen coordinates.\r\n            ":"将指定点从客户端坐标转换为屏幕坐标。\r\n            \r\n","KeySym number N, counting from zero, for KeyCode K has the following index in the list, counting from zero: ":"KeySym 编号 N，从零开始计数，因为 KeyCode K 在列表中具有以下索引，从零开始计数：\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Determine if a name corresponds to a texture\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            确定名称是否对应于纹理\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Return evaluator parameters\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            返回评估器参数\r\n            \r\n"," \r\n            Specifies the number of elements in the string and length arrays.\r\n            ":" \r\n            指定字符串和长度数组中的元素数。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_ADDRESS_REGISTERS = 0x88B1\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_ADDRESS_REGISTERS = 0x88B1\r\n            \r\n"," \r\n            Specifies the number of transform feedback objects to delete.\r\n            ":" \r\n            指定要删除的变换反馈对象的数量。\r\n            \r\n"," \r\n            The length of the range within the buffer's data store to be invalidated.\r\n            ":" \r\n            要失效的缓冲区数据存储范围的长度。\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CF\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CF\r\n            \r\n","\r\n            Original was GL_OPERAND1_RGB_EXT = 0x8591\r\n            ":"\r\n            原来是 GL_OPERAND1_RGB_EXT = 0x8591\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B\r\n            \r\n","\r\n            Original was GL_FIRST_VERTEX_CONVENTION = 0x8E4D\r\n            ":"\r\n            原来是 GL_FIRST_VERTEX_CONVENTION = 0x8E4D\r\n            \r\n","[requires: NV_shader_buffer_load]\r\n            Specify the value of a uniform variable for the current program object\r\n            ":"[要求：NV_shader_buffer_load]\r\n            为当前程序对象指定统一变量的值\r\n            \r\n"," \r\n            The name of a program object whose interface to query.\r\n            ":" \r\n            要查询其接口的程序对象的名称。\r\n            \r\n","\r\n            Gets or sets the third column of the matrix.\r\n            ":"\r\n            获取或设置矩阵的第三列。\r\n            \r\n","\r\n            Original was GL_DSDT_MAG_NV = 0x86F6\r\n            ":"\r\n            原来是 GL_DSDT_MAG_NV = 0x86F6\r\n            \r\n","\r\n            Original was GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84\r\n            ":"\r\n            原来是 GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84\r\n            \r\n"," for the Back button.\r\n            ":" 对于后退按钮。\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247\r\n            \r\n"," \r\n            Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.\r\n            ":" \r\n            指定单值纹理生成参数，ObjectLinear、EyeLinear、SphereMap、NormalMap 或 ReflectionMap 之一。\r\n            \r\n","[requires: QCOM_extended_get2]":"[要求：QCOM_extended_get2]\r\n","\r\n            Original was GL_POLYGON_OFFSET_EXT = 0x8037\r\n            ":"\r\n            原来是 GL_POLYGON_OFFSET_EXT = 0x8037\r\n            \r\n","\r\n            Original was GL_SYNC_CL_EVENT_ARB = 0x8240\r\n            ":"\r\n            原来是 GL_SYNC_CL_EVENT_ARB = 0x8240\r\n            \r\n","\r\n            Original was GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9\r\n            ":"\r\n            原来是 GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9\r\n            \r\n"," \r\n            Specify the target of the operation. target must be one of the global buffer binding targets.\r\n            ":" \r\n            指定操作的目标。 target 必须是全局缓冲区绑定目标之一。\r\n            \r\n","\r\n            Gets the SDL joystick layer binding for the specified game controller button\r\n            ":"\r\n            获取指定游戏控制器按钮的 SDL 摇杆层绑定\r\n            \r\n","The minor OpenGL version number for this IGraphicsContext.":"此 IGraphicsContext 的次要 OpenGL 版本号。\r\n","\r\n            Original was GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4\r\n            ":"\r\n            原来是 GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4\r\n            \r\n","\r\n            Original was GL_MAX_SAMPLES_ANGLE = 0x8D57\r\n            ":"\r\n            原来是 GL_MAX_SAMPLES_ANGLE = 0x8D57\r\n            \r\n","\r\n            Original was GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5\r\n            ":"\r\n            原来是 GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5\r\n            \r\n","\r\n            Original was GL_BUMP_ROT_MATRIX_ATI = 0x8775\r\n            ":"\r\n            原来是 GL_BUMP_ROT_MATRIX_ATI = 0x8775\r\n            \r\n","True if the System.Object is an equal DisplayResolution; false otherwise.":"如果 System.Object 是相等的 DisplayResolution，则为真；否则为假。\r\n"," \r\n            Specifies the attachment within target\r\n            ":" \r\n            指定目标内的附件\r\n            \r\n"," \r\n            Specifies the mipmap level of texture to attach.\r\n            ":" \r\n            指定要附加的纹理的 mipmap 级别。\r\n            \r\n","[requires: v4.3 or ARB_compute_shader|VERSION_4_3]\r\n            Launch one or more compute work groups\r\n            ":"[要求：v4.3 或 ARB_compute_shader|VERSION_4_3]\r\n            启动一个或多个计算工作组\r\n            \r\n","\r\n            Original was GL_SamplerCube = 0X8b60\r\n            ":"\r\n            原来是 GL_SamplerCube = 0X8b60\r\n            \r\n","\r\n            Original was GL_IMAGE_BINDING_FORMAT_EXT = 0x906E\r\n            ":"\r\n            原来是 GL_IMAGE_BINDING_FORMAT_EXT = 0x906E\r\n            \r\n","\r\n            Original was GL_RESAMPLE_ZERO_FILL_OML = 0x8987\r\n            ":"\r\n            原来是 GL_RESAMPLE_ZERO_FILL_OML = 0x8987\r\n            \r\n","\r\n            DPad up direction button\r\n            ":"\r\n            Dpad向上方向按钮\r\n            \r\n","\r\n            Original was GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 0x8848\r\n            ":"\r\n            原来是 GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 0x8848\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY = 0x845E\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY = 0x845E\r\n            \r\n","[requires: v1.0]\r\n            Return the coefficients of the specified clipping plane\r\n            ":"[要求：v1.0]\r\n            返回指定裁剪平面的系数\r\n            \r\n","[length: maxLength] \r\n            Returns a null terminated string containing the name of the uniform variable.\r\n            ":"[长度：最大长度]\r\n            返回包含统一变量名称的空终止字符串。\r\n            \r\n","\r\n            Gets or sets the value at row 1, column 2 of this instance.\r\n            ":"\r\n            获取或设置此实例第 1 行第 2 列的值。\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 0x90D8\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 0x90D8\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2\r\n            \r\n"," \r\n            The address of a string containing the label to assign to the object.\r\n            ":" \r\n            包含要分配给对象的标签的字符串的地址。\r\n            \r\n","\r\n            Original was GL_MAP2_GRID_DOMAIN = 0x0DD2\r\n            ":"\r\n            原来是 GL_MAP2_GRID_DOMAIN = 0x0DD2\r\n            \r\n","\r\n            Call the Run() method to start the application's main loop. Run(double, double) takes two\r\n            parameters that\r\n            specify the logic update rate, and the render update rate.\r\n            ":"\r\n            调用 Run() 方法启动应用程序的主循环。 Run(double, double) 需要两个\r\n            参数\r\n            指定逻辑更新率和渲染更新率。\r\n            \r\n","\r\n            Retrieves the device name for the gamepad device.\r\n            ":"\r\n            检索游戏手柄设备的设备名称。\r\n            \r\n","[requires: v1.0]\r\n            Generate buffer object names\r\n            ":"[要求：v1.0]\r\n            生成缓冲区对象名称\r\n            \r\n","\r\n            Struct pointed to by WM_GETMINMAXINFO lParam\r\n            ":"\r\n            WM_GETMINMAXINFO lParam 指向的结构\r\n            \r\n","\r\n            Low-level WINAPI function that retrieves the next message in the queue.\r\n            ":"\r\n            检索队列中下一条消息的低级 WINAPI 函数。\r\n            \r\n","\r\n            Original was GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546\r\n            ":"\r\n            原来是 GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Bind a range within a buffer object to an indexed buffer target\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            将缓冲区对象中的范围绑定到索引缓冲区目标\r\n            \r\n"," has\r\n            a right thumbstick with a y-axis.\r\n            ":" 有\r\n            带有 y 轴的右摇杆。\r\n            \r\n","The thirteenth button of the JoystickDevice.":"JoystickDevice 的第十三个按钮。\r\n"," \r\n            The height of the multisample texture's image, in texels.\r\n            ":" \r\n            多重采样纹理图像的高度，以纹素为单位。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Specify the line stipple pattern\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            指定线条点画图案\r\n            \r\n","\r\n            Original was GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F\r\n            ":"\r\n            原来是 GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F\r\n            \r\n","\r\n            Original was GL_DOT3_RGBA_EXT = 0x8741\r\n            ":"\r\n            原来是 GL_DOT3_RGBA_EXT = 0x8741\r\n            \r\n","\r\n            Original was GL_LIGHTEN_NV = 0x9298\r\n            ":"\r\n            原来是 GL_LIGHTEN_NV = 0x9298\r\n            \r\n","[length: count*3]":"[长度：计数*3]\r\n","\r\n            Original was GL_INT_SAMPLER_3D_EXT = 0x8DCB\r\n            ":"\r\n            原来是 GL_INT_SAMPLER_3D_EXT = 0x8DCB\r\n            \r\n","\r\n            Original was GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C\r\n            ":"\r\n            原来是 GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345\r\n            \r\n"," \r\n            The a string containing the message to be sent to the debug output stream.\r\n            ":" \r\n            包含要发送到调试输出流的消息的字符串。\r\n            \r\n","\r\n            Original was GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767\r\n            ":"\r\n            原来是 GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Set front and back function and reference value for stencil testing\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            设置钢网测试的前后功能和参考值\r\n            \r\n","\r\n            Original was GL_GREEN_NV = 0x1904\r\n            ":"\r\n            原来是 GL_GREEN_NV = 0x1904\r\n            \r\n"," for the mouse cursor.\r\n            This method is equivalent to ":" 对于鼠标光标。\r\n            这个方法相当于\r\n"," \r\n            Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.\r\n            ":"指定渲染缓冲区对象参数的符号名称。接受的值为 RenderbufferWidth、RenderbufferHeight、RenderbufferInternalFormat、RenderbufferRedSize、RenderbufferGreenSize、RenderbufferBlueSize、RenderbufferAlphaSize、RenderbufferDepthSize 或 RenderbufferStencilSize。\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_GREEN_SIZE = 0x80DB\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_GREEN_SIZE = 0x80DB\r\n            \r\n","\r\n            Used in GL.Apple.GetInteger64, GL.GetBoolean and 3 other functions\r\n            ":"\r\n            用于 GL.Apple.GetInteger64、GL.GetBoolean 和其他 3 个函数\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_SCALE = 0x80D6\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_SCALE = 0x80D6\r\n            \r\n"," \r\n            For glGetStringi, specifies the index of the string to return.\r\n            ":" \r\n            对于 glGetStringi，指定要返回的字符串的索引。\r\n            \r\n","[requires: AMD_debug_output]":"[需要：AMD_debug_output]\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Generate framebuffer object names\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            生成帧缓冲区对象名称\r\n            \r\n","\r\n            Moves the mouse cursor to the specified screen position.\r\n             ":"\r\n            将鼠标光标移动到指定的屏幕位置。\r\n             \r\n","\r\n            Original was GL_INT8_VEC2_NV = 0x8FE1\r\n            ":"\r\n            原来是 GL_INT8_VEC2_NV = 0x8FE1\r\n            \r\n","[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]":"[要求：v4.1 或 ARB_separate_shader_objects|VERSION_4_1]\r\n","\r\n            Must be GL_SEPARABLE_2D.\r\n            ":"\r\n            必须是 GL_SEPARABLE_2D。\r\n            \r\n","\r\n            Original was GL_PASS_THROUGH_NV = 0x86E6\r\n            ":"\r\n            原来是 GL_PASS_THROUGH_NV = 0x86E6\r\n            \r\n","The frequency of UpdateFrame events.":"UpdateFrame 事件的频率。\r\n","\r\n            Original was GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8\r\n            \r\n","Stencil bits.":"模板位。\r\n","\r\n            Original was GL_FLOAT_R16_NV = 0x8884\r\n            ":"\r\n            原来是 GL_FLOAT_R16_NV = 0x8884\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Retrieve information about a bound renderbuffer object\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            检索有关绑定渲染缓冲区对象的信息\r\n            \r\n","\r\n            Original was GL_SCALE_BY_TWO_NV = 0x853E\r\n            ":"\r\n            原来是 GL_SCALE_BY_TWO_NV = 0x853E\r\n            \r\n","Override if you are not using ":"如果您不使用则覆盖\r\n","\r\n            Original was GL_DRAW_BUFFER0_EXT = 0x8825\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER0_EXT = 0x8825\r\n            \r\n","\r\n            Original was GL_INCR_WRAP = 0x8507\r\n            ":"\r\n            原来是 GL_INCR_WRAP = 0x8507\r\n            \r\n","\r\n            This property is deprecated and should not be used.\r\n            ":"此属性已弃用，不应使用。\r\n            \r\n","\r\n            Original was GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B\r\n            \r\n","[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]\r\n            Specify the organization of vertex arrays\r\n            ":"[要求：v4.3 或 ARB_vertex_attrib_binding|VERSION_4_3]\r\n            指定顶点数组的组织\r\n            \r\n"," \r\n            Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.\r\n            ":" \r\n            指定像素矩形的尺寸。一个的宽度和高度对应一个像素。\r\n            \r\n","[requires: ARB_instanced_arrays]\r\n            Modify the rate at which generic vertex attributes advance during instanced rendering\r\n            ":"[需要：ARB_instanced_arrays]\r\n            修改实例化渲染期间通用顶点属性前进的速率\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D\r\n            \r\n","\r\n            Original was GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 0x82DE\r\n            ":"\r\n            原来是 GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 0x82DE\r\n            \r\n","\r\n            Original was GL_SYNC_OBJECT_APPLE = 0x8A53\r\n            ":"\r\n            原来是 GL_SYNC_OBJECT_APPLE = 0x8A53\r\n            \r\n","\r\n            Original was GL_LIGHT0 = 0x4000\r\n            ":"\r\n            原来是 GL_LIGHT0 = 0x4000\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_MEDIUM = 0x9147\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_MEDIUM = 0x9147\r\n            \r\n","[length: numCounters]":"[长度：numCounters]\r\n","\r\n            Original was GL_CON_3_ATI = 0x8944\r\n            ":"\r\n            原来是 GL_CON_3_ATI = 0x8944\r\n            \r\n","\r\n            Original was GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144\r\n            ":"\r\n            原来是 GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144\r\n            \r\n"," \r\n            Specifies the number of display lists to be executed.\r\n            ":" \r\n            指定要执行的显示列表的数量。\r\n            \r\n","\r\n            Original was GL_RGB_FLOAT16_APPLE = 0x881B\r\n            ":"\r\n            原来是 GL_RGB_FLOAT16_APPLE = 0x881B\r\n            \r\n","\r\n            Used in GL.VertexAttribPointer\r\n            ":"\r\n            在 GL.VertexAttribPointer 中使用\r\n            \r\n","\r\n            Original was GL_PROGRAM_KHR = 0x82E2\r\n            ":"\r\n            原来是 GL_PROGRAM_KHR = 0x82E2\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE = 0x80D0\r\n            ":"\r\n            原来是 GL_COLOR_TABLE = 0x80D0\r\n            \r\n","\r\n            Original was GL_DIFFERENCE_KHR = 0x929E\r\n            ":"\r\n            原来是 GL_DIFFERENCE_KHR = 0x929E\r\n            \r\n","The F31 key.":"F31 键。\r\n"," \r\n            The length of the label to be used for the object.\r\n            ":" \r\n            用于对象的标签的长度。\r\n            \r\n","\r\n            Original was GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B\r\n            ":"\r\n            原来是 GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC\r\n            ":"原来是 GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Indicate modifications to a range of a mapped buffer\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            指示对映射缓冲区范围的修改\r\n            \r\n","\r\n            Used in GL.DrawArrays, GL.DrawElements\r\n            ":"\r\n            在 GL.DrawArrays, GL.DrawElements 中使用\r\n            \r\n","\r\n            Used in GL.Arb.VertexAttribPointer\r\n            ":"\r\n            在 GL.Arb.VertexAttribPointer 中使用\r\n            \r\n","[length: fsize,type,stride] \r\n            Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the ArrayBuffer target. The initial value is 0.\r\n            ":"[长度：fsize，类型，步幅]\r\n            指定当前绑定到 ArrayBuffer 目标的缓冲区的数据存储中数组中第一个通用顶点属性的第一个组件的偏移量。初始值为 0。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5\r\n            \r\n"," \r\n            Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, Triangles, LinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.\r\n            ":" \r\n            指定要渲染的图元类型。接受符号常量 Points、LineStrip、LineLoop、Lines、TriangleStrip、TriangleFan、Triangles、LinesAdjacency、LineStripAdjacency、TrianglesAdjacency、TriangleStripAdjacency 和 Patches。\r\n            \r\n"," \r\n            Specifies the symbolic name of a sampler parameter. TextureMagFilter, TextureMinFilter, TextureMinLod, TextureMaxLod, TextureLodBias, TextureWrapS, TextureWrapT, TextureWrapR, TextureBorderColor, TextureCompareMode, and TextureCompareFunc are accepted.\r\n            ":" \r\n            指定采样器参数的符号名称。 TextureMagFilter、TextureMinFilter、TextureMinLod、TextureMaxLod、TextureLodBias、TextureWrapS、TextureWrapT、TextureWrapR、TextureBorderColor、TextureCompareMode 和 TextureCompareFunc 被接受。\r\n            \r\n","\r\n            Handle to the menu to be used by the new window.\r\n            ":"\r\n            新窗口要使用的菜单句柄。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Set the scale and units used to calculate depth values\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            设置用于计算深度值的比例和单位\r\n            \r\n","[requires: v1.0]\r\n            Push and pop the current matrix stack\r\n            ":"[要求：v1.0]\r\n            压入和弹出当前矩阵栈\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Generate renderbuffer object names\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            生成渲染缓冲区对象名称\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6\r\n            \r\n","[requires: INTEL_performance_query]":"[需要：INTEL_performance_query]\r\n","\r\n            Original was GL_FramebufferComplete = 0X8cd5\r\n            ":"\r\n            原来是 GL_FramebufferComplete = 0X8cd5\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366\r\n            \r\n","\r\n            Converts the client-area coordinates of a specified point to screen coordinates.\r\n            ":"\r\n            将指定点的客户区坐标转换为屏幕坐标。\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E\r\n            \r\n"," \r\n            Specifies the target to which the texture whose mimaps to generate is bound. target must be Texture2D, Texture3D, Texture2DArray or TextureCubeMap.\r\n            ":" \r\n            指定要生成其 mimap 的纹理绑定到的目标。目标必须是 Texture2D、Texture3D、Texture2DArray 或 TextureCubeMap。\r\n            \r\n","height in pixels":"以像素为单位的高度\r\n","\r\n            Additional information associated with this coordinate.\r\n            ":"\r\n            与此坐标关联的附加信息。\r\n            \r\n","\r\n            Original was GL_UNPACK_ROW_LENGTH_EXT = 0x0CF2\r\n            ":"\r\n            原来是 GL_UNPACK_ROW_LENGTH_EXT = 0x0CF2\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_BINDING = 0x8CA7\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_BINDING = 0x8CA7\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_RANGE_NV = 0x851D\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_RANGE_NV = 0x851D\r\n            \r\n","\r\n            Original was GL_UNKNOWN_CONTEXT_RESET_KHR = 0x8255\r\n            ":"\r\n            原来是 GL_UNKNOWN_CONTEXT_RESET_KHR = 0x8255\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Install a program object as part of current rendering state\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            安装程序对象作为当前呈现状态的一部分\r\n            \r\n"," \r\n            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.\r\n            ":" \r\n            指定要复制的像素矩形区域左下角的窗口坐标。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9\r\n            \r\n","\r\n            Original was GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856\r\n            ":"原来是 GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856\r\n            \r\n","[requires: KHR_debug]\r\n            Pop the active debug group\r\n            ":"[要求：KHR_debug]\r\n            弹出活动调试组\r\n            \r\n","\r\n            Original was GL_PROGRAM_LENGTH_NV = 0x8627\r\n            ":"\r\n            原来是 GL_PROGRAM_LENGTH_NV = 0x8627\r\n            \r\n","\r\n            Original was GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401\r\n            ":"\r\n            原来是 GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return a parameter from a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            从程序对象返回参数\r\n            \r\n","\r\n            Original was GL_TEXTURE_HEIGHT = 0x1001\r\n            ":"\r\n            原来是 GL_TEXTURE_HEIGHT = 0x1001\r\n            \r\n","\r\n            Original was GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241\r\n            ":"\r\n            原来是 GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241\r\n            \r\n","[requires: OES_texture_3D]\r\n            Specify a three-dimensional texture subimage\r\n            ":"[要求：OES_texture_3D]\r\n            指定三维纹理子图像\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05\r\n            \r\n","[requires: v1.0]\r\n            Specify the width of rasterized lines\r\n            ":"[要求：v1.0]\r\n            指定栅格化线条的宽度\r\n            \r\n","A pointer to the structure that will be freed.":"指向将被释放的结构的指针。\r\n"," \r\n            Specifies the name of a program pipeline object whose parameter retrieve.\r\n            ":" \r\n            指定其参数检索的程序管道对象的名称。\r\n            \r\n","\r\n            Original was GL_MATRIX20_ARB = 0x88D4\r\n            ":"\r\n            原来是 GL_MATRIX20_ARB = 0x88D4\r\n            \r\n","\r\n            Original was GL_CLEAR_TEXTURE = 0x9365\r\n            ":"\r\n            原来是 GL_CLEAR_TEXTURE = 0x9365\r\n            \r\n","\r\n            Original was GL_STENCIL_BACK_FUNC = 0x8800\r\n            ":"\r\n            原来是 GL_STENCIL_BACK_FUNC = 0x8800\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24\r\n            \r\n","[requires: ARB_texture_compression]\r\n            Specify a three-dimensional texture image in a compressed format\r\n            ":"[需要：ARB_texture_compression]\r\n            以压缩格式指定三维纹理图像\r\n            \r\n","\r\n            Gets a value indicating whether the left button is pressed.\r\n            ":"\r\n            获取一个值，该值指示左键是否被按下。\r\n            \r\n"," \r\n            Specifies the internal format for the newly created view.\r\n            ":" \r\n            指定新创建的视图的内部格式。\r\n            \r\n"," \r\n            Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.\r\n            ":" \r\n            指定纹理图像的高度。所有实现都支持至少 64 纹素高的 2D 纹理图像和至少 16 纹素高的立方体贴图纹理图像。\r\n            \r\n","\r\n            Original was GL_ALL_SHADER_BITS_EXT = 0xFFFFFFFF\r\n            ":"\r\n            原来是 GL_ALL_SHADER_BITS_EXT = 0xFFFFFFFF\r\n            \r\n"," if this instance has a X button; otherwise, ":" 如果这个实例有一个 X 按钮；否则，\r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1\r\n            \r\n","\r\n            Used in GL.AlphaFunc\r\n            ":"\r\n            在 GL.AlphaFunc 中使用\r\n            \r\n","\r\n            Original was GL_MAX_VARYING_VECTORS = 0x8DFC\r\n            ":"\r\n            原来是 GL_MAX_VARYING_VECTORS = 0x8DFC\r\n            \r\n","\r\n            If the function succeeds, the return value is nonzero.\r\n            \r\n            If the function fails, the return value is zero. To get extended \r\n            error information, call Marshal.GetLastWin32Error.\r\n            ":"\r\n            如果函数成功，则返回值为非零。\r\n            \r\n            如果函数失败，则返回值为零。得到扩展\r\n            错误信息，调用Marshal.GetLastWin32Error。\r\n            \r\n","\r\n            Used in GL.GetVertexArray\r\n            ":"\r\n            在 GL.GetVertexArray 中使用\r\n            \r\n","[requires: NV_transform_feedback2]\r\n            Bind a transform feedback object\r\n            ":"[需要：NV_transform_feedback2]\r\n            绑定一个变换反馈对象\r\n            \r\n","\r\n            Original was GL_ALPHA16_EXT = 0x803E\r\n            ":"\r\n            原来是 GL_ALPHA16_EXT = 0x803E\r\n            \r\n","\r\n            Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.\r\n            ":"\r\n            指定纹理图像的宽度。所有实现都支持至少 64 纹素宽的 2D 纹理图像和至少 16 纹素宽的立方体贴图纹理图像。\r\n            \r\n","\r\n            Displays the window.\r\n            ":"显示窗口。\r\n            \r\n","\r\n            Original was GL_LAYER_PROVOKING_VERTEX_EXT = 0x825E\r\n            ":"\r\n            原来是 GL_LAYER_PROVOKING_VERTEX_EXT = 0x825E\r\n            \r\n","\r\n            Original was GL_NEAREST = 0x2600\r\n            ":"\r\n            原来是 GL_NEAREST = 0x2600\r\n            \r\n","\r\n            A posted message (other than those listed here) is in the queue.\r\n            ":"\r\n            已发布的消息（此处列出的消息除外）在队列中。\r\n            \r\n","\r\n            Called when the NativeWindow has closed.\r\n            ":"\r\n            在 NativeWindow 关闭时调用。\r\n            \r\n","\r\n            Original was GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5\r\n            ":"\r\n            原来是 GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5\r\n            \r\n","\r\n            Original was GL_COLOR_BUFFER_BIT0_QCOM = 0x00000001\r\n            ":"\r\n            原来是 GL_COLOR_BUFFER_BIT0_QCOM = 0x00000001\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Determine if a name corresponds to a renderbuffer object\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            确定名称是否对应于渲染缓冲区对象\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return the location of an attribute variable\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回属性变量的位置\r\n            \r\n","\r\n            Original was GL_CLEAR = 0x1500\r\n            ":"\r\n            原来是 GL_CLEAR = 0x1500\r\n            \r\n","\r\n            Used in GL.BindRenderbuffer, GL.FramebufferRenderbuffer and 11 other functions\r\n            ":"\r\n            用于GL.BindRenderbuffer、GL.FramebufferRenderbuffer等11个函数\r\n            \r\n","[requires: ARB_texture_compression]\r\n            Specify a one-dimensional texture image in a compressed format\r\n            ":"[需要：ARB_texture_compression]\r\n            以压缩格式指定一维纹理图像\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E80\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E80\r\n            \r\n","\r\n            Original was GL_FRAGMENT_DEPTH_EXT = 0x8452\r\n            ":"\r\n            原来是 GL_FRAGMENT_DEPTH_EXT = 0x8452\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Multiply the current matrix by a translation matrix\r\n            ":"[要求：v1.0 和 1.0]\r\n            将当前矩阵乘以平移矩阵\r\n            \r\n","[length: pname] \r\n            For the scalar commands, specifies the value of pname.\r\n            ":"[长度：pname]\r\n            对于标量命令，指定 pname 的值。\r\n            \r\n","The server reports the event to all interested clients. ":"服务器将事件报告给所有感兴趣的客户端。\r\n","\r\n            Original was GL_OES_compressed_ETC1_RGB8_texture = 1\r\n            ":"\r\n            原来是 GL_OES_compressed_ETC1_RGB8_texture = 1\r\n            \r\n","\r\n            Original was GL_Framebuffer = 0X8d40\r\n            ":"\r\n            原来是 GL_Framebuffer = 0X8d40\r\n            \r\n"," \r\n            Specifies the shader stage from which to query for subroutine uniform index. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.\r\n            ":" \r\n            指定从中查询子例程统一索引的着色器阶段。 shadertype 必须是 VertexShader、TessControlShader、TessEvaluationShader、GeometryShader 或 FragmentShader 之一。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE\r\n            \r\n","\r\n            Original was GL_AND_REVERSE = 0x1502\r\n            ":"\r\n            原来是 GL_AND_REVERSE = 0x1502\r\n            \r\n"," \r\n            Specifies the dimension of the control point array in the  axis. Must be positive. The initial value is 1.\r\n            ":" \r\n            指定轴中控制点数组的维度。必须是积极的。初始值为 1。\r\n            \r\n","\r\n            Original was GL_RGB16UI = 0x8D77\r\n            ":"\r\n            原来是 GL_RGB16UI = 0x8D77\r\n            \r\n","\r\n            Original was GL_DOUBLE_MAT4x2_EXT = 0x8F4D\r\n            ":"\r\n            原来是 GL_DOUBLE_MAT4x2_EXT = 0x8F4D\r\n            \r\n","\r\n            Provides access to mouse devices. Note: this API is not implemented yet.\r\n            ":"\r\n            提供对鼠标设备的访问。注意：此 API 尚未实现。\r\n            \r\n","\r\n            Original was GL_FRAGMENT_LIGHT5_SGIX = 0x8411\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHT5_SGIX = 0x8411\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_UNITS_ARB = 0x86A4\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_UNITS_ARB = 0x86A4\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF\r\n            \r\n","\r\n            Used in GL.NV.MultiDrawArraysIndirectBindles, GL.NV.MultiDrawElementsIndirectBindles\r\n            ":"\r\n            用于GL.NV.MultiDrawArraysIndirectBindles, GL.NV.MultiDrawElementsIndirectBindles\r\n            \r\n","\r\n            Used in GL.GetQueryIndexed, GL.GetQuery\r\n            ":"\r\n            在 GL.GetQueryIndexed、GL.GetQuery 中使用\r\n            \r\n","[requires: v4.4 or ARB_clear_texture|VERSION_4_4]\r\n            Fills all a texture image with a constant value\r\n            ":"[要求：v4.4 或 ARB_clear_texture|VERSION_4_4]\r\n            用常量值填充所有纹理图像\r\n            \r\n"," \r\n            The depth of the region to be invalidated.\r\n            ":" \r\n            要失效的区域的深度。\r\n            \r\n","\r\n            Gets an integer representing the number of wheels on this MouseDevice.\r\n            ":"\r\n            获取一个整数，表示此 MouseDevice 上的滚轮数。\r\n            \r\n","[requires: v1.1]\r\n            Copy a two-dimensional texture subimage\r\n            ":"[要求：v1.1]\r\n            复制二维纹理子图像\r\n            \r\n","\r\n            Original was GL_DEPTH_BUFFER_BIT0_QCOM = 0x00000100\r\n            ":"\r\n            原来是 GL_DEPTH_BUFFER_BIT0_QCOM = 0x00000100\r\n            \r\n","A new IGraphicsContext instance.":"一个新的 IGraphicsContext 实例。\r\n","[requires: v1.1][deprecated: v3.2]\r\n            Render a vertex using the specified vertex array element\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            使用指定的顶点数组元素渲染一个顶点\r\n            \r\n"," if this instance has a down digital pad button; otherwise, ":" 如果这个实例有一个向下的数字键盘按钮；否则，\r\n","\r\n            Original was GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA\r\n            ":"\r\n            原来是 GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA\r\n            \r\n","\r\n            Used in GL.ActiveTexture, GL.MultiTexCoordP1 and 3 other functions\r\n            ":"\r\n            用于 GL.ActiveTexture、GL.MultiTexCoordP1 和其他 3 个函数\r\n            \r\n","\r\n            Original was GL_RGBA16I = 0x8D88\r\n            ":"\r\n            原来是 GL_RGBA16I = 0x8D88\r\n            \r\n","[requires: EXT_disjoint_timer_query]\r\n            Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.\r\n            ":"[需要：EXT_disjoint_timer_query]\r\n            在所有先前的命令都已到达 GL 服务器但尚未执行后，将 GL 时间记录到查询对象中。\r\n            \r\n"," \r\n            Specifies the target texture. Must be Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or ProxyTextureCubeMap.\r\n            ":" \r\n            指定目标纹理。必须是 Texture2D、ProxyTexture2D、Texture1DArray、ProxyTexture1DArray、TextureRectangle、ProxyTextureRectangle、TextureCubeMapPositiveX、TextureCubeMapNegativeX、TextureCubeMapPositiveY、TextureCubeMapNegativeY、TextureCubeMapPositiveZ、TextureCubeMapNegativeZ 或 ProxyTextureCubeMap。\r\n            \r\n","[requires: EXT_texture_view]\r\n            Initialize a texture as a data alias of another texture's data store\r\n            ":"[需要：EXT_texture_view]\r\n            将纹理初始化为另一个纹理数据存储的数据别名\r\n            \r\n","[length: count*4]":"[长度：计数*4]\r\n","\r\n            Original was GL_Texture17 = 0X84d1\r\n            ":"\r\n            原来是 GL_Texture17 = 0X84d1\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_RED_SIZE_OES = 0x8D50\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_RED_SIZE_OES = 0x8D50\r\n            \r\n","[length: count] \r\n            Specifies the address of an array holding the indices to load into the shader subroutine variables.\r\n            ":"[长度：计数]\r\n            指定一个数组的地址，其中包含要加载到着色器子例程变量中的索引。\r\n            \r\n","\r\n            Original was GL_ACTIVE_TEXTURE_ARB = 0x84E0\r\n            ":"\r\n            原来是 GL_ACTIVE_TEXTURE_ARB = 0x84E0\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Bind a named texture to a texturing target\r\n            ":"[要求：v1.0 和 1.0]\r\n            将命名纹理绑定到纹理目标\r\n            \r\n","\r\n            Original was GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE\r\n            ":"\r\n            原来是 GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE\r\n            \r\n","\r\n            Original was GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C\r\n            ":"\r\n            原来是 GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3\r\n            \r\n","\r\n            Original was GL_OP_ADD_EXT = 0x8787\r\n            ":"\r\n            原来是 GL_OP_ADD_EXT = 0x8787\r\n            \r\n","\r\n            Original was GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004\r\n            ":"\r\n            原来是 GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004\r\n            \r\n"," \r\n            The name of a program object whose resources to query.\r\n            ":" \r\n            要查询其资源的程序对象的名称。\r\n            \r\n","\r\n            Original was GL_LERP_ATI = 0x8969\r\n            ":"\r\n            原来是 GL_LERP_ATI = 0x8969\r\n            \r\n","The right bracket key.":"右括号键。\r\n","\r\n            Called when a character is typed.\r\n            ":"\r\n            键入字符时调用。\r\n            \r\n","\r\n            Original was GL_RGB8 = 0x8051\r\n            ":"\r\n            原来是 GL_RGB8 = 0x8051\r\n            \r\n","\r\n            Original was GL_RG16UI = 0x823A\r\n            ":"\r\n            原来是 GL_RG16UI = 0x823A\r\n            \r\n","[requires: INTEL_parallel_arrays]\r\n            Define an array of texture coordinates\r\n            ":"[需要：INTEL_parallel_arrays]\r\n            定义一个纹理坐标数组\r\n            \r\n","\r\n            Original was GL_RGB565 = 0X8d62\r\n            ":"\r\n            原来是 GL_RGB565 = 0X8d62\r\n            \r\n","[requires: ARB_window_pos]\r\n            Specify the raster position in window coordinates for pixel operations\r\n            ":"[要求：ARB_window_pos]\r\n            为像素操作指定窗口坐标中的光栅位置\r\n            \r\n","\r\n            Defines a zero-length Vector4.\r\n            ":"\r\n            定义一个零长度 Vector4。\r\n            \r\n","\r\n            Returns a System.String that represents the current Matrix3d.\r\n            ":"\r\n            返回表示当前 Matrix3d 的 System.String。\r\n            \r\n","[requires: v1.5]\r\n            Return parameters of a buffer object\r\n            ":"[要求：v1.5]\r\n            缓冲区对象的返回参数\r\n            \r\n","\r\n            Original was GL_OES_EGL_image = 1\r\n            ":"\r\n            原来是 GL_OES_EGL_image = 1\r\n            \r\n"," \r\n            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.\r\n            ":" \r\n            指定指向数组中第一个顶点的第一个坐标的指针。初始值为 0。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Replace the source code in a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            替换着色器对象中的源代码\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return parameters of a buffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            缓冲区对象的返回参数\r\n            \r\n","[requires: ARB_shader_objects]\r\n            Returns the value of a uniform variable\r\n            ":"[需要：ARB_shader_objects]\r\n            返回统一变量的值\r\n            \r\n","\r\n            The window styles. For a table of window styles, see CreateWindowEx. \r\n            ":"\r\n            窗口样式。有关窗口样式表，请参阅 CreateWindowEx。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify a two-dimensional texture image in a compressed format\r\n            ":"[要求：v1.0 和 1.0]\r\n            以压缩格式指定二维纹理图像\r\n            \r\n","\r\n            Original was GL_TEXTURE_RED_TYPE = 0x8C10\r\n            ":"\r\n            原来是 GL_TEXTURE_RED_TYPE = 0x8C10\r\n            \r\n","\r\n            Gets a System.String explaining the cause of this exception.\r\n            ":"\r\n            获取解释此异常原因的 System.String。\r\n            \r\n","\r\n            Original was GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336\r\n            ":"原来是 GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336\r\n            \r\n","[requires: v1.0]\r\n            Specify mapping of depth values from normalized device coordinates to window coordinates\r\n            ":"[要求：v1.0]\r\n            指定深度值从规范化设备坐标到窗口坐标的映射\r\n            \r\n","\r\n            Original was GL_Equal = 0X0202\r\n            ":"\r\n            原来是 GL_Equal = 0X0202\r\n            \r\n","\r\n            Used in GL.BufferData\r\n            ":"\r\n            在 GL.BufferData 中使用\r\n            \r\n","[requires: EXT_copy_texture]\r\n            Copy pixels into a 1D texture image\r\n            ":"[需要：EXT_copy_texture]\r\n            将像素复制到一维纹理图像中\r\n            \r\n"," \r\n            The number of entries in the histogram table.  Must be a power of 2.\r\n            ":" \r\n            直方图表中的条目数。必须是 2 的幂。\r\n            \r\n","[requires: SGIX_fragment_lighting]":"[需要：SGIX_fragment_lighting]\r\n","\r\n            Original was GL_GEOMETRY_VERTICES_OUT = 0x8916\r\n            ":"\r\n            原来是 GL_GEOMETRY_VERTICES_OUT = 0x8916\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT8_NV = 0x8CE8\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT8_NV = 0x8CE8\r\n            \r\n"," \r\n            Specify the , ,  coordinates for the raster position.\r\n            ":" \r\n            指定光栅位置的 , , 坐标。\r\n            \r\n","To get device specific information, call GetRawInputDeviceInfo with the hDevice from RAWINPUTHEADER.":"要获取设备特定信息，请使用来自 RAWINPUTHEADER 的 hDevice 调用 GetRawInputDeviceInfo。\r\n","\r\n            Define histogram table\r\n            ":"\r\n            定义直方图表\r\n            \r\n","\r\n            Original was GL_SYNC_X11_FENCE_EXT = 0x90E1\r\n            ":"\r\n            原来是 GL_SYNC_X11_FENCE_EXT = 0x90E1\r\n            \r\n","[requires: v1.0]\r\n            Specify the clear value for the stencil buffer\r\n            ":"[要求：v1.0]\r\n            为模板缓冲区指定清除值\r\n            \r\n","[requires: v1.0]\r\n            Specify pixel arithmetic\r\n            ":"[要求：v1.0]\r\n            指定像素算法\r\n            \r\n","\r\n            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of GL_TEXTURE, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value.\r\n            ":"\r\n            指定应修改其坐标的纹理单元。纹理单元的数量取决于实现，但必须至少为两个。符号常量必须是 GL_TEXTURE 之一，其中 i 的范围从 0 到 GL_MAX_TEXTURE_COORDS - 1，这是一个依赖于实现的值。\r\n            \r\n","\r\n            Original was GL_REG_11_ATI = 0x892C\r\n            ":"\r\n            原来是 GL_REG_11_ATI = 0x892C\r\n            \r\n","\r\n            Original was GL_TEXTURE_ENV_MODE = 0x2200\r\n            ":"\r\n            原来是 GL_TEXTURE_ENV_MODE = 0x2200\r\n            \r\n","\r\n            Original was GL_OP_POWER_EXT = 0x8793\r\n            ":"\r\n            原来是 GL_OP_POWER_EXT = 0x8793\r\n            \r\n","\r\n            This isn't quite a multiply, but the result may be useful in some situations.\r\n            Multiplies two instances.\r\n            ":"\r\n            这不是一个乘法，但结果在某些情况下可能很有用。\r\n            将两个实例相乘。\r\n            \r\n","[length: length] \r\n            Specifies the address an array containing the binary to be loaded into program.\r\n            ":"[长度：长度]\r\n            指定包含要加载到程序中的二进制文件的数组的地址。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171\r\n            ":"\r\n            原来是 GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171\r\n            \r\n","\r\n            Original was GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893\r\n            \r\n","[requires: v2.0]\r\n            Returns a parameter from a shader object\r\n            ":"[要求：v2.0]\r\n            从着色器对象返回参数\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249\r\n            \r\n","\r\n            Original was GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87\r\n            ":"\r\n            原来是 GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87\r\n            \r\n","\r\n            Windows Vista and higher only.\r\n            ":"\r\n            仅限 Windows Vista 和更高版本。\r\n            \r\n","\r\n            Original was GL_RGB8UI_EXT = 0x8D7D\r\n            ":"\r\n            原来是 GL_RGB8UI_EXT = 0x8D7D\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Delete named renderbuffer objects\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            删除命名的渲染缓冲区对象\r\n            \r\n","[requires: EXT_histogram]\r\n            Get minmax parameters\r\n            ":"[需要：EXT_histogram]\r\n            获取最小最大参数\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify the clear value for the stencil buffer\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            为模板缓冲区指定清除值\r\n            \r\n","[requires: NV_video_capture]":"[需要：NV_video_capture]\r\n"," \r\n            Specifies which 32-bit sub-word of the sample mask to update.\r\n            ":" \r\n            指定要更新样本掩码的哪个 32 位子字。\r\n            \r\n"," for the big button.\r\n            This button is also known as Home or Guide.\r\n            ":" 对于大按钮。\r\n            此按钮也称为“主页”或“指南”。\r\n            \r\n","\r\n            This class supports OpenTK and is not meant to be accessed by user code.\r\n            ":"\r\n            此类支持 OpenTK，并不意味着可以由用户代码访问。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009\r\n            \r\n","\r\n            Used in GL.Amd.GetPerfMonitorCounterData, GL.Amd.GetPerfMonitorCounterInfo\r\n            ":"\r\n            用于 GL.Amd.GetPerfMonitorCounterData, GL.Amd.GetPerfMonitorCounterInfo\r\n            \r\n","\r\n            Original was GL_INDEX = 0x8222\r\n            ":"\r\n            原来是 GL_INDEX = 0x8222\r\n            \r\n","[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]":"[要求：v3.3 或 ARB_sampler_objects|VERSION_3_3]\r\n","\r\n            Original was GL_COMBINE = 0x8570\r\n            ":"\r\n            原来是 GL_COMBINE = 0x8570\r\n            \r\n","\r\n            Original was GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C\r\n            ":"\r\n            原来是 GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C\r\n            \r\n","\r\n            Used in GL.TexStorage3DMultisample\r\n            ":"\r\n            用于 GL.TexStorage3DMultisample\r\n            \r\n","\r\n            Original was GL_RGBA4 = 0x8056\r\n            ":"\r\n            原来是 GL_RGBA4 = 0x8056\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER13_EXT = 0x8832\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER13_EXT = 0x8832\r\n            \r\n","\r\n            Original was GL_DEPTH_BIAS = 0x0D1F\r\n            ":"\r\n            原来是 GL_DEPTH_BIAS = 0x0D1F\r\n            \r\n","\r\n            Original was GL_FRAGMENT_LIGHT6_SGIX = 0x8412\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHT6_SGIX = 0x8412\r\n            \r\n"," \r\n            Specify the location of the origin in the bitmap image. The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes.\r\n            ":" \r\n            指定原点在位图图像中的位置。原点是从位图的左下角开始测量的，以右和上为正轴。\r\n            \r\n","\r\n            Original was GL_DYNAMIC_COPY = 0x88EA\r\n            ":"\r\n            原来是 GL_DYNAMIC_COPY = 0x88EA\r\n            \r\n","\r\n            Original was GL_NUM_PASSES_ATI = 0x8970\r\n            ":"\r\n            原来是 GL_NUM_PASSES_ATI = 0x8970\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0\r\n            \r\n","\r\n            Original was GL_RGB8_OES = 0x8051\r\n            ":"\r\n            原来是 GL_RGB8_OES = 0x8051\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5\r\n            \r\n","\r\n            Original was GL_MAP1_BINORMAL_EXT = 0x8446\r\n            ":"\r\n            原来是 GL_MAP1_BINORMAL_EXT = 0x8446\r\n            \r\n","\r\n            If RIDEV_NOLEGACY is set for a mouse or a keyboard, the system does not generate any legacy message for that device for the application. For example, if the mouse TLC is set with RIDEV_NOLEGACY, WM_LBUTTONDOWN and related legacy mouse messages are not generated. Likewise, if the keyboard TLC is set with RIDEV_NOLEGACY, WM_KEYDOWN and related legacy keyboard messages are not generated.\r\n            ":"\r\n            如果为鼠标或键盘设置了 RIDEV_NOLEGACY，则系统不会为应用程序的该设备生成任何遗留消息。例如，如果鼠标 TLC 设置为 RIDEV_NOLEGACY，则不会生成 WM_LBUTTONDOWN 和相关的传统鼠标消息。同样，如果键盘 TLC 设置为 RIDEV_NOLEGACY，则不会生成 WM_KEYDOWN 和相关的传统键盘消息。\r\n            \r\n","[length: transformType]":"[长度：变换类型]\r\n"," \r\n            Specifies a potential program object.\r\n            ":" \r\n            指定潜在的程序对象。\r\n            \r\n","\r\n            Used in GL.GetTexEnv, GL.TexEnv\r\n            ":"\r\n            在 GL.GetTexEnv、GL.TexEnv 中使用\r\n            \r\n"," \r\n            Specified how the alpha source blending factor is computed.  The same symbolic constants are accepted as for srcRGB. The initial value is One.\r\n            ":" \r\n            指定如何计算 alpha 源混合因子。接受与 srcRGB 相同的符号常量。初始值为一。\r\n            \r\n","[requires: ARB_fragment_program|ARB_vertex_program]\r\n            Determines if a name corresponds to a program object\r\n            ":"[需要：ARB_fragment_program|ARB_vertex_program]\r\n            确定名称是否对应于程序对象\r\n            \r\n","\r\n            Original was GL_FRAGMENT_TEXTURE = 0x829F\r\n            ":"\r\n            原来是 GL_FRAGMENT_TEXTURE = 0x829F\r\n            \r\n","A new Matrix2x4 which holds the result of the subtraction":"保存减法结果的新 Matrix2x4\r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C\r\n            \r\n","\r\n            Used in GL.BindTransformFeedback\r\n            ":"\r\n            在 GL.BindTransformFeedback 中使用\r\n            \r\n","\r\n            Original was GL_SAMPLER_BUFFER_AMD = 0x9001\r\n            ":"\r\n            原来是 GL_SAMPLER_BUFFER_AMD = 0x9001\r\n            \r\n"," \r\n            Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.\r\n            ":" \r\n            指定清除颜色缓冲区时使用的红色、绿色、蓝色和 alpha 值。初始值全部为 0。\r\n            \r\n"," \r\n            Specifies the location of the subroutine uniform.\r\n            ":" \r\n            指定子程序统一的位置。\r\n            \r\n"," \r\n            Specify the target of the bind operation. target must be either TransformFeedbackBuffer or UniformBuffer.\r\n            ":" \r\n            指定绑定操作的目标。 target 必须是 TransformFeedbackBuffer 或 UniformBuffer。\r\n            \r\n","\r\n            Original was GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 0x900D\r\n            ":"\r\n            原来是 GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 0x900D\r\n            \r\n","[length: n] \r\n            Specifies the address of an array containing the n names of the objects to be deleted.\r\n            ":"[长度：n]\r\n            指定包含要删除的对象的 n 个名称的数组的地址。\r\n            \r\n"," \r\n            Specifies the name of the program containing the subroutine.\r\n            ":" \r\n            指定包含子例程的程序的名称。\r\n            \r\n","\r\n            Original was GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6\r\n            ":"\r\n            原来是 GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6\r\n            \r\n","\r\n            Provides access to OpenGL ES 3.0 methods.\r\n            ":"\r\n            提供对 OpenGL ES 3.0 方法的访问。\r\n            \r\n","\r\n            Handle to the raw input device. This comes from the lParam of the WM_INPUT message,\r\n            from RawInputHeader.Device, or from GetRawInputDeviceList.\r\n            It can also be NULL if an application inserts input data, for example, by using SendInput.\r\n            ":"\r\n            原始输入设备的句柄。这来自 WM_INPUT 消息的 lParam，\r\n            来自 RawInputHeader.Device，或来自 GetRawInputDeviceList。\r\n            如果应用程序插入输入数据（例如，通过使用 SendInput），它也可以为 NULL。\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4\r\n            \r\n","\r\n            Original was GL_NumShaderBinaryFormats = 0X8df9\r\n            ":"\r\n            原来是 GL_NumShaderBinaryFormats = 0X8df9\r\n            \r\n","\r\n            Original was GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F\r\n            ":"\r\n            原来是 GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F\r\n            \r\n"," if this instance has a back button; otherwise, ":" 如果此实例有后退按钮；否则，\r\n","True if key is pressed; false otherwise.":"如果按键被按下则为真；否则为假。\r\n","JoystickCapabilities":"操纵杆功能\r\n","\r\n            Used in GL.GetColorTableParameter, GL.Ext.GetColorTableParameter\r\n            ":"\r\n            用于GL.GetColorTableParameter、GL.Ext.GetColorTableParameter\r\n            \r\n","\r\n            Original was GL_EXTENSIONS = 0x1F03\r\n            ":"\r\n            原来是 GL_EXTENSIONS = 0x1F03\r\n            \r\n"," \r\n            Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.\r\n            ":" \r\n            指定纹理参数的符号名称。接受 TextureMagFilter、TextureMinFilter、TextureWrapS 和 TextureWrapT。\r\n            \r\n"," structure containing the combined state for all keyboard devices.":" 包含所有键盘设备的组合状态的结构。\r\n"," \r\n            Specifies the index of the active uniform whose name to query.\r\n            ":" \r\n            指定要查询其名称的活动制服的索引。\r\n            \r\n","\r\n            Original was GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C\r\n            ":"\r\n            原来是 GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C\r\n            \r\n","\r\n            Multiplies and instance by a scalar.\r\n            ":"\r\n            乘以标量并实例化。\r\n            \r\n","\r\n            Original was GL_SWIZZLE_STRQ_ATI = 0x897A\r\n            ":"\r\n            原来是 GL_SWIZZLE_STRQ_ATI = 0x897A\r\n            \r\n","[requires: v3.3 or ARB_blend_func_extended|VERSION_3_3]\r\n            Bind a user-defined varying out variable to a fragment shader color number and index\r\n            ":"[要求：v3.3 或 ARB_blend_func_extended|VERSION_3_3]\r\n            将用户定义的 varying out 变量绑定到片段着色器颜色编号和索引\r\n            \r\n","left-hand operand":"左手操作数\r\n","\r\n            Original was GL_BOOL_VEC3_ARB = 0x8B58\r\n            ":"\r\n            原来是 GL_BOOL_VEC3_ARB = 0x8B58\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_ALPHA_SIZE_OES = 0x8D53\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_ALPHA_SIZE_OES = 0x8D53\r\n            \r\n","\r\n            Used in GL.Oes.ClipPlane, GL.Oes.GetClipPlane\r\n            ":"\r\n            用于GL.Oes.ClipPlane, GL.Oes.GetClipPlane\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8\r\n            \r\n","[requires: v1.0]\r\n            Set the lighting model parameters\r\n            ":"[要求：v1.0]\r\n            设置光照模型参数\r\n            \r\n"," \r\n            Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form ClipPlane  where i ranges from 0 to the value of MaxClipPlanes - 1.\r\n            ":" \r\n            指定剪裁平面。裁剪平面的数量取决于实现，但至少支持六个裁剪平面。它们由 ClipPlane 形式的符号名称标识，其中 i 的范围从 0 到 MaxClipPlanes - 1 的值。\r\n            \r\n","A new Matrix2x3 which holds the result of the addition":"保存加法结果的新 Matrix2x3\r\n","\r\n            Used in GL.MemoryBarrierByRegion\r\n            ":"\r\n            在 GL.MemoryBarrierByRegion 中使用\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CD\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CD\r\n            \r\n"," \r\n            Specifies the new values to be used for the specified uniform variable.\r\n            ":" \r\n            指定要用于指定统一变量的新值。\r\n            \r\n","\r\n            Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.\r\n            ":"\r\n            指定目标纹理。 Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE_ARRAY_EXT = 0x8457\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_ARRAY_EXT = 0x8457\r\n            \r\n","\r\n            Original was GL_DYNAMIC_DRAW_ARB = 0x88E8\r\n            ":"\r\n            原来是 GL_DYNAMIC_DRAW_ARB = 0x88E8\r\n            \r\n","\r\n            Original was GL_QUERY_COUNTER_BITS_ARB = 0x8864\r\n            ":"\r\n            原来是 GL_QUERY_COUNTER_BITS_ARB = 0x8864\r\n            \r\n","\r\n            Original was GL_T2F_IUI_N3F_V3F_EXT = 0x81B4\r\n            ":"\r\n            原来是 GL_T2F_IUI_N3F_V3F_EXT = 0x81B4\r\n            \r\n","\r\n            Specifies the y-coordinate of the upper left corner of the new window.\r\n            If the new window is a child window, coordinates are relative to the parent window.\r\n            Otherwise, the coordinates are relative to the screen origin.\r\n            ":"\r\n            指定新窗口左上角的 y 坐标。\r\n            如果新窗口是子窗口，则坐标是相对于父窗口的。\r\n            否则，坐标是相对于屏幕原点的。\r\n            \r\n","\r\n            Occurs whenever a keybord key is pressed.\r\n            ":"\r\n            每当按下键盘键时发生。\r\n            \r\n","[requires: v1.5]\r\n            Creates and initializes a buffer object's data store\r\n            ":"[要求：v1.5]\r\n            创建并初始化缓冲区对象的数据存储\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x9134\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x9134\r\n            \r\n"," \r\n            Specifies the height of the texture subimage.\r\n            ":" \r\n            指定纹理子图像的高度。\r\n            \r\n","\r\n            Original was GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D\r\n            ":"\r\n            原来是 GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D\r\n            \r\n","\r\n            Original was GL_INT_IMAGE_CUBE_EXT = 0x905B\r\n            ":"\r\n            原来是 GL_INT_IMAGE_CUBE_EXT = 0x905B\r\n            \r\n"," \r\n            Specifies the size of the array for storing the returned object names.\r\n            ":" \r\n            指定用于存储返回的对象名称的数组的大小。\r\n            \r\n"," \r\n            A token identifying the interface within program containing the resource named name.\r\n            ":" \r\n            标识包含名为 name 的资源的程序中的接口的令牌。\r\n            \r\n","\r\n            Used in GL.BindFramebuffer, GL.CheckFramebufferStatus and 4 other functions\r\n            ":"\r\n            用于GL.BindFramebuffer、GL.CheckFramebufferStatus等4个函数\r\n            \r\n"," if joystick_index is supported by the GameController API; ":" 如果游戏控制器 API 支持 joystick_index；\r\n","To change the settings of a specified display device, use the ChangeDisplaySettingsEx function.\r\n            ":"要更改指定显示设备的设置，请使用 ChangeDisplaySettingsEx 函数。\r\n            \r\n","\r\n            Original was GL_PROGRAM_TARGET_NV = 0x8646\r\n            ":"\r\n            原来是 GL_PROGRAM_TARGET_NV = 0x8646\r\n            \r\n","\r\n            Occurs when one of the mouse wheels is moved.\r\n            ":"\r\n            移动其中一个鼠标滚轮时发生。\r\n            \r\n","\r\n            Original was GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8\r\n            ":"\r\n            原来是 GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8\r\n            \r\n","[requires: v3.0]\r\n            Enable or disable server-side GL capabilities\r\n            ":"[要求：v3.0]\r\n            启用或禁用服务器端 GL 功能\r\n            \r\n","\r\n            Original was GL_INT_IMAGE_BUFFER_EXT = 0x905C\r\n            ":"\r\n            原来是 GL_INT_IMAGE_BUFFER_EXT = 0x905C\r\n            \r\n"," \r\n            Specifies the sync object whose properties to query.\r\n            ":" \r\n            指定要查询其属性的同步对象。\r\n            \r\n","The keypad decimal key.":"小键盘十进制键。\r\n"," \r\n            Specifies the value that param will be set to.\r\n            ":" \r\n            指定参数将设置为的值。\r\n            \r\n","\r\n            Returns the number of names actually returned in objects.\r\n            ":"返回对象中实际返回的名称数。\r\n            \r\n","\r\n            Handle to the target window. If NULL it follows the keyboard focus.\r\n            ":"\r\n            目标窗口的句柄。如果为 NULL，则它跟随键盘焦点。\r\n            \r\n"," severity for this debug message.":" 此调试消息的严重性。\r\n","\r\n            Original was GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1\r\n            \r\n"," \r\n            The name of a buffer object whose data store to invalidate.\r\n            ":" \r\n            其数据存储要失效的缓冲区对象的名称。\r\n            \r\n","\r\n            The third extra mouse button.\r\n            ":"\r\n            第三个额外的鼠标按钮。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273\r\n            ":"\r\n            原来是 GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273\r\n            \r\n","\r\n            Original was GL_PROGRAM_MATRIX_EXT = 0x8E2D\r\n            ":"\r\n            原来是 GL_PROGRAM_MATRIX_EXT = 0x8E2D\r\n            \r\n","\r\n            Used in GL.Ext.BlitFramebuffer\r\n            ":"\r\n            在 GL.Ext.BlitFramebuffer 中使用\r\n            \r\n"," \r\n            The target color table. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.\r\n            ":" \r\n            目标颜色表。必须是 ColorTable、PostConvolutionColorTable 或 PostColorMatrixColorTable。\r\n            \r\n"," \r\n            Specifies the index of the first layer to include in the view.\r\n            ":" \r\n            指定要包含在视图中的第一层的索引。\r\n            \r\n","\r\n            Used in GL.Ati.GetVertexAttribArrayObject, GL.Ati.VertexAttribArrayObject\r\n            ":"\r\n            用于 GL.Ati.GetVertexAttribArrayObject, GL.Ati.VertexAttribArrayObject\r\n            \r\n","The StringBuilder to receive the contents of the pointer.":"StringBuilder 接收指针的内容。\r\n","[requires: v1.0]\r\n            Select a polygon rasterization mode\r\n            ":"[要求：v1.0]\r\n            选择多边形光栅化模式\r\n            \r\n"," \r\n            Format of the output image. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.\r\n            ":" \r\n            输出图像的格式。必须是 Red、Green、Blue、Alpha、Rgb、Bgr、Rgba、Bgra、Luminance 或 LuminanceAlpha 之一。\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39\r\n            \r\n","\r\n            This member is only supported under Microsoft Windows Vista and later versions.\r\n            ":"\r\n            此成员仅在 Microsoft Windows Vista 及更高版本下受支持。\r\n            \r\n","\r\n            Original was GL_RED_INTEGER_EXT = 0x8D94\r\n            ":"\r\n            原来是 GL_RED_INTEGER_EXT = 0x8D94\r\n            \r\n","\r\n            Original was GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E\r\n            ":"\r\n            原来是 GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E\r\n            \r\n","\r\n            Gets the device context for this window instance.\r\n            ":"\r\n            获取此窗口实例的设备上下文。\r\n            \r\n"," \r\n            Specifies the level of the texture that is to be bound.\r\n            ":" \r\n            指定要绑定的纹理级别。\r\n            \r\n","[requires: v4.2 or ARB_texture_storage|VERSION_4_2]\r\n            Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture\r\n            ":"[要求：v4.2 或 ARB_texture_storage|VERSION_4_2]\r\n            同时为三维、二维数组或立方体贴图数组纹理的所有级别指定存储\r\n            \r\n"," structure that contains the internal bounds of this window, in client coordinates.\r\n            The internal bounds include the drawing area of the window, but exclude the titlebar and window borders.\r\n            ":" 在客户端坐标中包含此窗口内部边界的结构。\r\n            内部边界包括窗口的绘图区域，但不包括标题栏和窗口边框。\r\n            \r\n","\r\n            The x-coordinate of a cursor's hot spot. If this structure defines \r\n            an icon, the hot spot is always in the center of the icon, and \r\n            this member is ignored.\r\n            ":"\r\n            光标热点的 x 坐标。如果这个结构定义\r\n            一个图标，热点总是在图标的中心，并且\r\n            该成员被忽略。\r\n            \r\n","\r\n            Original was GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 0x912F\r\n            ":"\r\n            原来是 GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 0x912F\r\n            \r\n","\r\n            Original was GL_DEBUG_LOGGED_MESSAGES = 0x9145\r\n            ":"\r\n            原来是 GL_DEBUG_LOGGED_MESSAGES = 0x9145\r\n            \r\n","\r\n            Original was GL_IMAGE_ROTATE_ANGLE_HP = 0x8159\r\n            ":"\r\n            原来是 GL_IMAGE_ROTATE_ANGLE_HP = 0x8159\r\n            \r\n","\r\n            Compares this instance to the specified ContextHandle for equality.\r\n            ":"\r\n            比较此实例与指定的 ContextHandle 是否相等。\r\n            \r\n","[requires: NV_vertex_program]\r\n            Specify a parameter for a program object\r\n            ":"[要求：NV_vertex_program]\r\n            为程序对象指定参数\r\n            \r\n"," indicating whether the second extra mouse button is pressed.\r\n            This property is intended for XNA compatibility.\r\n            ":" 指示是否按下了第二个额外的鼠标按钮。\r\n            此属性旨在实现 XNA 兼容性。\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED\r\n            \r\n","\r\n            Original was GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C\r\n            ":"\r\n            原来是 GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C\r\n            \r\n","\r\n            Used in GL.Ext.TexBuffer\r\n            ":"\r\n            在 GL.Ext.TexBuffer 中使用\r\n            \r\n","\r\n            The internal format of the convolution filter kernel. The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or GL_RGBA16.\r\n            ":"\r\n            卷积滤波器内核的内部格式。 The allowable values are GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB、GL_RGB4、GL_RGB5、GL_RGB8、GL_RGB10、GL_RGB12、GL_RGB16、GL_RGBA、GL_RGBA2、GL_RGBA4、GL_RGB5_A1、GL_RGBA8、GL_RGB10_A2、GL_RGBA12或GL_RGBA16。\r\n            \r\n","Scale factor for x-axis":"x 轴的比例因子\r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A\r\n            \r\n"," structure that contains the external size of this window.\r\n            ":" 包含此窗口的外部大小的结构。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Multiply the current matrix with an orthographic matrix\r\n            ":"[要求：v1.0 和 1.0]\r\n            将当前矩阵与正交矩阵相乘\r\n            \r\n","\r\n            Original was GL_SIGNED_INTENSITY_NV = 0x8707\r\n            ":"\r\n            原来是 GL_SIGNED_INTENSITY_NV = 0x8707\r\n            \r\n","\r\n            Original was GL_TEXTURE2_ARB = 0x84C2\r\n            ":"\r\n            原来是 GL_TEXTURE2_ARB = 0x84C2\r\n            \r\n","[requires: NV_transform_feedback]\r\n            Retrieve information about varying variables selected for transform feedback\r\n            ":"[需要：NV_transform_feedback]\r\n            检索有关为变换反馈选择的不同变量的信息\r\n            \r\n","\r\n            Original was GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624\r\n            ":"\r\n            原来是 GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624\r\n            \r\n","[length: bufSize] \r\n            Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program.\r\n            ":"[长度：bufSize]\r\n            指定缓冲区的地址，GL 将把活动统一的名称放入程序内的 uniformIndex 中。\r\n            \r\n","\r\n            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.\r\n            ":"\r\n            指定连续颜色之间的字节偏移量。如果步幅为 0，则颜色被理解为紧密排列在数组中。初始值为 0。\r\n            \r\n","\r\n            Original was GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181\r\n            ":"\r\n            原来是 GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181\r\n            \r\n"," \r\n            The width of the region to be copied.\r\n            ":" \r\n            要复制的区域的宽度。\r\n            \r\n","\r\n            Once ProcessEvents() returns, it is time to call update and render the next frame.\r\n            ":"\r\n            一旦 ProcessEvents() 返回，就该调用更新并渲染下一帧了。\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249\r\n            \r\n","The result of the addition":"添加的结果\r\n","\r\n            Original was GL_ALPHA8 = 0x803C\r\n            ":"\r\n            原来是 GL_ALPHA8 = 0x803C\r\n            \r\n","[length: 3] \r\n            For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.\r\n            ":"[长度：3]\r\n            对于向量和矩阵命令，指定一个指向计数值数组的指针，该数组将用于更新指定的统一变量。\r\n            \r\n","\r\n            Original was GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA\r\n            ":"\r\n            原来是 GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA\r\n            \r\n","\r\n            Original was GL_SAMPLE_PATTERN_SGIS = 0x80AC\r\n            ":"原来是 GL_SAMPLE_PATTERN_SGIS = 0x80AC\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 X、Y 和 Z 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER9_NV = 0x882E\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER9_NV = 0x882E\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Specify a three-dimensional texture image\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            指定三维纹理图像\r\n            \r\n","[requires: NV_transform_feedback]\r\n            Specify values to record in transform feedback buffers\r\n            ":"[需要：NV_transform_feedback]\r\n            指定要记录在变换反馈缓冲区中的值\r\n            \r\n","\r\n            Used in GL.VertexAttribLFormat, GL.VertexAttribLPointer\r\n            ":"\r\n            用于 GL.VertexAttribLFormat, GL.VertexAttribLPointer\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify a two-dimensional texture subimage in a compressed format\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            以压缩格式指定二维纹理子图像\r\n            \r\n","\r\n            Original was GL_MATRIX29_ARB = 0x88DD\r\n            ":"\r\n            原来是 GL_MATRIX29_ARB = 0x88DD\r\n            \r\n","\r\n            Original was GL_ALPHA4_EXT = 0x803B\r\n            ":"\r\n            原来是 GL_ALPHA4_EXT = 0x803B\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D\r\n            \r\n","\r\n            Original was GL_SampleCoverage = 0X80a0\r\n            ":"\r\n            原来是 GL_SampleCoverage = 0X80a0\r\n            \r\n","\r\n            Original was GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC\r\n            ":"\r\n            原来是 GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC\r\n            \r\n","\r\n            Used in GL.FrontFace\r\n            ":"\r\n            在 GL.FrontFace 中使用\r\n            \r\n"," \r\n            Specifies the type of information to query.\r\n            ":" \r\n            指定要查询的信息类型。\r\n            \r\n","\r\n            Original was GL_TriangleFan = 0X0006\r\n            ":"\r\n            原来是 GL_TriangleFan = 0X0006\r\n            \r\n","\r\n            The first extra mouse button.\r\n            ":"\r\n            第一个额外的鼠标按钮。\r\n            \r\n","\r\n            Determines if the specified joystick is supported by the GameController API.\r\n            ":"\r\n            确定 GameController API 是否支持指定的操纵杆。\r\n            \r\n","\r\n            Original was GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47\r\n            ":"\r\n            原来是 GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD\r\n            ":"\r\n            原来是 GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD\r\n            \r\n","\r\n            Original was GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD\r\n            ":"\r\n            原来是 GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD\r\n            \r\n","The right win key (equivalent to WinRight).":"右赢键（相当于 WinRight）。\r\n","\r\n            Original was GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F\r\n            \r\n","\r\n            Pointer to storage for the span filter image (currently unused).\r\n            ":"\r\n            指向跨度过滤器图像（当前未使用）的存储指针。\r\n            \r\n","[requires: NV_fence]":"[要求：NV_fence]\r\n","\r\n            Original was GL_MAX_IMAGE_UNITS = 0x8F38\r\n            ":"\r\n            原来是 GL_MAX_IMAGE_UNITS = 0x8F38\r\n            \r\n","[requires: SGIS_texture_filter4]":"[要求：SGIS_texture_filter4]\r\n","[requires: v1.0]\r\n            Set texture environment parameters\r\n            ":"[要求：v1.0]\r\n            设置纹理环境参数\r\n            \r\n","[length: pname] \r\n            Specifies the address of an array containing the new values for the parameter given by pname.\r\n            ":"[长度：pname]\r\n            指定包含由 pname 给定的参数的新值的数组的地址。\r\n            \r\n","\r\n            Used in GL.TexCoordPointer\r\n            ":"\r\n            在 GL.TexCoordPointer 中使用\r\n            \r\n","\r\n            Original was GL_TEXTURE_RECTANGLE_ARB = 0x84F5\r\n            ":"\r\n            原来是 GL_TEXTURE_RECTANGLE_ARB = 0x84F5\r\n            \r\n"," \r\n            Specifies the index of the shader subroutine uniform.\r\n            ":" \r\n            指定着色器子例程统一的索引。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = 0x93C4\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = 0x93C4\r\n            \r\n","[length: n] \r\n            Specifies an array of buffer objects to be deleted.\r\n            ":"[长度：n]\r\n            指定要删除的缓冲区对象数组。\r\n            \r\n","\r\n            Original was GL_QUERY_NO_WAIT_INVERTED = 0x8E18\r\n            ":"\r\n            原来是 GL_QUERY_NO_WAIT_INVERTED = 0x8E18\r\n            \r\n","A new Matrix4x3 which holds the result of the addition":"保存加法结果的新 Matrix4x3\r\n","\r\n            Original was GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF\r\n            ":"\r\n            原来是 GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF\r\n            \r\n"," indicating whether OpenTK is running on a Unix platform.\r\n            ":" 指示 OpenTK 是否在 Unix 平台上运行。\r\n            \r\n","\r\n            Original was GL_PROGRAM_PARAMETERS_ARB = 0x88A8\r\n            ":"\r\n            原来是 GL_PROGRAM_PARAMETERS_ARB = 0x88A8\r\n            \r\n","The resultant angle":"合成角度\r\n"," \r\n            Specifies the name of a program object whose parameter to modify.\r\n            ":" \r\n            指定要修改其参数的程序对象的名称。\r\n            \r\n","\r\n            Original was GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89\r\n            ":"\r\n            原来是 GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89\r\n            \r\n","\r\n            Original was GL_NUM_ACTIVE_VARIABLES = 0x9304\r\n            ":"\r\n            原来是 GL_NUM_ACTIVE_VARIABLES = 0x9304\r\n            \r\n","\r\n            Original was GL_SLUMINANCE8_NV = 0x8C47\r\n            ":"\r\n            原来是 GL_SLUMINANCE8_NV = 0x8C47\r\n            \r\n","\r\n            Original was GL_INT_VEC3_ARB = 0x8B54\r\n            ":"\r\n            原来是 GL_INT_VEC3_ARB = 0x8B54\r\n            \r\n","\r\n            Original was GL_IncrWrap = 0X8507\r\n            ":"\r\n            原来是 GL_IncrWrap = 0X8507\r\n            \r\n","\r\n            Original was GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256\r\n            ":"\r\n            原来是 GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF\r\n            \r\n","\r\n            Swaps the front and back buffer, presenting the rendered scene to the user.\r\n            ":"\r\n            交换前后缓冲区，将渲染的场景呈现给用户。\r\n            \r\n","The normalized quaternion":"归一化四元数\r\n","\r\n            Original was GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409\r\n            \r\n","The twentyfourth button of the JoystickDevice.":"JoystickDevice 的第二十四个按钮。\r\n","\r\n            Gets an integer representing the number of keys on this KeyboardDevice.\r\n            ":"\r\n            获取一个整数，表示此 KeyboardDevice 上的键数。\r\n            \r\n","[requires: v1.0]\r\n            Enable or disable writing into the depth buffer\r\n            ":"[要求：v1.0]\r\n            启用或禁用写入深度缓冲区\r\n            \r\n","\r\n            Original was GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216\r\n            ":"\r\n            原来是 GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216\r\n            \r\n","\r\n            Original was GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 0x9102\r\n            ":"\r\n            原来是 GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 0x9102\r\n            \r\n","The current state of the button.":"按钮的当前状态。\r\n","\r\n            Original was GL_INT_IMAGE_3D_EXT = 0x9059\r\n            ":"\r\n            原来是 GL_INT_IMAGE_3D_EXT = 0x9059\r\n            \r\n","\r\n            Original was GL_TEXTURE3 = 0x84C3\r\n            ":"\r\n            原来是 GL_TEXTURE3 = 0x84C3\r\n            \r\n"," \r\n            Specifies a single-valued lighting model parameter. LightModelLocalViewer, LightModelColorControl, and LightModelTwoSide are accepted.\r\n            ":" \r\n            指定单值光照模型参数。接受 LightModelLocalViewer、LightModelColorControl 和 LightModelTwoSide。\r\n            \r\n","\r\n            Original was GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9\r\n            ":"\r\n            原来是 GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9\r\n            \r\n","\r\n            Original was GL_OBJECT_POINT_SGIS = 0x81F5\r\n            ":"\r\n            原来是 GL_OBJECT_POINT_SGIS = 0x81F5\r\n            \r\n","\r\n            Original was GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 0x8917\r\n            ":"\r\n            原来是 GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 0x8917\r\n            \r\n","[requires: OES_single_precision]\r\n            Return the coefficients of the specified clipping plane\r\n            ":"[要求：OES_single_precision]\r\n            返回指定裁剪平面的系数\r\n            \r\n","\r\n            Original was GL_TEXTURE_GEN_STR_OES = 0x8D60\r\n            ":"\r\n            原来是 GL_TEXTURE_GEN_STR_OES = 0x8D60\r\n            \r\n","\r\n            Original was GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D\r\n            ":"\r\n            原来是 GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D\r\n            \r\n","\r\n            Original was GL_CONSTANT_BORDER_HP = 0x8151\r\n            ":"\r\n            原来是 GL_CONSTANT_BORDER_HP = 0x8151\r\n            \r\n","[requires: EXT_texture_object]\r\n            Delete named textures\r\n            ":"[需要：EXT_texture_object]\r\n            删除命名纹理\r\n            \r\n","\r\n            Original was GL_FUNC_SUBTRACT = 0x800A\r\n            ":"\r\n            原来是 GL_FUNC_SUBTRACT = 0x800A\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210\r\n            \r\n"," \r\n            The Z offset of the region to be invalidated.\r\n            ":" \r\n            要失效的区域的 Z 偏移量。\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_FORMAT_SGI = 0x80D8\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_FORMAT_SGI = 0x80D8\r\n            \r\n","\r\n            Original was GL_ARRAY_BUFFER = 0x8892\r\n            ":"\r\n            原来是 GL_ARRAY_BUFFER = 0x8892\r\n            \r\n","\r\n            Returns a System.String representing this DisplayResolution.\r\n            ":"\r\n            返回表示此 DisplayResolution 的 System.String。\r\n            \r\n","\r\n            Original was GL_INTENSITY16_EXT = 0x804D\r\n            ":"\r\n            原来是 GL_INTENSITY16_EXT = 0x804D\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_BIAS = 0x80D7\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_BIAS = 0x80D7\r\n            \r\n","\r\n            The XGetKeyboardMapping() function returns the symbols for the specified number of KeyCodes starting with first_keycode.\r\n            ":"\r\n            XGetKeyboardMapping() 函数返回以 first_keycode 开头的指定数量的 KeyCodes 的符号。\r\n            \r\n","\r\n            Original was GL_R3_G3_B2 = 0x2A10\r\n            ":"\r\n            原来是 GL_R3_G3_B2 = 0x2A10\r\n            \r\n","\r\n            Original was GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2\r\n            ":"\r\n            原来是 GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2\r\n            \r\n","\r\n            Original was GL_HILO8_NV = 0x885E\r\n            ":"\r\n            原来是 GL_HILO8_NV = 0x885E\r\n            \r\n","\r\n            Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE, GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR, GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, a single boolean value for the point sprite texture coordinate replacement, a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE.\r\n            ":"\r\n            Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE, GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR, GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, a single boolean value for the point sprite纹理坐标替换，纹理细节层次偏差的单个浮点值，或者在指定 GL_RGB_SCALE 或 GL_ALPHA_SCALE 时为 1.0、2.0 或 4.0。\r\n            \r\n","\r\n            Original was GL_TEXTURE27 = 0x84DB\r\n            ":"\r\n            原来是 GL_TEXTURE27 = 0x84DB\r\n            \r\n"," \r\n            Specifies which face or faces are being updated. Must be one of Front, Back, or FrontAndBack.\r\n            ":" \r\n            指定要更新的面或面。必须是 Front、Back 或 FrontAndBack 之一。\r\n            \r\n","[length: format,type,width,height,depth] \r\n            Specifies a pointer to the image data in memory.\r\n            ":"[长度：格式、类型、宽度、高度、深度]\r\n            指定指向内存中图像数据的指针。\r\n            \r\n","[length: 2] \r\n            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.\r\n            ":"[长度：2]\r\n            指定顶点的 x、y、z 和 w 坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Retrieve the index of a named uniform block\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            检索命名统一块的索引\r\n            \r\n","\r\n            Original was GL_ALPHA16UI_EXT = 0x8D78\r\n            ":"\r\n            原来是 GL_ALPHA16UI_EXT = 0x8D78\r\n            \r\n","\r\n            Original was GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6\r\n            ":"\r\n            原来是 GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 0x8516\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 0x8516\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6\r\n            \r\n","\r\n            Original was GL_FIXED_ONLY_ARB = 0x891D\r\n            ":"原来是 GL_FIXED_ONLY_ARB = 0x891D\r\n            \r\n","\r\n            Original was GL_GUILTY_CONTEXT_RESET = 0x8253\r\n            ":"\r\n            原来是 GL_GUILTY_CONTEXT_RESET = 0x8253\r\n            \r\n","\r\n            Original was GL_RGB12_EXT = 0x8053\r\n            ":"\r\n            原来是 GL_RGB12_EXT = 0x8053\r\n            \r\n","[requires: ARB_texture_compression]\r\n            Specify a one-dimensional texture subimage in a compressed format\r\n            ":"[需要：ARB_texture_compression]\r\n            以压缩格式指定一维纹理子图像\r\n            \r\n","\r\n            Original was GL_TOP_LEVEL_ARRAY_SIZE = 0x930C\r\n            ":"\r\n            原来是 GL_TOP_LEVEL_ARRAY_SIZE = 0x930C\r\n            \r\n","\r\n            Original was GL_UNIFORM_BUFFER = 0x8A11\r\n            ":"\r\n            原来是 GL_UNIFORM_BUFFER = 0x8A11\r\n            \r\n"," \r\n            Specifies the program pipeline object to which to bind stages from program.\r\n            ":" \r\n            指定要将程序的阶段绑定到的程序管道对象。\r\n            \r\n","\r\n            Original was GL_CLIP_PLANE0_IMG = 0x3000\r\n            ":"\r\n            原来是 GL_CLIP_PLANE0_IMG = 0x3000\r\n            \r\n","\r\n            Original was GL_PALETTE4_RGBA4_OES = 0x8B93\r\n            ":"\r\n            原来是 GL_PALETTE4_RGBA4_OES = 0x8B93\r\n            \r\n","\r\n            Original was GL_TESS_GEN_VERTEX_ORDER = 0x8E78\r\n            ":"\r\n            原来是 GL_TESS_GEN_VERTEX_ORDER = 0x8E78\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277\r\n            ":"原来是 GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277\r\n            \r\n","\r\n            Occurs whenever a character is typed.\r\n            ":"\r\n            每当键入字符时发生。\r\n            \r\n","\r\n            Original was GL_OES_matrix_get = 1\r\n            ":"\r\n            原来是 GL_OES_matrix_get = 1\r\n            \r\n","[length: pname] \r\n            Specifies the value of pname.\r\n            ":"[长度：pname]\r\n            指定 pname 的值。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Read a block of pixels from the frame buffer\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            从帧缓冲区中读取一个像素块\r\n            \r\n"," is connected.\r\n            ":" 已连接。\r\n            \r\n","A value of 0.0 indicates that UpdateFrame events are generated at the maximum possible frequency (i.e. only limited by the hardware's capabilities).":"值 0.0 表示 UpdateFrame 事件以最大可能频率生成（即仅受硬件功能限制）。\r\n","\r\n            Original was GL_UNPACK_SKIP_PIXELS_EXT = 0x0CF4\r\n            ":"\r\n            原来是 GL_UNPACK_SKIP_PIXELS_EXT = 0x0CF4\r\n            \r\n","Gets or sets the connection to the X11 display.":"获取或设置与 X11 显示器的连接。\r\n","\r\n            Original was GL_Renderer = 0X1f01\r\n            ":"\r\n            原来是 GL_Renderer = 0X1f01\r\n            \r\n","Thrown if the Matrix4 is singular.":"如果 Matrix4 是单数则抛出。\r\n","\r\n            Original was GL_RELATIVE_RECT_NV = 0xF7\r\n            ":"\r\n            原来是 GL_RELATIVE_RECT_NV = 0xF7\r\n            \r\n","\r\n            Used in GL.GetVertexAttrib, GL.GetVertexAttribI and 1 other function\r\n            ":"\r\n            用于 GL.GetVertexAttrib、GL.GetVertexAttribI 和其他 1 个函数\r\n            \r\n","\r\n            Pointer to a one-dimensional array of pixel data that is processed to build the column filter kernel.\r\n            ":"\r\n            指向经过处理以构建列过滤器内核的一维像素数据数组的指针。\r\n            \r\n"," \r\n            Specifies the number of source code strings in the array strings.\r\n            ":" \r\n            指定数组字符串中源代码字符串的数量。\r\n            \r\n","\r\n            Original was GL_MODELVIEW1_ARB = 0x850A\r\n            ":"\r\n            原来是 GL_MODELVIEW1_ARB = 0x850A\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_ATTRIBS = 0x88AD\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_ATTRIBS = 0x88AD\r\n            \r\n","\r\n            Specifies the format of the pixel data. The following symbolic values are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.\r\n            ":"指定像素数据的格式。接受以下符号值：GL_STENCIL_INDEX、GL_DEPTH_COMPONENT、GL_DEPTH_STENCIL、GL_RED、GL_GREEN、G​​L_BLUE、GL_RGB、GL_BGR、GL_RGBA 和 GL_BGRA。\r\n            \r\n","Releases the unmanaged resources consumed by this instance.":"释放此实例消耗的非托管资源。\r\n","\r\n            Original was GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9\r\n            ":"\r\n            原来是 GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9\r\n            \r\n","[length: numAttachments] \r\n            The address of an array identifying the attachments to be invalidated.\r\n            ":"[长度：numAttachments]\r\n            标识要失效的附件的数组地址。\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898\r\n            \r\n","\r\n            Original was GL_SIGNED_ALPHA8_NV = 0x8706\r\n            ":"\r\n            原来是 GL_SIGNED_ALPHA8_NV = 0x8706\r\n            \r\n","The left alt key.":"左边的 alt 键。\r\n","\r\n            Original was GL_LUMINANCE_ALPHA32I_EXT = 0x8D87\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA32I_EXT = 0x8D87\r\n            \r\n","Specify the height, which is the created window's inside dimensions and do not include the created window's borders.":"指定高度，即创建窗口的内部尺寸，不包括创建窗口的边框。\r\n","\r\n            A refection handle to the nested type that contains core functions (i.e. not extensions).\r\n            ":"\r\n            包含核心功能（即非扩展）的嵌套类型的反射句柄。\r\n            \r\n","\r\n            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.\r\n            ":"\r\n            指定目标纹理单元的 s、t、r 和 q 纹理坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_MARKER = 0x8268\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_MARKER = 0x8268\r\n            \r\n","\r\n            Enumerates the available character sets.\r\n            ":"\r\n            枚举可用的字符集。\r\n            \r\n","\r\n            Original was GL_NUM_FILL_STREAMS_NV = 0x8E29\r\n            ":"\r\n            原来是 GL_NUM_FILL_STREAMS_NV = 0x8E29\r\n            \r\n","\r\n            Original was GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285\r\n            ":"\r\n            原来是 GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_4D_SGIS = 0x8135\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_4D_SGIS = 0x8135\r\n            \r\n","\r\n            Used in GL.Angle.DrawElementsInstanced, GL.DrawElements and 5 other functions\r\n            ":"\r\n            用于 GL.Angle.DrawElementsInstanced、GL.DrawElements 和其他 5 个函数\r\n            \r\n","[requires: NV_transform_feedback2]\r\n            Determine if a name corresponds to a transform feedback object\r\n            ":"[需要：NV_transform_feedback2]\r\n            确定名称是否对应于变换反馈对象\r\n            \r\n","[length: 4] \r\n            Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. The initial value is (0, 0, 0, 0).\r\n            ":"[长度：4]\r\n            返回四个双精度值，它们是眼坐标中 plane 的平面方程的系数。初始值为 (0, 0, 0, 0)。\r\n            \r\n","\r\n            Original was GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4\r\n            ":"\r\n            原来是 GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658\r\n            \r\n","\r\n            Original was GL_COMBINE_RGB = 0x8571\r\n            ":"\r\n            原来是 GL_COMBINE_RGB = 0x8571\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E\r\n            \r\n","\r\n            Occurs when the window is disposed. \r\n            ":"\r\n            释放窗口时发生。\r\n            \r\n"," \r\n            Specifies the program object containing the shader executables to use in pipeline.\r\n            ":" \r\n            指定包含要在管道中使用的着色器可执行文件的程序对象。\r\n            \r\n","The left bracket key (equivalent to BracketLeft).":"左括号键（相当于 BracketLeft）。\r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3\r\n            \r\n","The ninth axis of the JoystickDevice.":"JoystickDevice 的第九轴。\r\n","[requires: v1.0]\r\n            Create and initialize a buffer object's data store\r\n            ":"[要求：v1.0]\r\n            创建并初始化缓冲区对象的数据存储\r\n            \r\n","\r\n            Original was GL_AMBIENT = 0x1200\r\n            ":"\r\n            原来是 GL_AMBIENT = 0x1200\r\n            \r\n","XGetKeyboardMapping() can generate a BadValue error.":"XGetKeyboardMapping() 会产生 BadValue 错误。\r\n","\r\n            Original was GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D\r\n            ":"\r\n            原来是 GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector4 with the X, W, Y, and Z components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 X、W、Y 和 Z 组件的 OpenTK.Vector4。\r\n            \r\n"," \r\n            Specifies the data type of each texture coordinate. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.\r\n            ":" \r\n            指定每个纹理坐标的数据类型。接受符号常量 Short、Int、Float 或 Double。初始值为浮点数。\r\n            \r\n","[requires: v2.0]\r\n            Specifies the value of a generic vertex attribute\r\n            ":"[要求：v2.0]\r\n            指定通用顶点属性的值\r\n            \r\n","\r\n            Original was GL_AMD_compressed_3DC_texture = 1\r\n            ":"\r\n            原来是 GL_AMD_compressed_3DC_texture = 1\r\n            \r\n","[requires: v1.0]\r\n            Specify a two-dimensional texture image\r\n            ":"[要求：v1.0]\r\n            指定二维纹理图像\r\n            \r\n","\r\n            The reason is that some toolkits do not configure the underlying platform\r\n            correctly or configure it in a way that is incompatible with OpenTK.\r\n            Calling this method first ensures that OpenTK is given the chance to\r\n            initialize itself and configure the platform correctly.\r\n            ":"原因是有些工具包没有配置底层平台\r\n            正确或以与 OpenTK 不兼容的方式配置它。\r\n            首先调用此方法可确保 OpenTK 有机会\r\n            初始化自身并正确配置平台。\r\n            \r\n","The F33 key.":"F33 键。\r\n","\r\n            Original was GL_INTENSITY32I_EXT = 0x8D85\r\n            ":"\r\n            原来是 GL_INTENSITY32I_EXT = 0x8D85\r\n            \r\n","\r\n            Original was GL_COVERAGE_COMPONENT_NV = 0x8ED0\r\n            ":"\r\n            原来是 GL_COVERAGE_COMPONENT_NV = 0x8ED0\r\n            \r\n","The value that will initialize this instance.":"将初始化此实例的值。\r\n"," value describing whether a valid button configuration\r\n            exists for this ":" 描述是否有效按钮配置的值\r\n            为此而存在\r\n","[length: 4] \r\n            Specifies the new values to be used for the specified vertex attribute.\r\n            ":"[长度：4]\r\n            指定要用于指定顶点属性的新值。\r\n            \r\n","\r\n            Gets a value indicating whether this instance is connected.\r\n            ":"\r\n            获取一个值，该值指示此实例是否已连接。\r\n            \r\n","\r\n            Original was GL_COPY = 0x1503\r\n            ":"\r\n            原来是 GL_COPY = 0x1503\r\n            \r\n","[in, out] Pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.":"[in, out] 指向包含所需客户区左上角和右下角坐标的 RECT 结构的指针。当函数返回时，该结构包含窗口左上角和右下角的坐标，以容纳所需的客户区。\r\n","\r\n            Original was GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48\r\n            ":"\r\n            原来是 GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48\r\n            \r\n","\r\n            Original was GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199\r\n            ":"\r\n            原来是 GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199\r\n            \r\n","\r\n            Original was GL_CLIP_DISTANCE6 = 0x3006\r\n            ":"\r\n            原来是 GL_CLIP_DISTANCE6 = 0x3006\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Delete renderbuffer objects\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            删除渲染缓冲区对象\r\n            \r\n","[length: 1] \r\n            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.\r\n            ":"[长度：1]\r\n            指定目标纹理单元的 s、t、r 和 q 纹理坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n","Pointer to a POINT structure that specifies the screen coordinates to be converted.":"指向指定要转换的屏幕坐标的 POINT 结构的指针。\r\n","\r\n            Number of RawInputDevice structures in RawInputDevices.\r\n            ":"\r\n            RawInputDevices 中 RawInputDevice 结构的数量。\r\n            \r\n","\r\n            Original was GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A\r\n            ":"\r\n            原来是 GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A\r\n            \r\n","\r\n            Original was GL_TEXTURE_MAX_LOD = 0x813B\r\n            ":"\r\n            原来是 GL_TEXTURE_MAX_LOD = 0x813B\r\n            \r\n","\r\n            Original was GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7\r\n            ":"\r\n            原来是 GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7\r\n            \r\n","\r\n            Gets a double representing the period of UpdateFrame events, in seconds.\r\n            ":"获取表示 UpdateFrame 事件周期的双精度值，以秒为单位。\r\n            \r\n","\r\n            Original was GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1\r\n            ":"\r\n            原来是 GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1\r\n            \r\n","\r\n            Original was GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500\r\n            ":"\r\n            原来是 GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500\r\n            \r\n","\r\n            Original was GL_4PASS_1_EXT = 0x80A5\r\n            ":"\r\n            原来是 GL_4PASS_1_EXT = 0x80A5\r\n            \r\n","\r\n            Original was GL_BlendDstRgb = 0X80c8\r\n            ":"\r\n            原来是 GL_BlendDstRgb = 0X80c8\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Bind a named renderbuffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            绑定一个命名的渲染缓冲区对象\r\n            \r\n","\r\n            Original was GL_PROGRAM_INPUT = 0x92E3\r\n            ":"\r\n            原来是 GL_PROGRAM_INPUT = 0x92E3\r\n            \r\n","[requires: v4.1 or ARB_get_program_binary|VERSION_4_1]\r\n            Specify a parameter for a program object\r\n            ":"[要求：v4.1 或 ARB_get_program_binary|VERSION_4_1]\r\n            为程序对象指定参数\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_CUBE_MAP = 0x8514\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_CUBE_MAP = 0x8514\r\n            \r\n","[requires: v1.1]\r\n            Specify a two-dimensional texture subimage\r\n            ":"[要求：v1.1]\r\n            指定二维纹理子图像\r\n            \r\n","\r\n            Original was GL_BoolVec4 = 0X8b59\r\n            ":"原来是 GL_BoolVec4 = 0X8b59\r\n            \r\n","\r\n            Used in GL.Arb.GetBufferParameter\r\n            ":"\r\n            在 GL.Arb.GetBufferParameter 中使用\r\n            \r\n","[requires: EXT_cull_vertex]":"[需要：EXT_cull_vertex]\r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return a string describing the current GL connection\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回描述当前 GL 连接的字符串\r\n            \r\n","\r\n            Original was GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643\r\n            ":"\r\n            原来是 GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643\r\n            \r\n","\r\n            Original was GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D\r\n            ":"\r\n            原来是 GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9\r\n            \r\n","\r\n            Original was GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A\r\n            ":"\r\n            原来是 GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A\r\n            \r\n","\r\n            Original was GL_OBJECT_SUBTYPE_ARB = 0x8B4F\r\n            ":"\r\n            原来是 GL_OBJECT_SUBTYPE_ARB = 0x8B4F\r\n            \r\n","Depth bits.":"深度位。\r\n","[requires: ARB_draw_buffers_blend]\r\n            Specify the equation used for both the RGB blend equation and the Alpha blend equation\r\n            ":"[需要：ARB_draw_buffers_blend]\r\n            指定用于 RGB 混合方程和 Alpha 混合方程的方程\r\n            \r\n","[requires: v4.3 or ARB_framebuffer_no_attachments|VERSION_4_3]\r\n            Set a named parameter of a framebuffer\r\n            ":"[要求：v4.3 或 ARB_framebuffer_no_attachments|VERSION_4_3]\r\n            设置帧缓冲区的命名参数\r\n            \r\n","\r\n            Used in GL.NV.GetVertexAttrib, GL.NV.GetVertexAttribL and 1 other function\r\n            ":"\r\n            用于 GL.NV.GetVertexAttrib、GL.NV.GetVertexAttribL 和 1 个其他函数\r\n            \r\n","\r\n            Closes the GameWindow. Equivalent to ":"\r\n            关闭游戏窗口。相当于\r\n","\r\n            Original was GL_PREVIOUS = 0x8578\r\n            ":"\r\n            原来是 GL_PREVIOUS = 0x8578\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Generate a contiguous set of empty display lists\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            生成一组连续的空显示列表\r\n            \r\n","\r\n            Original was GL_UNSIGNALED = 0x9118\r\n            ":"\r\n            原来是 GL_UNSIGNALED = 0x9118\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_COUNT_EXT = 0x8084\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_COUNT_EXT = 0x8084\r\n            \r\n","[requires: v4.3 or ARB_texture_storage_multisample|VERSION_4_3]\r\n            Specify storage for a two-dimensional multisample texture\r\n            ":"[要求：v4.3 或 ARB_texture_storage_multisample|VERSION_4_3]\r\n            指定二维多样本纹理的存储\r\n            \r\n","\r\n            Original was GL_TEXTURE_LUMINANCE_SIZE = 0x8060\r\n            ":"\r\n            原来是 GL_TEXTURE_LUMINANCE_SIZE = 0x8060\r\n            \r\n","\r\n            Original was GL_POINT_SPRITE_NV = 0x8861\r\n            ":"\r\n            原来是 GL_POINT_SPRITE_NV = 0x8861\r\n            \r\n","[length: size,type,stride] \r\n            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.\r\n            ":"[长度：尺寸、类型、步幅]\r\n            指定指向数组中第一个颜色元素的第一个组件的指针。初始值为 0。\r\n            \r\n","[requires: KHR_debug]\r\n            Push a named debug group into the command stream\r\n            ":"[要求：KHR_debug]\r\n            将命名的调试组推送到命令流中\r\n            \r\n","\r\n            Original was GL_TRIANGLE_MESH_SUN = 0x8615\r\n            ":"\r\n            原来是 GL_TRIANGLE_MESH_SUN = 0x8615\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPARE_MODE = 0x884C\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPARE_MODE = 0x884C\r\n            \r\n","\r\n            Original was GL_INDEX_ARRAY = 0x8077\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY = 0x8077\r\n            \r\n","\r\n            Original was GL_MATRIX0 = 0x88C0\r\n            ":"\r\n            原来是 GL_MATRIX0 = 0x88C0\r\n            \r\n","\r\n            Original was GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA\r\n            ":"\r\n            原来是 GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA\r\n            \r\n"," \r\n            Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.\r\n            ":" \r\n            指定要返回的通用顶点属性参数的符号名称。必须是 VertexAttribArrayPointer。\r\n            \r\n","The hardware id for the device.":"设备的硬件 ID。\r\n","\r\n            Original was GL_CURRENT_PROGRAM = 0x8B8D\r\n            ":"\r\n            原来是 GL_CURRENT_PROGRAM = 0x8B8D\r\n            \r\n","\r\n            Specifies the value that pname will be set to.\r\n            ":"\r\n            指定 pname 将设置为的值。\r\n            \r\n","\r\n            Original was GL_LOSE_CONTEXT_ON_RESET_KHR = 0x8252\r\n            ":"\r\n            原来是 GL_LOSE_CONTEXT_ON_RESET_KHR = 0x8252\r\n            \r\n","\r\n            Original was GL_CON_11_ATI = 0x894C\r\n            ":"\r\n            原来是 GL_CON_11_ATI = 0x894C\r\n            \r\n","\r\n            The window covers the whole working area, which includes the desktop but not the taskbar and/or panels.\r\n            ":"\r\n            该窗口覆盖整个工作区域，包括桌面但不包括任务栏和/或面板。\r\n            \r\n","Quaternion to translate.":"四元数来翻译。\r\n","\r\n            Specifies the height of the texture image, or the number of layers in a texture array, in the case of the GL_TEXTURE_1D_ARRAY and GL_PROXY_TEXTURE_1D_ARRAY targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.\r\n            ":"\r\n            在 GL_TEXTURE_1D_ARRAY 和 GL_PROXY_TEXTURE_1D_ARRAY 目标的情况下，指定纹理图像的高度或纹理数组中的层数。所有实现都支持至少 1024 纹素高的 2D 纹理图像，以及至少 256 层深的纹理阵列。\r\n            \r\n","\r\n            Original was GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898E\r\n            ":"\r\n            原来是 GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898E\r\n            \r\n","\r\n            Original was GL_PATH_ERROR_POSITION_NV = 0x90AB\r\n            ":"\r\n            原来是 GL_PATH_ERROR_POSITION_NV = 0x90AB\r\n            \r\n","Multiple clients can select events on the same window because their event masks are disjoint. When the X server generates an event, it reports it to all interested clients. ":"多个客户端可以在同一窗口中选择事件，因为它们的事件掩码是不相交的。当 X 服务器生成一个事件时，它会将它报告给所有感兴趣的客户端。\r\n","\r\n            Original was GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54\r\n            ":"\r\n            原来是 GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54\r\n            \r\n"," \r\n            The new value for the parameter named pname.\r\n            ":" \r\n            名为 pname 的参数的新值。\r\n            \r\n","\r\n            Original was GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972\r\n            ":"\r\n            原来是 GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972\r\n            \r\n","\r\n            Original was GL_FLOAT16_VEC4_NV = 0x8FFB\r\n            ":"\r\n            原来是 GL_FLOAT16_VEC4_NV = 0x8FFB\r\n            \r\n","\r\n            Original was GL_AFFINE_2D_NV = 0x9092\r\n            ":"\r\n            原来是 GL_AFFINE_2D_NV = 0x9092\r\n            \r\n","\r\n            Original was GL_SWIZZLE_STR_DR_ATI = 0x8978\r\n            ":"\r\n            原来是 GL_SWIZZLE_STR_DR_ATI = 0x8978\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Associate a generic vertex attribute index with a named attribute variable\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            将通用顶点属性索引与命名属性变量相关联\r\n            \r\n","\r\n            Original was GL_SKIP_COMPONENTS2_NV = -5\r\n            ":"\r\n            原来是 GL_SKIP_COMPONENTS2_NV = -5\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33\r\n            \r\n","[requires: ARB_shader_objects]":"[需要：ARB_shader_objects]\r\n","\r\n            Original was GL_HISTOGRAM_RED_SIZE = 0x8028\r\n            ":"\r\n            原来是 GL_HISTOGRAM_RED_SIZE = 0x8028\r\n            \r\n","\r\n            Original was GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B\r\n            ":"\r\n            原来是 GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B\r\n            \r\n","\r\n            Retrieves driver-dependent window information.\r\n            ":"\r\n            检索依赖于驱动程序的窗口信息。\r\n            \r\n"," \r\n            The source of debug messages to enable or disable.\r\n            ":" \r\n            要启用或禁用的调试消息源。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515\r\n            \r\n","\r\n            Original was GL_SKIP_COMPONENTS4_NV = -3\r\n            ":"\r\n            原来是 GL_SKIP_COMPONENTS4_NV = -3\r\n            \r\n"," \r\n            Specifies the address an array of characters containing the name of the uniform block whose index to retrieve.\r\n            ":" \r\n            指定一个字符数组的地址，其中包含要检索其索引的统一块的名称。\r\n            \r\n"," \r\n            Specify the coordinates for the bottom and top horizontal clipping planes.\r\n            ":" \r\n            指定底部和顶部水平剪裁平面的坐标。\r\n            \r\n","\r\n            Original was GL_DECAL = 0x2101\r\n            ":"\r\n            原来是 GL_DECAL = 0x2101\r\n            \r\n","\r\n            Original was GL_MATRIX8_ARB = 0x88C8\r\n            ":"\r\n            原来是 GL_MATRIX8_ARB = 0x88C8\r\n            \r\n","\r\n            DPad down direction button\r\n            ":"\r\n            方向键向下方向按钮\r\n            \r\n"," \r\n            Specifies the first sampler unit to which a sampler object is to be bound.\r\n            ":" \r\n            指定采样器对象要绑定到的第一个采样器单元。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CROP_RECT_OES = 0x8B9D\r\n            ":"\r\n            原来是 GL_TEXTURE_CROP_RECT_OES = 0x8B9D\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_TEMPORARIES = 0x88A7\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_TEMPORARIES = 0x88A7\r\n            \r\n","\r\n            Original was GL_TEXTURE9_ARB = 0x84C9\r\n            ":"\r\n            原来是 GL_TEXTURE9_ARB = 0x84C9\r\n            \r\n","[length: 1] \r\n            The address of a variable which will receive the number of characters written into name, excluding the null-terminator. If length is Null no length is returned.\r\n            ":"[长度：1]\r\n            变量的地址，它将接收写入名称的字符数，不包括空终止符。如果长度为 Null，则不返回任何长度。\r\n            \r\n","[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]\r\n            Bind a buffer to a vertex buffer bind point\r\n            ":"[要求：v4.3 或 ARB_vertex_attrib_binding|VERSION_4_3]\r\n            将缓冲区绑定到顶点缓冲区绑定点\r\n            \r\n","\r\n            Subtracts two instances.\r\n            ":"\r\n            减去两个实例。\r\n            \r\n","\r\n            The XPutBackEvent() function pushes an event back onto the head of the display's event queue by copying the event into the queue. This can be useful if you read an event and then decide that you would rather deal with it later. There is no limit to the number of times in succession that you can call XPutBackEvent().\r\n            ":"\r\n            XPutBackEvent() 函数通过将事件复制到队列中，将事件推回到显示事件队列的头部。如果您阅读了一个事件然后决定稍后再处理它，这将很有用。您可以连续调用 XPutBackEvent() 的次数没有限制。\r\n            \r\n","\r\n            Original was GL_BLEND_EQUATION_RGB_OES = 0x8009\r\n            ":"\r\n            原来是 GL_BLEND_EQUATION_RGB_OES = 0x8009\r\n            \r\n","\r\n            Original was GL_TEXTURE_WRAP_R_EXT = 0x8072\r\n            ":"\r\n            原来是 GL_TEXTURE_WRAP_R_EXT = 0x8072\r\n            \r\n","[requires: ARB_matrix_palette]":"[需要：ARB_matrix_palette]\r\n","\r\n            Original was GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A\r\n            \r\n"," \r\n            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.\r\n            ":" \r\n            指定缓冲区对象的数据存储中数据替换将开始的偏移量，以字节为单位。\r\n            \r\n","\r\n            Occurs whenever the window is moved.\r\n            ":"\r\n            每当窗口移动时发生。\r\n            \r\n","\r\n            Original was GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82\r\n            ":"\r\n            原来是 GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82\r\n            \r\n","[requires: NV_geometry_program4]":"[要求：NV_geometry_program4]\r\n","\r\n            Original was GL_BLEND_EQUATION_ALPHA_OES = 0x883D\r\n            ":"\r\n            原来是 GL_BLEND_EQUATION_ALPHA_OES = 0x883D\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_FORMAT = 0x8017\r\n            ":"\r\n            原来是 GL_CONVOLUTION_FORMAT = 0x8017\r\n            \r\n","\r\n            Original was GL_SEPARATE_ATTRIBS_NV = 0x8C8D\r\n            ":"\r\n            原来是 GL_SEPARATE_ATTRIBS_NV = 0x8C8D\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_NV = 0x8C79\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_NV = 0x8C79\r\n            \r\n"," \r\n            The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.\r\n            ":" \r\n            指示要复制哪些缓冲区的标志的按位或。允许的标志是 ColorBufferBit、DepthBufferBit 和 StencilBufferBit。\r\n            \r\n","\r\n            Original was GL_FIELD_UPPER_NV = 0x9022\r\n            ":"\r\n            原来是 GL_FIELD_UPPER_NV = 0x9022\r\n            \r\n","\r\n            Original was GL_DEPTH_STENCIL_EXT = 0x84F9\r\n            ":"\r\n            原来是 GL_DEPTH_STENCIL_EXT = 0x84F9\r\n            \r\n","[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]\r\n            Determine if a name corresponds to a sampler object\r\n            ":"[要求：v3.3 或 ARB_sampler_objects|VERSION_3_3]\r\n            确定名称是否对应于采样器对象\r\n            \r\n","[requires: ARB_texture_compression]\r\n            Return a compressed texture image\r\n            ":"[需要：ARB_texture_compression]\r\n            返回压缩纹理图像\r\n            \r\n","\r\n            Original was GL_CLIP_PLANE2_IMG = 0x3002\r\n            ":"\r\n            原来是 GL_CLIP_PLANE2_IMG = 0x3002\r\n            \r\n","Thrown if the Matrix3d is singular.":"如果 Matrix3d 是奇异的，则抛出。\r\n","[requires: v2.0]\r\n            Installs a program object as part of current rendering state\r\n            ":"[要求：v2.0]\r\n            安装程序对象作为当前呈现状态的一部分\r\n            \r\n"," \r\n            Specify new red, green, and blue values for the current color.\r\n            ":" \r\n            为当前颜色指定新的红色、绿色和蓝色值。\r\n            \r\n","\r\n            Used in GL.NV.TexImage2DMultisampleCoverage, GL.NV.TexImage3DMultisampleCoverage and 4 other functions\r\n            ":"\r\n            用于GL.NV.TexImage2DMultisampleCoverage、GL.NV.TexImage3DMultisampleCoverage等4个函数\r\n            \r\n","To perform certain special effects when showing or hiding a window, use AnimateWindow.":"要在显示或隐藏窗口时执行某些特殊效果，请使用 AnimateWindow。\r\n","\r\n            Original was GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982\r\n            ":"\r\n            原来是 GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982\r\n            \r\n","\r\n            Original was GL_TEXTURE_IMAGE_FORMAT = 0x828F\r\n            ":"\r\n            原来是 GL_TEXTURE_IMAGE_FORMAT = 0x828F\r\n            \r\n","\r\n            Original was GL_N3F_V3F = 0x2A25\r\n            ":"\r\n            原来是 GL_N3F_V3F = 0x2A25\r\n            \r\n","\r\n            Original was GL_COMBINE_ALPHA_ARB = 0x8572\r\n            ":"\r\n            原来是 GL_COMBINE_ALPHA_ARB = 0x8572\r\n            \r\n"," if this instance has an A button; otherwise, ":" 如果此实例有一个 A 按钮；否则，\r\n"," \r\n            The offset of the first element of the buffer.\r\n            ":" \r\n            缓冲区第一个元素的偏移量。\r\n            \r\n","[requires: EXT_separate_shader_objects]\r\n            Reserve program pipeline object names\r\n            ":"[需要：EXT_separate_shader_objects]\r\n            保留程序管道对象名称\r\n            \r\n","\r\n            Original was GL_MAX_EXT = 0x8008\r\n            ":"\r\n            原来是 GL_MAX_EXT = 0x8008\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Generate a complete set of mipmaps for a texture object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            为纹理对象生成一组完整的 mipmap\r\n            \r\n","Specifies the structure from which the values (as specified by the value mask) are to be taken. The value mask should have the appropriate bits set to indicate which attributes have been set in the structure.":"指定要从中获取值（由值掩码指定）的结构。值掩码应设置适当的位以指示已在结构中设置了哪些属性。\r\n","\r\n            Original was GL_R5_G6_B5_A8_ICC_SGIX = 0x8467\r\n            ":"\r\n            原来是 GL_R5_G6_B5_A8_ICC_SGIX = 0x8467\r\n            \r\n","\r\n            Used in GL.Apple.ClientWaitSync\r\n            ":"\r\n            在 GL.Apple.ClientWaitSync 中使用\r\n            \r\n","\r\n            Original was GL_REG_29_ATI = 0x893E\r\n            ":"\r\n            原来是 GL_REG_29_ATI = 0x893E\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896\r\n            \r\n","\r\n            Original was GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2\r\n            ":"\r\n            原来是 GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2\r\n            \r\n","\r\n            Original was GL_ALPHA12 = 0x803D\r\n            ":"\r\n            原来是 GL_ALPHA12 = 0x803D\r\n            \r\n","\r\n            Original was GL_RenderbufferHeight = 0X8d43\r\n            ":"\r\n            原来是 GL_RenderbufferHeight = 0X8d43\r\n            \r\n","[requires: NV_vertex_program]\r\n            Specifies the value of a generic vertex attribute\r\n            ":"[要求：NV_vertex_program]\r\n            指定通用顶点属性的值\r\n            \r\n"," \r\n            The format of the pixel data in data. The allowable values are Red, Green, Blue, Alpha, Luminance, LuminanceAlpha, Rgb, Bgr, Rgba, and Bgra.\r\n            ":" \r\n            数据中像素数据的格式。允许的值为 Red、Green、Blue、Alpha、Luminance、LuminanceAlpha、Rgb、Bgr、Rgba 和 Bgra。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Retrieve information about attachments of a bound framebuffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            检索有关绑定帧缓冲区对象附件的信息\r\n            \r\n","\r\n            Original was GL_MATRIX23_ARB = 0x88D7\r\n            ":"\r\n            原来是 GL_MATRIX23_ARB = 0x88D7\r\n            \r\n","\r\n            Original was GL_RETAINED_APPLE = 0x8A1B\r\n            ":"\r\n            原来是 GL_RETAINED_APPLE = 0x8A1B\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_SAMPLES_APPLE = 0x8CAB\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_SAMPLES_APPLE = 0x8CAB\r\n            \r\n","\r\n            Original was GL_TextureBindingCubeMap = 0X8514\r\n            ":"\r\n            原来是 GL_TextureBindingCubeMap = 0X8514\r\n            \r\n","\r\n            Original was GL_R16UI = 0x8234\r\n            ":"\r\n            原来是 GL_R16UI = 0x8234\r\n            \r\n","\r\n            Left thumbstick left direction button\r\n            ":"\r\n            左摇杆左方向按钮\r\n            \r\n","\r\n            Original was GL_MATRIX10_ARB = 0x88CA\r\n            ":"\r\n            原来是 GL_MATRIX10_ARB = 0x88CA\r\n            \r\n","A new Matrix3x4 which holds the result of the subtraction":"保存减法结果的新 Matrix3x4\r\n","\r\n            Original was GL_SRC1_COLOR = 0x88F9\r\n            ":"\r\n            原来是 GL_SRC1_COLOR = 0x88F9\r\n            \r\n","Specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits. If valuemask is zero, the attributes are ignored and are not referenced.":"指定在 attributes 参数中定义了哪些窗口属性。该掩码是有效属性掩码位的按位或运算。如果 valuemask 为零，则属性将被忽略且不被引用。\r\n","\r\n            Original was GL_RGBA8_EXT = 0x8058\r\n            ":"\r\n            原来是 GL_RGBA8_EXT = 0x8058\r\n            \r\n","\r\n            Used in GL.GenerateMipmap\r\n            ":"\r\n            在 GL.GenerateMipmap 中使用\r\n            \r\n","Scale factor for z-axis":"z 轴的比例因子\r\n","\r\n            Original was GL_UNSIGNED_INT64_ARB = 0x140F\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT64_ARB = 0x140F\r\n            \r\n","\r\n            Original was GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36\r\n            ":"\r\n            原来是 GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36\r\n            \r\n","The right operand of the addition.":"加法的右操作数。\r\n","\r\n            Original was GL_TEXTURE14_ARB = 0x84CE\r\n            ":"\r\n            原来是 GL_TEXTURE14_ARB = 0x84CE\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_2_10_10_10_REVERSED = 0x8368\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_2_10_10_10_REVERSED = 0x8368\r\n            \r\n","\r\n            Original was GL_BUFFER_ACCESS = 0x88BB\r\n            ":"\r\n            原来是 GL_BUFFER_ACCESS = 0x88BB\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Attach a renderbuffer as a logical buffer to the currently bound framebuffer object\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            将渲染缓冲区作为逻辑缓冲区附加到当前绑定的帧缓冲区对象\r\n            \r\n","\r\n            Original was GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4\r\n            ":"\r\n            原来是 GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4\r\n            \r\n"," \r\n            Specifies the name of a program object into which to load a program binary.\r\n            ":"指定要将程序二进制文件加载到其中的程序对象的名称。\r\n            \r\n"," in the GamePad configuration database.\r\n            ":" 在 GamePad 配置数据库中。\r\n            \r\n","The escape key.":"逃生键。\r\n","\r\n            Original was GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015\r\n            ":"\r\n            原来是 GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015\r\n            \r\n","\r\n            Original was GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177\r\n            ":"\r\n            原来是 GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_LOW = 0x9148\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_LOW = 0x9148\r\n            \r\n","[requires: SUN_triangle_list]":"[需要：SUN_triangle_list]\r\n","\r\n            Original was GL_VIEW_CLASS_RGTC1_RED = 0x82D0\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_RGTC1_RED = 0x82D0\r\n            \r\n","A new instance that is the result of the subtraction.":"作为减法结果的新实例。\r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215\r\n            \r\n","\r\n            Used in GL.Ext.GetQuery\r\n            ":"\r\n            在 GL.Ext.GetQuery 中使用\r\n            \r\n","\r\n            Points to 16 consecutive values that are used as the elements of a 4 times 4 column-major matrix.\r\n            ":"\r\n            指向用作 4 乘 4 列主矩阵元素的 16 个连续值。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS = 0x88A3\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS = 0x88A3\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Retrieve information about attachments of a bound framebuffer object\r\n            ":"[需要：EXT_framebuffer_object]\r\n            检索有关绑定帧缓冲区对象附件的信息\r\n            \r\n"," \r\n            Specifies a mask that indicates which attributes to save. Values for mask are listed below.\r\n            ":" \r\n            指定指示要保存哪些属性的掩码。下面列出了掩码的值。\r\n            \r\n","\r\n            Original was GL_STORAGE_SHARED_APPLE = 0x85BF\r\n            ":"\r\n            原来是 GL_STORAGE_SHARED_APPLE = 0x85BF\r\n            \r\n","\r\n            Original was GL_TEXTURE_SHADER_NV = 0x86DE\r\n            ":"\r\n            原来是 GL_TEXTURE_SHADER_NV = 0x86DE\r\n            \r\n","[requires: NV_evaluators]":"[要求：NV_evaluators]\r\n","\r\n            Used in GL.GetQuery, GL.Ext.GetQuery\r\n            ":"\r\n            用于 GL.GetQuery, GL.Ext.GetQuery\r\n            \r\n","\r\n            Used in GL.NV.PointParameter\r\n            ":"\r\n            在 GL.NV.PointParameter 中使用\r\n            \r\n","\r\n            Used in GL.Sgis.PointParameter\r\n            ":"\r\n            在 GL.Sgis.PointParameter 中使用\r\n            \r\n","[requires: v3.1]\r\n            Draw multiple instances of a set of elements\r\n            ":"[要求：v3.1]\r\n            绘制一组元素的多个实例\r\n            \r\n","The Vector4 to copy components from.":"要从中复制组件的 Vector4。\r\n","\r\n            Original was GL_MATRIX_PALETTE_ARB = 0x8840\r\n            ":"\r\n            原来是 GL_MATRIX_PALETTE_ARB = 0x8840\r\n            \r\n"," \r\n            Specifies the target buffer object. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryResultBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.\r\n            ":" \r\n            指定目标缓冲区对象。符号常量必须是 ArrayBuffer、AtomicCounterBuffer、CopyReadBuffer、CopyWriteBuffer、DrawIndirectBuffer、DispatchIndirectBuffer、ElementArrayBuffer、PixelPackBuffer、PixelUnpackBuffer、QueryResultBuffer、TextureBuffer、TransformFeedbackBuffer 或 UniformBuffer。\r\n            \r\n","[requires: EXT_multisampled_render_to_texture]":"[需要：EXT_multisampled_render_to_texture]\r\n","\r\n            The control key modifier.\r\n            ":"\r\n            控制键修饰符。\r\n            \r\n","The ContextHandle to compare to.":"要与之比较的 ContextHandle。\r\n","\r\n            Original was GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA\r\n            ":"\r\n            原来是 GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA\r\n            \r\n","\r\n            Original was GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195\r\n            ":"\r\n            原来是 GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195\r\n            \r\n","\r\n            Original was GL_POINTS = 0X0000\r\n            ":"\r\n            原来是 GL_POINTS = 0X0000\r\n            \r\n","\r\n            Original was GL_BLEND_COLOR_EXT = 0x8005\r\n            ":"\r\n            原来是 GL_BLEND_COLOR_EXT = 0x8005\r\n            \r\n","\r\n            The hat is in its bottom-right position.\r\n            ":"\r\n            帽子位于右下角。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Instruct the GL server to block until the specified sync object becomes signaled\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            指示 GL 服务器阻塞，直到指定的同步对象发出信号\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB\r\n            \r\n","\r\n            Original was GL_R5_G6_B5_ICC_SGIX = 0x8466\r\n            ":"原来是 GL_R5_G6_B5_ICC_SGIX = 0x8466\r\n            \r\n","\r\n            Minimizes the specified window and activates the next top-level window in the Z order.\r\n            ":"最小化指定窗口并激活 Z 顺序中的下一个顶级窗口。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify the alpha test function\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定 alpha 测试函数\r\n            \r\n","\r\n            Original was GL_POLYGON_OFFSET_POINT = 0x2A01\r\n            ":"\r\n            原来是 GL_POLYGON_OFFSET_POINT = 0x2A01\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_FORMAT = 0x80D8\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_FORMAT = 0x80D8\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Establish data storage, format and dimensions of a renderbuffer object's image\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            建立渲染缓冲区对象图像的数据存储、格式和尺寸\r\n            \r\n"," \r\n            Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, or Double are accepted. The initial value is Float.\r\n            ":" \r\n            指定数组中每个颜色分量的数据类型。接受符号常量 Byte、UnsignedByte、Short、UnsignedShort、Int、UnsignedInt、Float 或 Double。初始值为浮点数。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310\r\n            \r\n","\r\n            Original was GL_SLUMINANCE_EXT = 0x8C46\r\n            ":"\r\n            原来是 GL_SLUMINANCE_EXT = 0x8C46\r\n            \r\n","\r\n            Original was GL_VARIANT_ARRAY_EXT = 0x87E8\r\n            ":"\r\n            原来是 GL_VARIANT_ARRAY_EXT = 0x87E8\r\n            \r\n","\r\n            Original was GL_FLOAT_MAT2_ARB = 0x8B5A\r\n            ":"\r\n            原来是 GL_FLOAT_MAT2_ARB = 0x8B5A\r\n            \r\n","\r\n            Original was GL_TESS_GEN_SPACING_EXT = 0x8E77\r\n            ":"\r\n            原来是 GL_TESS_GEN_SPACING_EXT = 0x8E77\r\n            \r\n"," \r\n            Specifies a symbolic constant indicating the behavior to be controlled. FragmentShaderDerivativeHint, and GenerateMipmapHint are accepted.\r\n            ":" \r\n            指定一个符号常量，指示要控制的行为。接受 FragmentShaderDerivativeHint 和 GenerateMipmapHint。\r\n            \r\n","[length: count] \r\n            The address of an array of variables to receive the types of the retrieved messages.\r\n            ":"[长度：计数]\r\n            用于接收检索到的消息类型的变量数组的地址。\r\n            \r\n","\r\n            Original was GL_ALPHA_BITS = 0x0D55\r\n            ":"\r\n            原来是 GL_ALPHA_BITS = 0x0D55\r\n            \r\n","[length: pname] \r\n            Returns the requested parameter.\r\n            ":"[长度：pname]\r\n            返回请求的参数。\r\n            \r\n"," \r\n            Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedShort565, UnsignedShort4444, UnsignedShort5551, UnsignedInt2101010Rev, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, UnsignedInt248, and Float32UnsignedInt248Rev.\r\n            ":" \r\n            指定像素数据的数据类型。接受以下符号值：UnsignedByte、Byte、UnsignedShort、Short、UnsignedInt、Int、HalfFloat、Float、UnsignedShort565、UnsignedShort4444、UnsignedShort5551、UnsignedInt2101010Rev、UnsignedInt10F11F11FRev、UnsignedInt5999Rev、UnsignedRevFloatUnsignedInt248、UnsignedInt248、UnsignedInt248\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3\r\n            \r\n","\r\n            Used in GL.FramebufferParameter, GL.GetFramebufferParameter and 3 other functions\r\n            ":"\r\n            用于GL.FramebufferParameter、GL.GetFramebufferParameter等3个函数\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43\r\n            \r\n","\r\n            Gets the value of the wheel in integer units.\r\n            To support high-precision mice, it is recommended to use ":"\r\n            以整数为单位获取轮子的值。\r\n            支持高精度鼠标，推荐使用\r\n","\r\n            The base class for JoystickDevice event arguments.\r\n            ":"\r\n            JoystickDevice 事件参数的基类。\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_TYPE = 0x807B\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_TYPE = 0x807B\r\n            \r\n","\r\n            Original was GL_LINEAR_ATTENUATION = 0x1208\r\n            ":"\r\n            原来是 GL_LINEAR_ATTENUATION = 0x1208\r\n            \r\n","[requires: v1.0]\r\n            Specify whether front- or back-facing facets can be culled\r\n            ":"[要求：v1.0]\r\n            指定是否可以剔除正面或背面面\r\n            \r\n","\r\n            Original was GL_TEXTURE_PRIORITY = 0x8066\r\n            ":"\r\n            原来是 GL_TEXTURE_PRIORITY = 0x8066\r\n            \r\n","\r\n            Original was GL_CLIP_PLANE1_IMG = 0x3001\r\n            ":"\r\n            原来是 GL_CLIP_PLANE1_IMG = 0x3001\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER0 = 0x8825\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER0 = 0x8825\r\n            \r\n","\r\n            Specifies the alpha comparison function. Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. The initial value is GL_ALWAYS.\r\n            ":"\r\n            指定 alpha 比较函数。接受符号常量 GL_NEVER、GL_LESS、GL_EQUAL、GL_LEQUAL、GL_GREATER、GL_NOTEQUAL、GL_GEQUAL 和 GL_ALWAYS。初始值为 GL_ALWAYS。\r\n            \r\n","\r\n            Original was GL_CLIP_DISTANCE4 = 0x3004\r\n            ":"\r\n            原来是 GL_CLIP_DISTANCE4 = 0x3004\r\n            \r\n","\r\n            Original was GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF\r\n            ":"\r\n            原来是 GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF\r\n            \r\n","\r\n            for the OpenTK.Platform implementation.\r\n            ":"\r\n            对于 OpenTK.Platform 实现。\r\n            \r\n","[requires: v2.0]\r\n            Deletes a shader object\r\n            ":"[要求：v2.0]\r\n            删除着色器对象\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665\r\n            \r\n","[requires: EXT_multi_draw_arrays]\r\n            Render multiple sets of primitives by specifying indices of array data elements\r\n            ":"[需要：EXT_multi_draw_arrays]\r\n            通过指定数组数据元素的索引来渲染多组图元\r\n            \r\n","\r\n            Relaxes graphics mode parameters. Use this function to increase compatibility\r\n            on systems that do not directly support a requested GraphicsMode. For example:\r\n            - user requested stereoscopic rendering, but GPU does not support stereo\r\n            - user requseted 16x antialiasing, but GPU only supports 4x\r\n            ":"\r\n            放宽图形模式参数。使用此功能增加兼容性\r\n            在不直接支持请求的 GraphicsMode 的系统上。例如：\r\n            - 用户请求立体渲染，但 GPU 不支持立体\r\n            - 用户要求 16 倍抗锯齿，但 GPU 仅支持 4 倍\r\n            \r\n","\r\n            Describes the current state of a ":"\r\n            描述当前状态\r\n","[requires: v1.4]\r\n            Render multiple sets of primitives by specifying indices of array data elements\r\n            ":"[要求：v1.4]\r\n            通过指定数组数据元素的索引来渲染多组图元\r\n            \r\n","\r\n            Original was GL_DEPTH_ATTACHMENT = 0x8D00\r\n            ":"\r\n            原来是 GL_DEPTH_ATTACHMENT = 0x8D00\r\n            \r\n","\r\n            Original was GL_REG_25_ATI = 0x893A\r\n            ":"\r\n            原来是 GL_REG_25_ATI = 0x893A\r\n            \r\n","\r\n            Original was GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039\r\n            ":"\r\n            原来是 GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039\r\n            \r\n"," \r\n            Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.\r\n            ":" \r\n            指定要渲染的图元类型。接受符号常量 Points、LineStrip、LineLoop、Lines、TriangleStrip、TriangleFan、TrianglesLinesAdjacency、LineStripAdjacency、TrianglesAdjacency、TriangleStripAdjacency 和 Patches。\r\n            \r\n","Specifies the window's depth. A depth of CopyFromParent means the depth is taken from the parent.":"指定窗口的深度。 CopyFromParent 的深度意味着深度取自父级。\r\n"," \r\n            Specifies the first texture unit to which a texture is to be bound.\r\n            ":" \r\n            指定纹理要绑定到的第一个纹理单元。\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_BUFFER = 0x8C2C\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_BUFFER = 0x8C2C\r\n            \r\n","\r\n            Original was GL_IS_PER_PATCH = 0x92E7\r\n            ":"\r\n            原来是 GL_IS_PER_PATCH = 0x92E7\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF\r\n            \r\n","\r\n            Original was GL_DISPLAY_LIST = 0x82E7\r\n            ":"\r\n            原来是 GL_DISPLAY_LIST = 0x82E7\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819\r\n            \r\n","[length: 1] \r\n            Specify the fog distance.\r\n            ":"[长度：1]\r\n            指定雾距离。\r\n            \r\n","\r\n            Original was GL_SHADER = 0x82E1\r\n            ":"\r\n            原来是 GL_SHADER = 0x82E1\r\n            \r\n","\r\n            Original was GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190\r\n            ":"\r\n            原来是 GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Delete framebuffer objects\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            删除帧缓冲区对象\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Return the specified pixel map\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            返回指定的像素图\r\n            \r\n","\r\n            Retrieves the cursor's position, in screen coordinates.\r\n            ":"\r\n            检索光标在屏幕坐标中的位置。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_INTENSITY = 0x84EC\r\n            ":"\r\n            原来是 GL_COMPRESSED_INTENSITY = 0x84EC\r\n            \r\n","[requires: OES_vertex_array_object]\r\n            Bind a vertex array object\r\n            ":"[要求：OES_vertex_array_object]\r\n            绑定一个顶点数组对象\r\n            \r\n"," \r\n            Specifies the type of shader to be created. Must be either VertexShader or FragmentShader.\r\n            ":" \r\n            指定要创建的着色器类型。必须是 VertexShader 或 FragmentShader。\r\n            \r\n","\r\n            Creates an IWindowInfo instance for Angle rendering, based on \r\n            supplied platform window (e.g. a window created with \r\n            CreateWindowsWindowInfo, or CreateDummyWindowInfo).\r\n            ":"\r\n            创建用于角度渲染的 IWindowInfo 实例，基于\r\n            提供的平台窗口（例如，使用\r\n            CreateWindowsWindowInfo 或 CreateDummyWindowInfo）。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT6_NV = 0x8CE6\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT6_NV = 0x8CE6\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPARE_FUNC = 0x884D\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPARE_FUNC = 0x884D\r\n            \r\n","\r\n            Original was GL_LIGHT1 = 0x4001\r\n            ":"\r\n            原来是 GL_LIGHT1 = 0x4001\r\n            \r\n","The Key to check.":"检查的关键。\r\n","\r\n            Motion in the Y direction. This is signed relative motion or absolute motion, depending on the value of usFlags.\r\n            ":"\r\n            Y 方向的运动。这是有符号的相对运动或绝对运动，具体取决于 usFlags 的值。\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX8_EXT = 0x8D48\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX8_EXT = 0x8D48\r\n            \r\n","\r\n            Original was GL_LIGHTEN_KHR = 0x9298\r\n            ":"\r\n            原来是 GL_LIGHTEN_KHR = 0x9298\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_1D = 0x8068\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_1D = 0x8068\r\n            \r\n","\r\n            Original was GL_VERTEX_SHADER_EXT = 0x8780\r\n            ":"\r\n            原来是 GL_VERTEX_SHADER_EXT = 0x8780\r\n            \r\n","\r\n            Original was GL_IMAGE_2D_ARRAY_EXT = 0x9053\r\n            ":"\r\n            原来是 GL_IMAGE_2D_ARRAY_EXT = 0x9053\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT6_EXT = 0x8CE6\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT6_EXT = 0x8CE6\r\n            \r\n","\r\n            Original was GL_MAX_SAMPLES = 0x8D57\r\n            ":"\r\n            原来是 GL_MAX_SAMPLES = 0x8D57\r\n            \r\n","\r\n            Original was GL_OES_point_sprite = 1\r\n            ":"原来是 GL_OES_point_sprite = 1\r\n            \r\n","\r\n            Original was GL_MAX_TESS_GEN_LEVEL = 0x8E7E\r\n            ":"\r\n            原来是 GL_MAX_TESS_GEN_LEVEL = 0x8E7E\r\n            \r\n","[requires: IBM_vertex_array_lists]":"[需要：IBM_vertex_array_lists]\r\n","\r\n            Original was GL_WRITE_ONLY_OES = 0x88B9\r\n            ":"\r\n            原来是 GL_WRITE_ONLY_OES = 0x88B9\r\n            \r\n","Constructs a new GameWindow with sensible default attributes.":"构造一个具有合理默认属性的新 GameWindow。\r\n","\r\n            Original was GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB\r\n            \r\n","\r\n            Original was GL_COLOR = 0x1800\r\n            ":"\r\n            原来是 GL_COLOR = 0x1800\r\n            \r\n","\r\n            Copy pixels into a color table\r\n            ":"\r\n            将像素复制到颜色表中\r\n            \r\n","\r\n            Original was GL_ACTIVE_TEXTURE = 0x84E0\r\n            ":"\r\n            原来是 GL_ACTIVE_TEXTURE = 0x84E0\r\n            \r\n","\r\n            Original was GL_TIMESTAMP = 0x8E28\r\n            ":"\r\n            原来是 GL_TIMESTAMP = 0x8E28\r\n            \r\n","\r\n            Original was GL_MATRIX27_ARB = 0x88DB\r\n            ":"\r\n            原来是 GL_MATRIX27_ARB = 0x88DB\r\n            \r\n","\r\n            Original was GL_SIGNED_HILO16_NV = 0x86FA\r\n            ":"\r\n            原来是 GL_SIGNED_HILO16_NV = 0x86FA\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7\r\n            \r\n","\r\n            Provides the hash code for this object. \r\n            ":"\r\n            提供此对象的哈希码。\r\n            \r\n","\r\n            Original was GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046\r\n            ":"\r\n            原来是 GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046\r\n            \r\n","\r\n            Top level collection Usage page for the raw input device.\r\n            ":"\r\n            原始输入设备的顶级集合使用页面。\r\n            \r\n","\r\n            First row of the matrix.\r\n            ":"\r\n            矩阵的第一行。\r\n            \r\n"," \r\n            Specifies a value that may be the name of a renderbuffer object.\r\n            ":" \r\n            指定一个值，该值可能是渲染缓冲区对象的名称。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB\r\n            ":"\r\n            原来是 GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB\r\n            \r\n","\r\n            Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: GL_CLEAR, GL_SET, GL_COPY, GL_COPY_INVERTED, GL_NOOP, GL_INVERT, GL_AND, GL_NAND, GL_OR, GL_NOR, GL_XOR, GL_EQUIV, GL_AND_REVERSE, GL_AND_INVERTED, GL_OR_REVERSE, and GL_OR_INVERTED. The initial value is GL_COPY.\r\n            ":"\r\n            指定选择逻辑运算的符号常量。接受以下符号：GL_CLEAR、GL_SET、GL_COPY、GL_COPY_INVERTED、GL_NOOP、GL_INVERT、GL_AND、GL_NAND、GL_OR、GL_NOR、GL_XOR、GL_EQUIV、GL_AND_REVERSE、GL_AND_INVERTED、GL_OR_REVERSE 和 GL_OR_INVERTED。初始值为 GL_COPY。\r\n            \r\n","\r\n            Original was GL_BLEND_ADVANCED_COHERENT_NV = 0x9285\r\n            ":"\r\n            原来是 GL_BLEND_ADVANCED_COHERENT_NV = 0x9285\r\n            \r\n","\r\n            Original was GL_COLOR_BUFFER_BIT4_QCOM = 0x00000010\r\n            ":"\r\n            原来是 GL_COLOR_BUFFER_BIT4_QCOM = 0x00000010\r\n            \r\n","[length: n] \r\n            Specifies an array of textures to be deleted.\r\n            ":"[长度：n]\r\n            指定要删除的纹理数组。\r\n            \r\n","\r\n            Create an additional rendering surface that shares the display\r\n            of this window.\r\n            ":"\r\n            创建共享显示的附加渲染表面\r\n            这个窗口的。\r\n            \r\n","\r\n            Original was GL_RGBA4_S3TC = 0x83A3\r\n            ":"\r\n            原来是 GL_RGBA4_S3TC = 0x83A3\r\n            \r\n","\r\n            Original was GL_COUNTER_TYPE_AMD = 0x8BC0\r\n            ":"\r\n            原来是 GL_COUNTER_TYPE_AMD = 0x8BC0\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_VARYING_COMPONENTS = 0x8DDE\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_VARYING_COMPONENTS = 0x8DDE\r\n            \r\n","\r\n            Returns the pixel data.\r\n            ":"\r\n            返回像素数据。\r\n            \r\n","[length: namelen]":"[长度：namelen]\r\n","\r\n            X button\r\n            ":"\r\n            X 按钮\r\n            \r\n","\r\n            Original was GL_TESS_GEN_VERTEX_ORDER_EXT = 0x8E78\r\n            ":"\r\n            原来是 GL_TESS_GEN_VERTEX_ORDER_EXT = 0x8E78\r\n            \r\n","\r\n            Original was GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7\r\n            ":"\r\n            原来是 GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7\r\n            \r\n","\r\n            Checks whether the current typename T is blittable.\r\n            ":"\r\n            检查当前类型名 T 是否可 blittable。\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D\r\n            \r\n","\r\n            Original was GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5\r\n            ":"\r\n            原来是 GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5\r\n            \r\n","\r\n            Defines a common interface for all input devices.\r\n            ":"\r\n            为所有输入设备定义一个公共接口。\r\n            \r\n","\r\n            Original was GL_DYNAMIC_READ_ARB = 0x88E9\r\n            ":"\r\n            原来是 GL_DYNAMIC_READ_ARB = 0x88E9\r\n            \r\n"," \r\n            Specifies the the number of elements in the array of draw parameter structures.\r\n            ":" \r\n            指定绘制参数结构数组中的元素数。\r\n            \r\n"," \r\n            Specifies the parameter whose value to retrieve from the sync object specified in sync.\r\n            ":" \r\n            指定要从 sync 中指定的同步对象中检索其值的参数。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return information about an active uniform variable\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回有关活动统一变量的信息\r\n            \r\n","[requires: v1.5]\r\n            Generate buffer object names\r\n            ":"[要求：v1.5]\r\n            生成缓冲区对象名称\r\n            \r\n","[in] Specifies the window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.":"[in] 指定要计算所需大小的窗口的窗口样式。请注意，您不能指定 WS_OVERLAPPED 样式。\r\n"," \r\n            Specifies the index of the generic vertex attribute to be enabled or disabled.\r\n            ":" \r\n            指定要启用或禁用的通用顶点属性的索引。\r\n            \r\n","\r\n            Original was GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D\r\n            ":"\r\n            原来是 GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D\r\n            \r\n","The twentynineth button of the JoystickDevice.":"JoystickDevice 的第二十九个按钮。\r\n","The relative change in value of the joystick axis.":"操纵杆轴值的相对变化。\r\n","\r\n            Original was GL_PROGRAM_POINT_SIZE_ARB = 0x8642\r\n            ":"\r\n            原来是 GL_PROGRAM_POINT_SIZE_ARB = 0x8642\r\n            \r\n","\r\n            Original was GL_ALPHA32I_EXT = 0x8D84\r\n            ":"\r\n            原来是 GL_ALPHA32I_EXT = 0x8D84\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPRESSED_ARB = 0x86A1\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPRESSED_ARB = 0x86A1\r\n            \r\n"," \r\n            Specifies the format that the elements of the image will be treated as for the purposes of formatted stores.\r\n            ":" \r\n            指定图像元素将被视为用于格式化存储的格式。\r\n            \r\n","[requires: v1.2]\r\n            Render primitives from array data\r\n            ":"[要求：v1.2]\r\n            从数组数据渲染图元\r\n            \r\n","\r\n            Original was GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1\r\n            ":"\r\n            原来是 GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1\r\n            \r\n","\r\n            Gets a System.Boolean that indicates whether the window has been created and has not been destroyed.\r\n            ":"\r\n            获取一个 System.Boolean，它指示窗口是否已创建且尚未销毁。\r\n            \r\n"," \r\n            The width of the region to be invalidated.\r\n            ":" \r\n            要失效的区域的宽度。\r\n            \r\n","The home key.":"主页键。\r\n","\r\n            Used in GL.Angle.RenderbufferStorageMultisample, GL.Apple.RenderbufferStorageMultisample and 8 other functions\r\n            ":"\r\n            用于GL.Angle.RenderbufferStorageMultisample、GL.Apple.RenderbufferStorageMultisample等8个函数\r\n            \r\n","[length: 3] \r\n            Specify new red, green, and blue values for the current secondary color.\r\n            ":"[长度：3]\r\n            为当前的次要颜色指定新的红色、绿色和蓝色值。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return the information log for a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回着色器对象的信息日志\r\n            \r\n","\r\n            Original was GL_QUERY_WAIT_INVERTED = 0x8E17\r\n            ":"\r\n            原来是 GL_QUERY_WAIT_INVERTED = 0x8E17\r\n            \r\n","\r\n            OnRenderFrame: Occurs at the specified frame render rate. Override to add your\r\n            rendering code.\r\n            ":"\r\n            OnRenderFrame：以指定的帧渲染速率发生。覆盖以添加您的\r\n            渲染代码。\r\n            \r\n","\r\n            Original was GL_LUMINANCE16F_EXT = 0x881E\r\n            ":"\r\n            原来是 GL_LUMINANCE16F_EXT = 0x881E\r\n            \r\n","\r\n            Build a rotation matrix from the specified quaternion.\r\n            ":"\r\n            从指定的四元数构建一个旋转矩阵。\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6\r\n            \r\n","\r\n            Used in GL.Ext.GetHistogram, GL.Ext.GetHistogramParameter and 2 other functions\r\n            ":"\r\n            用于 GL.Ext.GetHistogram、GL.Ext.GetHistogramParameter 和其他 2 个函数\r\n            \r\n"," for the left stick button.\r\n            This button represents a left stick that is pressed in.\r\n            ":" 对于左摇杆按钮。\r\n            此按钮代表按下的左摇杆。\r\n            \r\n","\r\n            Original was GL_RED_SCALE = 0x0D14\r\n            ":"\r\n            原来是 GL_RED_SCALE = 0x0D14\r\n            \r\n","\r\n            Original was GL_PROJECTION = 0x1701\r\n            ":"\r\n            原来是 GL_PROJECTION = 0x1701\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247\r\n            \r\n","\r\n            Original was GL_PERFMON_GLOBAL_MODE_QCOM = 0x8FA0\r\n            ":"\r\n            原来是 GL_PERFMON_GLOBAL_MODE_QCOM = 0x8FA0\r\n            \r\n"," indicating whether the middle mouse button is pressed.\r\n            This property is intended for XNA compatibility.\r\n            ":" 指示鼠标中键是否被按下。\r\n            此属性旨在实现 XNA 兼容性。\r\n            \r\n","The value of the wheel.":"轮子的价值。\r\n","\r\n            Original was GL_FRAGMENT_LIGHT4_SGIX = 0x8410\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHT4_SGIX = 0x8410\r\n            \r\n","\r\n            Original was GL_EMBOSS_LIGHT_NV = 0x855D\r\n            ":"\r\n            原来是 GL_EMBOSS_LIGHT_NV = 0x855D\r\n            \r\n","\r\n            Original was GL_OUTPUT_FOG_EXT = 0x87BD\r\n            ":"\r\n            原来是 GL_OUTPUT_FOG_EXT = 0x87BD\r\n            \r\n","\r\n            Original was GL_SAMPLER_BINDING = 0x8919\r\n            ":"\r\n            原来是 GL_SAMPLER_BINDING = 0x8919\r\n            \r\n","[requires: INGR_blend_func_separate]\r\n            Specify pixel arithmetic for RGB and alpha components separately\r\n            ":"[要求：INGR_blend_func_separate]\r\n            分别为 RGB 和 alpha 分量指定像素算法\r\n            \r\n","[requires: v2.0]\r\n            Returns the handles of the shader objects attached to a program object\r\n            ":"[要求：v2.0]\r\n            返回附加到程序对象的着色器对象的句柄\r\n            \r\n","\r\n            Occurs when a button of this JoystickDevice instance is pressed.\r\n            ":"\r\n            按下此 JoystickDevice 实例的按钮时发生。\r\n            \r\n","\r\n            Specifies the version of this OpenGL function.\r\n            ":"\r\n            指定此 OpenGL 函数的版本。\r\n            \r\n","\r\n            Original was GL_BUFFER_MAP_OFFSET = 0x9121\r\n            ":"\r\n            原来是 GL_BUFFER_MAP_OFFSET = 0x9121\r\n            \r\n","\r\n            Original was GL_FramebufferAttachmentTextureLevel = 0X8cd2\r\n            ":"\r\n            原来是 GL_FramebufferAttachmentTextureLevel = 0X8cd2\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX1_OES = 0x8D46\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX1_OES = 0x8D46\r\n            \r\n"," \r\n            Specify the x and y offsets to be added to the current raster position after the bitmap is drawn.\r\n            ":" \r\n            指定绘制位图后要添加到当前光栅位置的 x 和 y 偏移量。\r\n            \r\n","\r\n            Original was GL_RESAMPLE_DECIMATE_SGIX = 0x8430\r\n            ":"\r\n            原来是 GL_RESAMPLE_DECIMATE_SGIX = 0x8430\r\n            \r\n","[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]\r\n            Resume transform feedback operations\r\n            ":"[要求：v4.0 或 ARB_transform_feedback2|VERSION_4_0]\r\n            恢复变换反馈操作\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900F\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900F\r\n            \r\n","[requires: OES_single_precision]\r\n            Multiply the current matrix with an orthographic matrix\r\n            ":"[要求：OES_single_precision]\r\n            将当前矩阵与正交矩阵相乘\r\n            \r\n","\r\n            Specifies the number of unsigned bytes of image data starting at the address specified by data.\r\n            ":"\r\n            指定从 data 指定的地址开始的图像数据的无符号字节数。\r\n            \r\n"," \r\n            Specify the number of contiguous binding points to which to bind buffers.\r\n            ":" \r\n            指定要绑定缓冲区的连续绑定点的数量。\r\n            \r\n","[requires: EXT_texture_perturb_normal]":"[需要：EXT_texture_perturb_normal]\r\n","\r\n            Original was GL_MATRIX9 = 0x88C9\r\n            ":"\r\n            原来是 GL_MATRIX9 = 0x88C9\r\n            \r\n","\r\n            Original was GL_CONSTANT_COLOR = 0x8001\r\n            ":"\r\n            原来是 GL_CONSTANT_COLOR = 0x8001\r\n            \r\n","\r\n            Original was GL_INTERPOLATE_EXT = 0x8575\r\n            ":"\r\n            原来是 GL_INTERPOLATE_EXT = 0x8575\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT14 = 0x8CEE\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT14 = 0x8CEE\r\n            \r\n","[requires: v1.3]\r\n            Specify multisample coverage parameters\r\n            ":"[要求：v1.3]\r\n            指定多样本覆盖参数\r\n            \r\n","\r\n            Original was GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED\r\n            ":"\r\n            原来是 GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D\r\n            \r\n","[requires: KHR_debug]\r\n            Label a a sync object identified by a pointer\r\n            ":"[要求：KHR_debug]\r\n            标记一个由指针标识的同步对象\r\n            \r\n","Constructs a new NativeWindow with default attributes without enabling events.":"在不启用事件的情况下构造具有默认属性的新 NativeWindow。\r\n","[requires: EXT_vertex_array]\r\n            Define an array of edge flags\r\n            ":"[需要：EXT_vertex_array]\r\n            定义一个边标志数组\r\n            \r\n","\r\n            Original was GL_LAST_VERTEX_CONVENTION = 0x8E4E\r\n            ":"\r\n            原来是 GL_LAST_VERTEX_CONVENTION = 0x8E4E\r\n            \r\n"," \r\n            Specifies the shader binary format.\r\n            ":" \r\n            指定着色器二进制格式。\r\n            \r\n","\r\n            Original was GL_PERFQUERY_FLUSH_INTEL = 0x83FA\r\n            ":"\r\n            原来是 GL_PERFQUERY_FLUSH_INTEL = 0x83FA\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX8_OES = 0x8D48\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX8_OES = 0x8D48\r\n            \r\n","\r\n            Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).\r\n            ":"\r\n            以像素为单位指定视口矩形的左下角。初始值为 (0,0)。\r\n            \r\n","\r\n            Original was GL_MAX_PIXEL_MAP_TABLE = 0x0D34\r\n            ":"\r\n            原来是 GL_MAX_PIXEL_MAP_TABLE = 0x0D34\r\n            \r\n","\r\n            Used in GL.Arb.ReadnPixels, GL.ClearTexImage and 26 other functions\r\n            ":"\r\n            用于 GL.Arb.ReadnPixels、GL.ClearTexImage 和其他 26 个函数\r\n            \r\n"," \r\n            Specifies the kind of values that are generated by the evaluator. Symbolic constants Map1Vertex3, Map1Vertex4, Map1Index, Map1Color4, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, and Map1TextureCoord4 are accepted.\r\n            ":"指定由计算器生成的值的种类。接受符号常量 Map1Vertex3、Map1Vertex4、Map1Index、Map1Color4、Map1Normal、Map1TextureCoord1、Map1TextureCoord2、Map1TextureCoord3 和 Map1TextureCoord4。\r\n            \r\n","[requires: v1.2]\r\n            Specify a three-dimensional texture image\r\n            ":"[要求：v1.2]\r\n            指定三维纹理图像\r\n            \r\n","\r\n            Original was GL_MATRIX17 = 0x88D1\r\n            ":"\r\n            原来是 GL_MATRIX17 = 0x88D1\r\n            \r\n","Specifies the visual type. A visual of CopyFromParent means the visual type is taken from the parent.":"指定视觉类型。 CopyFromParent 的视觉意味着视觉类型取自父级。\r\n","\r\n            Original was GL_INT64_VEC2_NV = 0x8FE9\r\n            ":"\r\n            原来是 GL_INT64_VEC2_NV = 0x8FE9\r\n            \r\n","\r\n            Original was GL_VERSION_ES_CM_1_0 = 1\r\n            ":"\r\n            原来是 GL_VERSION_ES_CM_1_0 = 1\r\n            \r\n","[length: n] \r\n            Specifies an array of renderbuffer objects to be deleted.\r\n            ":"[长度：n]\r\n            指定要删除的渲染缓冲区对象数组。\r\n            \r\n"," \r\n            Specifies the length of the buffer subrange, in basic machine units.\r\n            ":" \r\n            以基本机器单位指定缓冲区子范围的长度。\r\n            \r\n","\r\n            Original was GL_OPERAND1_RGB_ARB = 0x8591\r\n            ":"\r\n            原来是 GL_OPERAND1_RGB_ARB = 0x8591\r\n            \r\n","\r\n            Original was GL_SHADOW_AMBIENT_SGIX = 0x80BF\r\n            ":"\r\n            原来是 GL_SHADOW_AMBIENT_SGIX = 0x80BF\r\n            \r\n","\r\n            Original was GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172\r\n            ":"\r\n            原来是 GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172\r\n            \r\n","\r\n            Note: to display our results, we need to allocate a GBM framebuffer\r\n            and point the scanout address to that via Drm.ModeSetCrtc.\r\n            ":"\r\n            注意：为了显示我们的结果，我们需要分配一个 GBM 帧缓冲区\r\n            并通过 Drm.ModeSetCrtc 将扫描输出地址指向该地址。\r\n            \r\n","[length: size,type,stride,count] \r\n            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.\r\n            ":"[长度：尺寸、类型、步幅、计数]\r\n            指定指向数组中第一个颜色元素的第一个组件的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_SOURCE2_ALPHA_ARB = 0x858A\r\n            ":"\r\n            原来是 GL_SOURCE2_ALPHA_ARB = 0x858A\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6\r\n            \r\n","[length: pname] \r\n            The parameter value. Must be one of Reduce, ConstantBorder, ReplicateBorder.\r\n            ":"[长度：pname]\r\n            参数值。必须是 Reduce、ConstantBorder、ReplicateBorder 之一。\r\n            \r\n","\r\n            Original was GL_MODELVIEW19_ARB = 0x8733\r\n            ":"\r\n            原来是 GL_MODELVIEW19_ARB = 0x8733\r\n            \r\n","\r\n            Original was GL_WRITE_ONLY = 0x88B9\r\n            ":"\r\n            原来是 GL_WRITE_ONLY = 0x88B9\r\n            \r\n","\r\n            Occurs before the window is displayed for the first time.\r\n            ":"\r\n            在窗口第一次显示之前发生。\r\n            \r\n","\r\n            Original was GL_OP_ROUND_EXT = 0x8790\r\n            ":"原来是 GL_OP_ROUND_EXT = 0x8790\r\n            \r\n","\r\n            Original was GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F\r\n            ":"\r\n            原来是 GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F\r\n            \r\n","\r\n            Original was GL_R1UI_C4UB_V3F_SUN = 0x85C5\r\n            ":"\r\n            原来是 GL_R1UI_C4UB_V3F_SUN = 0x85C5\r\n            \r\n","\r\n            Represents a 3x2 matrix.\r\n            ":"\r\n            表示一个 3x2 矩阵。\r\n            \r\n","[requires: SGI_color_table]\r\n            Define a color lookup table\r\n            ":"[要求：SGI_color_table]\r\n            定义颜色查找表\r\n            \r\n","\r\n            Original was GL_DOUBLE_MAT2_EXT = 0x8F46\r\n            ":"\r\n            原来是 GL_DOUBLE_MAT2_EXT = 0x8F46\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_PUSH_GROUP = 0x8269\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_PUSH_GROUP = 0x8269\r\n            \r\n","\r\n            Set color lookup table parameters\r\n            ":"\r\n            设置颜色查找表参数\r\n            \r\n","\r\n            Original was GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802\r\n            ":"\r\n            原来是 GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802\r\n            \r\n","The right operand of the multiplication.":"乘法的右操作数。\r\n","[requires: NV_geometry_program4]\r\n            Attach a level of a texture object as a logical buffer to the currently bound framebuffer object\r\n            ":"[要求：NV_geometry_program4]\r\n            将纹理对象的级别作为逻辑缓冲区附加到当前绑定的帧缓冲区对象\r\n            \r\n","[requires: MESA_window_pos]\r\n            Specify the raster position in window coordinates for pixel operations\r\n            ":"[要求：MESA_window_pos]\r\n            为像素操作指定窗口坐标中的光栅位置\r\n            \r\n"," \r\n            Specifies index of an active atomic counter buffer.\r\n            ":" \r\n            指定活动原子计数器缓冲区的索引。\r\n            \r\n","\r\n            Original was GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F\r\n            ":"\r\n            原来是 GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F\r\n            \r\n","\r\n            Original was GL_POLYGON_OFFSET_BIAS_EXT = 0x8039\r\n            ":"\r\n            原来是 GL_POLYGON_OFFSET_BIAS_EXT = 0x8039\r\n            \r\n","[requires: EXT_map_buffer_range]\r\n            Map a section of a buffer object's data store\r\n            ":"[需要：EXT_map_buffer_range]\r\n            映射缓冲区对象数据存储的一部分\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify a two-dimensional texture image\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定二维纹理图像\r\n            \r\n","\r\n            Original was GL_INDEX_SHIFT = 0x0D12\r\n            ":"\r\n            原来是 GL_INDEX_SHIFT = 0x0D12\r\n            \r\n","\r\n            Original was GL_HIGH_INT = 0x8DF5\r\n            ":"\r\n            原来是 GL_HIGH_INT = 0x8DF5\r\n            \r\n","\r\n            Original was GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A\r\n            ":"\r\n            原来是 GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A\r\n            \r\n","\r\n            Original was GL_RESET_NOTIFICATION_STRATEGY = 0x8256\r\n            ":"\r\n            原来是 GL_RESET_NOTIFICATION_STRATEGY = 0x8256\r\n            \r\n","[requires: SGIX_igloo_interface]":"[需要：SGIX_igloo_interface]\r\n","ButtonState.Released":"ButtonState.Released\r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD\r\n            \r\n","A valid NSWindow reference.":"有效的 NSWindow 引用。\r\n","[requires: NV_explicit_multisample]\r\n            Retrieve the location of a sample\r\n            ":"[要求：NV_explicit_multisample]\r\n            检索样本的位置\r\n            \r\n","[requires: AMD_debug_output]\r\n            Specify a callback to receive debugging messages from the GL\r\n            ":"[需要：AMD_debug_output]\r\n            指定回调以接收来自 GL 的调试消息\r\n            \r\n","[requires: v4.5 or ARB_clip_control|VERSION_4_5]":"[要求：v4.5 或 ARB_clip_control|VERSION_4_5]\r\n","[requires: NV_transform_feedback]\r\n            Bind a buffer object to an indexed buffer target\r\n            ":"[需要：NV_transform_feedback]\r\n            将缓冲区对象绑定到索引缓冲区目标\r\n            \r\n","[requires: OES_mapbuffer]":"[需要：OES_mapbuffer]\r\n","\r\n            Original was GL_RGB_ICC_SGIX = 0x8460\r\n            ":"\r\n            原来是 GL_RGB_ICC_SGIX = 0x8460\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER2 = 0x8827\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER2 = 0x8827\r\n            \r\n","\r\n            Original was GL_MATRIX_PALETTE_OES = 0x8840\r\n            ":"\r\n            原来是 GL_MATRIX_PALETTE_OES = 0x8840\r\n            \r\n","A handle to a joystick, or IntPtr.Zero in case of error. The pointer is owned by the callee. Use ":"操纵杆的句柄，或 IntPtr.Zero（如果出现错误）。指针归被调用者所有。使用\r\n","\r\n            Original was GL_COPY_READ_BUFFER = 0x8F36\r\n            ":"\r\n            原来是 GL_COPY_READ_BUFFER = 0x8F36\r\n            \r\n","\r\n            Defines a collection of JoystickButtons.\r\n            ":"\r\n            定义 JoystickButton 的集合。\r\n            \r\n","[requires: v1.0]\r\n            Define an array of colors\r\n            ":"[要求：v1.0]\r\n            定义颜色数组\r\n            \r\n","\r\n            TRUE if the function succeeds; otherwise, FALSE. If the function fails, call GetLastError for more information.\r\n            ":"\r\n            如果函数成功则为 TRUE；否则为假。如果函数失败，请调用 GetLastError 获取更多信息。\r\n            \r\n","\r\n            Gets a System.String with a unique description of this IInputDevice instance.\r\n            ":"\r\n            获取具有此 IInputDevice 实例的唯一描述的 System.String。\r\n            \r\n","\r\n            Used in GL.GetObjectLabel, GL.ObjectLabel\r\n            ":"\r\n            用于 GL.GetObjectLabel, GL.ObjectLabel\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Return light source parameter values\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            返回光源参数值\r\n            \r\n","\r\n            Builds a rotation matrix for a rotation around the x-axis.\r\n            ":"\r\n            构建一个围绕 x 轴旋转的旋转矩阵。\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING = 0x82EB\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING = 0x82EB\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Release resources allocated by the shader compiler\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            释放着色器编译器分配的资源\r\n            \r\n","\r\n            Original was GL_RESAMPLE_ZERO_FILL_SGIX = 0x842F\r\n            ":"\r\n            原来是 GL_RESAMPLE_ZERO_FILL_SGIX = 0x842F\r\n            \r\n","[requires: NV_point_sprite]\r\n            Specify point parameters\r\n            ":"[需要：NV_point_sprite]\r\n            指定点参数\r\n            \r\n"," \r\n            The parameter to be set. Must be ConvolutionBorderMode.\r\n            ":" \r\n            要设置的参数。必须是 ConvolutionBorderMode。\r\n            \r\n","\r\n            Original was GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405\r\n            ":"\r\n            原来是 GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405\r\n            \r\n","The rotation angle in radians":"以弧度为单位的旋转角度\r\n","[requires: NVX_conditional_render]":"[需要：NVX_conditional_render]\r\n","\r\n            Original was GL_COPY_INVERTED = 0x150C\r\n            ":"\r\n            原来是 GL_COPY_INVERTED = 0x150C\r\n            \r\n","\r\n            Original was GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C\r\n            ":"\r\n            原来是 GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA\r\n            \r\n","[length: 2] \r\n            For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.\r\n            ":"[长度：2]\r\n            对于向量和矩阵命令，指定一个指向计数值数组的指针，该数组将用于更新指定的统一变量。\r\n            \r\n","\r\n            Original was GL_FONT_UNAVAILABLE_NV = 0x936A\r\n            ":"\r\n            原来是 GL_FONT_UNAVAILABLE_NV = 0x936A\r\n            \r\n","The period key.":"句点键。\r\n","\r\n            Original was GL_STRICT_SCISSOR_HINT_PGI = 0x1A218\r\n            ":"\r\n            原来是 GL_STRICT_SCISSOR_HINT_PGI = 0x1A218\r\n            \r\n","\r\n            Original was GL_DOT3_RGBA = 0x86AF\r\n            ":"\r\n            原来是 GL_DOT3_RGBA = 0x86AF\r\n            \r\n","A System.String describing this OpenGL context.":"描述此 OpenGL 上下文的 System.String。\r\n","\r\n            Original was GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440\r\n            ":"\r\n            原来是 GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_SIZE = 0x8081\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_SIZE = 0x8081\r\n            \r\n","\r\n            Original was GL_POINT_SIZE_ARRAY_TYPE_OES = 0x898A\r\n            ":"\r\n            原来是 GL_POINT_SIZE_ARRAY_TYPE_OES = 0x898A\r\n            \r\n","\r\n            Original was GL_VARIABLE_D_NV = 0x8526\r\n            ":"\r\n            原来是 GL_VARIABLE_D_NV = 0x8526\r\n            \r\n","\r\n            Original was GL_OBJECT_DELETE_STATUS_ARB = 0x8B80\r\n            ":"\r\n            原来是 GL_OBJECT_DELETE_STATUS_ARB = 0x8B80\r\n            \r\n","\r\n            Original was GL_BlendEquationAlpha = 0X883d\r\n            ":"\r\n            原来是 GL_BlendEquationAlpha = 0X883d\r\n            \r\n"," \r\n            Specifies the color-renderable, depth-renderable, or stencil-renderable format of the renderbuffer. Must be one of the following symbolic constants: Rgba4, Rgb565, Rgb5A1, DepthComponent16, or StencilIndex8.\r\n            ":" \r\n            指定渲染缓冲区的颜色可渲染、深度可渲染或模板可渲染格式。必须是以下符号常量之一：Rgba4、Rgb565、Rgb5A1、DepthComponent16 或 StencilIndex8。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Multiply the current matrix with the specified matrix\r\n            ":"[要求：v1.0 和 1.0]\r\n            将当前矩阵与指定矩阵相乘\r\n            \r\n","GamePadCapabilities":"游戏手柄功能\r\n","\r\n            Original was GL_PIXEL_MIN_FILTER_EXT = 0x8332\r\n            ":"\r\n            原来是 GL_PIXEL_MIN_FILTER_EXT = 0x8332\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_24_8_EXT = 0x84FA\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_24_8_EXT = 0x84FA\r\n            \r\n","A new Matrix3x2 which holds the result of the multiplication":"保存乘法结果的新 Matrix3x2\r\n","\r\n            Used in GL.Ati.AlphaFragmentOp1, GL.Ati.AlphaFragmentOp2 and 6 other functions\r\n            ":"\r\n            用于GL.Ati.AlphaFragmentOp1、GL.Ati.AlphaFragmentOp2和其他6个函数\r\n            \r\n","[requires: v4.4 or ARB_buffer_storage|VERSION_4_4]\r\n            Creates and initializes a buffer object's immutable data store\r\n            ":"[要求：v4.4 或 ARB_buffer_storage|VERSION_4_4]\r\n            创建并初始化缓冲区对象的不可变数据存储\r\n            \r\n"," \r\n            Specifies the byte offset between consecutive fog coordinates. If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.\r\n            ":" \r\n            指定连续雾坐标之间的字节偏移量。如果步幅为 0，则数组元素被认为是紧密排列的。初始值为 0。\r\n            \r\n","[requires: v1.0]\r\n            Multiply the current matrix by a perspective matrix\r\n            ":"[要求：v1.0]\r\n            将当前矩阵乘以透视矩阵\r\n            \r\n","\r\n            Original was GL_SHADER_STORAGE_BUFFER = 0x90D2\r\n            ":"\r\n            原来是 GL_SHADER_STORAGE_BUFFER = 0x90D2\r\n            \r\n","\r\n            Original was GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5B\r\n            ":"\r\n            原来是 GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5B\r\n            \r\n","\r\n            Original was GL_TEXTURE_3D_BINDING_EXT = 0x806A\r\n            ":"\r\n            原来是 GL_TEXTURE_3D_BINDING_EXT = 0x806A\r\n            \r\n","\r\n            Original was GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1\r\n            ":"\r\n            原来是 GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1\r\n            \r\n","\r\n            Original was GL_COLORBURN_KHR = 0x929A\r\n            ":"\r\n            原来是 GL_COLORBURN_KHR = 0x929A\r\n            \r\n","\r\n            Original was GL_EXPAND_NORMAL_NV = 0x8538\r\n            ":"\r\n            原来是 GL_EXPAND_NORMAL_NV = 0x8538\r\n            \r\n","The resultant axis":"结果轴\r\n","True if both objects are Quaternions of equal value. Otherwise it returns false.":"如果两个对象都是等值的四元数，则为真。否则返回假。\r\n","\r\n            Original was GL_MaxCombinedTextureImageUnits = 0X8b4d\r\n            ":"\r\n            原来是 GL_MaxCombinedTextureImageUnits = 0X8b4d\r\n            \r\n","\r\n            Original was GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3\r\n            ":"\r\n            原来是 GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3\r\n            \r\n","\r\n            Original was GL_UTF8_NV = 0x909A\r\n            ":"\r\n            原来是 GL_UTF8_NV = 0x909A\r\n            \r\n","\r\n            If the window being created is a multiple-document interface (MDI) client window,\r\n            this member contains a pointer to a CLIENTCREATESTRUCT structure. If the window\r\n            being created is a MDI child window, this member contains a pointer to an \r\n            MDICREATESTRUCT structure.\r\n             ":"\r\n            如果正在创建的窗口是多文档界面 (MDI) 客户端窗口，\r\n            该成员包含指向 CLIENTCREATESTRUCT 结构的指针。如果窗户\r\n            正在创建的是一个 MDI 子窗口，该成员包含一个指向\r\n            MDICREATESTRUCT 结构。\r\n             \r\n","\r\n            Original was GL_Nicest = 0X1102\r\n            ":"\r\n            原来是 GL_Nicest = 0X1102\r\n            \r\n","[length: dataSize]":"[长度：数据大小]\r\n","[requires: v3.0]\r\n            Query the bindings of color numbers to user-defined varying out variables\r\n            ":"[要求：v3.0]\r\n            查询颜色编号与用户定义的 varying out 变量的绑定\r\n            \r\n","\r\n            The y-coordinate of the mouse.\r\n            ":"\r\n            鼠标的 y 坐标。\r\n            \r\n","[length: size] \r\n            Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.\r\n            ":"[长度：尺寸]\r\n            指定一个指向数据的指针，该数据将被复制到数据存储中进行初始化，如果没有数据被复制，则为 Null。\r\n            \r\n","\r\n            Original was GL_READ_FRAMEBUFFER_BINDING_APPLE = 0x8CAA\r\n            ":"\r\n            原来是 GL_READ_FRAMEBUFFER_BINDING_APPLE = 0x8CAA\r\n            \r\n","\r\n            Original was GL_INT_SAMPLER_CUBE_EXT = 0x8DCC\r\n            ":"\r\n            原来是 GL_INT_SAMPLER_CUBE_EXT = 0x8DCC\r\n            \r\n","An unmanaged pointer allocated with ":"分配的非托管指针\r\n"," \r\n            Specifies a symbolic constant that selects a logical operation. The following symbols are accepted: Clear, Set, Copy, CopyInverted, Noop, Invert, And, Nand, Or, Nor, Xor, Equiv, AndReverse, AndInverted, OrReverse, and OrInverted. The initial value is Copy.\r\n            ":" \r\n            指定选择逻辑运算的符号常量。接受以下符号：Clear、Set、Copy、CopyInverted、Noop、Invert、And、Nand、Or、Nor、Xor、Equiv、AndReverse、AndInverted、OrReverse 和 OrInverted。初始值为复制。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Generate and evaluate a single point in a mesh\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            生成和评估网格中的单个点\r\n            \r\n","\r\n            Gets a System.Single representing the absolute position of the axis.\r\n            ":"\r\n            获取表示轴的绝对位置的 System.Single。\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_SHARED_SIZE = 0x8277\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_SHARED_SIZE = 0x8277\r\n            \r\n","\r\n            Used in GL.Ext.ConvolutionParameter, GL.Ext.GetConvolutionParameter\r\n            ":"\r\n            在GL.Ext.ConvolutionParameter、GL.Ext.GetConvolutionParameter中使用\r\n            \r\n","\r\n            Original was GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0\r\n            \r\n","\r\n            Original was GL_DEBUG_CALLBACK_FUNCTION_KHR = 0x8244\r\n            ":"\r\n            原来是 GL_DEBUG_CALLBACK_FUNCTION_KHR = 0x8244\r\n            \r\n","\r\n            Original was GL_PACK_REVERSE_ROW_ORDER_ANGLE = 0x93A4\r\n            ":"\r\n            原来是 GL_PACK_REVERSE_ROW_ORDER_ANGLE = 0x93A4\r\n            \r\n"," \r\n            The type of the data to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            ":" \r\n            要在值中返回的数据类型。 Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            \r\n","\r\n            Original was GL_Texture12 = 0X84cc\r\n            ":"\r\n            原来是 GL_Texture12 = 0X84cc\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Draw a rectangle\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            画一个长方形\r\n            \r\n","\r\n            Original was GL_SRGB_DECODE_ARB = 0x8299\r\n            ":"\r\n            原来是 GL_SRGB_DECODE_ARB = 0x8299\r\n            \r\n","\r\n            Original was GL_TRANSFORM_HINT_APPLE = 0x85B1\r\n            ":"\r\n            原来是 GL_TRANSFORM_HINT_APPLE = 0x85B1\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Retrieve information about implementation-dependent support for internal formats\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            检索有关内部格式的依赖于实现的支持的信息\r\n            \r\n","\r\n            Represents a 2x4 matrix.\r\n            ":"\r\n            表示一个 2x4 矩阵。\r\n            \r\n","\r\n            Original was GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC\r\n            ":"\r\n            原来是 GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC\r\n            \r\n","\r\n            Original was GL_FILL = 0x1B02\r\n            ":"\r\n            原来是 GL_FILL = 0x1B02\r\n            \r\n","\r\n            Original was GL_CON_21_ATI = 0x8956\r\n            ":"\r\n            原来是 GL_CON_21_ATI = 0x8956\r\n            \r\n","\r\n            Type of raw input data.\r\n            ":"\r\n            原始输入数据的类型。\r\n            \r\n","\r\n            Original was GL_ANY_SAMPLES_PASSED_EXT = 0x8C2F\r\n            ":"原来是 GL_ANY_SAMPLES_PASSED_EXT = 0x8C2F\r\n            \r\n","\r\n            Used in GL.VertexPointer, GL.Ext.VertexArrayVertexOffset and 5 other functions\r\n            ":"\r\n            用于 GL.VertexPointer、GL.Ext.VertexArrayVertexOffset 和其他 5 个函数\r\n            \r\n"," \r\n            A Boolean flag determining whether the selected messages should be enabled or disabled.\r\n            ":" \r\n            一个布尔标志，用于确定是否应启用或禁用所选消息。\r\n            \r\n","\r\n            Original was GL_ALPHA_INTEGER = 0x8D97\r\n            ":"\r\n            原来是 GL_ALPHA_INTEGER = 0x8D97\r\n            \r\n","\r\n            Gets or sets the horizontal location of this window in screen coordinates.\r\n            The coordinates are specified in device-independent points.\r\n            ":"\r\n            获取或设置此窗口在屏幕坐标中的水平位置。\r\n            坐标以与设备无关的点指定。\r\n            \r\n"," \r\n            Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba, R8, Rg8, Rgb565, Rgb8, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Srgb8, Srgb8Alpha8, R8i, R8ui, R16i, R16ui, R32i, R32ui, Rg8i, Rg8ui, Rg16i, Rg16ui, Rg32i, Rg32ui, Rgba8i, Rgba8ui, Rgb10A2ui, Rgba16i, Rgba16ui, Rgba32i, Rgba32ui.\r\n            ":" \r\n            指定纹理的内部格式。必须是以下符号常量之一：Alpha、Luminance、LuminanceAlpha、Rgb、Rgba、R8、Rg8、Rgb565、Rgb8、Rgba4、Rgb5A1、Rgba8、Rgb10A2、Srgb8、Srgb8Alpha8、R8i、R8ui、R16i、R16ui、R32i、R32ui , Rg8i, Rg8ui, Rg16i, Rg16ui, Rg32i, Rg32ui, Rgba8i, Rgba8ui, Rgb10A2ui, Rgba16i, Rgba16ui, Rgba32i, Rgba32ui.\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER_BINDING = 0x8C2A\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_BINDING = 0x8C2A\r\n            \r\n","\r\n            Right trigger button\r\n            ":"\r\n            右触发按钮\r\n            \r\n","\r\n            Original was GL_MALI_PROGRAM_BINARY_ARM = 0x8F61\r\n            ":"\r\n            原来是 GL_MALI_PROGRAM_BINARY_ARM = 0x8F61\r\n            \r\n","\r\n            Original was GL_BACK_PRIMARY_COLOR_NV = 0x8C77\r\n            ":"\r\n            原来是 GL_BACK_PRIMARY_COLOR_NV = 0x8C77\r\n            \r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4\r\n            \r\n","\r\n            Calculate the inverse of the given matrix\r\n            ":"\r\n            计算给定矩阵的逆\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212\r\n            \r\n","\r\n            Original was GL_MATRIX18_ARB = 0x88D2\r\n            ":"\r\n            原来是 GL_MATRIX18_ARB = 0x88D2\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624\r\n            \r\n","\r\n            Original was GL_SrcAlphaSaturate = 0X0308\r\n            ":"\r\n            原来是 GL_SrcAlphaSaturate = 0X0308\r\n            \r\n","\r\n            Original was GL_COLOR_RENDERABLE = 0x8286\r\n            ":"\r\n            原来是 GL_COLOR_RENDERABLE = 0x8286\r\n            \r\n","\r\n            Original was GL_GEOMETRY_SHADER_ARB = 0x8DD9\r\n            ":"\r\n            原来是 GL_GEOMETRY_SHADER_ARB = 0x8DD9\r\n            \r\n","\r\n            Used in GL.DrawBuffers, GL.Ext.DrawBuffers and 1 other function\r\n            ":"\r\n            用于 GL.DrawBuffers、GL.Ext.DrawBuffers 和 1 个其他函数\r\n            \r\n","The F35 key.":"F35 键。\r\n"," \r\n            Specifies the framebuffer target of the binding operation.\r\n            ":" \r\n            指定绑定操作的帧缓冲区目标。\r\n            \r\n","\r\n            OnLoad: Occurs after creating the OpenGL context, but before entering the main loop.\r\n            Override to load resources.\r\n            ":"\r\n            OnLoad：在创建 OpenGL 上下文之后，但在进入主循环之前发生。\r\n            覆盖以加载资源。\r\n            \r\n","\r\n            Specify the distances to the near and far depth clipping planes. Both distances must be positive.\r\n            ":"\r\n            指定到近深度和远深度裁剪平面的距离。两个距离都必须为正。\r\n            \r\n","\r\n            Original was GL_OP_INDEX_EXT = 0x8782\r\n            ":"\r\n            原来是 GL_OP_INDEX_EXT = 0x8782\r\n            \r\n","\r\n            Original was GL_C4F_N3F_V3F = 0x2A26\r\n            ":"\r\n            原来是 GL_C4F_N3F_V3F = 0x2A26\r\n            \r\n","\r\n            Original was GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3\r\n            ":"\r\n            原来是 GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3\r\n            \r\n","\r\n            Original was GL_EYE_RADIAL_NV = 0x855B\r\n            ":"\r\n            原来是 GL_EYE_RADIAL_NV = 0x855B\r\n            \r\n","[requires: v1.0]\r\n            Specify whether front- or back-facing polygons can be culled\r\n            ":"[要求：v1.0]\r\n            指定是否可以剔除正面或背面的多边形\r\n            \r\n","BadValue:    Some numeric value falls outside the range of values accepted by the request. Unless a specific range is specified for an argument, the full range defined by the argument's type is accepted. Any argument defined as a set of alternatives can generate this error.":"BadValue：某些数值超出了请求接受的值范围。除非为参数指定了特定范围，否则接受参数类型定义的完整范围。定义为一组备选方案的任何参数都可能产生此错误。\r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5\r\n            \r\n","PlatformBackend":"平台后端\r\n","\r\n            Original was GL_Int = 0X1404\r\n            ":"\r\n            原来是 GL_Int = 0X1404\r\n            \r\n","[length: propCount]":"[长度：propCount]\r\n","\r\n            Describes the state of a ":"\r\n            描述一个状态\r\n"," \r\n            Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.\r\n            ":" \r\n            指定缓冲区对象绑定到的目标。符号常量必须是 ArrayBuffer、AtomicCounterBuffer、CopyReadBuffer、CopyWriteBuffer、DrawIndirectBuffer、DispatchIndirectBuffer、ElementArrayBuffer、PixelPackBuffer、PixelUnpackBuffer、QueryBuffer、ShaderStorageBuffer、TextureBuffer、TransformFeedbackBuffer 或 UniformBuffer。\r\n            \r\n","\r\n            Original was GL_DYNAMIC_DRAW = 0x88E8\r\n            ":"\r\n            原来是 GL_DYNAMIC_DRAW = 0x88E8\r\n            \r\n","\r\n            Original was GL_QUERY_COUNTER_BITS = 0x8864\r\n            ":"\r\n            原来是 GL_QUERY_COUNTER_BITS = 0x8864\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F\r\n            \r\n","\r\n            Original was GL_R32F = 0x822E\r\n            ":"\r\n            原来是 GL_R32F = 0x822E\r\n            \r\n","\r\n            Left shoulder button\r\n            ":"\r\n            左肩按钮\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_SINK_EXT = 0x802D\r\n            ":"\r\n            原来是 GL_HISTOGRAM_SINK_EXT = 0x802D\r\n            \r\n","\r\n            Original was GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC\r\n            ":"\r\n            原来是 GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC\r\n            \r\n","\r\n            Starts the teardown sequence for the current window.\r\n            ":"\r\n            启动当前窗口的拆卸序列。\r\n            \r\n","\r\n            Original was GL_INDEX_ARRAY_POINTER_EXT = 0x8091\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_POINTER_EXT = 0x8091\r\n            \r\n","\r\n            Original was GL_SYNC_STATUS_APPLE = 0x9114\r\n            ":"\r\n            原来是 GL_SYNC_STATUS_APPLE = 0x9114\r\n            \r\n","\r\n            Original was GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2\r\n            ":"\r\n            原来是 GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8\r\n            \r\n","[length: mapsize] \r\n            Specifies an array of mapsize values.\r\n            ":"[长度：地图大小]\r\n            指定一组 mapsize 值。\r\n            \r\n","The fd for the GPU to query, obtained through open(\"/dev/dri/card0\").":"GPU查询的fd，通过open(\"/dev/dri/card0\")获取。\r\n","\r\n            Original was GL_DEPTH_CLAMP = 0x864F\r\n            ":"\r\n            原来是 GL_DEPTH_CLAMP = 0x864F\r\n            \r\n","\r\n            Original was GL_POLYGON_OFFSET_FILL = 0x8037\r\n            ":"\r\n            原来是 GL_POLYGON_OFFSET_FILL = 0x8037\r\n            \r\n","[requires: SGIX_reference_plane]":"[要求：SGIX_reference_plane]\r\n","\r\n            Original was GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183\r\n            ":"\r\n            原来是 GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183\r\n            \r\n","\r\n            Gets an integer representing the relative wheel movement.\r\n            ":"\r\n            获取表示相对车轮移动的整数。\r\n            \r\n","[requires: ARB_geometry_shader4]\r\n            Attach a level of a texture object as a logical buffer to the currently bound framebuffer object\r\n            ":"[需要：ARB_geometry_shader4]\r\n            将纹理对象的级别作为逻辑缓冲区附加到当前绑定的帧缓冲区对象\r\n            \r\n","\r\n            Gets or sets a value, indicating whether the mouse cursor is visible.\r\n            ":"\r\n            获取或设置一个值，指示鼠标光标是否可见。\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014\r\n            ":"\r\n            原来是 GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014\r\n            \r\n","\r\n            Original was GL_LUMINANCE12_ALPHA4_EXT = 0x8046\r\n            ":"\r\n            原来是 GL_LUMINANCE12_ALPHA4_EXT = 0x8046\r\n            \r\n","[length: 1] \r\n            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.\r\n            ":"[长度：1]\r\n            对于矢量命令 (glVertexAttrib*v)，指定指向要用于通用顶点属性的值数组的指针。\r\n            \r\n","\r\n            Called whenever the mouse cursor reenters the window ":"\r\n            每当鼠标光标重新进入窗口时调用\r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Determine if a name corresponds to a vertex array object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            判断名称是否对应于顶点数组对象\r\n            \r\n","\r\n            Original was GL_SKIP_COMPONENTS3_NV = -4\r\n            ":"\r\n            原来是 GL_SKIP_COMPONENTS3_NV = -4\r\n            \r\n","\r\n            Original was GL_CURRENT_FOG_COORD = 0x8453\r\n            ":"\r\n            原来是 GL_CURRENT_FOG_COORD = 0x8453\r\n            \r\n"," \r\n            Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.\r\n            ":" \r\n            指定纹理目标。必须是以下符号常量之一：Texture2D、TextureCubeMapPositiveX、TextureCubeMapNegativeX、TextureCubeMapPositiveY、TextureCubeMapNegativeY、TextureCubeMapPositiveZ 或 TextureCubeMapNegativeZ。\r\n            \r\n","\r\n            Original was GL_TESS_EVALUATION_SUBROUTINE = 0x92EA\r\n            ":"\r\n            原来是 GL_TESS_EVALUATION_SUBROUTINE = 0x92EA\r\n            \r\n","\r\n            Original was GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0\r\n            ":"\r\n            原来是 GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0\r\n            \r\n","\r\n            Original was GL_MAX_3D_TEXTURE_SIZE = 0x8073\r\n            ":"\r\n            原来是 GL_MAX_3D_TEXTURE_SIZE = 0x8073\r\n            \r\n","\r\n            Original was GL_OneMinusSrcColor = 0X0301\r\n            ":"\r\n            原来是 GL_OneMinusSrcColor = 0X0301\r\n            \r\n"," \r\n            Specifies the program containing the active uniform index uniformIndex.\r\n            ":" \r\n            指定包含活动统一索引 uniformIndex 的程序。\r\n            \r\n","true if the specified button is released; otherwise, false.":"如果释放了指定的按钮，则为真；否则，假的。\r\n","\r\n            Original was GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807\r\n            ":"\r\n            原来是 GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807\r\n            \r\n","\r\n            Original was GL_OES_blend_subtract = 1\r\n            ":"\r\n            原来是 GL_OES_blend_subtract = 1\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872\r\n            \r\n","\r\n            Original was GL_VBO_FREE_MEMORY_ATI = 0x87FB\r\n            ":"\r\n            原来是 GL_VBO_FREE_MEMORY_ATI = 0x87FB\r\n            \r\n","\r\n            Used in GL.Ext.DisableIndexed, GL.Ext.EnableIndexed and 3 other functions\r\n            ":"\r\n            用于 GL.Ext.DisableIndexed、GL.Ext.EnableIndexed 和其他 3 个函数\r\n            \r\n","[requires: v4.0 or ARB_gpu_shader_fp64|VERSION_4_0]":"[要求：v4.0 或 ARB_gpu_shader_fp64|VERSION_4_0]\r\n","\r\n            Original was GL_RESTART_PATH_NV = 0xF0\r\n            ":"\r\n            原来是 GL_RESTART_PATH_NV = 0xF0\r\n            \r\n"," \r\n            Specifies the height of the texture image, or the number of layers in a texture array, in the case of the Texture1DArray and ProxyTexture1DArray targets. All implementations support 2D texture images that are at least 1024 texels high, and texture arrays that are at least 256 layers deep.\r\n            ":" \r\n            在 Texture1DArray 和 ProxyTexture1DArray 目标的情况下，指定纹理图像的高度或纹理数组中的层数。所有实现都支持至少 1024 纹素高的 2D 纹理图像，以及至少 256 层深的纹理阵列。\r\n            \r\n","\r\n            Original was GL_UPPER_LEFT = 0x8CA2\r\n            ":"\r\n            原来是 GL_UPPER_LEFT = 0x8CA2\r\n            \r\n"," \r\n            Specifies the type of shader to be created. Must be one of VertexShader or FragmentShader.\r\n            ":" \r\n            指定要创建的着色器类型。必须是 VertexShader 或 FragmentShader 之一。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154\r\n            \r\n","\r\n            Original was GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198\r\n            ":"\r\n            原来是 GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198\r\n            \r\n","\r\n            Original was GL_R16I = 0x8233\r\n            ":"\r\n            原来是 GL_R16I = 0x8233\r\n            \r\n"," for the down button.\r\n            ":" 对于向下按钮。\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1\r\n            \r\n","\r\n            Original was GL_PROVOKING_VERTEX_EXT = 0x8E4F\r\n            ":"\r\n            原来是 GL_PROVOKING_VERTEX_EXT = 0x8E4F\r\n            \r\n","\r\n            Original was GL_TRIANGLES_ADJACENCY = 0xC\r\n            ":"\r\n            原来是 GL_TRIANGLES_ADJACENCY = 0xC\r\n            \r\n","\r\n            Original was GL_INVERT_RGB_NV = 0x92A3\r\n            ":"\r\n            原来是 GL_INVERT_RGB_NV = 0x92A3\r\n            \r\n","\r\n            Original was GL_TESS_CONTROL_PROGRAM_NV = 0x891E\r\n            ":"\r\n            原来是 GL_TESS_CONTROL_PROGRAM_NV = 0x891E\r\n            \r\n","[requires: v1.0]\r\n            Return a string describing the current GL connection\r\n            ":"[要求：v1.0]\r\n            返回描述当前 GL 连接的字符串\r\n            \r\n","\r\n            Original was GL_TEXTURE_BLUE_SIZE = 0x805E\r\n            ":"原来是 GL_TEXTURE_BLUE_SIZE = 0x805E\r\n            \r\n"," \r\n            For glViewportIndexedf, specifies the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.\r\n            ":" \r\n            对于 glViewportIndexedf，指定视口的宽度和高度。当 GL 上下文首次附加到窗口时，宽度和高度将设置为该窗口的尺寸。\r\n            \r\n","[length: 1] \r\n            Specifies the address of a variable to receive the number of characters that were written to uniformBlockName.\r\n            ":"[长度：1]\r\n            指定变量的地址以接收写入 uniformBlockName 的字符数。\r\n            \r\n","\r\n            Use the GL.Load and GL.LoadAll methods to prepare function entry points prior to use. To maintain\r\n            cross-platform compatibility, this must be done for both core and extension functions. The GameWindow\r\n            and the GLControl class will take care of this automatically.\r\n            ":"\r\n            使用 GL.Load 和 GL.LoadAll 方法在使用前准备函数入口点。维护\r\n            跨平台兼容性，必须对核心功能和扩展功能都做到这一点。游戏窗口\r\n            GLControl 类会自动处理这个问题。\r\n            \r\n"," \r\n            Specifies the symbolic name of a texture parameter. TextureWidth, TextureHeight, TextureDepth, TextureInternalFormat, TextureRedSize, TextureGreenSize, TextureBlueSize, TextureAlphaSize, TextureDepthSize, TextureCompressed, TextureCompressedImageSize, and TextureBufferOffset are accepted.\r\n            ":"指定纹理参数的符号名称。接受 TextureWidth、TextureHeight、TextureDepth、TextureInternalFormat、TextureRedSize、TextureGreenSize、TextureBlueSize、TextureAlphaSize、TextureDepthSize、TextureCompressed、TextureCompressedImageSize 和 TextureBufferOffset。\r\n            \r\n","The up arrow key.":"向上箭头键。\r\n"," has\r\n            a back button.\r\n            ":" 有\r\n            后退按钮。\r\n            \r\n","\r\n            Original was GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 0x9111\r\n            ":"\r\n            原来是 GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 0x9111\r\n            \r\n","\r\n            Original was GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743\r\n            ":"\r\n            原来是 GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743\r\n            \r\n","\r\n            Number of display pixels vertically\r\n            ":"\r\n            垂直显示像素数\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E\r\n            \r\n","\r\n            Original was GL_ONE_MINUS_CONSTANT_COLOR = 0x8002\r\n            ":"\r\n            原来是 GL_ONE_MINUS_CONSTANT_COLOR = 0x8002\r\n            \r\n","[length: target,format,type] \r\n            A pointer to storage for the returned histogram table.\r\n            ":"[长度：目标、格式、类型]\r\n            指向返回的直方图表的存储指针。\r\n            \r\n","\r\n            Original was GL_RGB32F_ARB = 0x8815\r\n            ":"\r\n            原来是 GL_RGB32F_ARB = 0x8815\r\n            \r\n","[length: count] \r\n            Specifies an array in which the generated sampler object names are stored.\r\n            ":"[长度：计数]\r\n            指定一个数组，其中存储生成的采样器对象名称。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Check the completeness status of a framebuffer\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            检查帧缓冲区的完整性状态\r\n            \r\n","\r\n            Original was GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A\r\n            ":"原来是 GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A\r\n            \r\n","\r\n            Gets the scancode which generated this event.\r\n            ":"\r\n            获取生成此事件的扫描码。\r\n            \r\n","\r\n            Original was GL_OP_EXP_BASE_2_EXT = 0x8791\r\n            ":"\r\n            原来是 GL_OP_EXP_BASE_2_EXT = 0x8791\r\n            \r\n","\r\n            Original was GL_RGB5 = 0x8050\r\n            ":"\r\n            原来是 GL_RGB5 = 0x8050\r\n            \r\n","\r\n            Original was GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769\r\n            \r\n","\r\n            Original was GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F\r\n            ":"\r\n            原来是 GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A\r\n            \r\n"," \r\n            Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays.\r\n            ":" \r\n            指定在从启用的顶点数组中选择元素时应添加到索引的每个元素的常量。\r\n            \r\n","[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]\r\n            Bind a named sampler to a texturing target\r\n            ":"[要求：v3.3 或 ARB_sampler_objects|VERSION_3_3]\r\n            将命名采样器绑定到纹理目标\r\n            \r\n","\r\n            Original was GL_LINEAR_DETAIL_SGIS = 0x8097\r\n            ":"\r\n            原来是 GL_LINEAR_DETAIL_SGIS = 0x8097\r\n            \r\n","\r\n            Original was GL_SHADER_TYPE = 0x8B4F\r\n            ":"\r\n            原来是 GL_SHADER_TYPE = 0x8B4F\r\n            \r\n"," \r\n            Specifies a value that may be the name of a sampler object.\r\n            ":" \r\n            指定一个值，该值可以是采样器对象的名称。\r\n            \r\n","\r\n            Original was GL_STATIC_COPY = 0x88E6\r\n            ":"\r\n            原来是 GL_STATIC_COPY = 0x88E6\r\n            \r\n","\r\n            Original was GL_OES_depth32 = 1\r\n            ":"\r\n            原来是 GL_OES_depth32 = 1\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8E85\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8E85\r\n            \r\n"," \r\n            A user supplied pointer that will be passed on each invocation of callback.\r\n            ":" \r\n            将在每次调用回调时传递的用户提供的指针。\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C\r\n            \r\n","\r\n            Original was GL_MATRIX3 = 0x88C3\r\n            ":"\r\n            原来是 GL_MATRIX3 = 0x88C3\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25\r\n            \r\n","\r\n            Specify the coordinates for the bottom and top horizontal clipping planes.\r\n            ":"\r\n            指定底部和顶部水平剪裁平面的坐标。\r\n            \r\n"," \r\n            Specify the first and last integer values for grid domain variable .\r\n            ":" \r\n            指定网格域变量的第一个和最后一个整数值。\r\n            \r\n","\r\n            Original was GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163\r\n            ":"\r\n            原来是 GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163\r\n            \r\n","[length: 1] \r\n            Specifies the address of a variable to receive the number of bytes written into binary.\r\n            ":"[长度：1]\r\n            指定变量的地址以接收写入二进制的字节数。\r\n            \r\n","\r\n            Represents a 2x3 matrix.\r\n            ":"\r\n            表示一个 2x3 矩阵。\r\n            \r\n"," \r\n            Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.\r\n            ":" \r\n            指定服务器在继续之前应等待的超时时间。超时必须是 TimeoutIgnored。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify material parameters for the lighting model\r\n            ":"[要求：v1.0 和 1.0]\r\n            为光照模型指定材质参数\r\n            \r\n","\r\n            Used in GL.TexBuffer, GL.TexBufferRange\r\n            ":"\r\n            在 GL.TexBuffer、GL.TexBufferRange 中使用\r\n            \r\n","[requires: SGIX_list_priority]":"[要求：SGIX_list_priority]\r\n","\r\n            Original was GL_MAX_VIEWPORT_DIMS = 0x0D3A\r\n            ":"\r\n            原来是 GL_MAX_VIEWPORT_DIMS = 0x0D3A\r\n            \r\n","[requires: SGIS_multisample]":"[要求：SGIS_multisample]\r\n","The object to compare tresult.":"要比较结果的对象。\r\n","\r\n            Original was GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C\r\n            \r\n","\r\n            Original was GL_INTENSITY8_SNORM = 0x9017\r\n            ":"\r\n            原来是 GL_INTENSITY8_SNORM = 0x9017\r\n            \r\n","\r\n            Represents a 3x4 matrix.\r\n            ":"\r\n            表示一个 3x4 矩阵。\r\n            \r\n","\r\n            Original was GL_MODELVIEW20_ARB = 0x8734\r\n            ":"\r\n            原来是 GL_MODELVIEW20_ARB = 0x8734\r\n            \r\n","\r\n            Used in GL.Arb.BlendEquation, GL.BlendEquation and 1 other function\r\n            ":"\r\n            用于 GL.Arb.BlendEquation、GL.BlendEquation 和 1 个其他函数\r\n            \r\n"," for this event.\r\n            Set e.Cancel to true in order to stop the NativeWindow from closing.":" 对于这个事件。\r\n            将 e.Cancel 设置为 true 以阻止 NativeWindow 关闭。\r\n","\r\n            Original was GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049\r\n            ":"\r\n            原来是 GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049\r\n            \r\n","[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]\r\n            Retrieve the index of a subroutine uniform of a given shader stage within a program\r\n            ":"[需要：v4.0 或 ARB_shader_subroutine|VERSION_4_0]\r\n            检索程序中给定着色器阶段的子例程制服的索引\r\n            \r\n","The pause key.":"暂停键。\r\n"," \r\n            The length of the array ids.\r\n            ":" \r\n            数组 id 的长度。\r\n            \r\n","\r\n            Original was GL_PACK_INVERT_MESA = 0x8758\r\n            ":"\r\n            原来是 GL_PACK_INVERT_MESA = 0x8758\r\n            \r\n","\r\n            Used in GL.GetProgramInterface, GL.GetProgramResourceIndex and 4 other functions\r\n            ":"\r\n            用于GL.GetProgramInterface、GL.GetProgramResourceIndex等4个函数\r\n            \r\n","The num lock key.":"数字锁定键。\r\n"," \r\n            Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.\r\n            ":" \r\n            指定像素数据的数据类型。必须是 UnsignedByte、UnsignedShort565、UnsignedShort4444 或 UnsignedShort5551 之一。\r\n            \r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9\r\n            \r\n","\r\n            Original was GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117\r\n            ":"\r\n            原来是 GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117\r\n            \r\n","\r\n            Original was GL_MATRIX0_NV = 0x8630\r\n            ":"\r\n            原来是 GL_MATRIX0_NV = 0x8630\r\n            \r\n"," if the specified button is pressed; otherwise, ":" 如果指定的按钮被按下；否则，\r\n","\r\n            Original was GL_VERTEX_DATA_HINT_PGI = 0x1A22A\r\n            ":"\r\n            原来是 GL_VERTEX_DATA_HINT_PGI = 0x1A22A\r\n            \r\n","Gets a System.Boolean indicating whether OpenTK is running on a Windows platform.":"获取一个 System.Boolean，指示 OpenTK 是否在 Windows 平台上运行。\r\n","[requires: v4.0 or ARB_tessellation_shader|VERSION_4_0]\r\n            Specifies the parameters for patch primitives\r\n            ":"[要求：v4.0 或 ARB_tessellation_shader|VERSION_4_0]\r\n            指定补丁原语的参数\r\n            \r\n","\r\n            Label a a sync object identified by a pointer\r\n            ":"\r\n            标记一个由指针标识的同步对象\r\n            \r\n","The GraphicsContextFlags version for the OpenGL GraphicsContext.":"OpenGL GraphicsContext 的 GraphicsContextFlags 版本。\r\n","\r\n            Original was GL_COLOR_ATTACHMENT9 = 0x8CE9\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT9 = 0x8CE9\r\n            \r\n","The transpose of the given matrix.":"给定矩阵的转置。\r\n","The thirtieth button of the JoystickDevice.":"JoystickDevice 的第三十个按钮。\r\n","\r\n            Original was GL_TRANSPOSE_NV = 0x862C\r\n            ":"\r\n            原来是 GL_TRANSPOSE_NV = 0x862C\r\n            \r\n","\r\n            Original was GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9\r\n            ":"\r\n            原来是 GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9\r\n            \r\n","\r\n            Original was GL_MIRROR_CLAMP_TO_EDGE = 0x8743\r\n            ":"\r\n            原来是 GL_MIRROR_CLAMP_TO_EDGE = 0x8743\r\n            \r\n","\r\n            Original was GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242\r\n            ":"\r\n            原来是 GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the W, X, and Z components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 W、X 和 Z 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Right stick button\r\n            ":"\r\n            右摇杆按钮\r\n            \r\n","[requires: v4.1 or ARB_viewport_array|VERSION_4_1]\r\n            Set multiple viewports\r\n            ":"[要求：v4.1 或 ARB_viewport_array|VERSION_4_1]\r\n            设置多个视口\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31\r\n            \r\n","[requires: INTEL_parallel_arrays]\r\n            Define an array of vertex data\r\n            ":"[需要：INTEL_parallel_arrays]\r\n            定义一个顶点数据数组\r\n            \r\n","An IWindowInfo instance describing the parent window for this IGraphicsContext.":"描述此 IGraphicsContext 的父窗口的 IWindowInfo 实例。\r\n","\r\n            Original was GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147\r\n            \r\n","\r\n            Original was GL_STATIC_COPY_ARB = 0x88E6\r\n            ":"\r\n            原来是 GL_STATIC_COPY_ARB = 0x88E6\r\n            \r\n","\r\n            Original was GL_OCCLUSION_TEST_RESULT_HP = 0x8166\r\n            ":"原来是 GL_OCCLUSION_TEST_RESULT_HP = 0x8166\r\n            \r\n"," \r\n            Specify the target of the operation. target must be either Texture1D or ProxyTexture1D.\r\n            ":" \r\n            指定操作的目标。 target 必须是 Texture1D 或 ProxyTexture1D。\r\n            \r\n","The yaw (heading), rotation around Y axis":"偏航（航向），绕Y轴旋转\r\n"," has\r\n            a microphone input.\r\n            ":" 有\r\n            麦克风输入。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_24_8 = 0x84FA\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_24_8 = 0x84FA\r\n            \r\n","[requires: v2.0]\r\n            Returns the value of a uniform variable\r\n            ":"[要求：v2.0]\r\n            返回统一变量的值\r\n            \r\n","\r\n            Original was GL_SHADER_OBJECT_ARB = 0x8B48\r\n            ":"\r\n            原来是 GL_SHADER_OBJECT_ARB = 0x8B48\r\n            \r\n","\r\n            Occurs when an axis of this JoystickDevice instance is moved.\r\n            ":"\r\n            移动此 JoystickDevice 实例的轴时发生。\r\n            \r\n","\r\n            Original was GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED\r\n            ":"\r\n            原来是 GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Operate on the accumulation buffer\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            对累积缓冲区进行操作\r\n            \r\n","\r\n            Original was GL_R8I = 0x8231\r\n            ":"\r\n            原来是 GL_R8I = 0x8231\r\n            \r\n","\r\n            Original was GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873\r\n            ":"\r\n            原来是 GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873\r\n            \r\n","\r\n            Original was GL_MAX_CULL_DISTANCES = 0x82F9\r\n            ":"\r\n            原来是 GL_MAX_CULL_DISTANCES = 0x82F9\r\n            \r\n","GameWindow options specifying window appearance and behavior.":"指定窗口外观和行为的 GameWindow 选项。\r\n","\r\n            Original was GL_PHONG_WIN = 0x80EA\r\n            ":"\r\n            原来是 GL_PHONG_WIN = 0x80EA\r\n            \r\n"," \r\n            Specifies how polygons will be rasterized. Accepted values are Point, Line, and Fill. The initial value is Fill for both front- and back-facing polygons.\r\n            ":" \r\n            指定如何栅格化多边形。接受的值为点、线和填充。正面和背面多边形的初始值为填充。\r\n            \r\n","\r\n            Original was GL_LINES = 0X0001\r\n            ":"\r\n            原来是 GL_LINES = 0X0001\r\n            \r\n"," \r\n            Specifies the name of a buffer object.\r\n            ":" \r\n            指定缓冲区对象的名称。\r\n            \r\n","\r\n            Original was GL_R1UI_C3F_V3F_SUN = 0x85C6\r\n            ":"\r\n            原来是 GL_R1UI_C3F_V3F_SUN = 0x85C6\r\n            \r\n","\r\n            Original was GL_TEXTURE_GREEN_TYPE = 0x8C11\r\n            ":"\r\n            原来是 GL_TEXTURE_GREEN_TYPE = 0x8C11\r\n            \r\n","\r\n            Right stick left direction button\r\n            ":"\r\n            右摇杆左方向按钮\r\n            \r\n","A pointer to a null-terminated ASCII C string, representing the content of this debug message.":"指向以 null 结尾的 ASCII C 字符串的指针，表示此调试消息的内容。\r\n","\r\n            Original was GL_SUCCESS_NV = 0x902F\r\n            ":"\r\n            原来是 GL_SUCCESS_NV = 0x902F\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Replace the current matrix with the identity matrix\r\n            ":"[要求：v1.0 和 1.0]\r\n            用单位矩阵替换当前矩阵\r\n            \r\n"," \r\n            The X coordinate of the left edge of the souce region to copy.\r\n            ":" \r\n            要复制的源区域左边缘的 X 坐标。\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 0x8E81\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 0x8E81\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT24_OES = 0x81A6\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT24_OES = 0x81A6\r\n            \r\n","[length: format,type]":"[长度：格式，类型]\r\n","[requires: v1.0 and 1.0]\r\n            Select flat or smooth shading\r\n            ":"[要求：v1.0 和 1.0]\r\n            选择平坦或平滑的阴影\r\n            \r\n","\r\n            Original was GL_MATRIX31 = 0x88DF\r\n            ":"\r\n            原来是 GL_MATRIX31 = 0x88DF\r\n            \r\n","\r\n            Original was GL_UNIFORM_BLOCK = 0x92E2\r\n            ":"\r\n            原来是 GL_UNIFORM_BLOCK = 0x92E2\r\n            \r\n","\r\n            Original was GL_TEXTURE31_ARB = 0x84DF\r\n            ":"\r\n            原来是 GL_TEXTURE31_ARB = 0x84DF\r\n            \r\n"," if this instance has a left trigger; otherwise, ":"如果这个实例有左触发器；否则，\r\n","\r\n            Original was GL_TRUE = 1\r\n            ":"\r\n            原来是 GL_TRUE = 1\r\n            \r\n","[length: 4] \r\n            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.\r\n            ":"[长度：4]\r\n            指定指向数组中第一个颜色元素的第一个组件的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0\r\n            ":"\r\n            原来是 GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0\r\n            \r\n","\r\n            Original was GL_IMAGE_CLASS_2_X_8 = 0x82C0\r\n            ":"\r\n            原来是 GL_IMAGE_CLASS_2_X_8 = 0x82C0\r\n            \r\n","\r\n            Original was GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907\r\n            ":"\r\n            原来是 GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907\r\n            \r\n","\r\n            Original was GL_CONTEXT_ROBUST_ACCESS = 0x90F3\r\n            ":"\r\n            原来是 GL_CONTEXT_ROBUST_ACCESS = 0x90F3\r\n            \r\n","\r\n            Constructs a new Vector4 from the given Vector3.\r\n            The w component is initialized to 0.\r\n            ":"\r\n            从给定的 Vector3 构造一个新的 Vector4。\r\n            w 分量被初始化为 0。\r\n            \r\n","\r\n            Original was GL_TEXTURE25_ARB = 0x84D9\r\n            ":"\r\n            原来是 GL_TEXTURE25_ARB = 0x84D9\r\n            \r\n","\r\n            Original was GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC\r\n            ":"\r\n            原来是 GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC\r\n            \r\n","\r\n            Original was GL_UNPACK_SKIP_IMAGES_EXT = 0x806D\r\n            ":"\r\n            原来是 GL_UNPACK_SKIP_IMAGES_EXT = 0x806D\r\n            \r\n","\r\n            Original was GL_CON_17_ATI = 0x8952\r\n            ":"\r\n            原来是 GL_CON_17_ATI = 0x8952\r\n            \r\n","\r\n            Original was GL_SPARE1_NV = 0x852F\r\n            ":"\r\n            原来是 GL_SPARE1_NV = 0x852F\r\n            \r\n","\r\n            Original was GL_ALIASED_POINT_SIZE_RANGE = 0x846D\r\n            ":"\r\n            原来是 GL_ALIASED_POINT_SIZE_RANGE = 0x846D\r\n            \r\n","[requires: SGIS_sharpen_texture]":"[要求：SGIS_sharpen_texture]\r\n","\r\n            Original was GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B\r\n            ":"\r\n            原来是 GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Force execution of GL commands in finite time\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            在有限时间内强制执行 GL 命令\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7\r\n            \r\n","\r\n            Original was GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED\r\n            ":"\r\n            原来是 GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED\r\n            \r\n","To ensure that the DEVMODE structure passed to ChangeDisplaySettings is valid and contains only values supported by the display driver, use the DEVMODE returned by the EnumDisplaySettings function.":"要确保传递给 ChangeDisplaySettings 的 DEVMODE 结构有效并且仅包含显示驱动程序支持的值，请使用 EnumDisplaySettings 函数返回的 DEVMODE。\r\n","[length: id,pname]":"[长度：id,pname]\r\n","\r\n            Original was GL_TEXTURE_DEPTH_SIZE = 0x884A\r\n            ":"\r\n            原来是 GL_TEXTURE_DEPTH_SIZE = 0x884A\r\n            \r\n","Z translation.":"Z翻译。\r\n","\r\n            Called when the frame is rendered.\r\n            ":"\r\n            渲染帧时调用。\r\n            \r\n","\r\n            Original was GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280\r\n            ":"\r\n            原来是 GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280\r\n            \r\n","The System.Object to compare to.":"要与之比较的 System.Object。\r\n","[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]\r\n            Invalidate the entirety a texture image\r\n            ":"[要求：v4.3 或 ARB_invalidate_subdata|VERSION_4_3]\r\n            使整个纹理图像无效\r\n            \r\n","The page down key.":"向下翻页键。\r\n"," \r\n            Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.\r\n            ":" \r\n            指定如何计算红色、绿色和蓝色目标混合因子。接受以下符号常量：零、一、SrcColor、OneMinusSrcColor、DstColor、OneMinusDstColor、SrcAlpha、OneMinusSrcAlpha、DstAlpha、OneMinusDstAlpha。 ConstantColor、OneMinusConstantColor、ConstantAlpha 和 OneMinusConstantAlpha。初始值为零。\r\n            \r\n","\r\n            Do not cache instances of this type outside their event handler.\r\n            If necessary, you can clone a KeyboardEventArgs instance using the \r\n            ":"\r\n            不要在事件处理程序之外缓存这种类型的实例。\r\n            如有必要，您可以使用\r\n            \r\n","\r\n            Original was GL_MIRROR_CLAMP_ATI = 0x8742\r\n            ":"\r\n            原来是 GL_MIRROR_CLAMP_ATI = 0x8742\r\n            \r\n","\r\n            Original was GL_PATH_INITIAL_DASH_CAP_NV = 0x907C\r\n            ":"\r\n            原来是 GL_PATH_INITIAL_DASH_CAP_NV = 0x907C\r\n            \r\n","\r\n            Original was GL_Viewport = 0X0ba2\r\n            ":"\r\n            原来是 GL_Viewport = 0X0ba2\r\n            \r\n","[length: pname] \r\n            The address of a variable to retrieve the value of pname for the program interface.\r\n            ":"[长度：pname]\r\n            用于检索程序接口的 pname 值的变量地址。\r\n            \r\n","\r\n            Original was GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895\r\n            \r\n","\r\n            Original was GL_MAX_GENERAL_COMBINERS_NV = 0x854D\r\n            ":"\r\n            原来是 GL_MAX_GENERAL_COMBINERS_NV = 0x854D\r\n            \r\n","\r\n            Original was GL_FEEDBACK_BUFFER_TYPE = 0x0DF2\r\n            ":"\r\n            原来是 GL_FEEDBACK_BUFFER_TYPE = 0x0DF2\r\n            \r\n"," \r\n            Specifies the depth of the texture, in texels.\r\n            ":" \r\n            指定纹理的深度，以纹素为单位。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = 0x93C7\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = 0x93C7\r\n            \r\n","\r\n            Original was GL_Texture16 = 0X84d0\r\n            ":"\r\n            原来是 GL_Texture16 = 0X84d0\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the Z, X, and Y components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Z、X 和 Y 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Original was GL_IMAGE_2D_EXT = 0x904D\r\n            ":"\r\n            原来是 GL_IMAGE_2D_EXT = 0x904D\r\n            \r\n","\r\n            Original was GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70\r\n            ":"\r\n            原来是 GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70\r\n            \r\n","Applications create their main window by calling CreateWindow with the WS_VISIBLE flag set.":"应用程序通过调用设置了 WS_VISIBLE 标志的 CreateWindow 来创建它们的主窗口。\r\n","[length: count*16]":"[长度：计数*16]\r\n"," \r\n            Specifies the index of the sample whose position to query.\r\n            ":" \r\n            指定要查询位置的样本的索引。\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_POP_GROUP = 0x826A\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_POP_GROUP = 0x826A\r\n            \r\n","\r\n            Original was GL_IMAGE_BINDING_ACCESS = 0x8F3E\r\n            ":"\r\n            原来是 GL_IMAGE_BINDING_ACCESS = 0x8F3E\r\n            \r\n","\r\n            Original was GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8\r\n            ":"\r\n            原来是 GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_TYPE = 0x807E\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_TYPE = 0x807E\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Return texture environment parameters\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            返回纹理环境参数\r\n            \r\n"," \r\n            Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.\r\n            ":" \r\n            指定从帧缓冲区读取的第一个像素的窗口坐标。该位置是矩形像素块的左下角。\r\n            \r\n","[requires: OES_mapbuffer]\r\n            Map a buffer object's data store\r\n            ":"[需要：OES_mapbuffer]\r\n            映射缓冲区对象的数据存储\r\n            \r\n","[requires: EXT_provoking_vertex]\r\n            Specifiy the vertex to be used as the source of data for flat shaded varyings\r\n            ":"[需要：EXT_provoking_vertex]\r\n            指定要用作平面着色变量数据源的顶点\r\n            \r\n","\r\n            Original was GL_TextureCubeMapPositiveZ = 0X8519\r\n            ":"\r\n            原来是 GL_TextureCubeMapPositiveZ = 0X8519\r\n            \r\n","\r\n            This exception is thrown when a GraphicsContext property cannot be changed after creation.\r\n            ":"\r\n            当 GraphicsContext 属性在创建后无法更改时，将引发此异常。\r\n            \r\n","\r\n            Original was GL_Decr = 0X1e03\r\n            ":"\r\n            原来是 GL_Decr = 0X1e03\r\n            \r\n","\r\n            Original was GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF\r\n            ":"\r\n            原来是 GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF\r\n            \r\n","\r\n            Original was GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8\r\n            ":"\r\n            原来是 GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8\r\n            \r\n","[requires: v1.3]\r\n            Specify a three-dimensional texture subimage in a compressed format\r\n            ":"[要求：v1.3]\r\n            以压缩格式指定三维纹理子图像\r\n            \r\n","\r\n            Gets or sets a value indicating whether the mouse cursor is visible.\r\n            ":"\r\n            获取或设置一个值，该值指示鼠标光标是否可见。\r\n            \r\n"," \r\n            Specifies the width of the renderbuffer in pixels.\r\n            ":" \r\n            以像素为单位指定渲染缓冲区的宽度。\r\n            \r\n","\r\n            Original was GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C\r\n            ":"\r\n            原来是 GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT6 = 0x8CE6\r\n            ":"原来是 GL_COLOR_ATTACHMENT6 = 0x8CE6\r\n            \r\n","\r\n            Original was GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x82FB\r\n            ":"\r\n            原来是 GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x82FB\r\n            \r\n","\r\n            Original was GL_SWIZZLE_STQ_DQ_ATI = 0x8979\r\n            ":"\r\n            原来是 GL_SWIZZLE_STQ_DQ_ATI = 0x8979\r\n            \r\n","\r\n            Original was GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x887F\r\n            ":"\r\n            原来是 GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x887F\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06\r\n            \r\n","The keypad period key (equivalent to KeypadDecimal).":"小键盘句号键（相当于 KeypadDecimal）。\r\n","The index of the JoystickAxis to check.":"要检查的 JoystickAxis 的索引。\r\n"," thumb sticks.\r\n            ":" 拇指棒。\r\n            \r\n","\r\n            Original was GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245\r\n            ":"\r\n            原来是 GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245\r\n            \r\n","\r\n            Original was GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB\r\n            ":"\r\n            原来是 GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E\r\n            \r\n","The number 6 key.":"6 号键。\r\n","[requires: HP_image_transform]":"[需要：HP_image_transform]\r\n","\r\n            Original was GL_FRAMEBUFFER = 0x8D40\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER = 0x8D40\r\n            \r\n","\r\n            Original was GL_PATH_FILL_MODE_NV = 0x9080\r\n            ":"\r\n            原来是 GL_PATH_FILL_MODE_NV = 0x9080\r\n            \r\n","\r\n            Original was GL_Texture2 = 0X84c2\r\n            ":"\r\n            原来是 GL_Texture2 = 0X84c2\r\n            \r\n","\r\n            Original was GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE\r\n            ":"\r\n            原来是 GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE\r\n            \r\n","\r\n            Original was GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243\r\n            ":"\r\n            原来是 GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243\r\n            \r\n","\r\n            Original was GL_PIXEL_COUNTER_BITS_NV = 0x8864\r\n            ":"\r\n            原来是 GL_PIXEL_COUNTER_BITS_NV = 0x8864\r\n            \r\n","\r\n            Original was GL_LINES = 0x0001\r\n            ":"\r\n            原来是 GL_LINES = 0x0001\r\n            \r\n","\r\n            Original was GL_DUAL_LUMINANCE16_SGIS = 0x8117\r\n            ":"\r\n            原来是 GL_DUAL_LUMINANCE16_SGIS = 0x8117\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810\r\n            \r\n"," \r\n            Specifies the program object to be deleted.\r\n            ":" \r\n            指定要删除的程序对象。\r\n            \r\n","\r\n            Command flag. This parameter can be one of the following values. \r\n            RawInputDateEnum.INPUT\r\n            Get the raw data from the RawInput structure.\r\n            RawInputDateEnum.HEADER\r\n            Get the header information from the RawInput structure.\r\n            ":"\r\n            命令标志。此参数可以是以下值之一。\r\n            原始输入日期枚举.INPUT\r\n            从 RawInput 结构中获取原始数据。\r\n            RawInputDateEnum.HEADER\r\n            从 RawInput 结构中获取标头信息。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Specify the value of a uniform variable for the current program object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            为当前程序对象指定统一变量的值\r\n            \r\n"," \r\n            Specifies the maximum number of values that can be written into buffer.\r\n            ":" \r\n            指定可以写入缓冲区的最大值数。\r\n            \r\n","\r\n            Original was GL_BLEND_SRC_ALPHA_OES = 0x80CB\r\n            ":"\r\n            原来是 GL_BLEND_SRC_ALPHA_OES = 0x80CB\r\n            \r\n","\r\n            Original was GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144\r\n            ":"\r\n            原来是 GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144\r\n            \r\n","\r\n            Original was GL_DEPTH_BOUNDS_TEST_EXT = 0x8890\r\n            ":"\r\n            原来是 GL_DEPTH_BOUNDS_TEST_EXT = 0x8890\r\n            \r\n","\r\n            Original was GL_DEPTH_TEXTURE_MODE = 0x884B\r\n            ":"\r\n            原来是 GL_DEPTH_TEXTURE_MODE = 0x884B\r\n            \r\n","\r\n            Original was GL_MAX_PALETTE_MATRICES_ARB = 0x8842\r\n            ":"\r\n            原来是 GL_MAX_PALETTE_MATRICES_ARB = 0x8842\r\n            \r\n","\r\n            Original was GL_1PASS_EXT = 0x80A1\r\n            ":"\r\n            原来是 GL_1PASS_EXT = 0x80A1\r\n            \r\n","The handle of the NSView.":"NSView 的句柄。\r\n","\r\n            Original was GL_LUMINANCE4_ALPHA4_OES = 0x8043\r\n            ":"\r\n            原来是 GL_LUMINANCE4_ALPHA4_OES = 0x8043\r\n            \r\n","\r\n            Original was GL_REFERENCED_BY_VERTEX_SHADER = 0x9306\r\n            ":"\r\n            原来是 GL_REFERENCED_BY_VERTEX_SHADER = 0x9306\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0\r\n            \r\n","Constructs a new GraphicsException with the specified excpetion message.":"使用指定的异常消息构造一个新的 GraphicsException。\r\n","\r\n            Used in GL.GetMap, GL.Map1 and 1 other function\r\n            ":"\r\n            用于 GL.GetMap、GL.Map1 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INVERT_NV = 0x8537\r\n            ":"\r\n            原来是 GL_UNSIGNED_INVERT_NV = 0x8537\r\n            \r\n","\r\n            Original was GL_IMAGE_CLASS_10_10_10_2 = 0x82C3\r\n            ":"\r\n            原来是 GL_IMAGE_CLASS_10_10_10_2 = 0x82C3\r\n            \r\n","\r\n            Original was GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333\r\n            ":"\r\n            原来是 GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333\r\n            \r\n","\r\n            Original was GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5C\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5C\r\n            \r\n","\r\n            Original was GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867\r\n            ":"\r\n            原来是 GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867\r\n            \r\n","The vibration intensity for the right motor, between 0.0 and 1.0.":"右侧电机的振动强度，介于 0.0 和 1.0 之间。\r\n","The minor version for the OpenGL GraphicsContext.":"OpenGL GraphicsContext 的次要版本。\r\n","\r\n            Original was GL_FRAMEBUFFER_RENDERABLE = 0x8289\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_RENDERABLE = 0x8289\r\n            \r\n"," \r\n            The x coordinate of the lower-left corner of the pixel rectangle to be transferred to the color table.\r\n            ":" \r\n            要传输到颜色表的像素矩形左下角的 x 坐标。\r\n            \r\n","\r\n            Original was GL_MODELVIEW26_ARB = 0x873A\r\n            ":"\r\n            原来是 GL_MODELVIEW26_ARB = 0x873A\r\n            \r\n"," of the window.\r\n            ":" 的窗口。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT4_NV = 0x8CE4\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT4_NV = 0x8CE4\r\n            \r\n","\r\n            Original was GL_CURRENT_WEIGHT_ARB = 0x86A8\r\n            ":"\r\n            原来是 GL_CURRENT_WEIGHT_ARB = 0x86A8\r\n            \r\n"," \r\n            Specifies the handle of the program object whose executables are to be used as part of current rendering state.\r\n            ":" \r\n            指定程序对象的句柄，其可执行文件将用作当前呈现状态的一部分。\r\n            \r\n","\r\n            Used in GL.BeginQuery, GL.EndQuery and 4 other functions\r\n            ":"\r\n            用于 GL.BeginQuery、GL.EndQuery 和其他 4 个函数\r\n            \r\n"," is an arcade pad.\r\n            ":" 是一个街机垫。\r\n            \r\n","\r\n            Specifies what kind of primitives to render. Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted.\r\n            ":"\r\n            指定要渲染的图元类型。接受符号常量 GL_POINTS、GL_LINE_STRIP、GL_LINE_LOOP、GL_LINES、GL_LINE_STRIP_ADJACENCY、GL_LINES_ADJACENCY、GL_TRIANGLE_STRIP、GL_TRIANGLE_FAN、GL_TRIANGLES、GL_TRIANGLE_STRIP_ADJACENCY、GL_TRIANGLES_ADJACENCY 和 GL_PATCHES。\r\n            \r\n"," \r\n            A token identifying the interface within program containing the indexed resource.\r\n            ":" \r\n            标识包含索引资源的程序中的接口的标记。\r\n            \r\n","\r\n            Used in GL.Apple.DrawElementArray, GL.Apple.DrawRangeElementArray and 38 other functions\r\n            ":"\r\n            用于 GL.Apple.DrawElementArray、GL.Apple.DrawRangeElementArray 和其他 38 个函数\r\n            \r\n","\r\n            Original was GL_Texture18 = 0X84d2\r\n            ":"\r\n            原来是 GL_Texture18 = 0X84d2\r\n            \r\n","\r\n            Original was GL_MATRIX31_ARB = 0x88DF\r\n            ":"\r\n            原来是 GL_MATRIX31_ARB = 0x88DF\r\n            \r\n","\r\n            Original was GL_PIXEL_MAG_FILTER_EXT = 0x8331\r\n            ":"\r\n            原来是 GL_PIXEL_MAG_FILTER_EXT = 0x8331\r\n            \r\n","\r\n            Original was GL_TEXTURE6 = 0x84C6\r\n            ":"\r\n            原来是 GL_TEXTURE6 = 0x84C6\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Returns a parameter from a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            从着色器对象返回参数\r\n            \r\n","\r\n            Used in GL.GetHistogram, GL.GetHistogramParameter and 2 other functions\r\n            ":"\r\n            用于 GL.GetHistogram、GL.GetHistogramParameter 和其他 2 个函数\r\n            \r\n"," \r\n            Specifies the target of the query operation. target must be Renderbuffer.\r\n            ":" \r\n            指定查询操作的目标。目标必须是 Renderbuffer。\r\n            \r\n","\r\n            Original was GL_BGRA_EXT = 0x80E1\r\n            ":"\r\n            原来是 GL_BGRA_EXT = 0x80E1\r\n            \r\n","\r\n            Original was GL_SAMPLER_OBJECT_AMD = 0x9155\r\n            ":"\r\n            原来是 GL_SAMPLER_OBJECT_AMD = 0x9155\r\n            \r\n","\r\n            Original was GL_DecrWrap = 0X8508\r\n            ":"\r\n            原来是 GL_DecrWrap = 0X8508\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER1 = 0x8826\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER1 = 0x8826\r\n            \r\n","[requires: v1.0]\r\n            Set pixel storage modes\r\n            ":"[要求：v1.0]\r\n            设置像素存储模式\r\n            \r\n","\r\n            Original was GL_MODELVIEW15_ARB = 0x872F\r\n            ":"\r\n            原来是 GL_MODELVIEW15_ARB = 0x872F\r\n            \r\n","[length: pname] \r\n            A pointer to storage for the retrieved parameters.\r\n            ":"[长度：pname]\r\n            指向存储检索到的参数的指针。\r\n            \r\n","\r\n            Original was GL_X_EXT = 0x87D5\r\n            ":"\r\n            原来是 GL_X_EXT = 0x87D5\r\n            \r\n","[requires: SGIX_instruments]":"[需要：SGIX_instruments]\r\n","\r\n            Used in GL.FogCoordPointer, GL.Ext.VertexArrayFogCoordOffset and 1 other function\r\n            ":"\r\n            用于 GL.FogCoordPointer、GL.Ext.VertexArrayFogCoordOffset 和 1 个其他函数\r\n            \r\n","\r\n            Original was GL_FIELD_LOWER_NV = 0x9023\r\n            ":"\r\n            原来是 GL_FIELD_LOWER_NV = 0x9023\r\n            \r\n","\r\n            Original was GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502\r\n            ":"\r\n            原来是 GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502\r\n            \r\n","\r\n            Original was GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87\r\n            ":"\r\n            原来是 GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87\r\n            \r\n","\r\n            The window status. If this member is WS_ACTIVECAPTION, the window is active. Otherwise, this member is zero.\r\n            ":"\r\n            窗口状态。如果这个成员是 WS_ACTIVECAPTION，则窗口是活动的。否则，该成员为零。\r\n            \r\n","\r\n            Original was GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255\r\n            ":"\r\n            原来是 GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255\r\n            \r\n"," for all specified mouse devices.\r\n            The X, Y and wheel values are defined in a hardware-specific coordinate system.\r\n            Pointer ballistics (acceleration) are NOT applied. Resolution is hardware-specific,\r\n            typically between 200 and 2000 DPI.\r\n            Use ":" 对于所有指定的鼠标设备。\r\n            X、Y 和车轮值在特定于硬件的坐标系中定义。\r\n            不应用指针弹道（加速度）。分辨率是特定于硬件的，\r\n            通常在 200 到 2000 DPI 之间。\r\n            使用\r\n","[requires: NV_copy_buffer]\r\n            Copy part of the data store of a buffer object to the data store of another buffer object\r\n            ":"[需要：NV_copy_buffer]\r\n            将缓冲区对象的部分数据存储复制到另一个缓冲区对象的数据存储\r\n            \r\n","\r\n            Frees a marshalled string that allocated by ":"\r\n            释放由分配的编组字符串\r\n","\r\n            Used in GL.Arb.MapBuffer\r\n            ":"\r\n            在 GL.Arb.MapBuffer 中使用\r\n            \r\n","\r\n            Used in GL.Angle.RenderbufferStorageMultisample, GL.Apple.RenderbufferStorageMultisample and 5 other functions\r\n            ":"\r\n            用于GL.Angle.RenderbufferStorageMultisample、GL.Apple.RenderbufferStorageMultisample等5个函数\r\n            \r\n"," \r\n            The name of a buffer object to bind to the specified binding point.\r\n            ":" \r\n            要绑定到指定绑定点的缓冲区对象的名称。\r\n            \r\n","[requires: ARB_color_buffer_float]\r\n            Specify whether data read via glReadPixels should be clamped\r\n            ":"[要求：ARB_color_buffer_float]\r\n            指定是否应限制通过 glReadPixels 读取的数据\r\n            \r\n","\r\n            Gets a System.Boolean indicating whether OpenTK is running on the SDL2 backend.\r\n            ":"\r\n            获取一个 System.Boolean，指示 OpenTK 是否正在 SDL2 后端上运行。\r\n            \r\n","[requires: EXT_convolution]\r\n            Set convolution parameters\r\n            ":"[需要：EXT_convolution]\r\n            设置卷积参数\r\n            \r\n","\r\n            Original was GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3\r\n            ":"\r\n            原来是 GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Set sampler parameters\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            设置采样器参数\r\n            \r\n","\r\n            If the function is successful, the return value is the number of devices stored in the buffer\r\n            pointed to by RawInputDeviceList.\r\n            If RawInputDeviceList is NULL, the return value is zero. \r\n            If NumDevices is smaller than needed to contain all the RawInputDeviceList structures,\r\n            the return value is (UINT) -1 and the required buffer is returned in NumDevices.\r\n            Calling GetLastError returns ERROR_INSUFFICIENT_BUFFER.\r\n            On any other error, the function returns (UINT) -1 and GetLastError returns the error indication.\r\n            ":"\r\n            如果函数成功，返回值为缓冲区中存储的设备数\r\n            由 RawInputDeviceList 指向。\r\n            如果 RawInputDeviceList 为 NULL，则返回值为零。\r\n            如果 NumDevices 小于包含所有 RawInputDeviceList 结构所需的值，\r\n            返回值为 (UINT) -1 并且在 NumDevices 中返回所需的缓冲区。\r\n            调用 GetLastError 返回 ERROR_INSUFFICIENT_BUFFER。\r\n            对于任何其他错误，函数返回 (UINT) -1 并且 GetLastError 返回错误指示。\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_WIDTH = 0x8026\r\n            ":"\r\n            原来是 GL_HISTOGRAM_WIDTH = 0x8026\r\n            \r\n","\r\n            Original was GL_INVERSE_NV = 0x862B\r\n            ":"\r\n            原来是 GL_INVERSE_NV = 0x862B\r\n            \r\n","\r\n            Gets the X position of the mouse for the event.\r\n            ":"\r\n            获取鼠标在事件中的 X 位置。\r\n            \r\n","The F32 key.":"F32 键。\r\n","The minus key.":"减号键。\r\n","\r\n            Gets a double representing the time spent in the RenderFrame function, in seconds.\r\n            ":"\r\n            获取一个双精度值，表示在 RenderFrame 函数中花费的时间，以秒为单位。\r\n            \r\n"," \r\n            Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.\r\n            ":" \r\n            指定缓冲区对象绑定到的目标。符号常量必须是 ArrayBuffer、CopyReadBuffer、CopyWriteBuffer、ElementArrayBuffer、PixelPackBuffer、PixelUnpackBuffer、TransformFeedbackBuffer 或 UniformBuffer。\r\n            \r\n","\r\n            Original was GL_DOUBLE_MAT2x3_EXT = 0x8F49\r\n            ":"\r\n            原来是 GL_DOUBLE_MAT2x3_EXT = 0x8F49\r\n            \r\n","\r\n            Enters the game loop of the GameWindow using the specified update rate.\r\n            maximum possible render frequency.\r\n            ":"\r\n            使用指定的更新率进入 GameWindow 的游戏循环。\r\n            最大可能的渲染频率。\r\n            \r\n","\r\n            Original was GL_PERFORMANCE_MONITOR_AMD = 0x9152\r\n            ":"\r\n            原来是 GL_PERFORMANCE_MONITOR_AMD = 0x9152\r\n            \r\n","\r\n            Used in GL.ColorPointer\r\n            ":"\r\n            在 GL.ColorPointer 中使用\r\n            \r\n"," structure\r\n            that defines the bounds of the OpenGL surface, in window coordinates.\r\n            The coordinates are specified in device-dependent pixels.\r\n            ":" 结构\r\n            在窗口坐标中定义 OpenGL 表面的边界。\r\n            坐标以设备相关像素指定。\r\n            \r\n","\r\n            Original was GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB\r\n            ":"\r\n            原来是 GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB\r\n            \r\n","\r\n            Original was GL_PRIMARY_COLOR = 0x8577\r\n            ":"\r\n            原来是 GL_PRIMARY_COLOR = 0x8577\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869\r\n            \r\n","\r\n            The sixth extra mouse button.\r\n            ":"\r\n            第六个额外的鼠标按钮。\r\n            \r\n","The quaternion":"四元数\r\n","\r\n            Original was GL_IntVec3 = 0X8b54\r\n            ":"\r\n            原来是 GL_IntVec3 = 0X8b54\r\n            \r\n","The keypad enter key.":"键盘输入键。\r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A\r\n            \r\n","\r\n            Original was GL_YCRCB_SGIX = 0x8318\r\n            ":"\r\n            原来是 GL_YCRCB_SGIX = 0x8318\r\n            \r\n","\r\n            Define a two-dimensional convolution filter\r\n            ":"\r\n            定义一个二维卷积滤波器\r\n            \r\n","\r\n            Original was GL_RGBA32F_EXT = 0x8814\r\n            ":"\r\n            原来是 GL_RGBA32F_EXT = 0x8814\r\n            \r\n","\r\n            Original was GL_IMAGE_SCALE_Y_HP = 0x8156\r\n            ":"\r\n            原来是 GL_IMAGE_SCALE_Y_HP = 0x8156\r\n            \r\n","\r\n            Original was GL_SET_AMD = 0x874A\r\n            ":"\r\n            原来是 GL_SET_AMD = 0x874A\r\n            \r\n","\r\n            Original was GL_SAMPLE_SHADING_ARB = 0x8C36\r\n            ":"\r\n            原来是 GL_SAMPLE_SHADING_ARB = 0x8C36\r\n            \r\n","\r\n            Original was GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF\r\n            ":"\r\n            原来是 GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF\r\n            \r\n","\r\n            Original was GL_NORMAL_MAP_OES = 0x8511\r\n            ":"\r\n            原来是 GL_NORMAL_MAP_OES = 0x8511\r\n            \r\n"," \r\n            Specifies the object parameter. Accepted symbolic names are ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, AttachedShaders, DeleteStatus, InfoLogLength, LinkStatus, ProgramBinaryRetrievableHint, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength and ValidateStatus.\r\n            ":" \r\n            指定对象参数。接受的符号名称是 ActiveAttributes、ActiveAttributeMaxLength、ActiveUniforms、ActiveUniformBlocks、ActiveUniformBlockMaxNameLength、ActiveUniformMaxLength、AttachedShaders、DeleteStatus、InfoLogLength、LinkStatus、ProgramBinaryRetrievableHint、TransformFeedbackBufferMode、TransformFeedbackVaryings、TransformFeedbackVaryingMaxLength 和 ValidateStatus。\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_GREEN_TYPE = 0x8279\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_GREEN_TYPE = 0x8279\r\n            \r\n","\r\n            Original was GL_INCR_WRAP_OES = 0x8507\r\n            ":"\r\n            原来是 GL_INCR_WRAP_OES = 0x8507\r\n            \r\n","[requires: v4.0]\r\n            Specify pixel arithmetic for RGB and alpha components separately\r\n            ":"[要求：v4.0]\r\n            分别为 RGB 和 alpha 分量指定像素算法\r\n            \r\n","[requires: v1.3]\r\n            Return a compressed texture image\r\n            ":"[要求：v1.3]\r\n            返回压缩纹理图像\r\n            \r\n","\r\n            Original was GL_WARP_SIZE_NV = 0x9339\r\n            ":"\r\n            原来是 GL_WARP_SIZE_NV = 0x9339\r\n            \r\n","\r\n            Used in GL.MapBufferRange, GL.MapNamedBufferRange and 1 other function\r\n            ":"\r\n            用于 GL.MapBufferRange、GL.MapNamedBufferRange 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E\r\n            \r\n","The matrix to invert":"要反转的矩阵\r\n","\r\n            Original was GL_BUFFER_MAP_POINTER = 0x88BD\r\n            ":"\r\n            原来是 GL_BUFFER_MAP_POINTER = 0x88BD\r\n            \r\n","\r\n            Original was GL_TEXTURE_BORDER = 0x1005\r\n            ":"\r\n            原来是 GL_TEXTURE_BORDER = 0x1005\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_BINDING_OES = 0x85B5\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_BINDING_OES = 0x85B5\r\n            \r\n","A new Matrix3x4 which holds the result of the multiplication":"保存乘法结果的新 Matrix3x4\r\n","\r\n            Original was GL_OFFSET_TEXTURE_2D_NV = 0x86E8\r\n            ":"\r\n            原来是 GL_OFFSET_TEXTURE_2D_NV = 0x86E8\r\n            \r\n","\r\n            Original was GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102\r\n            ":"\r\n            原来是 GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102\r\n            \r\n","\r\n            Original was GL_Less = 0X0201\r\n            ":"\r\n            原来是 GL_Less = 0X0201\r\n            \r\n"," \r\n            The generic vertex attribute array being described.\r\n            ":" \r\n            正在描述的通用顶点属性数组。\r\n            \r\n","\r\n            Original was GL_CON_9_ATI = 0x894A\r\n            ":"\r\n            原来是 GL_CON_9_ATI = 0x894A\r\n            \r\n","\r\n            Used in GL.GetVertexAttribPointer\r\n            ":"\r\n            在 GL.GetVertexAttribPointer 中使用\r\n            \r\n"," \r\n            Specifies the data type of the pixel data. Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev, or Float32UnsignedInt248Rev.\r\n            ":" \r\n            指定像素数据的数据类型。 Must be one of UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, HalfFloat, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, UnsignedInt2101010Rev, UnsignedInt248, UnsignedInt10F11F11FRev, UnsignedInt5999Rev,或 Float32UnsignedInt248Rev。\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF\r\n            \r\n"," \r\n            A token indicating the parameter to be retrieved.\r\n            ":" \r\n            指示要检索的参数的标记。\r\n            \r\n","\r\n            Original was GL_RGBA2 = 0x8055\r\n            ":"\r\n            原来是 GL_RGBA2 = 0x8055\r\n            \r\n"," reference the same win32 window; false otherwise.":" 引用相同的 win32 窗口；否则为假。\r\n","\r\n            Original was GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033\r\n            ":"\r\n            原来是 GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033\r\n            \r\n",", if vibration was set, ":"，如果设置了振动，\r\n","[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]\r\n            Determine if a name corresponds to a query object\r\n            ":"[需要：EXT_disjoint_timer_query|EXT_occlusion_query_boolean]\r\n            确定名称是否对应于查询对象\r\n            \r\n","\r\n            Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.\r\n            ":"\r\n            指定清除颜色缓冲区时使用的红色、绿色、蓝色和 alpha 值。初始值全部为 0。\r\n            \r\n","[requires: v2.0]\r\n            Returns a parameter from a program object\r\n            ":"[要求：v2.0]\r\n            从程序对象返回参数\r\n            \r\n","\r\n            Original was GL_IMAGE_BINDING_LAYER = 0x8F3D\r\n            ":"\r\n            原来是 GL_IMAGE_BINDING_LAYER = 0x8F3D\r\n            \r\n","\r\n            Used in GL.Apple.GetSync, GL.GetSync\r\n            ":"\r\n            用于GL.Apple.GetSync, GL.GetSync\r\n            \r\n","\r\n            Original was GL_3_BYTES = 0x1408\r\n            ":"\r\n            原来是 GL_3_BYTES = 0x1408\r\n            \r\n","\r\n            Original was GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898D\r\n            ":"\r\n            原来是 GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898D\r\n            \r\n","\r\n            Original was GL_DEPTH24_STENCIL8 = 0x88F0\r\n            ":"\r\n            原来是 GL_DEPTH24_STENCIL8 = 0x88F0\r\n            \r\n","The device context.":"设备上下文。\r\n"," \r\n            The mipmap level to read from the source.\r\n            ":" \r\n            要从源中读取的 mipmap 级别。\r\n            \r\n","A new Matrix4x2d which holds the result of the multiplication":"保存乘法结果的新 Matrix4x2d\r\n","\r\n            Original was GL_FLOAT_MAT4x2_NV = 0x8B69\r\n            ":"\r\n            原来是 GL_FLOAT_MAT4x2_NV = 0x8B69\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6\r\n            \r\n","\r\n            Number of HID inputs in bRawData.\r\n            ":"\r\n            bRawData 中的 HID 输入数。\r\n            \r\n","Scale factor for the z axis.":"z 轴的比例因子。\r\n","\r\n            Original was GL_FloatMat2 = 0X8b5a\r\n            ":"\r\n            原来是 GL_FloatMat2 = 0X8b5a\r\n            \r\n","\r\n            Original was GL_SURFACE_REGISTERED_NV = 0x86FD\r\n            ":"\r\n            原来是 GL_SURFACE_REGISTERED_NV = 0x86FD\r\n            \r\n","\r\n            Contains additional data which may be used to create the window.\r\n            ":"\r\n            包含可用于创建窗口的附加数据。\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_WIDTH = 0x80D9\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_WIDTH = 0x80D9\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_COUNT_EXT = 0x807D\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_COUNT_EXT = 0x807D\r\n            \r\n","[requires: AMD_name_gen_delete]":"[要求：AMD_name_gen_delete]\r\n","\r\n            Gets or sets the height of the OpenGL surface in window coordinates.\r\n            The coordinates are specified in device-dependent pixels.\r\n            ":"\r\n            获取或设置 OpenGL 表面在窗口坐标中的高度。\r\n            坐标以设备相关像素指定。\r\n            \r\n","\r\n            Original was GL_BINORMAL_ARRAY_EXT = 0x843A\r\n            ":"\r\n            原来是 GL_BINORMAL_ARRAY_EXT = 0x843A\r\n            \r\n","\r\n            Original was GL_DOT3_RGB = 0x86AE\r\n            ":"\r\n            原来是 GL_DOT3_RGB = 0x86AE\r\n            \r\n","\r\n            Used in GL.PointParameter\r\n            ":"\r\n            在 GL.PointParameter 中使用\r\n            \r\n","\r\n            Define a one-dimensional convolution filter\r\n            ":"\r\n            定义一维卷积滤波器\r\n            \r\n","[requires: ARB_occlusion_query]\r\n            Delete named query objects\r\n            ":"[需要：ARB_occlusion_query]\r\n            删除命名查询对象\r\n            \r\n"," \r\n            Must be Histogram.\r\n            ":" \r\n            必须是直方图。\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD\r\n            \r\n","\r\n            Original was GL_FRAGMENT_LIGHT0_SGIX = 0x840C\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHT0_SGIX = 0x840C\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266\r\n            \r\n"," to transform.\r\n            ":" 转变。\r\n            \r\n","\r\n            Original was GL_R8_SNORM = 0x8F94\r\n            ":"\r\n            原来是 GL_R8_SNORM = 0x8F94\r\n            \r\n","Scale factor for y-axis":"y 轴的比例因子\r\n","\r\n            Original was GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF\r\n            ":"\r\n            原来是 GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF\r\n            \r\n","A smooth blend between the given quaternions":"给定四元数之间的平滑混合\r\n","\r\n            Original was GL_LOCAL_CONSTANT_EXT = 0x87C3\r\n            ":"原来是 GL_LOCAL_CONSTANT_EXT = 0x87C3\r\n            \r\n","[requires: OES_matrix_palette]":"[需要：OES_matrix_palette]\r\n","\r\n            Original was GL_TextureCubeMapNegativeX = 0X8516\r\n            ":"\r\n            原来是 GL_TextureCubeMapNegativeX = 0X8516\r\n            \r\n","\r\n            Used in GL.DebugMessageControl\r\n            ":"\r\n            在 GL.DebugMessageControl 中使用\r\n            \r\n","\r\n            Original was GL_BUFFER_MAP_LENGTH = 0x9120\r\n            ":"\r\n            原来是 GL_BUFFER_MAP_LENGTH = 0x9120\r\n            \r\n","\r\n            Original was GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D\r\n            ":"\r\n            原来是 GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D\r\n            \r\n","[length: count] \r\n            Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.\r\n            ":"[长度：计数]\r\n            指定一个数组的地址，该数组按顺序包含每个剪刀框的左侧、底部、宽度和高度。\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029\r\n            ":"\r\n            原来是 GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_STRIDE = 0x8083\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_STRIDE = 0x8083\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Generate mipmaps for a specified texture target\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            为指定的纹理目标生成 mipmap\r\n            \r\n","\r\n            Gets a value indicating whether a render window exists.\r\n            ":"\r\n            获取一个值，该值指示渲染窗口是否存在。\r\n            \r\n"," \r\n            Specifies the width of the texture image. All implementations support texture images that are at least 2048 texels wide.\r\n            ":" \r\n            指定纹理图像的宽度。所有实现都支持至少 2048 纹素宽的纹理图像。\r\n            \r\n","\r\n            Original was GL_VARIABLE_C_NV = 0x8525\r\n            ":"\r\n            原来是 GL_VARIABLE_C_NV = 0x8525\r\n            \r\n","\r\n            Initially, X will not report any of these events.\r\n            Events are reported relative to a window.\r\n            If a window is not interested in a device event,\r\n            it usually propagates to the closest ancestor that is interested,\r\n            unless the do_not_propagate mask prohibits it.\r\n            Setting the event-mask attribute of a window overrides any previous call for the same window but not for other clients. Multiple clients can select for the same events on the same window with the following restrictions: \r\n            ":"\r\n            最初，X 不会报告任何这些事件。\r\n            事件是相对于窗口报告的。\r\n            如果窗口对设备事件不感兴趣，\r\n            它通常传播到感兴趣的最近的祖先，\r\n            除非 do_not_propagate 掩码禁止它。\r\n            设置窗口的事件掩码属性会覆盖对同一窗口的任何先前调用，但不会覆盖其他客户端。多个客户端可以在同一窗口中选择相同的事件，但有以下限制：\r\n            \r\n","\r\n            Used in GL.ClipControl\r\n            ":"\r\n            在 GL.ClipControl 中使用\r\n            \r\n","[requires: AMD_stencil_operation_extended]":"[要求：AMD_stencil_operation_extended]\r\n"," \r\n            The name of an existing texture object containing the image to be cleared.\r\n            ":" \r\n            包含要清除的图像的现有纹理对象的名称。\r\n            \r\n","\r\n            Original was GL_INDEX_ARRAY_TYPE = 0x8085\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_TYPE = 0x8085\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210\r\n            \r\n"," \r\n            Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.\r\n            ":" \r\n            以基本机器单位指定应写入数据的 writetarget 数据存储中的偏移量。\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E\r\n            \r\n","[length: pname] \r\n            Returns the sampler parameters.\r\n            ":"[长度：pname]\r\n            返回采样器参数。\r\n            \r\n","\r\n            Used in GL.Ext.TexStorage2D, GL.Ext.TexStorage3D\r\n            ":"\r\n            用于 GL.Ext.TexStorage2D, GL.Ext.TexStorage3D\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067\r\n            \r\n","\r\n            Original was GL_CurrentVertexAttrib = 0X8626\r\n            ":"\r\n            原来是 GL_CurrentVertexAttrib = 0X8626\r\n            \r\n"," \r\n            Specifies the height of the renderbuffer, in pixels.\r\n            ":" \r\n            指定渲染缓冲区的高度，以像素为单位。\r\n            \r\n","\r\n            Original was GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0\r\n            ":"\r\n            原来是 GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0\r\n            \r\n","\r\n            Original was GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E\r\n            ":"\r\n            原来是 GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E\r\n            \r\n","\r\n            Original was GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6\r\n            ":"\r\n            原来是 GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6\r\n            \r\n","\r\n            The Vector4 structure is suitable for interoperation with unmanaged code requiring four consecutive floats.\r\n            ":"\r\n            Vector4 结构适合与需要四个连续浮点数的非托管代码进行互操作。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0\r\n            \r\n","\r\n            Used in GL.Khr.DebugMessageControl, GL.Khr.DebugMessageInsert and 5 other functions\r\n            ":"用于 GL.Khr.DebugMessageControl、GL.Khr.DebugMessageInsert 和其他 5 个函数\r\n            \r\n","\r\n            Label a named object identified within a namespace\r\n            ":"\r\n            标记命名空间中标识的命名对象\r\n            \r\n"," \r\n            Specifies the shader object to be queried.\r\n            ":" \r\n            指定要查询的着色器对象。\r\n            \r\n","\r\n            Original was GL_R = 0x2002\r\n            ":"\r\n            原来是 GL_R = 0x2002\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 0x8E89\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 0x8E89\r\n            \r\n","First item of the first row of the matrix.":"矩阵第一行的第一项。\r\n","[length: maxShaders]":"[长度：maxShaders]\r\n","\r\n            Original was GL_PROGRAM_BINDING = 0x8677\r\n            ":"\r\n            原来是 GL_PROGRAM_BINDING = 0x8677\r\n            \r\n"," \r\n            Specifies the data type of each color component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, and Double are accepted. The initial value is Float.\r\n            ":" \r\n            指定数组中每个颜色分量的数据类型。接受符号常量 Byte、UnsignedByte、Short、UnsignedShort、Int、UnsignedInt、Float 和 Double。初始值为浮点数。\r\n            \r\n","[length: id]":"[长度：id]\r\n","\r\n            Creates a scale matrix.\r\n            ":"\r\n            创建比例矩阵。\r\n            \r\n","[requires: ARB_occlusion_query]\r\n            Delimit the boundaries of a query object\r\n            ":"[需要：ARB_occlusion_query]\r\n            划定查询对象的边界\r\n            \r\n","The device instance.":"设备实例。\r\n","WinWindowInfo":"窗口信息\r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A\r\n            \r\n","\r\n            Original was GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196\r\n            ":"\r\n            原来是 GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Flag edges as either boundary or nonboundary\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            将边标记为边界或非边界\r\n            \r\n"," \r\n            Specifies the maximum number of characters, including the null terminator, that may be written into infoLog.\r\n            ":" \r\n            指定可以写入 infoLog 的最大字符数，包括空终止符。\r\n            \r\n","\r\n            Used in GL.DepthFunc, GL.NV.PathCoverDepthFunc\r\n            ":"\r\n            用于GL.DepthFunc、GL.NV.PathCoverDepthFunc\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7\r\n            \r\n"," \r\n            Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.\r\n            ":"指定纹素数据的格式。必须匹配内部格式。接受以下符号值：Alpha、Rgb、Rgba、Luminance 和 LuminanceAlpha。\r\n            \r\n","\r\n            Original was GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900E\r\n            ":"\r\n            原来是 GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900E\r\n            \r\n","\r\n            Used in GL.Ext.BindParameter, GL.Ext.BindTextureUnitParameter and 20 other functions\r\n            ":"\r\n            用于 GL.Ext.BindParameter、GL.Ext.BindTextureUnitParameter 和其他 20 个函数\r\n            \r\n","\r\n            Original was GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35\r\n            ":"\r\n            原来是 GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35\r\n            \r\n","\r\n            The hat is in its bottom-left position.\r\n            ":"\r\n            帽子位于左下角的位置。\r\n            \r\n","[requires: v3.2 or ARB_sync|VERSION_3_2]\r\n            Create a new sync object and insert it into the GL command stream\r\n            ":"[要求：v3.2 或 ARB_sync|VERSION_3_2]\r\n            创建一个新的同步对象并将其插入到 GL 命令流中\r\n            \r\n","The pending message (if any) is stored here.":"挂起的消息（如果有的话）存储在这里。\r\n","\r\n            Used in GL.Arb.DrawBuffers\r\n            ":"\r\n            在 GL.Arb.DrawBuffers 中使用\r\n            \r\n","\r\n            Called when the NativeWindow is moved.\r\n            ":"\r\n            移动 NativeWindow 时调用。\r\n            \r\n","\r\n            Original was GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80\r\n            ":"\r\n            原来是 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_BLUE_SIZE = 0x80DC\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_BLUE_SIZE = 0x80DC\r\n            \r\n","[length: 2] \r\n            Specify the , , , and  object coordinates (if present) for the raster position.\r\n            ":"[长度：2]\r\n            为光栅位置指定 、 、 和对象坐标（如果存在）。\r\n            \r\n","Bottom row of the matrix":"矩阵的底行\r\n","[requires: NV_framebuffer_multisample_coverage]":"[需要：NV_framebuffer_multisample_coverage]\r\n"," \r\n            Specifies the rasterization mode. Three values are accepted: Render, Select, and Feedback. The initial value is Render.\r\n            ":" \r\n            指定光栅化模式。接受三个值：渲染、选择和反馈。初始值为渲染。\r\n            \r\n","\r\n            Used in GL.BindImageTexture, GL.GetInternalformat and 21 other functions\r\n            ":"\r\n            用于 GL.BindImageTexture、GL.GetInternalformat 和其他 21 个函数\r\n            \r\n","\r\n            Original was GL_RGB_RAW_422_APPLE = 0x8A51\r\n            ":"\r\n            原来是 GL_RGB_RAW_422_APPLE = 0x8A51\r\n            \r\n","[length: pname] \r\n            Specifies the value that param will be set to.\r\n            ":"[长度：pname]\r\n            指定参数将设置为的值。\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 0x90CD\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 0x90CD\r\n            \r\n","\r\n            Original was GL_NOOP = 0x1505\r\n            ":"\r\n            原来是 GL_NOOP = 0x1505\r\n            \r\n","uCode is a virtual-key code and is translated into an unshifted character value in the low-order word of the return value. Dead keys (diacritics) are indicated by setting the top bit of the return value. If there is no translation, the function returns 0.":"uCode 是一个虚拟键码，在返回值的低位字中被翻译成一个未移位的字符值。死键（变音符号）通过设置返回值的最高位来指示。如果没有翻译，函数返回 0。\r\n","[requires: EXT_histogram]\r\n            Reset histogram table entries to zero\r\n            ":"[需要：EXT_histogram]\r\n            将直方图条目重置为零\r\n            \r\n","\r\n            Original was GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8D68\r\n            ":"原来是 GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8D68\r\n            \r\n","If this is not the case, a BadValue error results. The number of elements in the KeySyms list is: ":"如果不是这种情况，则会产生 BadValue 错误。 KeySyms 列表中的元素数量为：\r\n","[requires: v1.3]\r\n            Specify a one-dimensional texture subimage in a compressed format\r\n            ":"[要求：v1.3]\r\n            以压缩格式指定一维纹理子图像\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 0x93E2\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 0x93E2\r\n            \r\n"," \r\n            The severity of the debug messages to insert.\r\n            ":" \r\n            要插入的调试消息的严重性。\r\n            \r\n","[requires: APPLE_flush_buffer_range]":"[要求：APPLE_flush_buffer_range]\r\n","\r\n            Original was GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER13 = 0x8832\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER13 = 0x8832\r\n            \r\n","\r\n            Original was GL_STATIC_READ = 0x88E5\r\n            ":"\r\n            原来是 GL_STATIC_READ = 0x88E5\r\n            \r\n"," \r\n            Points to a null terminated string containing the name of the attribute variable whose location is to be queried.\r\n            ":" \r\n            指向一个以空字符结尾的字符串，该字符串包含要查询其位置的属性变量的名称。\r\n            \r\n","\r\n            Original was GL_PATH_TERMINAL_END_CAP_NV = 0x9078\r\n            ":"\r\n            原来是 GL_PATH_TERMINAL_END_CAP_NV = 0x9078\r\n            \r\n","\r\n            Original was GL_BLUE = 0x1905\r\n            ":"\r\n            原来是 GL_BLUE = 0x1905\r\n            \r\n","\r\n            Original was GL_R32UI = 0x8236\r\n            ":"\r\n            原来是 GL_R32UI = 0x8236\r\n            \r\n","[requires: EXT_draw_buffers_indexed]\r\n            Specify pixel arithmetic\r\n            ":"[需要：EXT_draw_buffers_indexed]\r\n            指定像素算法\r\n            \r\n","The fourth axis of the JoystickDevice.":"JoystickDevice 的第四轴。\r\n","[requires: EXT_separate_shader_objects]\r\n            Validate a program pipeline object against current GL state\r\n            ":"[需要：EXT_separate_shader_objects]\r\n            根据当前 GL 状态验证程序管道对象\r\n            \r\n","The major OpenGL version number for this IGraphicsContext.":"此 IGraphicsContext 的主要 OpenGL 版本号。\r\n","GamePad":"游戏手柄\r\n","\r\n            Original was GL_MATRIX6_ARB = 0x88C6\r\n            ":"\r\n            原来是 GL_MATRIX6_ARB = 0x88C6\r\n            \r\n"," \r\n            Specifies the target to which the texture is bound. Must be either Texture2D, Texture3D, Texture2DArray, or TextureCubeMap,\r\n            ":" \r\n            指定纹理绑定到的目标。必须是 Texture2D、Texture3D、Texture2DArray 或 TextureCubeMap，\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE\r\n            \r\n","A zero-based device index for the ":"一个从零开始的设备索引\r\n"," has\r\n            a low-frequency vibration motor.\r\n            ":" 有\r\n            低频振动电机。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Set the viewport\r\n            ":"[要求：v1.0 和 1.0]\r\n            设置视口\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521\r\n            \r\n","\r\n            Original was GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D\r\n            ":"\r\n            原来是 GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D\r\n            \r\n"," \r\n            Specifies the index of the first viewport whose scissor box to modify.\r\n            ":" \r\n            指定要修改其剪刀框的第一个视口的索引。\r\n            \r\n","[length: format,type] \r\n            The address of a memory location storing the data to be replicated into the buffer's data store.\r\n            ":"[长度：格式，类型]\r\n            将要复制的数据存储到缓冲区的数据存储中的内存位置的地址。\r\n            \r\n","[requires: EXT_texture_buffer]\r\n            Attach the storage for a buffer object to the active buffer texture\r\n            ":"[需要：EXT_texture_buffer]\r\n            将缓冲区对象的存储附加到活动缓冲区纹理\r\n            \r\n"," \r\n            A token indicating the parameter to be modified.\r\n            ":" \r\n            指示要修改的参数的标记。\r\n            \r\n","\r\n            Original was GL_RGBA12_EXT = 0x805A\r\n            ":"\r\n            原来是 GL_RGBA12_EXT = 0x805A\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER12_ATI = 0x8831\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER12_ATI = 0x8831\r\n            \r\n","[requires: OES_texture_cube_map]\r\n            Control the generation of texture coordinates\r\n            ":"[需要：OES_texture_cube_map]\r\n            控制纹理坐标的生成\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E\r\n            \r\n","\r\n            Original was GL_FASTEST = 0x1101\r\n            ":"\r\n            原来是 GL_FASTEST = 0x1101\r\n            \r\n","\r\n            Original was GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E\r\n            \r\n","\r\n            Original was GL_NO_RESET_NOTIFICATION_ARB = 0x8261\r\n            ":"\r\n            原来是 GL_NO_RESET_NOTIFICATION_ARB = 0x8261\r\n            \r\n","\r\n            Matrix multiplication\r\n            ":"\r\n            矩阵乘法\r\n            \r\n","\r\n            Original was GL_ZERO_EXT = 0x87DD\r\n            ":"\r\n            原来是 GL_ZERO_EXT = 0x87DD\r\n            \r\n","\r\n            Original was GL_STENCIL_ATTACHMENT = 0x8D20\r\n            ":"\r\n            原来是 GL_STENCIL_ATTACHMENT = 0x8D20\r\n            \r\n","The amount of time that has elapsed since the previous event, in seconds.":"自上一个事件以来经过的时间量，以秒为单位。\r\n","First item of the third row of the matrix.":"矩阵第三行的第一项。\r\n","\r\n            Original was GL_CONTINUOUS_AMD = 0x9007\r\n            ":"\r\n            原来是 GL_CONTINUOUS_AMD = 0x9007\r\n            \r\n","[requires: v4.3 or KHR_debug|VERSION_4_3]\r\n            Label a a sync object identified by a pointer\r\n            ":"[要求：v4.3 或 KHR_debug|VERSION_4_3]\r\n            标记一个由指针标识的同步对象\r\n            \r\n"," \r\n            The sync object to be deleted.\r\n            ":" \r\n            要删除的同步对象。\r\n            \r\n","\r\n            Original was GL_SUBPIXEL_BITS = 0x0D50\r\n            ":"\r\n            原来是 GL_SUBPIXEL_BITS = 0x0D50\r\n            \r\n","\r\n            Original was GL_422_AVERAGE_EXT = 0x80CE\r\n            ":"\r\n            原来是 GL_422_AVERAGE_EXT = 0x80CE\r\n            \r\n"," \r\n            Specify the first viewport to set.\r\n            ":" \r\n            指定要设置的第一个视口。\r\n            \r\n"," instances,\r\n            one for each connected display.\r\n            ":" 实例，\r\n            每个连接的显示器一个。\r\n            \r\n","\r\n            Original was GL_FLOAT_RGBA_NV = 0x8883\r\n            ":"\r\n            原来是 GL_FLOAT_RGBA_NV = 0x8883\r\n            \r\n","\r\n            Original was GL_BlendEquationRgb = 0X8009\r\n            ":"\r\n            原来是 GL_BlendEquationRgb = 0X8009\r\n            \r\n","\r\n            Original was GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1\r\n            ":"\r\n            原来是 GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1\r\n            \r\n"," for the right stick button.\r\n            This button represents a right stick that is pressed in.\r\n            ":" 右摇杆按钮。\r\n            此按钮代表按下的右摇杆。\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263\r\n            \r\n","\r\n            Same as the NOOWNERZORDER flag.\r\n            ":"\r\n            与 NOOWNERZORDER 标志相同。\r\n            \r\n","[requires: v1.0]\r\n            Return light source parameter values\r\n            ":"[要求：v1.0]\r\n            返回光源参数值\r\n            \r\n","\r\n            Original was GL_CULL_VERTEX_EXT = 0x81AA\r\n            ":"\r\n            原来是 GL_CULL_VERTEX_EXT = 0x81AA\r\n            \r\n","[requires: v4.2 or ARB_transform_feedback_instanced|VERSION_4_2]\r\n            Render multiple instances of primitives using a count derived from a transform feedback object\r\n            ":"[要求：v4.2 或 ARB_transform_feedback_instanced|VERSION_4_2]\r\n            使用从变换反馈对象派生的计数渲染图元的多个实例\r\n            \r\n","\r\n            Original was GL_StencilAttachment = 0X8d20\r\n            ":"\r\n            原来是 GL_StencilAttachment = 0X8d20\r\n            \r\n","[requires: PGI_misc_hints]\r\n            Specify implementation-specific hints\r\n            ":"[需要：PGI_misc_hints]\r\n            指定特定于实现的提示\r\n            \r\n","\r\n            Original was GL_SAMPLER_2D_SHADOW_EXT = 0x8B62\r\n            ":"\r\n            原来是 GL_SAMPLER_2D_SHADOW_EXT = 0x8B62\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E\r\n            \r\n","\r\n            Original was GL_INT_SAMPLER_BUFFER_AMD = 0x9002\r\n            ":"\r\n            原来是 GL_INT_SAMPLER_BUFFER_AMD = 0x9002\r\n            \r\n","\r\n            Original was GL_SHADING_LANGUAGE_VERSION = 0x8B8C\r\n            ":"\r\n            原来是 GL_SHADING_LANGUAGE_VERSION = 0x8B8C\r\n            \r\n","\r\n            Used in GL.Sgis.SamplePattern\r\n            ":"\r\n            在 GL.Sgis.SamplePattern 中使用\r\n            \r\n","\r\n            Used in GL.NormalPointer, GL.Ext.BinormalPointer and 5 other functions\r\n            ":"\r\n            用于 GL.NormalPointer、GL.Ext.BinormalPointer 和其他 5 个函数\r\n            \r\n","\r\n            Original was GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C\r\n            ":"\r\n            原来是 GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C\r\n            \r\n","\r\n            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.\r\n            ":"\r\n            指定每种颜色的分量数。必须为 3 或 4。初始值为 4。\r\n            \r\n","\r\n            Original was GL_RGB8_SNORM = 0x8F96\r\n            ":"\r\n            原来是 GL_RGB8_SNORM = 0x8F96\r\n            \r\n","The ASCII character that was typed.":"键入的 ASCII 字符。\r\n"," \r\n            The index of the varying variable whose information to retrieve.\r\n            ":" \r\n            要检索其信息的可变变量的索引。\r\n            \r\n"," \r\n            Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.\r\n            ":" \r\n            指定目标纹理。必须是 Texture3D、ProxyTexture3D、Texture2DArray 或 ProxyTexture2DArray 之一。\r\n            \r\n","\r\n            Constructs a new Vector4 from the specified Vector3 and w component.\r\n            ":"\r\n            从指定的 Vector3 和 w 组件构造一个新的 Vector4。\r\n            \r\n","\r\n            Original was GL_TEXTURE_MIN_LOD = 0x813A\r\n            ":"\r\n            原来是 GL_TEXTURE_MIN_LOD = 0x813A\r\n            \r\n","\r\n            Original was GL_ALPHA_MAX_CLAMP_INGR = 0x8567\r\n            ":"\r\n            原来是 GL_ALPHA_MAX_CLAMP_INGR = 0x8567\r\n            \r\n","[length: bufSize] \r\n            The address of a character array into which will be written the name of the resource.\r\n            ":"[长度：bufSize]\r\n            将写入资源名称的字符数组的地址。\r\n            \r\n","\r\n            Original was GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE\r\n            ":"\r\n            原来是 GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE\r\n            \r\n","\r\n            Original was GL_IMAGE_CUBE_EXT = 0x9050\r\n            ":"\r\n            原来是 GL_IMAGE_CUBE_EXT = 0x9050\r\n            \r\n","\r\n            Original was GL_TEXTURE23_ARB = 0x84D7\r\n            ":"原来是 GL_TEXTURE23_ARB = 0x84D7\r\n            \r\n","\r\n            Original was GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0\r\n            ":"\r\n            原来是 GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0\r\n            \r\n","[length: size,type,stride] \r\n            Specifies a pointer to the first generic vertex attribute in the array. If a non-zero buffer is currently bound to the ArrayBuffer target, pointer specifies an offset of into the array in the data store of that buffer. The initial value is 0.\r\n            ":"[长度：尺寸、类型、步幅]\r\n            指定指向数组中第一个通用顶点属性的指针。如果非零缓冲区当前绑定到 ArrayBuffer 目标，则指针指定该缓冲区数据存储中数组的偏移量。初始值为 0。\r\n            \r\n","[length: pname] \r\n            Specifies the address of a variable into which to write the retrieved information.\r\n            ":"[长度：pname]\r\n            指定要将检索到的信息写入其中的变量的地址。\r\n            \r\n","The extension to load.":"要加载的扩展。\r\n","[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]\r\n            Validate a program pipeline object against current GL state\r\n            ":"[要求：v4.1 或 ARB_separate_shader_objects|VERSION_4_1]\r\n            根据当前 GL 状态验证程序管道对象\r\n            \r\n","\r\n            Gets the raw input from the specified device.\r\n            ":"\r\n            从指定设备获取原始输入。\r\n            \r\n","\r\n            Original was GL_FLOAT_RGBA_MODE_NV = 0x888E\r\n            ":"\r\n            原来是 GL_FLOAT_RGBA_MODE_NV = 0x888E\r\n            \r\n"," \r\n            Specifies the rate at which samples are shaded within each covered pixel.\r\n            ":" \r\n            指定样本在每个覆盖像素内的着色速率。\r\n            \r\n","[requires: ARB_vertex_buffer_object]\r\n            Updates a subset of a buffer object's data store\r\n            ":"[需要：ARB_vertex_buffer_object]\r\n            更新缓冲区对象数据存储的子集\r\n            \r\n"," \r\n            Specifies the number of floats or doubles between the beginning of control point R sub ij and the beginning of control point R sub { i (j+1) }, where  and  are the  and  control point indices, respectively. This allows control points to be embedded in arbitrary data structures. The only constraint is that the values for a particular control point must occupy contiguous memory locations. The initial value of vstride is 0.\r\n            ":" \r\n            指定控制点 R sub ij 开始和控制点 R sub { i (j+1) } 开始之间的浮点数或双精度数，其中和分别是和控制点索引。这允许控制点嵌入任意数据结构中。唯一的限制是特定控制点的值必须占据连续的内存位置。 vstride 的初始值为 0。\r\n            \r\n","[requires: ARB_vertex_program|ARB_vertex_shader]\r\n            Define an array of generic vertex attribute data\r\n            ":"[需要：ARB_vertex_program|ARB_vertex_shader]\r\n            定义一个通用顶点属性数据数组\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Copy a block of pixels from the read framebuffer to the draw framebuffer\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            将像素块从读取帧缓冲区复制到绘制帧缓冲区\r\n            \r\n"," \r\n            The name of the parameter to be retrieved. Must be one of HistogramWidth, HistogramFormat, HistogramRedSize, HistogramGreenSize, HistogramBlueSize, HistogramAlphaSize, HistogramLuminanceSize, or HistogramSink.\r\n            ":" \r\n            要检索的参数的名称。必须是 HistogramWidth、HistogramFormat、HistogramRedSize、HistogramGreenSize、HistogramBlueSize、HistogramAlphaSize、HistogramLuminanceSize 或 HistogramSink 之一。\r\n            \r\n","[requires: v1.0]\r\n            Specify the clear value for the depth buffer\r\n            ":"[要求：v1.0]\r\n            为深度缓冲区指定清除值\r\n            \r\n","\r\n            Original was GL_TESS_GEN_MODE = 0x8E76\r\n            ":"\r\n            原来是 GL_TESS_GEN_MODE = 0x8E76\r\n            \r\n","\r\n            Original was GL_VERSION_ES_CM_1_1 = 1\r\n            ":"\r\n            原来是 GL_VERSION_ES_CM_1_1 = 1\r\n            \r\n","[length: 2] \r\n            Specifies the new values to be used for the specified vertex attribute.\r\n            ":"[长度：2]\r\n            指定要用于指定顶点属性的新值。\r\n            \r\n"," \r\n            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image. If target is TextureRectangle or ProxyTextureRectangle, level must be 0.\r\n            ":" \r\n            指定详细级别编号。级别 0 是基础映像级别。级别 n 是第 n 个 mipmap 缩减图像。如果目标是 TextureRectangle 或 ProxyTextureRectangle，level 必须是 0。\r\n            \r\n","\r\n            Original was GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192\r\n            ":"\r\n            原来是 GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192\r\n            \r\n","A valid Carbon window reference.":"有效的 Carbon 窗口参考。\r\n","\r\n            Original was GL_SHADER_OBJECT_EXT = 0x8B48\r\n            ":"\r\n            原来是 GL_SHADER_OBJECT_EXT = 0x8B48\r\n            \r\n","\r\n            Specifies the depth comparison function. Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. The initial value is GL_LESS.\r\n            ":"\r\n            指定深度比较函数。接受符号常量 GL_NEVER、GL_LESS、GL_EQUAL、GL_LEQUAL、GL_GREATER、GL_NOTEQUAL、GL_GEQUAL 和 GL_ALWAYS。初始值为 GL_LESS。\r\n            \r\n","[requires: v1.0]\r\n            Return texture parameter values\r\n            ":"[要求：v1.0]\r\n            返回纹理参数值\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F\r\n            \r\n"," \r\n            The number of elements in the pixel array referenced by row. (This is the width of the separable filter kernel.)\r\n            ":" \r\n            行引用的像素数组中的元素数。 （这是可分离滤波器内核的宽度。）\r\n            \r\n","\r\n            Original was GL_DYNAMIC_ATI = 0x8761\r\n            ":"\r\n            原来是 GL_DYNAMIC_ATI = 0x8761\r\n            \r\n","[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]\r\n            Release resources consumed by the implementation's shader compiler\r\n            ":"[要求：v4.1 或 ARB_ES2_compatibility|VERSION_4_1]\r\n            释放实现的着色器编译器消耗的资源\r\n            \r\n","\r\n            Original was GL_COMBINER_BIAS_NV = 0x8549\r\n            ":"\r\n            原来是 GL_COMBINER_BIAS_NV = 0x8549\r\n            \r\n"," \r\n            Specifies the first vertex buffer binding point to which a buffer object is to be bound.\r\n            ":" \r\n            指定缓冲区对象要绑定到的第一个顶点缓冲区绑定点。\r\n            \r\n","\r\n            Used in GL.Arb.ReadnPixels, GL.ClearTexImage and 61 other functions\r\n            ":"\r\n            用于 GL.Arb.ReadnPixels、GL.ClearTexImage 和 61 个其他函数\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Set pixel storage modes\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            设置像素存储模式\r\n            \r\n","[requires: EXT_gpu_program_parameters]":"[需要：EXT_gpu_program_parameters]\r\n","\r\n            Original was GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 0x8D6A\r\n            ":"\r\n            原来是 GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 0x8D6A\r\n            \r\n","\r\n            Original was GL_MAX_EVAL_ORDER = 0x0D30\r\n            ":"\r\n            原来是 GL_MAX_EVAL_ORDER = 0x0D30\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Enable and disable writing of frame buffer color components\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            启用和禁用帧缓冲区颜色分量的写入\r\n            \r\n","\r\n            Original was GL_DUAL_LUMINANCE8_SGIS = 0x8115\r\n            ":"\r\n            原来是 GL_DUAL_LUMINANCE8_SGIS = 0x8115\r\n            \r\n"," instance,\r\n            representing the current state of the mouse scroll wheel.\r\n            ":" 实例，\r\n            表示鼠标滚轮的当前状态。\r\n            \r\n","\r\n            Original was GL_MODELVIEW1_EXT = 0x850A\r\n            ":"\r\n            原来是 GL_MODELVIEW1_EXT = 0x850A\r\n            \r\n","\r\n            Original was GL_FLOAT_RGB16_NV = 0x8888\r\n            ":"\r\n            原来是 GL_FLOAT_RGB16_NV = 0x8888\r\n            \r\n","\r\n            Original was GL_CON_2_ATI = 0x8943\r\n            ":"\r\n            原来是 GL_CON_2_ATI = 0x8943\r\n            \r\n","\r\n            Used in GL.PatchParameter\r\n            ":"\r\n            在 GL.PatchParameter 中使用\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD\r\n            \r\n","\r\n            Original was GL_TEXTURE8 = 0x84C8\r\n            ":"\r\n            原来是 GL_TEXTURE8 = 0x84C8\r\n            \r\n","\r\n            Original was GL_ALPHA16_ICC_SGIX = 0x8468\r\n            ":"\r\n            原来是 GL_ALPHA16_ICC_SGIX = 0x8468\r\n            \r\n","\r\n            Original was GL_TEXTURE_INTENSITY_TYPE = 0x8C15\r\n            ":"\r\n            原来是 GL_TEXTURE_INTENSITY_TYPE = 0x8C15\r\n            \r\n","[requires: OES_EGL_image]":"[需要：OES_EGL_image]\r\n","\r\n            Original was GL_RASTERIZER_DISCARD_NV = 0x8C89\r\n            ":"\r\n            原来是 GL_RASTERIZER_DISCARD_NV = 0x8C89\r\n            \r\n"," \r\n            Specifies the material parameter to return. Ambient, Diffuse, Specular, Emission, Shininess, and ColorIndexes are accepted.\r\n            ":" \r\n            指定要返回的材料参数。接受环境光、漫反射、镜面反射、自发光、光泽度和颜色索引。\r\n            \r\n","\r\n            Original was GL_COLOR_EXT = 0x1800\r\n            ":"\r\n            原来是 GL_COLOR_EXT = 0x1800\r\n            \r\n","[length: bufSize]":"[长度：bufSize]\r\n","\r\n            Occurs after the window has closed.\r\n            ":"\r\n            在窗口关闭后发生。\r\n            \r\n","[length: pname]":"[长度：pname]\r\n","\r\n            Original was GL_SUB_ATI = 0x8965\r\n            ":"\r\n            原来是 GL_SUB_ATI = 0x8965\r\n            \r\n","\r\n            Original was GL_INVERTED_SCREEN_W_REND = 0x8491\r\n            ":"\r\n            原来是 GL_INVERTED_SCREEN_W_REND = 0x8491\r\n            \r\n"," instance with\r\n            default values.\r\n            ":" 实例与\r\n            默认值。\r\n            \r\n","[requires: v1.0]\r\n            Specify the alpha test function\r\n            ":"[要求：v1.0]\r\n            指定 alpha 测试函数\r\n            \r\n","\r\n            Used in GL.Amd.VertexAttribParameter\r\n            ":"\r\n            在 GL.Amd.VertexAttribParameter 中使用\r\n            \r\n"," \r\n            Specifies the target type of query object established between glBeginQueryIndexed and the subsequent glEndQueryIndexed. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.\r\n            ":" \r\n            指定在 glBeginQueryIndexed 和后续的 glEndQueryIndexed 之间建立的查询对象的目标类型。符号常量必须是 SamplesPassed、AnySamplesPassed、PrimitivesGenerated、TransformFeedbackPrimitivesWritten 或 TimeElapsed 之一。\r\n            \r\n","\r\n            Indicates that the GameWindow should be a fixed window.\r\n            ":"\r\n            指示 GameWindow 应该是固定窗口。\r\n            \r\n","[requires: v4.2 or ARB_base_instance|VERSION_4_2]\r\n            Draw multiple instances of a range of elements with offset applied to instanced attributes\r\n            ":"[要求：v4.2 或 ARB_base_instance|VERSION_4_2]\r\n            绘制一系列元素的多个实例，并将偏移应用于实例属性\r\n            \r\n","\r\n            Gets the offset of the left trigger button, between 0.0 and 1.0.\r\n            ":"\r\n            获取左触发按钮的偏移量，介于 0.0 和 1.0 之间。\r\n            \r\n"," \r\n            specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.\r\n            ":" \r\n            指定源颜色和目标颜色的组合方式。它必须是 FuncAdd、FuncSubtract 或 FuncReverseSubtract。\r\n            \r\n","\r\n            Original was GL_Texture0 = 0X84c0\r\n            ":"\r\n            原来是 GL_Texture0 = 0X84c0\r\n            \r\n","\r\n            Original was GL_STATIC_ATI = 0x8760\r\n            ":"\r\n            原来是 GL_STATIC_ATI = 0x8760\r\n            \r\n"," \r\n            For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.\r\n            ":" \r\n            对于 glPointParameterf 和 glPointParameteri，指定 pname 将设置为的值。\r\n            \r\n","\r\n            Gets or sets a double representing the target update frequency, in hertz.\r\n            ":"\r\n            获取或设置一个代表目标更新频率的双精度数，以赫兹为单位。\r\n            \r\n"," \r\n            Specifies the index of the uniform variable to be queried.\r\n            ":" \r\n            指定要查询的统一变量的索引。\r\n            \r\n","The right alt key.":"右 alt 键。\r\n","[in] Handle to the window or control whose text is to be changed.":"[在]要更改其文本的窗口或控件的句柄。\r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Assign a binding point to an active uniform block\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            将绑定点分配给活动的统一块\r\n            \r\n","\r\n            Original was GL_OES_read_format = 1\r\n            ":"\r\n            原来是 GL_OES_read_format = 1\r\n            \r\n","\r\n            Original was GL_COMPRESSED_LUMINANCE = 0x84EA\r\n            ":"\r\n            原来是 GL_COMPRESSED_LUMINANCE = 0x84EA\r\n            \r\n","ToolkitOptions":"工具包选项\r\n","[requires: OES_framebuffer_object]\r\n            Return the framebuffer completeness status of a framebuffer object\r\n            ":"[要求：OES_framebuffer_object]\r\n            返回帧缓冲区对象的帧缓冲区完整性状态\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5\r\n            \r\n","\r\n            Original was GL_PERFMON_RESULT_AMD = 0x8BC6\r\n            ":"\r\n            原来是 GL_PERFMON_RESULT_AMD = 0x8BC6\r\n            \r\n","\r\n            Original was GL_VERTEX_STREAM5_ATI = 0x8771\r\n            ":"\r\n            原来是 GL_VERTEX_STREAM5_ATI = 0x8771\r\n            \r\n"," \r\n            Specifies the depth of the texture image.\r\n            ":" \r\n            指定纹理图像的深度。\r\n            \r\n","\r\n            Original was GL_VertexAttribArrayNormalized = 0X886a\r\n            ":"\r\n            原来是 GL_VertexAttribArrayNormalized = 0X886a\r\n            \r\n","The F27 key.":"F27 键。\r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD\r\n            \r\n","\r\n            True if both left is equal to right; false otherwise.\r\n            ":"\r\n            如果左都等于右，则为真；否则为假。\r\n            \r\n","[requires: ARB_draw_buffers_blend]\r\n            Set the RGB blend equation and the alpha blend equation separately\r\n            ":"[需要：ARB_draw_buffers_blend]\r\n            分别设置RGB混合方程和alpha混合方程\r\n            \r\n","\r\n            Original was GL_DARKEN_NV = 0x9297\r\n            ":"\r\n            原来是 GL_DARKEN_NV = 0x9297\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB\r\n            \r\n","\r\n            Marshal a ":"\r\n            元帅a\r\n","\r\n            Original was GL_BLEND_EQUATION = 0x8009\r\n            ":"\r\n            原来是 GL_BLEND_EQUATION = 0x8009\r\n            \r\n","\r\n            Original was GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C\r\n            ":"\r\n            原来是 GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C\r\n            \r\n"," \r\n            Specifies the shader object whose information log is to be queried.\r\n            ":" \r\n            指定要查询其信息日志的着色器对象。\r\n            \r\n","\r\n            Original was GL_CON_24_ATI = 0x8959\r\n            ":"\r\n            原来是 GL_CON_24_ATI = 0x8959\r\n            \r\n","[requires: v4.3 or ARB_internalformat_query2|VERSION_4_3]\r\n            Retrieve information about implementation-dependent support for internal formats\r\n            ":"[要求：v4.3 或 ARB_internalformat_query2|VERSION_4_3]\r\n            检索有关内部格式的依赖于实现的支持的信息\r\n            \r\n"," \r\n            Specifies the type of shader whose precision to query. shaderType must be VertexShader or FragmentShader.\r\n            ":" \r\n            指定要查询精度的着色器类型。 shaderType 必须是 VertexShader 或 FragmentShader。\r\n            \r\n","\r\n            Original was GL_MATRIX_INDEX_ARRAY_POINTER_OES = 0x8849\r\n            ":"\r\n            原来是 GL_MATRIX_INDEX_ARRAY_POINTER_OES = 0x8849\r\n            \r\n"," \r\n            Specifies the angle of rotation, in degrees.\r\n            ":" \r\n            指定旋转角度，以度为单位。\r\n            \r\n","\r\n            Original was GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C\r\n            ":"\r\n            原来是 GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_MEDIUM_KHR = 0x9147\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_MEDIUM_KHR = 0x9147\r\n            \r\n","\r\n            Original was GL_SKIP_DECODE_EXT = 0x8A4A\r\n            ":"\r\n            原来是 GL_SKIP_DECODE_EXT = 0x8A4A\r\n            \r\n","\r\n            Used in GL.Ext.GetInteger\r\n            ":"\r\n            在 GL.Ext.GetInteger 中使用\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44\r\n            \r\n"," \r\n            The type of the data in memory addressed by data.\r\n            ":" \r\n            数据寻址的内存中数据的类型。\r\n            \r\n"," \r\n            Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.\r\n            ":" \r\n            指定像素数据的数据类型。接受以下符号值：UnsignedByte、UnsignedShort565、UnsignedShort4444 和 UnsignedShort5551。\r\n            \r\n","\r\n            Original was GL_LUMINANCE8_ALPHA8_SNORM = 0x9016\r\n            ":"\r\n            原来是 GL_LUMINANCE8_ALPHA8_SNORM = 0x9016\r\n            \r\n","[requires: IBM_multimode_draw_arrays]":"[需要：IBM_multimode_draw_arrays]\r\n","[length: n] \r\n            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.\r\n            ":"[长度：n]\r\n            指向符号常量数组的指针，这些常量指定将写入片段颜色或数据值的缓冲区。\r\n            \r\n"," \r\n            Specifies the name of a program object whose binary representation to retrieve.\r\n            ":" \r\n            指定要检索其二进制表示的程序对象的名称。\r\n            \r\n","\r\n            Original was GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9\r\n            ":"原来是 GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Select flat or smooth shading\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            选择平坦或平滑的阴影\r\n            \r\n","\r\n            Original was GL_PROGRAM_BINARY_LENGTH = 0x8741\r\n            ":"\r\n            原来是 GL_PROGRAM_BINARY_LENGTH = 0x8741\r\n            \r\n","Returns the number of KeySyms per KeyCode.":"返回每个 KeyCode 的 KeySyms 数。\r\n","\r\n            Original was GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147\r\n            ":"\r\n            原来是 GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147\r\n            \r\n","\r\n            Original was GL_MAX_DRAW_BUFFERS = 0x8824\r\n            ":"\r\n            原来是 GL_MAX_DRAW_BUFFERS = 0x8824\r\n            \r\n","\r\n            Used in GL.BlitFramebuffer, GL.BlitNamedFramebuffer and 1 other function\r\n            ":"\r\n            用于 GL.BlitFramebuffer、GL.BlitNamedFramebuffer 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_VOLATILE_APPLE = 0x8A1A\r\n            ":"\r\n            原来是 GL_VOLATILE_APPLE = 0x8A1A\r\n            \r\n","\r\n            Original was GL_SHADER_IMAGE_ATOMIC = 0x82A6\r\n            ":"\r\n            原来是 GL_SHADER_IMAGE_ATOMIC = 0x82A6\r\n            \r\n","\r\n            Original was GL_SCREEN_COORDINATES_REND = 0x8490\r\n            ":"\r\n            原来是 GL_SCREEN_COORDINATES_REND = 0x8490\r\n            \r\n","[length: count] \r\n            Specifies the address of an array of names of existing texture objects.\r\n            ":"[长度：计数]\r\n            指定现有纹理对象名称数组的地址。\r\n            \r\n","\r\n            Original was GL_SRC1_RGB = 0x8581\r\n            ":"\r\n            原来是 GL_SRC1_RGB = 0x8581\r\n            \r\n","\r\n            Original was GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A\r\n            ":"原来是 GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGB_ARB = 0x84ED\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGB_ARB = 0x84ED\r\n            \r\n","Specifies the number of KeyCodes that are to be returned":"指定要返回的 KeyCodes 的数量\r\n","The keypad 6 key.":"键盘 6 键。\r\n","\r\n            Original was GL_BLEND_SRC_RGB_EXT = 0x80C9\r\n            ":"\r\n            原来是 GL_BLEND_SRC_RGB_EXT = 0x80C9\r\n            \r\n","\r\n            Original was GL_CLIP_DISTANCE3 = 0x3003\r\n            ":"\r\n            原来是 GL_CLIP_DISTANCE3 = 0x3003\r\n            \r\n","\r\n            Used in GL.GetDebugMessageLog\r\n            ":"\r\n            在 GL.GetDebugMessageLog 中使用\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7\r\n            \r\n","\r\n            Original was GL_RGB16F = 0x881B\r\n            ":"\r\n            原来是 GL_RGB16F = 0x881B\r\n            \r\n","\r\n            Original was GL_TEXTURE21_ARB = 0x84D5\r\n            ":"\r\n            原来是 GL_TEXTURE21_ARB = 0x84D5\r\n            \r\n","\r\n            Original was GL_QUERY_RESULT_ARB = 0x8866\r\n            ":"\r\n            原来是 GL_QUERY_RESULT_ARB = 0x8866\r\n            \r\n","Single scale factor for x,y and z axes":"x、y 和 z 轴的单一比例因子\r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Start transform feedback operation\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            开始变换反馈操作\r\n            \r\n","\r\n            Set to true to handle text input (where keyboard repeat is desirable), but set to false\r\n            for game input.\r\n            ":"\r\n            设置为 true 以处理文本输入（需要键盘重复），但设置为 false\r\n            用于游戏输入。\r\n            \r\n","\r\n            Original was GL_TEXTURE_3D = 0x806F\r\n            ":"\r\n            原来是 GL_TEXTURE_3D = 0x806F\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1\r\n            \r\n","\r\n            Used in GL.Arb.BlendEquation, GL.BlendEquation and 2 other functions\r\n            ":"\r\n            用于 GL.Arb.BlendEquation、GL.BlendEquation 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5\r\n            \r\n","\r\n            Used in GL.Sgix.DeformationMap3\r\n            ":"\r\n            用于 GL.Sgix.DeformationMap3\r\n            \r\n","\r\n            Original was GL_Linear = 0X2601\r\n            ":"\r\n            原来是 GL_Linear = 0X2601\r\n            \r\n"," \r\n            Specifies the data type of each coordinate in the array. Symbolic constants Short, Int, Float, or Double are accepted. The initial value is Float.\r\n            ":" \r\n            指定数组中每个坐标的数据类型。接受符号常量 Short、Int、Float 或 Double。初始值为浮点数。\r\n            \r\n","\r\n            Original was GL_TEXTURE6_ARB = 0x84C6\r\n            ":"\r\n            原来是 GL_TEXTURE6_ARB = 0x84C6\r\n            \r\n","\r\n            Original was GL_ACTIVE_VARIABLES = 0x9305\r\n            ":"\r\n            原来是 GL_ACTIVE_VARIABLES = 0x9305\r\n            \r\n","\r\n            Gets or sets the external height of this window.\r\n            ":"\r\n            获取或设置此窗口的外部高度。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365\r\n            \r\n","\r\n            Original was GL_ADD_SIGNED_ARB = 0x8574\r\n            ":"\r\n            原来是 GL_ADD_SIGNED_ARB = 0x8574\r\n            \r\n","\r\n            Gets a System.Int32 representing the index of the axis that was moved.\r\n            ":"\r\n            获取表示移动的轴的索引的 System.Int32。\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89\r\n            \r\n","\r\n            Original was GL_MATRIX11_ARB = 0x88CB\r\n            ":"\r\n            原来是 GL_MATRIX11_ARB = 0x88CB\r\n            \r\n","\r\n            Original was GL_VARIANT_EXT = 0x87C1\r\n            ":"\r\n            原来是 GL_VARIANT_EXT = 0x87C1\r\n            \r\n","\r\n             If the window is being created as a result of a call to the CreateWindow\r\n             or CreateWindowEx function, this member contains the value of the lpParam \r\n             parameter specified in the function call.\r\n             ":"\r\n             如果窗口是由于调用 CreateWindow 而创建的\r\n             或 CreateWindowEx 函数，该成员包含 lpParam 的值\r\n             函数调用中指定的参数。\r\n             \r\n","[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]":"[要求：v4.0 或 ARB_transform_feedback3|VERSION_4_0]\r\n"," \r\n            Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.\r\n            ":" \r\n            指定一个掩码，该掩码在测试完成时与参考值和存储的模板值进行 AND 运算。初始值为全 1。\r\n            \r\n"," \r\n            Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.\r\n            ":" \r\n            指定模板测试通过但深度测试失败时的模板操作。 dpfail 接受与 sfail 相同的符号常量。初始值为 Keep。\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_WIDTH_EXT = 0x8018\r\n            ":"\r\n            原来是 GL_CONVOLUTION_WIDTH_EXT = 0x8018\r\n            \r\n","\r\n            Original was GL_READ_FRAMEBUFFER_BINDING_ANGLE = 0x8CAA\r\n            ":"\r\n            原来是 GL_READ_FRAMEBUFFER_BINDING_ANGLE = 0x8CAA\r\n            \r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6\r\n            \r\n","Number of rendering buffers (1 for single buffering, 2+ for double buffering, 0 for don't care).":"渲染缓冲区的数量（1 表示单缓冲，2+ 表示双缓冲，0 表示无关）。\r\n","[requires: EXT_texture_storage]\r\n            Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture\r\n            ":"[需要：EXT_texture_storage]\r\n            同时为二维或一维数组纹理的所有级别指定存储\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER7_ARB = 0x882C\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER7_ARB = 0x882C\r\n            \r\n","\r\n            Original was GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E\r\n            ":"\r\n            原来是 GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E\r\n            \r\n"," \r\n            In glEvalMesh1, specifies whether to compute a one-dimensional mesh of points or lines. Symbolic constants Point and Line are accepted.\r\n            ":" \r\n            在 glEvalMesh1 中，指定是否计算点或线的一维网格。接受符号常量 Point 和 Line。\r\n            \r\n","\r\n            Original was GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD\r\n            ":"\r\n            原来是 GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD\r\n            \r\n","\r\n            Original was GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443\r\n            ":"\r\n            原来是 GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066\r\n            \r\n","[requires: OES_sample_shading]\r\n            Specifies minimum rate at which sample shaing takes place\r\n            ":"[需要：OES_sample_shading]\r\n            指定样本着色发生的最小速率\r\n            \r\n"," \r\n            Specifies the symbolic name of a map. Accepted values are Map1Color4, Map1Index, Map1Normal, Map1TextureCoord1, Map1TextureCoord2, Map1TextureCoord3, Map1TextureCoord4, Map1Vertex3, Map1Vertex4, Map2Color4, Map2Index, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, Map2TextureCoord4, Map2Vertex3, and Map2Vertex4.\r\n            ":" \r\n            指定地图的符号名称。可接受的值为 Map1Color4、Map1Index、Map1Normal、Map1TextureCoord1、Map1TextureCoord2、Map1TextureCoord3、Map1TextureCoord4、Map1Vertex3、Map1Vertex4、Map2Color4、Map2Index、Map2Normal、Map2TextureCoord1、Map2TextureCoord2、Map2TextureCoord3、Map2TextureCoordV4、Map2。\r\n            \r\n","\r\n            Original was GL_TEXTURE_1D_ARRAY = 0x8C18\r\n            ":"\r\n            原来是 GL_TEXTURE_1D_ARRAY = 0x8C18\r\n            \r\n","\r\n            Original was GL_PROGRAM_OBJECT_ARB = 0x8B40\r\n            ":"\r\n            原来是 GL_PROGRAM_OBJECT_ARB = 0x8B40\r\n            \r\n"," has\r\n            a B button.\r\n            ":" 有\r\n            一个 B 按钮。\r\n            \r\n","\r\n            Original was GL_INFO_LOG_LENGTH = 0x8B84\r\n            ":"\r\n            原来是 GL_INFO_LOG_LENGTH = 0x8B84\r\n            \r\n","The right control key (equivalent to ControlRight).":"右控制键（相当于 ControlRight）。\r\n","[requires: EXT_copy_texture]\r\n            Copy a two-dimensional texture subimage\r\n            ":"[需要：EXT_copy_texture]\r\n            复制二维纹理子图像\r\n            \r\n","\r\n            Used in GL.Arb.CompressedTexImage1D, GL.Arb.CompressedTexImage2D and 124 other functions\r\n            ":"\r\n            用于 GL.Arb.CompressedTexImage1D、GL.Arb.CompressedTexImage2D 和 124 个其他函数\r\n            \r\n","\r\n            Original was GL_OP_MOV_EXT = 0x8799\r\n            ":"\r\n            原来是 GL_OP_MOV_EXT = 0x8799\r\n            \r\n","\r\n            Original was GL_IMAGE_PIXEL_FORMAT = 0x82A9\r\n            ":"\r\n            原来是 GL_IMAGE_PIXEL_FORMAT = 0x82A9\r\n            \r\n","[length: n] \r\n            Specifies an array in which the generated vertex array object names are stored.\r\n            ":"[长度：n]\r\n            指定一个数组，其中存储生成的顶点数组对象名称。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645\r\n            \r\n","\r\n            Original was GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2\r\n            ":"\r\n            原来是 GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2\r\n            \r\n","static Delegate LoadDelegate(string name, Type signature)":"static Delegate LoadDelegate（字符串名称，类型签名）\r\n","[requires: v4.3 or KHR_debug|VERSION_4_3|VERSION_4_3]\r\n            Return the address of the specified pointer\r\n            ":"[要求：v4.3 或 KHR_debug|VERSION_4_3|VERSION_4_3]\r\n            返回指定指针的地址\r\n            \r\n","\r\n            Used in GL.GenerateMipmap, GL.Ext.GenerateMipmap\r\n            ":"\r\n            在GL.GenerateMipmap、GL.Ext.GenerateMipmap中使用\r\n            \r\n"," structure describing\r\n            the current state of the device at the specified index.\r\n            If no device is connected at this index, the ":" 结构描述\r\n            指定索引处设备的当前状态。\r\n            如果此索引处未连接任何设备，则\r\n","\r\n            Original was GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E\r\n            ":"\r\n            原来是 GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E\r\n            \r\n","\r\n            Registers the devices that supply the raw input data.\r\n            ":"\r\n            注册提供原始输入数据的设备。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8\r\n            \r\n","\r\n            Defines the interface for a GameWindow.\r\n            ":"\r\n            定义 GameWindow 的接口。\r\n            \r\n","\r\n            Original was GL_QUAD_ALPHA8_SGIS = 0x811F\r\n            ":"\r\n            原来是 GL_QUAD_ALPHA8_SGIS = 0x811F\r\n            \r\n","\r\n            Gets a System.IntPtr that represents the handle of this ContextHandle.\r\n            ":"\r\n            获取表示此 ContextHandle 句柄的 System.IntPtr。\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF\r\n            \r\n","\r\n            Original was GL_MATRIX5 = 0x88C5\r\n            ":"\r\n            原来是 GL_MATRIX5 = 0x88C5\r\n            \r\n","The semicolon key.":"分号键。\r\n","\r\n            Original was GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C\r\n            \r\n","[requires: v1.0]\r\n            Return material parameters\r\n            ":"[要求：v1.0]\r\n            退料参数\r\n            \r\n"," \r\n            Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.\r\n            ":" \r\n            必须是 ColorTable、PostConvolutionColorTable 或 PostColorMatrixColorTable。\r\n            \r\n","\r\n            Original was GL_LUMINANCE4_EXT = 0x803F\r\n            ":"\r\n            原来是 GL_LUMINANCE4_EXT = 0x803F\r\n            \r\n","\r\n            Original was GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878\r\n            ":"\r\n            原来是 GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878\r\n            \r\n","[length: 1]":"[长度：1]\r\n"," \r\n            Specify the target of the operation. target must be one of Texture2D, or TextureCubeMap.\r\n            ":" \r\n            指定操作的目标。 target 必须是 Texture2D 或 TextureCubeMap 之一。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F\r\n            \r\n","\r\n            Original was GL_DRAW_FRAMEBUFFER_APPLE = 0x8CA9\r\n            ":"\r\n            原来是 GL_DRAW_FRAMEBUFFER_APPLE = 0x8CA9\r\n            \r\n","\r\n            LastX/Y indicate relative motion.\r\n            ":"\r\n            LastX/Y 表示相对运动。\r\n            \r\n","\r\n            Original was GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4\r\n            ":"\r\n            原来是 GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4\r\n            \r\n","\r\n            Original was GL_SRGB_WRITE = 0x8298\r\n            ":"\r\n            原来是 GL_SRGB_WRITE = 0x8298\r\n            \r\n","\r\n            Original was GL_TEXTURE_TOO_LARGE_EXT = 0x8065\r\n            ":"\r\n            原来是 GL_TEXTURE_TOO_LARGE_EXT = 0x8065\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 0x93E5\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 0x93E5\r\n            \r\n","\r\n            Original was GL_COMBINER_INPUT_NV = 0x8542\r\n            ":"\r\n            原来是 GL_COMBINER_INPUT_NV = 0x8542\r\n            \r\n","\r\n            Original was GL_RELATIVE_ARC_TO_NV = 0xFF\r\n            ":"\r\n            原来是 GL_RELATIVE_ARC_TO_NV = 0xFF\r\n            \r\n"," \r\n            Specifies the number of textures to bind.\r\n            ":"指定要绑定的纹理数。\r\n            \r\n","\r\n            Original was GL_INDEX_MATERIAL_FACE_EXT = 0x81BA\r\n            ":"\r\n            原来是 GL_INDEX_MATERIAL_FACE_EXT = 0x81BA\r\n            \r\n"," \r\n            Specifies a symbolic constant indicating the behavior to be controlled. LineSmoothHint, PolygonSmoothHint, TextureCompressionHint, and FragmentShaderDerivativeHint are accepted.\r\n            ":" \r\n            指定一个符号常量，指示要控制的行为。接受 LineSmoothHint、PolygonSmoothHint、TextureCompressionHint 和 FragmentShaderDerivativeHint。\r\n            \r\n","\r\n            Marshals a pointer to a null-terminated byte array to the specified ":"\r\n            将指向空终止字节数组的指针编组到指定的\r\n","\r\n            Original was GL_QUERY_BUFFER_BINDING_AMD = 0x9193\r\n            ":"\r\n            原来是 GL_QUERY_BUFFER_BINDING_AMD = 0x9193\r\n            \r\n","\r\n            Original was GL_CON_25_ATI = 0x895A\r\n            ":"\r\n            原来是 GL_CON_25_ATI = 0x895A\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_SIZE = 0x0D33\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_SIZE = 0x0D33\r\n            \r\n","\r\n            Used in GL.CompressedTexSubImage2D, GL.ReadPixels and 2 other functions\r\n            ":"\r\n            用于 GL.CompressedTexSubImage2D、GL.ReadPixels 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6\r\n            \r\n","[requires: EXT_paletted_texture]\r\n            Define a color lookup table\r\n            ":"[需要：EXT_paletted_texture]\r\n            定义颜色查找表\r\n            \r\n","\r\n            Gets an OpenTK.Vector3 with the Y, W, and Z components of this instance.\r\n            ":"\r\n            获取具有此实例的 Y、W 和 Z 组件的 OpenTK.Vector3。\r\n            \r\n","[requires: ARB_vertex_program|ARB_vertex_shader]\r\n            Return a generic vertex attribute parameter\r\n            ":"[需要：ARB_vertex_program|ARB_vertex_shader]\r\n            返回一个通用的顶点属性参数\r\n            \r\n","\r\n            Original was GL_RGBA32I = 0x8D82\r\n            ":"\r\n            原来是 GL_RGBA32I = 0x8D82\r\n            \r\n","A value of 0.0 indicates that RenderFrame events are generated at the maximum possible frequency (i.e. only limited by the hardware's capabilities).":"值 0.0 表示 RenderFrame 事件以最大可能频率生成（即仅受硬件功能限制）。\r\n","[length: n] \r\n            Specifies an array of framebuffer objects to be deleted.\r\n            ":"[长度：n]\r\n            指定要删除的帧缓冲区对象数组。\r\n            \r\n","\r\n            Specify the coordinates for the left and right vertical clipping planes.\r\n            ":"\r\n            指定左右垂直裁剪平面的坐标。\r\n            \r\n","\r\n            Original was GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143\r\n            ":"\r\n            原来是 GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143\r\n            \r\n","\r\n            Original was GL_MAX_TRACK_MATRICES_NV = 0x862F\r\n            ":"\r\n            原来是 GL_MAX_TRACK_MATRICES_NV = 0x862F\r\n            \r\n"," indicating whether the left mouse button is pressed.\r\n            This property is intended for XNA compatibility.\r\n            ":" 指示是否按下鼠标左键。\r\n            此属性旨在实现 XNA 兼容性。\r\n            \r\n","The keypad multiply key.":"键盘乘法键。\r\n","\r\n            Gets the number of hats supported by this ":"\r\n            获取此支持的帽子数量\r\n","\r\n            Specifies the horizontal distance from the origin of the current character cell to the origin of the next character cell.\r\n            ":"\r\n            指定从当前字符单元格的原点到下一个字符单元格的原点的水平距离。\r\n            \r\n","\r\n            Used in GL.Amd.DeleteNames, GL.Amd.GenNames and 1 other function\r\n            ":"\r\n            用于 GL.Amd.DeleteNames、GL.Amd.GenNames 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_MATRIX_INDEX_ARRAY_ARB = 0x8844\r\n            ":"\r\n            原来是 GL_MATRIX_INDEX_ARRAY_ARB = 0x8844\r\n            \r\n","\r\n            Original was GL_WEIGHT_ARRAY_TYPE_OES = 0x86A9\r\n            ":"\r\n            原来是 GL_WEIGHT_ARRAY_TYPE_OES = 0x86A9\r\n            \r\n","\r\n            color map to be associated with window\r\n            ":"\r\n            与窗口关联的颜色映射\r\n            \r\n","\r\n            Used in GL.CopyPixels\r\n            ":"\r\n            在 GL.CopyPixels 中使用\r\n            \r\n","\r\n            Original was GL_TEXCOORD4_BIT_PGI = 0x80000000\r\n            ":"\r\n            原来是 GL_TEXCOORD4_BIT_PGI = 0x80000000\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Determine if a name corresponds to a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            确定名称是否对应于程序对象\r\n            \r\n","\r\n            Original was GL_MVP_MATRIX_EXT = 0x87E3\r\n            ":"\r\n            原来是 GL_MVP_MATRIX_EXT = 0x87E3\r\n            \r\n","\r\n            Original was GL_TEXTURE_SAMPLES_IMG = 0x9136\r\n            ":"\r\n            原来是 GL_TEXTURE_SAMPLES_IMG = 0x9136\r\n            \r\n","\r\n            Original was GL_READ_FRAMEBUFFER_EXT = 0x8CA8\r\n            ":"\r\n            原来是 GL_READ_FRAMEBUFFER_EXT = 0x8CA8\r\n            \r\n","[length: type,stride] \r\n            Specifies a pointer to the first coordinate of the first fog coordinate in the array. The initial value is 0.\r\n            ":"[长度：类型，步幅]\r\n            指定指向数组中第一个雾坐标的第一个坐标的指针。初始值为 0。\r\n            \r\n","\r\n            Left stick button\r\n            ":"\r\n            左摇杆按钮\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5\r\n            \r\n","\r\n            Original was GL_GL_ALL_BARRIER_BITS = 0xFFFFFFFF\r\n            ":"\r\n            原来是 GL_GL_ALL_BARRIER_BITS = 0xFFFFFFFF\r\n            \r\n","\r\n            Used in GL.TexParameter\r\n            ":"\r\n            在 GL.TexParameter 中使用\r\n            \r\n","\r\n            Defines bitwise combianations of GameWindow construction options.\r\n            ":"\r\n            定义 GameWindow 构造选项的按位组合。\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0\r\n            ":"原来是 GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0\r\n            \r\n"," if this instance has a Y button; otherwise, ":" 如果这个实例有一个 Y 按钮；否则，\r\n","\r\n            Original was GL_DEBUG_GROUP_STACK_DEPTH = 0x826D\r\n            ":"\r\n            原来是 GL_DEBUG_GROUP_STACK_DEPTH = 0x826D\r\n            \r\n","[requires: NV_conditional_render]\r\n            Start conditional rendering\r\n            ":"[要求：NV_conditional_render]\r\n            开始条件渲染\r\n            \r\n","\r\n            Original was GL_RenderbufferAlphaSize = 0X8d53\r\n            ":"\r\n            原来是 GL_RenderbufferAlphaSize = 0X8d53\r\n            \r\n","\r\n            Specifies the number of texture names to be generated.\r\n            ":"\r\n            指定要生成的纹理名称的数量。\r\n            \r\n","\r\n            Original was GL_OPERAND2_RGB_ARB = 0x8592\r\n            ":"\r\n            原来是 GL_OPERAND2_RGB_ARB = 0x8592\r\n            \r\n","\r\n            Original was GL_LAYER_NV = 0x8DAA\r\n            ":"\r\n            原来是 GL_LAYER_NV = 0x8DAA\r\n            \r\n","\r\n            Used in GL.Arb.BlendEquation, GL.Arb.BlendEquationSeparate and 5 other functions\r\n            ":"\r\n            用于 GL.Arb.BlendEquation、GL.Arb.BlendEquationSeparate 和其他 5 个函数\r\n            \r\n","[requires: v1.0]\r\n            Set the current color\r\n            ":"[要求：v1.0]\r\n            设置当前颜色\r\n            \r\n","\r\n            The window does not have a border. A window with a hidden border can only be resized programmatically.\r\n            ":"\r\n            窗口没有边框。带有隐藏边框的窗口只能通过编程方式调整大小。\r\n            \r\n","\r\n            Original was GL_PATH_DASH_CAPS_NV = 0x907B\r\n            ":"\r\n            原来是 GL_PATH_DASH_CAPS_NV = 0x907B\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_BINDING_EXT = 0x8CA7\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_BINDING_EXT = 0x8CA7\r\n            \r\n"," \r\n            Specify the dimensions of the pixel rectangle to be written into the frame buffer.\r\n            ":" \r\n            指定要写入帧缓冲区的像素矩形的尺寸。\r\n            \r\n","\r\n            Original was GL_RenderbufferInternalFormat = 0X8d44\r\n            ":"\r\n            原来是 GL_RenderbufferInternalFormat = 0X8d44\r\n            \r\n"," \r\n            Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.\r\n            ":" \r\n            指定纹理中颜色分量的数量。必须是表 1 中给出的基本内部格式之一，表 2 中给出的大小内部格式之一，或下表 3 中给出的压缩内部格式之一。\r\n            \r\n","\r\n            Used in GL.Ext.GetMinmax, GL.Ext.GetMinmaxParameter and 2 other functions\r\n            ":"\r\n            用于 GL.Ext.GetMinmax、GL.Ext.GetMinmaxParameter 和其他 2 个函数\r\n            \r\n"," \r\n            The name of the program containing varying out variable whose binding to query\r\n            ":" \r\n            包含绑定到查询的 varying out 变量的程序的名称\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Set texture environment parameters\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            设置纹理环境参数\r\n            \r\n","\r\n            Original was GL_FLOAT_R_NV = 0x8880\r\n            ":"\r\n            原来是 GL_FLOAT_R_NV = 0x8880\r\n            \r\n","\r\n            Specifies the angle of rotation, in degrees.\r\n            ":"\r\n            指定旋转角度，以度为单位。\r\n            \r\n","\r\n            Original was GL_XOR = 0x1506\r\n            ":"\r\n            原来是 GL_XOR = 0x1506\r\n            \r\n","\r\n            Original was GL_RGBA_FLOAT_MODE_ARB = 0x8820\r\n            ":"\r\n            原来是 GL_RGBA_FLOAT_MODE_ARB = 0x8820\r\n            \r\n","\r\n            Original was GL_FRAGMENT_SHADER_ATI = 0x8920\r\n            ":"\r\n            原来是 GL_FRAGMENT_SHADER_ATI = 0x8920\r\n            \r\n","\r\n            Original was GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145\r\n            ":"\r\n            原来是 GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145\r\n            \r\n","\r\n            Original was GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC\r\n            ":"\r\n            原来是 GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC\r\n            \r\n","\r\n            The width of the window border, in pixels. \r\n            ":"\r\n            窗口边框的宽度，以像素为单位。\r\n            \r\n","\r\n            Original was GL_MAX_RENDERBUFFER_SIZE_OES = 0x84E8\r\n            ":"\r\n            原来是 GL_MAX_RENDERBUFFER_SIZE_OES = 0x84E8\r\n            \r\n","The twentyseventh button of the JoystickDevice.":"JoystickDevice 的第二十七个按钮。\r\n","\r\n            Original was GL_DSDT8_NV = 0x8709\r\n            ":"\r\n            原来是 GL_DSDT8_NV = 0x8709\r\n            \r\n","\r\n            The x-coordinate of the mouse.\r\n            ":"\r\n            鼠标的 x 坐标。\r\n            \r\n","\r\n            Used in GL.Ext.ClearNamedBufferData, GL.Ext.ClearNamedBufferSubData and 58 other functions\r\n            ":"\r\n            用于 GL.Ext.ClearNamedBufferData、GL.Ext.ClearNamedBufferSubData 和 58 个其他函数\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT9_EXT = 0x8CE9\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT9_EXT = 0x8CE9\r\n            \r\n","[requires: NVX_conditional_render]\r\n            Start conditional rendering\r\n            ":"[需要：NVX_conditional_render]\r\n            开始条件渲染\r\n            \r\n","\r\n            Original was GL_PACK_RESAMPLE_SGIX = 0x842C\r\n            ":"\r\n            原来是 GL_PACK_RESAMPLE_SGIX = 0x842C\r\n            \r\n","\r\n            Original was GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E\r\n            ":"\r\n            原来是 GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E\r\n            \r\n","\r\n            Returns the size of a MouseMovePoint in bytes.\r\n            ":"\r\n            以字节为单位返回 MouseMovePoint 的大小。\r\n            \r\n","\r\n            Original was GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F\r\n            \r\n","\r\n            Original was GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D\r\n            ":"\r\n            原来是 GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D\r\n            \r\n","[requires: ARB_vertex_buffer_object]\r\n            Determine if a name corresponds to a buffer object\r\n            ":"[需要：ARB_vertex_buffer_object]\r\n            确定名称是否对应于缓冲区对象\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Controls feedback mode\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            控制反馈模式\r\n            \r\n","[requires: v1.4][deprecated: v3.2]\r\n            Define an array of secondary colors\r\n            ":"[要求：v1.4][弃用：v3.2]\r\n            定义一个二次色数组\r\n            \r\n","\r\n            Original was GL_RESAMPLE_REPLICATE_SGIX = 0x842E\r\n            ":"\r\n            原来是 GL_RESAMPLE_REPLICATE_SGIX = 0x842E\r\n            \r\n","\r\n            Original was GL_INT_10_10_10_2_OES = 0x8DF7\r\n            ":"\r\n            原来是 GL_INT_10_10_10_2_OES = 0x8DF7\r\n            \r\n","\r\n            Specifies a clipping plane. The number of clipping planes depends on the implementation, but at least six clipping planes are supported. They are identified by symbolic names of the form GL_CLIP_PLANE where i ranges from 0 to the value of GL_MAX_CLIP_PLANES - 1.\r\n            ":"\r\n            指定剪裁平面。裁剪平面的数量取决于实现，但至少支持六个裁剪平面。它们由 GL_CLIP_PLANE 形式的符号名称标识，其中 i 的范围从 0 到 GL_MAX_CLIP_PLANES - 1 的值。\r\n            \r\n"," \r\n            Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.\r\n            ":" \r\n            指定如何计算红色、绿色和蓝色混合因子。接受以下符号常量：零、一、SrcColor、OneMinusSrcColor、DstColor、OneMinusDstColor、SrcAlpha、OneMinusSrcAlpha、DstAlpha、OneMinusDstAlpha、ConstantColor、OneMinusConstantColor、ConstantAlpha、OneMinusConstantAlpha 和 SrcAlphaSaturate。初始值为一。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Returns the handles of the shader objects attached to a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回附加到程序对象的着色器对象的句柄\r\n            \r\n","\r\n            A message sent by another thread or application is in the queue.\r\n            ":"\r\n            另一个线程或应用程序发送的消息在队列中。\r\n            \r\n","\r\n            Original was GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2\r\n            ":"\r\n            原来是 GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_STREAMS = 0x8E71\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_STREAMS = 0x8E71\r\n            \r\n","[requires: EXT_paletted_texture]\r\n            Retrieve contents of a color lookup table\r\n            ":"[需要：EXT_paletted_texture]\r\n            检索颜色查找表的内容\r\n            \r\n","\r\n            The DISPLAY_DEVICE structure receives information about the display device specified by the iDevNum parameter of the EnumDisplayDevices function.\r\n            ":"\r\n            DISPLAY_DEVICE 结构接收有关显示设备的信息，该信息由 EnumDisplayDevices 函数的 iDevNum 参数指定。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Push and pop the current matrix stack\r\n            ":"[要求：v1.0 和 1.0]\r\n            压入和弹出当前矩阵栈\r\n            \r\n","\r\n            Original was GL_SAMPLE_SHADING_OES = 0x8C36\r\n            ":"\r\n            原来是 GL_SAMPLE_SHADING_OES = 0x8C36\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT13_NV = 0x8CED\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT13_NV = 0x8CED\r\n            \r\n","\r\n            Original was GL_CLAMP = 0x2900\r\n            ":"\r\n            原来是 GL_CLAMP = 0x2900\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F\r\n            \r\n","\r\n            Original was GL_DEPTH32F_STENCIL8 = 0x8CAD\r\n            ":"\r\n            原来是 GL_DEPTH32F_STENCIL8 = 0x8CAD\r\n            \r\n"," \r\n            Specifies the value that pname is set to.\r\n            ":" \r\n            指定 pname 设置的值。\r\n            \r\n"," if pressed; otherwise, ":" 如果按下；否则，\r\n","\r\n            Original was GL_TEXTURE_PRIORITY_EXT = 0x8066\r\n            ":"\r\n            原来是 GL_TEXTURE_PRIORITY_EXT = 0x8066\r\n            \r\n","\r\n            Specifies the depth value used when the depth buffer is cleared. The initial value is 1.\r\n            ":"\r\n            指定清除深度缓冲区时使用的深度值。初始值为 1。\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT11 = 0x8CEB\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT11 = 0x8CEB\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068\r\n            \r\n"," \r\n            Specifies the single-valued material parameter of the face or faces that is being updated. Must be Shininess.\r\n            ":" \r\n            指定要更新的一个或多个面的单值材料参数。必须是闪亮的。\r\n            \r\n"," \r\n            Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.\r\n            ":" \r\n            指定对象参数。 Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAtomicCounterBuffers, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformBlocks, ActiveUniformBlockMaxNameLength, ActiveUniformMaxLength, ComputeWorkGroupSizeProgramBinaryLength, TransformFeedbackBufferMode, TransformFeedbackVaryings, TransformFeedbackVaryingMaxLength, GeometryVerticesOut, GeometryInputType, and GeometryOutputType.\r\n            \r\n","\r\n            Original was GL_INT_VEC2_ARB = 0x8B53\r\n            ":"\r\n            原来是 GL_INT_VEC2_ARB = 0x8B53\r\n            \r\n","The change in value of the wheel for this event.":"此事件的轮盘值变化。\r\n","[requires: ATI_draw_buffers]\r\n            Specifies a list of color buffers to be drawn into\r\n            ":"[需要：ATI_draw_buffers]\r\n            指定要绘制到的颜色缓冲区列表\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER10_EXT = 0x882F\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER10_EXT = 0x882F\r\n            \r\n","\r\n            Original was GL_HALF_FLOAT_ARB = 0x140B\r\n            ":"\r\n            原来是 GL_HALF_FLOAT_ARB = 0x140B\r\n            \r\n","\r\n            Specifies the value that parameter pname of light source light will be set to.\r\n            ":"\r\n            指定光源 light 的参数 pname 将设置为的值。\r\n            \r\n","\r\n            Original was GL_CMYK_EXT = 0x800C\r\n            ":"\r\n            原来是 GL_CMYK_EXT = 0x800C\r\n            \r\n","[requires: OES_byte_coordinates]\r\n            Specify a vertex\r\n            ":"[要求：OES_byte_coordinates]\r\n            指定顶点\r\n            \r\n","\r\n            Specifies a texel offset in the y direction within the texture array.\r\n            ":"\r\n            指定纹理数组中 y 方向上的纹素偏移。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Generate query object names\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            生成查询对象名称\r\n            \r\n","\r\n            Original was GL_DT_SCALE_NV = 0x8711\r\n            ":"\r\n            原来是 GL_DT_SCALE_NV = 0x8711\r\n            \r\n","\r\n            Original was GL_CONTEXT_PROFILE_MASK = 0x9126\r\n            ":"\r\n            原来是 GL_CONTEXT_PROFILE_MASK = 0x9126\r\n            \r\n","\r\n            If not null, this will contain a list ":"\r\n            如果不为空，这将包含一个列表\r\n","The ContextHandle to compare.":"要比较的 ContextHandle。\r\n","[requires: v1.1][deprecated: v3.2]\r\n            Enable or disable client-side capability\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            启用或禁用客户端功能\r\n            \r\n","\r\n            Original was GL_BUFFER_BINDING = 0x9302\r\n            ":"\r\n            原来是 GL_BUFFER_BINDING = 0x9302\r\n            \r\n","[requires: v1.0]\r\n            Specify fog parameters\r\n            ":"[要求：v1.0]\r\n            指定雾参数\r\n            \r\n","\r\n            Original was GL_MODELVIEW6_ARB = 0x8726\r\n            ":"\r\n            原来是 GL_MODELVIEW6_ARB = 0x8726\r\n            \r\n","\r\n            Original was GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194\r\n            ":"\r\n            原来是 GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194\r\n            \r\n","[length: imageSize]":"[长度：图像大小]\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Bind a named texture to a texturing target\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            将命名纹理绑定到纹理目标\r\n            \r\n","\r\n            Original was GL_IMAGE_2D_RECT_EXT = 0x904F\r\n            ":"\r\n            原来是 GL_IMAGE_2D_RECT_EXT = 0x904F\r\n            \r\n","\r\n            Used in GL.Amd.DebugMessageEnable, GL.Amd.DebugMessageInsert and 1 other function\r\n            ":"\r\n            用于 GL.Amd.DebugMessageEnable、GL.Amd.DebugMessageInsert 和 1 个其他函数\r\n            \r\n","\r\n            The eigth extra mouse button.\r\n            ":"\r\n            第八个额外的鼠标按钮。\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54\r\n            \r\n","\r\n            Defines the signature of a debug callback for \r\n            ":"\r\n            定义调试回调的签名\r\n            \r\n","\r\n            Original was GL_MINMAX_FORMAT = 0x802F\r\n            ":"\r\n            原来是 GL_MINMAX_FORMAT = 0x802F\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_OES = 0x8D40\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_OES = 0x8D40\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Render primitives from array data\r\n            ":"[要求：v1.0 和 1.0]\r\n            从数组数据渲染图元\r\n            \r\n","[requires: APPLE_sync]\r\n            Determine if a name corresponds to a sync object\r\n            ":"[需要：APPLE_sync]\r\n            确定名称是否对应于同步对象\r\n            \r\n","\r\n            Original was GL_TEXTURE_VIEW_MIN_LAYER_EXT = 0x82DD\r\n            ":"\r\n            原来是 GL_TEXTURE_VIEW_MIN_LAYER_EXT = 0x82DD\r\n            \r\n","\r\n            Original was GL_STREAM_RASTERIZATION_AMD = 0x91A0\r\n            ":"\r\n            原来是 GL_STREAM_RASTERIZATION_AMD = 0x91A0\r\n            \r\n","[length: format,type,width,height] \r\n            Specifies a pointer to the pixel data.\r\n            ":"[长度：格式、类型、宽度、高度]\r\n            指定指向像素数据的指针。\r\n            \r\n","\r\n            Original was GL_VIBRANCE_BIAS_NV = 0x8719\r\n            ":"\r\n            原来是 GL_VIBRANCE_BIAS_NV = 0x8719\r\n            \r\n"," \r\n            Specifies the byte offset between consecutive vertices. If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0.\r\n            ":" \r\n            指定连续顶点之间的字节偏移量。如果步幅为 0，则顶点被理解为紧密排列在数组中。初始值为 0。\r\n            \r\n","\r\n            Used in GL.Angle.BlitFramebuffer, GL.BlitFramebuffer and 2 other functions\r\n            ":"\r\n            用于 GL.Angle.BlitFramebuffer、GL.BlitFramebuffer 和其他 2 个函数\r\n            \r\n","\r\n            Matrix addition\r\n            ":"\r\n            矩阵加法\r\n            \r\n","\r\n            Transforms the specified point from client to screen coordinates. \r\n            ":"\r\n            将指定点从客户端坐标转换为屏幕坐标。\r\n            \r\n","\r\n            Original was GL_MATRIX22 = 0x88D6\r\n            ":"\r\n            原来是 GL_MATRIX22 = 0x88D6\r\n            \r\n","\r\n            Original was GL_ONE_MINUS_SRC1_ALPHA = 0x88FB\r\n            ":"\r\n            原来是 GL_ONE_MINUS_SRC1_ALPHA = 0x88FB\r\n            \r\n","Windows 95/98/Me: SetWindowTextW is supported by the Microsoft Layer for Unicode (MSLU). To use this, you must add certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me Systems .":"Windows 95/98/Me：Microsoft Layer for Unicode (MSLU) 支持 SetWindowTextW。要使用它，您必须将某些文件添加到您的应用程序，如 Microsoft Layer for Unicode on Windows 95/98/Me Systems 中所述。\r\n","The number 4 key.":"4 号键。\r\n","\r\n            Original was GL_OES_element_index_uint = 1\r\n            ":"\r\n            原来是 GL_OES_element_index_uint = 1\r\n            \r\n","\r\n            Used in GL.Angle.DrawElementsInstanced, GL.DrawElements and 3 other functions\r\n            ":"\r\n            用于 GL.Angle.DrawElementsInstanced、GL.DrawElements 和其他 3 个函数\r\n            \r\n","\r\n            Defines a unit-length Vector4 that points towards the X-axis.\r\n            ":"\r\n            定义指向 X 轴的单位长度 Vector4。\r\n            \r\n","\r\n            Original was GL_FULL_SUPPORT = 0x82B7\r\n            ":"\r\n            原来是 GL_FULL_SUPPORT = 0x82B7\r\n            \r\n","[length: n] \r\n            Specifies an array of names of program pipeline objects to delete.\r\n            ":"[长度：n]\r\n            指定要删除的程序管道对象的名称数组。\r\n            \r\n","\r\n            Used in GL.GetTransformFeedback\r\n            ":"\r\n            在 GL.GetTransformFeedback 中使用\r\n            \r\n","\r\n            Used in GL.EvalMesh1\r\n            ":"\r\n            在 GL.EvalMesh1 中使用\r\n            \r\n","A new Matrix4d which holds the result of the multiplication":"保存乘法结果的新 Matrix4d\r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Establish data storage, format, dimensions and sample count of a renderbuffer object's image\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            建立渲染缓冲区对象图像的数据存储、格式、尺寸和样本计数\r\n            \r\n","\r\n            Original was GL_EXTENSIONS = 0X1f03\r\n            ":"\r\n            原来是 GL_EXTENSIONS = 0X1f03\r\n            \r\n","[requires: NV_vertex_program]\r\n            Deletes a program object\r\n            ":"[要求：NV_vertex_program]\r\n            删除程序对象\r\n            \r\n","\r\n            Original was GL_RGBA16F_EXT = 0x881A\r\n            ":"原来是 GL_RGBA16F_EXT = 0x881A\r\n            \r\n","MarshalStringArrayToPtr":"MarshalStringArrayToPtr\r\n","\r\n            Original was GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB\r\n            ":"\r\n            原来是 GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB\r\n            \r\n","\r\n            Original was GL_LO_BIAS_NV = 0x8715\r\n            ":"\r\n            原来是 GL_LO_BIAS_NV = 0x8715\r\n            \r\n","[requires: v2.0]\r\n            Replaces the source code in a shader object\r\n            ":"[要求：v2.0]\r\n            替换着色器对象中的源代码\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905\r\n            \r\n","\r\n            Specifies the name of a texture.\r\n            ":"\r\n            指定纹理的名称。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Return material parameters\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            退料参数\r\n            \r\n","[requires: EXT_draw_instanced]\r\n            Draw multiple instances of a range of elements\r\n            ":"[需要：EXT_draw_instanced]\r\n            绘制一系列元素的多个实例\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Returns the information log for a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回着色器对象的信息日志\r\n            \r\n","\r\n            Used in GL.Arb.GetVertexAttribPointer\r\n            ":"\r\n            在 GL.Arb.GetVertexAttribPointer 中使用\r\n            \r\n","\r\n            Used in GL.ProgramParameter\r\n            ":"\r\n            在 GL.ProgramParameter 中使用\r\n            \r\n"," \r\n            If True, pixels will be consumed by the minmax process and no drawing or texture loading will take place. If False, pixels will proceed to the final conversion process after minmax.\r\n            ":" \r\n            如果为 True，像素将被 minmax 过程消耗，并且不会发生绘图或纹理加载。如果为 False，像素将在 minmax 之后进行最终的转换过程。\r\n            \r\n"," The minimum number of KeyCodes returned is never less than 8, and the maximum number of KeyCodes returned is never greater than 255. Not all KeyCodes in this range are required to have corresponding keys.":" 返回的KeyCodes最少不能少于8个，最多不能超过255个。这个范围内的KeyCodes并不是都必须有对应的key。\r\n"," \r\n            Specifies a 2D texture target, or for cube map textures, which face is to be attached.\r\n            ":" \r\n            指定一个 2D 纹理目标，或者对于立方体贴图纹理，要附加哪个面。\r\n            \r\n","\r\n            Original was GL_R32I = 0x8235\r\n            ":"\r\n            原来是 GL_R32I = 0x8235\r\n            \r\n","[requires: EXT_convolution]\r\n            Copy pixels into a two-dimensional convolution filter\r\n            ":"[需要：EXT_convolution]\r\n            将像素复制到二维卷积滤波器中\r\n            \r\n","\r\n            Original was GL_TEXTURE_POST_SPECULAR_HP = 0x8168\r\n            ":"\r\n            原来是 GL_TEXTURE_POST_SPECULAR_HP = 0x8168\r\n            \r\n"," to unmanaged memory.\r\n            The resulting string is encoded in ASCII and must be freed\r\n            with ":" 到非托管内存。\r\n            生成的字符串以 ASCII 编码，必须释放\r\n            和\r\n","\r\n            Original was GL_SAMPLER_2D_ARB = 0x8B5E\r\n            ":"\r\n            原来是 GL_SAMPLER_2D_ARB = 0x8B5E\r\n            \r\n","[requires: v3.2]\r\n            Attach a level of a texture object as a logical buffer to the currently bound framebuffer object\r\n            ":"[要求：v3.2]\r\n            将纹理对象的级别作为逻辑缓冲区附加到当前绑定的帧缓冲区对象\r\n            \r\n","\r\n            Gets a value indicating the status of the specified Key.\r\n            ":"\r\n            获取一个值，该值指示指定 Key 的状态。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Generate renderbuffer object names\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            生成渲染缓冲区对象名称\r\n            \r\n","\r\n            Original was GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30\r\n            ":"\r\n            原来是 GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30\r\n            \r\n","\r\n            Original was GL_DIFFERENCE_NV = 0x929E\r\n            ":"\r\n            原来是 GL_DIFFERENCE_NV = 0x929E\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_BLUE_SIZE = 0x802A\r\n            ":"\r\n            原来是 GL_HISTOGRAM_BLUE_SIZE = 0x802A\r\n            \r\n","\r\n            Original was GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36\r\n            ":"\r\n            原来是 GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36\r\n            \r\n","\r\n            Original was GL_RGBA_INTEGER_EXT = 0x8D99\r\n            ":"\r\n            原来是 GL_RGBA_INTEGER_EXT = 0x8D99\r\n            \r\n","\r\n            Original was GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35\r\n            ":"\r\n            原来是 GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35\r\n            \r\n"," \r\n            Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 80. texture must be one of Texturei, where i ranges from zero to the value of MaxCombinedTextureImageUnits minus one. The initial value is Texture0.\r\n            ":" \r\n            指定激活哪个纹理单元。纹理单元的数量取决于实现，但必须至少为 80。纹理必须是 Texturei 之一，其中 i 的范围从零到 MaxCombinedTextureImageUnits 的值减一。初始值为 Texture0。\r\n            \r\n","[requires: v2.0]\r\n            Returns the source code string from a shader object\r\n            ":"[要求：v2.0]\r\n            从着色器对象返回源代码字符串\r\n            \r\n"," \r\n            Specifies the shader object to be deleted.\r\n            ":" \r\n            指定要删除的着色器对象。\r\n            \r\n","\r\n            Original was GL_PACK_LSB_FIRST = 0x0D01\r\n            ":"\r\n            原来是 GL_PACK_LSB_FIRST = 0x0D01\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE = 0x8451\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE = 0x8451\r\n            \r\n","\r\n            Original was GL_RGB = 0x1907\r\n            ":"\r\n            原来是 GL_RGB = 0x1907\r\n            \r\n","\r\n            Original was GL_SCREEN_NV = 0x9295\r\n            ":"\r\n            原来是 GL_SCREEN_NV = 0x9295\r\n            \r\n","\r\n            Original was GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 0x8B9E\r\n            ":"\r\n            原来是 GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 0x8B9E\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_PERFORMANCE = 0x8250\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_PERFORMANCE = 0x8250\r\n            \r\n","\r\n            Original was GL_HALF_BIAS_NEGATE_NV = 0x853B\r\n            ":"\r\n            原来是 GL_HALF_BIAS_NEGATE_NV = 0x853B\r\n            \r\n"," \r\n            Specifies a token indicating the type of access that will be performed on the image.\r\n            ":" \r\n            指定一个令牌，指示将对图像执行的访问类型。\r\n            \r\n","\r\n            Original was GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F\r\n            ":"\r\n            原来是 GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F\r\n            \r\n","\r\n            Original was GL_SampleCoverageInvert = 0X80ab\r\n            ":"\r\n            原来是 GL_SampleCoverageInvert = 0X80ab\r\n            \r\n","\r\n            Original was GL_OVERLAY_KHR = 0x9296\r\n            ":"\r\n            原来是 GL_OVERLAY_KHR = 0x9296\r\n            \r\n","[requires: v1.1]\r\n            Copy pixels into a 1D texture image\r\n            ":"[要求：v1.1]\r\n            将像素复制到一维纹理图像中\r\n            \r\n","\r\n            The third hat of the Joystick device.\r\n            ":"Joystick 设备的第三个帽子。\r\n            \r\n"," \r\n            Specifies the number of framebuffer object names to generate.\r\n            ":" \r\n            指定要生成的帧缓冲区对象名称的数量。\r\n            \r\n","True if the extension function is supported; otherwise, false.":"如果支持扩展功能则为真；否则，假的。\r\n","\r\n            Original was GL_TEXTURE_INTERNAL_FORMAT = 0x1003\r\n            ":"\r\n            原来是 GL_TEXTURE_INTERNAL_FORMAT = 0x1003\r\n            \r\n","\r\n            Used in GL.Arb.GetImageHandle, GL.Arb.MakeImageHandleResident\r\n            ":"\r\n            用于GL.Arb.GetImageHandle、GL.Arb.MakeImageHandleResident\r\n            \r\n","This function cannot retrieve the text of an edit control in another application.":"此函数无法检索另一个应用程序中编辑控件的文本。\r\n","\r\n            Original was GL_FOG_COORD_ARRAY_STRIDE = 0x8455\r\n            ":"\r\n            原来是 GL_FOG_COORD_ARRAY_STRIDE = 0x8455\r\n            \r\n","\r\n            Original was GL_IMAGE_1D_ARRAY_EXT = 0x9052\r\n            ":"\r\n            原来是 GL_IMAGE_1D_ARRAY_EXT = 0x9052\r\n            \r\n","\r\n            Original was GL_MAX = 0x8008\r\n            ":"\r\n            原来是 GL_MAX = 0x8008\r\n            \r\n","\r\n            Specifies the target to which the texture is bound. Must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.\r\n            ":"\r\n            指定纹理绑定到的目标。必须是 GL_TEXTURE_1D、GL_TEXTURE_2D、GL_TEXTURE_3D 或 GL_TEXTURE_1D_ARRAY、GL_TEXTURE_2D_ARRAY、GL_TEXTURE_RECTANGLE、GL_TEXTURE_CUBE_MAP、GL_TEXTURE_2D_MULTISAMPLE 或 GL_TEXTURE_2D_MULTISAMPLE_ARRAY。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09\r\n            ":"原来是 GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09\r\n            \r\n"," \r\n            Specifies the program object to be queried.\r\n            ":" \r\n            指定要查询的程序对象。\r\n            \r\n"," \r\n            Specifies the index of the texture unit to which the sampler is bound.\r\n            ":" \r\n            指定采样器绑定到的纹理单元的索引。\r\n            \r\n","\r\n            Original was GL_CND0_ATI = 0x896B\r\n            ":"\r\n            原来是 GL_CND0_ATI = 0x896B\r\n            \r\n","\r\n            Original was GL_PROGRAM_INSTRUCTION = 0x88A0\r\n            ":"\r\n            原来是 GL_PROGRAM_INSTRUCTION = 0x88A0\r\n            \r\n"," \r\n            Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.\r\n            ":" \r\n            指定目标缓冲区对象。符号常量必须是 ArrayBuffer 或 ElementArrayBuffer。\r\n            \r\n"," \r\n            The height of the pixel array referenced by data.\r\n            ":" \r\n            数据引用的像素阵列的高度。\r\n            \r\n","\r\n            Original was GL_UTF16_NV = 0x909B\r\n            ":"\r\n            原来是 GL_UTF16_NV = 0x909B\r\n            \r\n","An unmanaged pointer to an array of null-terminated strings":"指向空终止字符串数组的非托管指针\r\n","\r\n            Original was GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002\r\n            ":"\r\n            原来是 GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002\r\n            \r\n","\r\n            Original was GL_BLEND_DST_ALPHA = 0x80CA\r\n            ":"\r\n            原来是 GL_BLEND_DST_ALPHA = 0x80CA\r\n            \r\n","\r\n            Original was GL_MODELVIEW23_ARB = 0x8737\r\n            ":"\r\n            原来是 GL_MODELVIEW23_ARB = 0x8737\r\n            \r\n","\r\n            Used in GL.GetObjectLabel, GL.ObjectLabel and 2 other functions\r\n            ":"\r\n            用于 GL.GetObjectLabel、GL.ObjectLabel 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT2_EXT = 0x8CE2\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT2_EXT = 0x8CE2\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Replace the current matrix with the specified matrix\r\n            ":"[要求：v1.0 和 1.0]\r\n            用指定矩阵替换当前矩阵\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53\r\n            \r\n","\r\n            Original was GL_ROUNDED_RECT8_NV = 0xEE\r\n            ":"\r\n            原来是 GL_ROUNDED_RECT8_NV = 0xEE\r\n            \r\n"," if the specified button is pressed; ":" 如果指定的按钮被按下；\r\n","\r\n            Original was GL_FUNC_ADD = 0x8006\r\n            ":"\r\n            原来是 GL_FUNC_ADD = 0x8006\r\n            \r\n","[requires: EXT_separate_shader_objects]\r\n            Determine if a name corresponds to a program pipeline object\r\n            ":"[需要：EXT_separate_shader_objects]\r\n            判断名称是否对应程序管道对象\r\n            \r\n"," \r\n            Specifies the width of the texture image. The height of the texture image is 1.\r\n            ":" \r\n            指定纹理图像的宽度。纹理图像的高度为 1。\r\n            \r\n","\r\n            Constructs a new AutoGeneratedAttribute instance.\r\n            ":"\r\n            构造一个新的 AutoGeneratedAttribute 实例。\r\n            \r\n","[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]\r\n            Bind stages of a program object to a program pipeline\r\n            ":"[要求：v4.1 或 ARB_separate_shader_objects|VERSION_4_1]\r\n            将程序对象的阶段绑定到程序管道\r\n            \r\n","\r\n            Original was GL_COMBINE_ALPHA = 0x8572\r\n            ":"\r\n            原来是 GL_COMBINE_ALPHA = 0x8572\r\n            \r\n","The OpenTK.Graphics.GraphicsMode of the NativeWindow.":"NativeWindow 的 OpenTK.Graphics.GraphicsMode。\r\n","\r\n            Original was GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C\r\n            \r\n","The equivalent quaternion":"等价四元数\r\n","\r\n            Type of device.\r\n            ":"\r\n            设备类型。\r\n            \r\n","The number 7 key.":"7 号键。\r\n","\r\n            Original was GL_FRAMEBUFFER_EXT = 0x8D40\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_EXT = 0x8D40\r\n            \r\n","A System.String representing this DisplayResolution.":"表示此 DisplayResolution 的 System.String。\r\n","\r\n            Used in GL.BufferData, GL.NamedBufferData\r\n            ":"\r\n            用于GL.BufferData, GL.NamedBufferData\r\n            \r\n","\r\n            Original was GL_CON_18_ATI = 0x8953\r\n            ":"\r\n            原来是 GL_CON_18_ATI = 0x8953\r\n            \r\n","\r\n            Original was GL_MATRIX24_ARB = 0x88D8\r\n            ":"\r\n            原来是 GL_MATRIX24_ARB = 0x88D8\r\n            \r\n","\r\n            Original was GL_STENCIL_BACK_WRITEMASK = 0x8CA5\r\n            ":"\r\n            原来是 GL_STENCIL_BACK_WRITEMASK = 0x8CA5\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_COUNT_EXT = 0x8080\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_COUNT_EXT = 0x8080\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104\r\n            \r\n","\r\n            Original was GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C\r\n            ":"\r\n            原来是 GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C\r\n            \r\n","\r\n            Original was GL_FRAGMENT_SHADER = 0x8B30\r\n            ":"\r\n            原来是 GL_FRAGMENT_SHADER = 0x8B30\r\n            \r\n","\r\n            Original was GL_CONIC_CURVE_TO_NV = 0x1A\r\n            ":"\r\n            原来是 GL_CONIC_CURVE_TO_NV = 0x1A\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_FORMAT_EXT = 0x8017\r\n            ":"\r\n            原来是 GL_CONVOLUTION_FORMAT_EXT = 0x8017\r\n            \r\n","\r\n            Converts this instance to its equivalent string representation.\r\n            ":"\r\n            将此实例转换为其等效的字符串表示形式。\r\n            \r\n","\r\n            Returns driver-dependent information about the specified window.\r\n            ":"\r\n            返回有关指定窗口的依赖于驱动程序的信息。\r\n            \r\n","\r\n            Original was GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3\r\n            ":"\r\n            原来是 GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3\r\n            \r\n","[requires: ARB_sparse_buffer]":"[需要：ARB_sparse_buffer]\r\n","\r\n            Original was GL_ATTENUATION_EXT = 0x834D\r\n            ":"\r\n            原来是 GL_ATTENUATION_EXT = 0x834D\r\n            \r\n","\r\n            Original was GL_IMAGE_MIN_FILTER_HP = 0x815D\r\n            ":"\r\n            原来是 GL_IMAGE_MIN_FILTER_HP = 0x815D\r\n            \r\n","\r\n            Size, in bytes, of the RawInputDeviceInfo structure.\r\n            ":"\r\n            RawInputDeviceInfo 结构的大小（以字节为单位）。\r\n            \r\n"," is a drum kit.\r\n            ":" 是架子鼓。\r\n            \r\n","\r\n            Original was GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8\r\n            ":"\r\n            原来是 GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8\r\n            \r\n","[requires: OES_framebuffer_object]\r\n            Attach a renderbuffer object to a framebuffer object\r\n            ":"[要求：OES_framebuffer_object]\r\n            将渲染缓冲区对象附加到帧缓冲区对象\r\n            \r\n","\r\n            Original was GL_BLUE_BIAS = 0x0D1B\r\n            ":"\r\n            原来是 GL_BLUE_BIAS = 0x0D1B\r\n            \r\n","\r\n            Original was GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404\r\n            \r\n","\r\n            Original was GL_FRACTIONAL_ODD = 0x8E7B\r\n            ":"\r\n            原来是 GL_FRACTIONAL_ODD = 0x8E7B\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Bind a named framebuffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            绑定一个命名的帧缓冲区对象\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517\r\n            \r\n","[requires: NV_copy_image]\r\n            Perform a raw data copy between two images\r\n            ":"[需要：NV_copy_image]\r\n            在两个图像之间执行原始数据复制\r\n            \r\n","\r\n            VSync enabled.\r\n            ":"\r\n            垂直同步启用。\r\n            \r\n","\r\n            Original was GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640\r\n            ":"\r\n            原来是 GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640\r\n            \r\n","[requires: v1.4][deprecated: v3.2]\r\n            Set the current fog coordinates\r\n            ":"[要求：v1.4][弃用：v3.2]\r\n            设置当前雾坐标\r\n            \r\n","\r\n            Gets a value indicating whether the specified ":"\r\n            获取一个值，该值指示是否指定\r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84\r\n            \r\n","\r\n            Original was GL_FLOAT_RGB_NV = 0x8882\r\n            ":"\r\n            原来是 GL_FLOAT_RGB_NV = 0x8882\r\n            \r\n","\r\n            Original was GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40\r\n            ":"\r\n            原来是 GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specifies the value of a generic vertex attribute\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            指定通用顶点属性的值\r\n            \r\n","\r\n            Original was GL_MAX_LIGHTS = 0x0D31\r\n            ":"\r\n            原来是 GL_MAX_LIGHTS = 0x0D31\r\n            \r\n","[requires: ARB_vertex_program|ARB_vertex_shader]\r\n            Enable or disable a generic vertex attribute array\r\n            ":"[需要：ARB_vertex_program|ARB_vertex_shader]\r\n            启用或禁用通用顶点属性数组\r\n            \r\n","\r\n            Provides access to OpenGL ES 1.1 methods.\r\n            ":"\r\n            提供对 OpenGL ES 1.1 方法的访问。\r\n            \r\n","\r\n            Original was GL_StencilBackFunc = 0X8800\r\n            ":"\r\n            原来是 GL_StencilBackFunc = 0X8800\r\n            \r\n","\r\n            Occurs before the window is destroyed. \r\n            ":"\r\n            在窗口被销毁之前发生。\r\n            \r\n","\r\n            Original was GL_SRC_OUT_NV = 0x928C\r\n            ":"\r\n            原来是 GL_SRC_OUT_NV = 0x928C\r\n            \r\n","[length: 3] \r\n            Specifies the new values to be used for the specified vertex attribute.\r\n            ":"[长度：3]\r\n            指定要用于指定顶点属性的新值。\r\n            \r\n","\r\n            Original was GL_PATH_FOG_GEN_MODE_NV = 0x90AC\r\n            ":"\r\n            原来是 GL_PATH_FOG_GEN_MODE_NV = 0x90AC\r\n            \r\n","[length: target,lod]":"[长度：目标，lod]\r\n","[requires: v1.0][deprecated: v3.2]\r\n            Execute a display list\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            执行显示列表\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Create a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            创建着色器对象\r\n            \r\n","\r\n            Original was GL_LUMINANCE_FLOAT32_ATI = 0x8818\r\n            ":"\r\n            原来是 GL_LUMINANCE_FLOAT32_ATI = 0x8818\r\n            \r\n","The window handle for this instance.":"此实例的窗口句柄。\r\n","[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]\r\n            Delete named sampler objects\r\n            ":"[要求：v3.3 或 ARB_sampler_objects|VERSION_3_3]\r\n            删除命名采样器对象\r\n            \r\n","The string array to marshal.":"要封送的字符串数组。\r\n","\r\n            Original was GL_VERSION_ES_CL_1_1 = 1\r\n            ":"\r\n            原来是 GL_VERSION_ES_CL_1_1 = 1\r\n            \r\n","\r\n            Original was GL_SAMPLES_PASSED_ARB = 0x8914\r\n            ":"\r\n            原来是 GL_SAMPLES_PASSED_ARB = 0x8914\r\n            \r\n","\r\n            Original was GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144\r\n            ":"\r\n            原来是 GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify the value of a generic vertex attribute\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            指定通用顶点属性的值\r\n            \r\n"," has\r\n            a right thumbstick with a x-axis.\r\n            ":" 有\r\n            带有 x 轴的右摇杆。\r\n            \r\n","\r\n            Original was GL_COLOR_BUFFER_BIT2_QCOM = 0x00000004\r\n            ":"\r\n            原来是 GL_COLOR_BUFFER_BIT2_QCOM = 0x00000004\r\n            \r\n","\r\n            Original was GL_PRIMITIVES_GENERATED_NV = 0x8C87\r\n            ":"\r\n            原来是 GL_PRIMITIVES_GENERATED_NV = 0x8C87\r\n            \r\n","\r\n            Original was GL_ADD_ATI = 0x8963\r\n            ":"\r\n            原来是 GL_ADD_ATI = 0x8963\r\n            \r\n","\r\n            Used in GL.Ext.BlendEquationSeparate\r\n            ":"\r\n            在 GL.Ext.BlendEquationSeparate 中使用\r\n            \r\n","\r\n            Original was GL_LARGE_CCW_ARC_TO_NV = 0x16\r\n            ":"\r\n            原来是 GL_LARGE_CCW_ARC_TO_NV = 0x16\r\n            \r\n","\r\n            Original was GL_SPRITE_SGIX = 0x8148\r\n            ":"\r\n            原来是 GL_SPRITE_SGIX = 0x8148\r\n            \r\n"," structure describing the state of the gamepad device.":" 描述游戏手柄设备状态的结构。\r\n","\r\n            Original was GL_QUERY_KHR = 0x82E3\r\n            ":"\r\n            原来是 GL_QUERY_KHR = 0x82E3\r\n            \r\n","The eighth axis of the JoystickDevice.":"JoystickDevice 的第八轴。\r\n","The left control key (equivalent to ControlLeft).":"左控制键（相当于 ControlLeft）。\r\n","\r\n            Original was GL_DU8DV8_ATI = 0x877A\r\n            ":"\r\n            原来是 GL_DU8DV8_ATI = 0x877A\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Returns the location of an attribute variable\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回属性变量的位置\r\n            \r\n","\r\n            The height of the window border, in pixels.\r\n            ":"\r\n            窗口边框的高度，以像素为单位。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT16_NV = 0x8FF0\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT16_NV = 0x8FF0\r\n            \r\n","\r\n            The resolution desired. This parameter can GMMP_USE_DISPLAY_POINTS \r\n            or GMMP_USE_HIGH_RESOLUTION_POINTS.\r\n            ":"\r\n            所需的分辨率。这个参数可以GMMP_USE_DISPLAY_POINTS\r\n            或 GMMP_USE_HIGH_RESOLUTION_POINTS。\r\n            \r\n","\r\n            Original was GL_UnsignedByte = 0X1401\r\n            ":"\r\n            原来是 GL_UnsignedByte = 0X1401\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Evaluate enabled one- and two-dimensional maps\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            评估启用的一维和二维地图\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Specify a plane against which all geometry is clipped\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            指定一个平面，所有几何图形都将根据该平面进行剪裁\r\n            \r\n","[length: 1] \r\n            Specifies the new values to be used for the specified vertex attribute.\r\n            ":"[长度：1]\r\n            指定要用于指定顶点属性的新值。\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Deletes a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            删除着色器对象\r\n            \r\n","\r\n            Returns a copy of the Quaternion scaled to unit length.\r\n            ":"\r\n            返回缩放为单位长度的四元数的副本。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Place a marker in the feedback buffer\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            在反馈缓冲区中放置一个标记\r\n            \r\n","\r\n            Original was GL_OPERAND0_ALPHA_ARB = 0x8598\r\n            ":"\r\n            原来是 GL_OPERAND0_ALPHA_ARB = 0x8598\r\n            \r\n","\r\n            Original was GL_RenderbufferDepthSize = 0X8d54\r\n            ":"\r\n            原来是 GL_RenderbufferDepthSize = 0X8d54\r\n            \r\n","\r\n            Original was GL_PACK_ROW_BYTES_APPLE = 0x8A15\r\n            ":"\r\n            原来是 GL_PACK_ROW_BYTES_APPLE = 0x8A15\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B\r\n            \r\n","\r\n            Original was GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4\r\n            ":"\r\n            原来是 GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4\r\n            \r\n","The change in X position produced by this event.":"此事件产生的 X 位置变化。\r\n","\r\n            Gets the absolute vertical offset of the wheel,\r\n            or 0 if no vertical scroll wheel exists.\r\n            ":"\r\n            获取车轮的绝对垂直偏移量，\r\n            如果不存在垂直滚轮，则为 0。\r\n            \r\n","\r\n            Used in GL.CompressedTexImage2D, GL.Oes.CompressedTexImage3D\r\n            ":"\r\n            用于 GL.CompressedTexImage2D, GL.Oes.CompressedTexImage3D\r\n            \r\n","\r\n            Original was GL_PACK_SKIP_ROWS = 0x0D03\r\n            ":"\r\n            原来是 GL_PACK_SKIP_ROWS = 0x0D03\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A\r\n            \r\n","\r\n            Original was GL_ALPHA_ICC_SGIX = 0x8462\r\n            ":"\r\n            原来是 GL_ALPHA_ICC_SGIX = 0x8462\r\n            \r\n","\r\n            Original was GL_OPERAND1_ALPHA = 0x8599\r\n            ":"\r\n            原来是 GL_OPERAND1_ALPHA = 0x8599\r\n            \r\n"," \r\n            Specifies a texel offset in the x direction within the texture array.\r\n            ":" \r\n            指定纹理数组中 x 方向上的纹素偏移。\r\n            \r\n","[requires: ATI_vertex_attrib_array_object]":"[需要：ATI_vertex_attrib_array_object]\r\n","A handle to the game controller instance, or IntPtr.Zero in case of error.":"游戏控制器实例的句柄，或 IntPtr.Zero（如果出现错误）。\r\n"," \r\n            The type of values to be returned in values. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            ":" \r\n            要在值中返回的值的类型。 Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_BORDER_COLOR = 0x8154\r\n            ":"\r\n            原来是 GL_CONVOLUTION_BORDER_COLOR = 0x8154\r\n            \r\n","\r\n            Original was GL_LINK_STATUS = 0x8B82\r\n            ":"\r\n            原来是 GL_LINK_STATUS = 0x8B82\r\n            \r\n","\r\n            Original was GL_MAX_SAMPLES_IMG = 0x9135\r\n            ":"\r\n            原来是 GL_MAX_SAMPLES_IMG = 0x9135\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E\r\n            \r\n","\r\n            Original was GL_BlendEquation = 0X8009\r\n            ":"\r\n            原来是 GL_BlendEquation = 0X8009\r\n            \r\n","\r\n            Original was GL_MAGNITUDE_SCALE_NV = 0x8712\r\n            ":"\r\n            原来是 GL_MAGNITUDE_SCALE_NV = 0x8712\r\n            \r\n","\r\n            Original was GL_Texture19 = 0X84d3\r\n            ":"\r\n            原来是 GL_Texture19 = 0X84d3\r\n            \r\n","[requires: v3.0 or ARB_vertex_array_object|VERSION_3_0]\r\n            Generate vertex array object names\r\n            ":"[要求：v3.0 或 ARB_vertex_array_object|VERSION_3_0]\r\n            生成顶点数组对象名称\r\n            \r\n"," \r\n            The target representing the namespace of the destination name dstName.\r\n            ":" \r\n            表示目标名称 dstName 的命名空间的目标。\r\n            \r\n","\r\n            Original was GL_MAX_SUBROUTINES = 0x8DE7\r\n            ":"\r\n            原来是 GL_MAX_SUBROUTINES = 0x8DE7\r\n            \r\n","\r\n            Original was GL_MATRIX4 = 0x88C4\r\n            ":"\r\n            原来是 GL_MATRIX4 = 0x88C4\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Compute a one- or two-dimensional grid of points or lines\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            计算点或线的一维或二维网格\r\n            \r\n","\r\n            Original was GL_YCRCBA_SGIX = 0x8319\r\n            ":"\r\n            原来是 GL_YCRCBA_SGIX = 0x8319\r\n            \r\n","\r\n            Original was GL_FLOAT_MAT4x3_NV = 0x8B6A\r\n            ":"\r\n            原来是 GL_FLOAT_MAT4x3_NV = 0x8B6A\r\n            \r\n","\r\n            Original was GL_CON_27_ATI = 0x895C\r\n            ":"\r\n            原来是 GL_CON_27_ATI = 0x895C\r\n            \r\n","\r\n            Original was GL_ALPHA16 = 0x803E\r\n            ":"\r\n            原来是 GL_ALPHA16 = 0x803E\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Delete named textures\r\n            ":"[要求：v1.0 和 1.0]\r\n            删除命名纹理\r\n            \r\n","\r\n            Original was GL_ElementArrayBuffer = 0X8893\r\n            ":"\r\n            原来是 GL_ElementArrayBuffer = 0X8893\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Specify fog parameters\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            指定雾参数\r\n            \r\n","\r\n            Original was GL_SURFACE_STATE_NV = 0x86EB\r\n            ":"\r\n            原来是 GL_SURFACE_STATE_NV = 0x86EB\r\n            \r\n","\r\n            Original was GL_TEXTURE_SWIZZLE_RGBA = 0x8E46\r\n            ":"\r\n            原来是 GL_TEXTURE_SWIZZLE_RGBA = 0x8E46\r\n            \r\n","\r\n            Original was GL_TEXTURE_INTENSITY_SIZE = 0x8061\r\n            ":"\r\n            原来是 GL_TEXTURE_INTENSITY_SIZE = 0x8061\r\n            \r\n","[in] Specifies how the window is to be shown. This parameter is ignored the first time an application calls ShowWindow, if the program that launched the application provides a STARTUPINFO structure. Otherwise, the first time ShowWindow is called, the value should be the value obtained by the WinMain function in its nCmdShow parameter. In subsequent calls, this parameter can be one of the ShowWindowEnum values.":"[in] 指定窗口的显示方式。如果启动应用程序的程序提供了 STARTUPINFO 结构，则应用程序第一次调用 ShowWindow 时将忽略此参数。否则，第一次调用ShowWindow时，该值应该是WinMain函数在其nCmdShow参数中得到的值。在后续调用中，此参数可以是 ShowWindowEnum 值之一。\r\n","\r\n            Original was GL_Rgb = 0X1907\r\n            ":"\r\n            原来是 GL_Rgb = 0X1907\r\n            \r\n","\r\n            Original was GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F\r\n            ":"\r\n            原来是 GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F\r\n            \r\n","[requires: ARB_texture_compression]\r\n            Specify a two-dimensional texture subimage in a compressed format\r\n            ":"[需要：ARB_texture_compression]\r\n            以压缩格式指定二维纹理子图像\r\n            \r\n","\r\n            Used in GL.CompressedTexSubImage2D, GL.ReadnPixels and 6 other functions\r\n            ":"\r\n            用于 GL.CompressedTexSubImage2D、GL.ReadnPixels 和其他 6 个函数\r\n            \r\n","[requires: OES_framebuffer_object]\r\n            Retrieve information about attachments of a bound framebuffer object\r\n            ":"[要求：OES_framebuffer_object]\r\n            检索有关绑定帧缓冲区对象附件的信息\r\n            \r\n","\r\n            Original was GL_PROGRAM_BINARY_FORMATS = 0x87FF\r\n            ":"\r\n            原来是 GL_PROGRAM_BINARY_FORMATS = 0x87FF\r\n            \r\n","[requires: v2.0]\r\n            Returns the information log for a program object\r\n            ":"[要求：v2.0]\r\n            返回程序对象的信息日志\r\n            \r\n"," if this instance has a right stick button; otherwise, ":" 如果这个实例有一个右摇杆按钮；否则，\r\n","\r\n            Used in GL.Arb.CreateShaderObject, GL.Arb.GetActiveUniform and 2 other functions\r\n            ":"用于 GL.Arb.CreateShaderObject、GL.Arb.GetActiveUniform 和其他 2 个函数\r\n            \r\n","[requires: NV_bindless_texture]":"[需要：NV_bindless_texture]\r\n","[requires: EXT_direct_state_access]\r\n            Retrieve a named parameter from a framebuffer\r\n            ":"[需要：EXT_direct_state_access]\r\n            从帧缓冲区中检索命名参数\r\n            \r\n"," \r\n            The name of a texture object to invalidate.\r\n            ":" \r\n            要失效的纹理对象的名称。\r\n            \r\n"," \r\n            Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: PackSwapBytes, PackLsbFirst, PackRowLength, PackImageHeight, PackSkipPixels, PackSkipRows, PackSkipImages, and PackAlignment. Six more affect the unpacking of pixel data from memory: UnpackSwapBytes, UnpackLsbFirst, UnpackRowLength, UnpackImageHeight, UnpackSkipPixels, UnpackSkipRows, UnpackSkipImages, and UnpackAlignment.\r\n            ":" \r\n            指定要设置的参数的符号名称。六个值会影响像素数据打包到内存中：PackSwapBytes、PackLsbFirst、PackRowLength、PackImageHeight、PackSkipPixels、PackSkipRows、PackSkipImages 和 PackAlignment。还有六个会影响从内存中解包像素数据：UnpackSwapBytes、UnpackLsbFirst、UnpackRowLength、UnpackImageHeight、UnpackSkipPixels、UnpackSkipRows、UnpackSkipImages 和 UnpackAlignment。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Delete transform feedback objects\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            删除变换反馈对象\r\n            \r\n","[requires: v1.0]\r\n            Set texture parameters\r\n            ":"[要求：v1.0]\r\n            设置纹理参数\r\n            \r\n","\r\n            Original was GL_OneMinusConstantColor = 0X8002\r\n            ":"\r\n            原来是 GL_OneMinusConstantColor = 0X8002\r\n            \r\n","A new Matrix3x2 which holds the result of the subtraction":"保存减法结果的新 Matrix3x2\r\n"," \r\n            Specifies the symbolic name of a texture parameter. DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.\r\n            ":" \r\n            指定纹理参数的符号名称。 DepthStencilTextureMode, TextureBaseLevel, TextureBorderColor, TextureCompareMode, TextureCompareFunc, TextureImmutableFormat, TextureImmutableLevels, TextureLodBias, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureSwizzleRgba, TextureViewMinLayer, TextureViewMinLevel, TextureViewNumLayers, TextureViewNumLevels, TextureWrapS, TextureWrapT, and TextureWrapR被接受。\r\n            \r\n","\r\n            Original was GL_LUMINANCE16_ICC_SGIX = 0x8469\r\n            ":"\r\n            原来是 GL_LUMINANCE16_ICC_SGIX = 0x8469\r\n            \r\n","The zero-based index of the device to poll.":"要轮询的设备的从零开始的索引。\r\n","[requires: v1.0]\r\n            Set the viewport\r\n            ":"[要求：v1.0]\r\n            设置视口\r\n            \r\n","The sleep key.":"睡眠键。\r\n","\r\n            Original was GL_WEIGHT_ARRAY_STRIDE_OES = 0x86AA\r\n            ":"\r\n            原来是 GL_WEIGHT_ARRAY_STRIDE_OES = 0x86AA\r\n            \r\n","[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]\r\n            Delimit the boundaries of a query object\r\n            ":"[需要：EXT_disjoint_timer_query|EXT_occlusion_query_boolean]\r\n            划定查询对象的边界\r\n            \r\n"," \r\n            The number of entries in the attachments array.\r\n            ":" \r\n            附件数组中的条目数。\r\n            \r\n","\r\n            Occurs when the window is disposed.\r\n            ":"\r\n            释放窗口时发生。\r\n            \r\n","\r\n            Original was GL_MINMAX_EXT = 0x802E\r\n            ":"\r\n            原来是 GL_MINMAX_EXT = 0x802E\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_96_BITS = 0x82C5\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_96_BITS = 0x82C5\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_KHR = 0x8074\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_KHR = 0x8074\r\n            \r\n","[requires: NV_primitive_restart]\r\n            Specify the primitive restart index\r\n            ":"[需要：NV_primitive_restart]\r\n            指定原始重启索引\r\n            \r\n","\r\n            Original was GL_CURRENT_MATRIX_NV = 0x8641\r\n            ":"\r\n            原来是 GL_CURRENT_MATRIX_NV = 0x8641\r\n            \r\n","True if the scancode is pressed, false otherwise.":"如果按下扫描码则为真，否则为假。\r\n","\r\n            Original was GL_BUMP_TARGET_ATI = 0x877C\r\n            ":"\r\n            原来是 GL_BUMP_TARGET_ATI = 0x877C\r\n            \r\n","\r\n            Original was GL_VERTEX_PROGRAM_NV = 0x8620\r\n            ":"\r\n            原来是 GL_VERTEX_PROGRAM_NV = 0x8620\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify clear values for the color buffers\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            为颜色缓冲区指定明确的值\r\n            \r\n","[requires: v1.5]\r\n            Determine if a name corresponds to a query object\r\n            ":"[要求：v1.5]\r\n            确定名称是否对应于查询对象\r\n            \r\n","The y component":"y 分量\r\n","\r\n            Original was GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624\r\n            \r\n","\r\n            Start button\r\n            ":"\r\n            开始按钮\r\n            \r\n","[requires: EXT_separate_shader_objects]\r\n            Retrieve properties of a program pipeline object\r\n            ":"[需要：EXT_separate_shader_objects]\r\n            检索程序管道对象的属性\r\n            \r\n","\r\n            Used in GL.CompressedTexImage2D, GL.CopyTexImage2D and 1 other function\r\n            ":"\r\n            用于 GL.CompressedTexImage2D、GL.CopyTexImage2D 和其他 1 个函数\r\n            \r\n","[length: drawcount] \r\n            Points to an array of the number of indices to be rendered.\r\n            ":"[长度：drawcount]\r\n            指向要呈现的索引数的数组。\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Check the completeness status of a framebuffer\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            检查帧缓冲区的完整性状态\r\n            \r\n","\r\n            Specifies the width of rasterized lines. The initial value is 1.\r\n            ":"\r\n            指定光栅化线条的宽度。初始值为 1。\r\n            \r\n","\r\n            Used in GL.Ext.RenderbufferStorageMultisample\r\n            ":"\r\n            在 GL.Ext.RenderbufferStorageMultisample 中使用\r\n            \r\n","\r\n            Original was GL_IMAGE_CLASS_1_X_32 = 0x82BB\r\n            ":"\r\n            原来是 GL_IMAGE_CLASS_1_X_32 = 0x82BB\r\n            \r\n"," \r\n            The length string contained in the character array whose address is given by message.\r\n            ":" \r\n            message 给定地址的字符数组中包含的长度字符串。\r\n            \r\n","\r\n            Original was GL_GEOMETRY_TEXTURE = 0x829E\r\n            ":"\r\n            原来是 GL_GEOMETRY_TEXTURE = 0x829E\r\n            \r\n","\r\n            Original was GL_COVERAGE_SAMPLES_NV = 0x8ED4\r\n            ":"\r\n            原来是 GL_COVERAGE_SAMPLES_NV = 0x8ED4\r\n            \r\n","\r\n            Original was GL_VERTEX_STREAM4_ATI = 0x8770\r\n            ":"\r\n            原来是 GL_VERTEX_STREAM4_ATI = 0x8770\r\n            \r\n","\r\n            Original was GL_CLIP_DISTANCE7 = 0x3007\r\n            ":"\r\n            原来是 GL_CLIP_DISTANCE7 = 0x3007\r\n            \r\n","\r\n            Retains the current size (ignores the cx and cy parameters).\r\n            ":"\r\n            保留当前大小（忽略 cx 和 cy 参数）。\r\n            \r\n"," \r\n            Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.\r\n            ":" \r\n            指定要设置的参数的名称。接受符号常量 PatchVertices、PatchDefaultOuterLevel 和 PatchDefaultInnerLevel。\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147\r\n            \r\n","\r\n            Original was GL_RGBA16F_ARB = 0x881A\r\n            ":"原来是 GL_RGBA16F_ARB = 0x881A\r\n            \r\n","\r\n            Original was GL_LARGE_CW_ARC_TO_NV = 0x18\r\n            ":"\r\n            原来是 GL_LARGE_CW_ARC_TO_NV = 0x18\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000\r\n            \r\n","\r\n            Original was GL_VERTEX_BLEND_ARB = 0x86A7\r\n            ":"\r\n            原来是 GL_VERTEX_BLEND_ARB = 0x86A7\r\n            \r\n","[length: 4] \r\n            Specify new red, green, and blue values for the current color.\r\n            ":"[长度：4]\r\n            为当前颜色指定新的红色、绿色和蓝色值。\r\n            \r\n","The right instance.":"正确的例子。\r\n","\r\n            Original was GL_SELECTION_BUFFER_POINTER = 0x0DF3\r\n            ":"\r\n            原来是 GL_SELECTION_BUFFER_POINTER = 0x0DF3\r\n            \r\n","[requires: v1.0]\r\n            Copy a two-dimensional texture subimage\r\n            ":"[要求：v1.0]\r\n            复制二维纹理子图像\r\n            \r\n","\r\n            Used in GL.GetMaterial, GL.Material and 5 other functions\r\n            ":"\r\n            用于 GL.GetMaterial、GL.Material 和其他 5 个函数\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT32_OES = 0x81A7\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT32_OES = 0x81A7\r\n            \r\n","\r\n            Original was GL_MEDIUM_INT = 0x8DF4\r\n            ":"\r\n            原来是 GL_MEDIUM_INT = 0x8DF4\r\n            \r\n","\r\n            Original was GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532\r\n            ":"\r\n            原来是 GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532\r\n            \r\n","[requires: AMD_debug_output]\r\n            Retrieve messages from the debug message log\r\n            ":"[需要：AMD_debug_output]\r\n            从调试消息日志中检索消息\r\n            \r\n","\r\n            Original was GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362\r\n            ":"\r\n            原来是 GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_POINTER_EXT = 0x808F\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_POINTER_EXT = 0x808F\r\n            \r\n","\r\n            Original was GL_SUBTRACT = 0x84E7\r\n            ":"\r\n            原来是 GL_SUBTRACT = 0x84E7\r\n            \r\n","\r\n            Original was GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184\r\n            ":"\r\n            原来是 GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184\r\n            \r\n","\r\n            Original was GL_BGRA8_EXT = 0x93A1\r\n            ":"\r\n            原来是 GL_BGRA8_EXT = 0x93A1\r\n            \r\n","\r\n            Top-level collection Usage for the device.\r\n            ":"\r\n            设备的顶级集合使用情况。\r\n            \r\n","\r\n            Original was GL_TEXTURE_LO_SIZE_NV = 0x871C\r\n            ":"\r\n            原来是 GL_TEXTURE_LO_SIZE_NV = 0x871C\r\n            \r\n","[requires: EXT_transform_feedback]\r\n            Bind a range within a buffer object to an indexed buffer target\r\n            ":"[需要：EXT_transform_feedback]\r\n            将缓冲区对象中的范围绑定到索引缓冲区目标\r\n            \r\n","[length: format,type,width] \r\n            Pointer to a one-dimensional array of pixel data that is processed to build the convolution filter kernel.\r\n            ":"[长度：格式，类型，宽度]\r\n            指向经过处理以构建卷积滤波器内核的一维像素数据数组的指针。\r\n            \r\n"," \r\n            Specifies the name of a program pipeline object from which to retrieve the info log.\r\n            ":" \r\n            指定从中检索信息日志的程序管道对象的名称。\r\n            \r\n"," \r\n            Specifies the value that parameter pname of light source light will be set to.\r\n            ":" \r\n            指定光源 light 的参数 pname 将设置为的值。\r\n            \r\n","\r\n            Original was GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF\r\n            ":"\r\n            原来是 GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF\r\n            \r\n","\r\n            Constructs a new Vector4 from the given Vector4.\r\n            ":"\r\n            从给定的 Vector4 构造一个新的 Vector4。\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Read a block of pixels from the frame buffer\r\n            ":"[要求：v1.0 和 1.0]\r\n            从帧缓冲区中读取一个像素块\r\n            \r\n","\r\n            Original was GL_MAX_DRAW_BUFFERS_NV = 0x8824\r\n            ":"\r\n            原来是 GL_MAX_DRAW_BUFFERS_NV = 0x8824\r\n            \r\n"," \r\n            Must be one of ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.\r\n            ":"必须是 ColorTable、PostConvolutionColorTable 或 PostColorMatrixColorTable 之一。\r\n            \r\n","[length: width,height]":"[长宽高]\r\n","\r\n            Original was GL_PACK_ROW_LENGTH = 0x0D02\r\n            ":"\r\n            原来是 GL_PACK_ROW_LENGTH = 0x0D02\r\n            \r\n","\r\n            Original was GL_LUMINANCE12_ALPHA4 = 0x8046\r\n            ":"\r\n            原来是 GL_LUMINANCE12_ALPHA4 = 0x8046\r\n            \r\n","\r\n            Original was GL_TEXTURE_MIN_FILTER = 0x2801\r\n            ":"\r\n            原来是 GL_TEXTURE_MIN_FILTER = 0x2801\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A\r\n            \r\n","\r\n            Original was GL_PREVIOUS_EXT = 0x8578\r\n            ":"\r\n            原来是 GL_PREVIOUS_EXT = 0x8578\r\n            \r\n","\r\n            Original was GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D\r\n            ":"\r\n            原来是 GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D\r\n            \r\n","\r\n            Checks whether the specified type parameter is a blittable value type.\r\n            ":"\r\n            检查指定的类型参数是否为 blittable 值类型。\r\n            \r\n","\r\n            Original was GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC\r\n            ":"\r\n            原来是 GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC\r\n            \r\n"," \r\n            Specifies the symbolic name of a texture environment parameter. Accepted values are TextureEnvMode, TextureEnvColor, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.\r\n            ":" \r\n            指定纹理环境参数的符号名称。可接受的值为 TextureEnvMode、TextureEnvColor、TextureLodBias、CombineRgb、CombineAlpha、Src0Rgb、Src1Rgb、Src2Rgb、Src0Alpha、Src1Alpha、Src2Alpha、Operand0Rgb、Operand1Rgb、Operand2Rgb、Operand0Alpha、Operand1Alpha、Operand2Alpha、RgbScale、AlphaScale 或 CoordReplace。\r\n            \r\n","[length: maxCount]":"[长度：maxCount]\r\n","\r\n            Original was GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42\r\n            ":"\r\n            原来是 GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42\r\n            \r\n","The y component of the Vector4.":"Vector4 的 y 分量。\r\n","\r\n            Original was GL_RECT_NV = 0xF6\r\n            ":"\r\n            原来是 GL_RECT_NV = 0xF6\r\n            \r\n","\r\n            Original was GL_OPERAND1_ALPHA_ARB = 0x8599\r\n            ":"\r\n            原来是 GL_OPERAND1_ALPHA_ARB = 0x8599\r\n            \r\n"," \r\n            Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.\r\n            ":" \r\n            指定刷新操作的目标。目标必须是 ArrayBuffer、CopyReadBuffer、CopyWriteBuffer、DispatchIndirectBuffer、DrawIndirectBuffer、ElementArrayBuffer、PixelPackBuffer、PixelUnpackBuffer、QueryBuffer、ShaderStorageBuffer、TextureBuffer、TransformFeedbackBuffer 或 UniformBuffer。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625\r\n            \r\n","[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]\r\n            Set sampler parameters\r\n            ":"[要求：v3.3 或 ARB_sampler_objects|VERSION_3_3]\r\n            设置采样器参数\r\n            \r\n","\r\n            Original was GL_SIGNED_LUMINANCE_NV = 0x8701\r\n            ":"\r\n            原来是 GL_SIGNED_LUMINANCE_NV = 0x8701\r\n            \r\n"," \r\n            Specifies the program object from which to detach the shader object.\r\n            ":" \r\n            指定要从中分离着色器对象的程序对象。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Copy pixels in the frame buffer\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            复制帧缓冲区中的像素\r\n            \r\n","\r\n            Original was GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C\r\n            ":"\r\n            原来是 GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C\r\n            \r\n","\r\n            Original was GL_LOCATION = 0x930E\r\n            ":"\r\n            原来是 GL_LOCATION = 0x930E\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER4_EXT = 0x8829\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER4_EXT = 0x8829\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT9_NV = 0x8CE9\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT9_NV = 0x8CE9\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER5_NV = 0x882A\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER5_NV = 0x882A\r\n            \r\n","\r\n            Original was GL_TEXTURE_WRAP_T = 0x2803\r\n            ":"\r\n            原来是 GL_TEXTURE_WRAP_T = 0x2803\r\n            \r\n","If you override this method, place a call to base.Exit(), to ensure proper OpenTK shutdown.":"如果您覆盖此方法，请调用 base.Exit()，以确保正确关闭 OpenTK。\r\n","\r\n            Original was GL_SYNC_FLAGS = 0x9115\r\n            ":"\r\n            原来是 GL_SYNC_FLAGS = 0x9115\r\n            \r\n","\r\n            Sets the cursor shape.\r\n            ":"\r\n            设置光标形状。\r\n            \r\n","[requires: AMD_draw_buffers_blend]":"[需要：AMD_draw_buffers_blend]\r\n","[requires: IBM_static_data]":"[需要：IBM_static_data]\r\n","\r\n            Used in GL.Ati.GetTexBumpParameter, GL.Ati.TexBumpParameter\r\n            ":"\r\n            用于GL.Ati.GetTexBumpParameter，GL.Ati.TexBumpParameter\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA16F_ARB = 0x881F\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA16F_ARB = 0x881F\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the X, Z, and Y components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 X、Z 和 Y 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ARB = 0x84EE\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ARB = 0x84EE\r\n            \r\n","\r\n            Original was GL_CON_20_ATI = 0x8955\r\n            ":"\r\n            原来是 GL_CON_20_ATI = 0x8955\r\n            \r\n","[requires: v4.3 or ARB_texture_buffer_range|VERSION_4_3]\r\n            Bind a range of a buffer's data store to a buffer texture\r\n            ":"[要求：v4.3 或 ARB_texture_buffer_range|VERSION_4_3]\r\n            将缓冲区数据存储的范围绑定到缓冲区纹理\r\n            \r\n","\r\n            Original was GL_FLOAT_MAT4_ARB = 0x8B5C\r\n            ":"\r\n            原来是 GL_FLOAT_MAT4_ARB = 0x8B5C\r\n            \r\n","[requires: NV_vertex_program]\r\n            Return a generic vertex attribute parameter\r\n            ":"[要求：NV_vertex_program]\r\n            返回一个通用的顶点属性参数\r\n            \r\n","[length: primcount] \r\n            Points to an array of the elements counts.\r\n            ":"[长度：primcount]\r\n            指向元素计数的数组。\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify mapping of depth values from normalized device coordinates to window coordinates\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            指定深度值从规范化设备坐标到窗口坐标的映射\r\n            \r\n","[requires: EXT_direct_state_access]":"[需要：EXT_direct_state_access]\r\n","\r\n            Original was GL_SCALAR_EXT = 0x87BE\r\n            ":"\r\n            原来是 GL_SCALAR_EXT = 0x87BE\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659\r\n            \r\n","The keypad 5 key.":"键盘 5 键。\r\n","\r\n            If set, this removes the top level collection from the inclusion list.\r\n            This tells the operating system to stop reading from a device which matches the top level collection.\r\n            ":"\r\n            如果设置，这将从包含列表中删除顶级集合。\r\n            这告诉操作系统停止从与顶级集合匹配的设备读取。\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0\r\n            \r\n","\r\n            Original was GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128\r\n            ":"\r\n            原来是 GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT12_EXT = 0x8CEC\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT12_EXT = 0x8CEC\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4\r\n            \r\n","A new Matrix2x4 which holds the result of the multiplication":"保存乘法结果的新 Matrix2x4\r\n","\r\n            Original was GL_DRAW_BUFFER4_ARB = 0x8829\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER4_ARB = 0x8829\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_RED_BIAS = 0x8020\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_RED_BIAS = 0x8020\r\n            \r\n"," \r\n            Data type of components in the output images. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            ":" \r\n            输出图像中组件的数据类型。 Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            \r\n","[length: numSurface]":"[长度：numSurface]\r\n","\r\n            Original was GL_SAMPLE_COVERAGE = 0x80A0\r\n            ":"\r\n            原来是 GL_SAMPLE_COVERAGE = 0x80A0\r\n            \r\n","[requires: NV_depth_buffer_float]\r\n            Specify the clear value for the depth buffer\r\n            ":"[要求：NV_depth_buffer_float]\r\n            为深度缓冲区指定清除值\r\n            \r\n","\r\n            Enters the game loop of the GameWindow updating and rendering at the specified frequency.\r\n            ":"\r\n            进入以指定频率更新和渲染GameWindow的游戏循环。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518\r\n            \r\n"," \r\n            Identifies the mode used to capture the varying variables when transform feedback is active. bufferMode must be InterleavedAttribs or SeparateAttribs.\r\n            ":"标识在转换反馈处于活动状态时用于捕获变化变量的模式。 bufferMode 必须是 InterleavedAttribs 或 SeparateAttribs。\r\n            \r\n","\r\n            Original was GL_VARIANT_VALUE_EXT = 0x87E4\r\n            ":"\r\n            原来是 GL_VARIANT_VALUE_EXT = 0x87E4\r\n            \r\n","\r\n            Original was GL_MAX_IMAGE_UNITS_EXT = 0x8F38\r\n            ":"\r\n            原来是 GL_MAX_IMAGE_UNITS_EXT = 0x8F38\r\n            \r\n","\r\n            Original was GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A\r\n            ":"\r\n            原来是 GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A\r\n            \r\n","\r\n            Original was GL_BINNING_CONTROL_HINT_QCOM = 0x8FB0\r\n            ":"\r\n            原来是 GL_BINNING_CONTROL_HINT_QCOM = 0x8FB0\r\n            \r\n","[requires: EXT_vertex_array]\r\n            Define an array of vertex data\r\n            ":"[需要：EXT_vertex_array]\r\n            定义一个顶点数据数组\r\n            \r\n","Matrix result.":"矩阵结果。\r\n","\r\n            Original was GL_READ_ONLY = 0x88B8\r\n            ":"\r\n            原来是 GL_READ_ONLY = 0x88B8\r\n            \r\n","\r\n            Original was GL_FuncSubtract = 0X800a\r\n            ":"\r\n            原来是 GL_FuncSubtract = 0X800a\r\n            \r\n","\r\n            Original was GL_DEPTH_BUFFER_BIT2_QCOM = 0x00000400\r\n            ":"原来是 GL_DEPTH_BUFFER_BIT2_QCOM = 0x00000400\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Set pixel storage modes\r\n            ":"[要求：v1.0 和 1.0]\r\n            设置像素存储模式\r\n            \r\n","[requires: ARB_texture_buffer_object]\r\n            Attach the storage for a buffer object to the active buffer texture\r\n            ":"[需要：ARB_texture_buffer_object]\r\n            将缓冲区对象的存储附加到活动缓冲区纹理\r\n            \r\n","\r\n            MakeCurrent the custom surface created with CreateSurface.\r\n            ":"\r\n            MakeCurrent 使用 CreateSurface 创建的自定义表面。\r\n            \r\n","\r\n            The last hat of the Joystick device.\r\n            ":"\r\n            Joystick 设备的最后一顶帽子。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER8_ATI = 0x882D\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER8_ATI = 0x882D\r\n            \r\n","The number 0 key.":"数字 0 键。\r\n","\r\n            Used in GL.BindTexture, GL.CompressedTexImage2D and 12 other functions\r\n            ":"\r\n            用于 GL.BindTexture、GL.CompressedTexImage2D 和其他 12 个函数\r\n            \r\n","\r\n            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.\r\n            ":"\r\n            指定指向数组中第一个纹理坐标集的第一个坐标的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_TEXTURE1_ARB = 0x84C1\r\n            ":"\r\n            原来是 GL_TEXTURE1_ARB = 0x84C1\r\n            \r\n"," \r\n            The severity of debug messages to enable or disable.\r\n            ":" \r\n            要启用或禁用的调试消息的严重性。\r\n            \r\n","[requires: OES_vertex_array_object]\r\n            Generate vertex array object names\r\n            ":"[要求：OES_vertex_array_object]\r\n            生成顶点数组对象名称\r\n            \r\n","\r\n            Original was GL_COMPILE = 0x1300\r\n            ":"\r\n            原来是 GL_COMPILE = 0x1300\r\n            \r\n"," \r\n            A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.\r\n            ":" \r\n            控制命令刷新行为的位域。标志可以是 SyncFlushCommandsBit。\r\n            \r\n","\r\n            Original was GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 0x9309\r\n            ":"\r\n            原来是 GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 0x9309\r\n            \r\n","\r\n            A OpenTK.Graphics.OpenGL.GL.PointSpriteCoordOriginParameter token,\r\n            denoting the origin of the Point Sprite.\r\n            ":"\r\n            一个 OpenTK.Graphics.OpenGL.GL.PointSpriteCoordOriginParameter 标记，\r\n            表示 Point Sprite 的原点。\r\n            \r\n","[requires: APPLE_vertex_array_object]\r\n            Bind a vertex array object\r\n            ":"[需要：APPLE_vertex_array_object]\r\n            绑定一个顶点数组对象\r\n            \r\n","[requires: AMD_debug_output]\r\n            Inject an application-supplied message into the debug message queue\r\n            ":"[需要：AMD_debug_output]\r\n            将应用程序提供的消息注入调试消息队列\r\n            \r\n","\r\n            Original was GL_INT64_VEC4_NV = 0x8FEB\r\n            ":"\r\n            原来是 GL_INT64_VEC4_NV = 0x8FEB\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 0x8CD1\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 0x8CD1\r\n            \r\n"," \r\n            Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of Texture, where i ranges from 0 to the value of MaxTextureCoords - 1, which is an implementation-dependent value.  The initial value is Texture0.\r\n            ":" \r\n            指定激活哪个纹理单元。纹理单元的数量取决于实现，但必须至少为两个。 texture 必须是 Texture 之一，其中 i 的范围从 0 到 MaxTextureCoords - 1 的值，这是一个依赖于实现的值。初始值为 Texture0。\r\n            \r\n","\r\n            Gets or sets the vertical location of this window on the desktop.\r\n            ":"\r\n            获取或设置此窗口在桌面上的垂直位置。\r\n            \r\n","[length: bufSize] \r\n            The address of a string that will receive the object label.\r\n            ":"[长度：bufSize]\r\n            将接收对象标签的字符串的地址。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Links a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            链接程序对象\r\n            \r\n","\r\n            Original was GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3\r\n            ":"\r\n            原来是 GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3\r\n            \r\n","\r\n            Build a rotation matrix from the specified axis/angle rotation.\r\n            ":"\r\n            从指定的轴/角度旋转构建旋转矩阵。\r\n            \r\n","\r\n            Original was GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5\r\n            ":"\r\n            原来是 GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5\r\n            \r\n"," \r\n            The source of the debug message.\r\n            ":" \r\n            调试消息的来源。\r\n            \r\n","\r\n            Original was GL_NOR = 0x1508\r\n            ":"\r\n            原来是 GL_NOR = 0x1508\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_ERROR_KHR = 0x824C\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_ERROR_KHR = 0x824C\r\n            \r\n","\r\n            Original was GL_LUMINANCE6_ALPHA2 = 0x8044\r\n            ":"\r\n            原来是 GL_LUMINANCE6_ALPHA2 = 0x8044\r\n            \r\n","\r\n            Original was GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB\r\n            ":"\r\n            原来是 GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB\r\n            \r\n","\r\n            Original was GL_POINT_SIZE_MAX_EXT = 0x8127\r\n            ":"\r\n            原来是 GL_POINT_SIZE_MAX_EXT = 0x8127\r\n            \r\n","[length: length] \r\n            Specifies the address of an array containing the binary to be loaded into program.\r\n            ":"[长度：长度]\r\n            指定包含要加载到程序中的二进制文件的数组的地址。\r\n            \r\n"," indicating whether\r\n            this key event is a repeat.\r\n            ":" 表明是否\r\n            这个关键事件是重复的。\r\n            \r\n","A matrix to compare with this matrix.":"要与此矩阵进行比较的矩阵。\r\n"," \r\n            The offset within the buffer's data store of the start of the range to be invalidated.\r\n            ":"要失效的范围开始的缓冲区数据存储中的偏移量。\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D\r\n            \r\n"," \r\n            Specifies the symbolic name of a texture parameter. TextureBaseLevel, TextureCompareFunc, TextureCompareMode, TextureImmutableFormat, TextureMagFilter, TextureMaxLevel, TextureMaxLod, TextureMinFilter, TextureMinLod, TextureSwizzleR, TextureSwizzleG, TextureSwizzleB, TextureSwizzleA, TextureWrapS, TextureWrapT, and TextureWrapR are accepted.\r\n            ":" \r\n            指定纹理参数的符号名称。 TextureBaseLevel、TextureCompareFunc、TextureCompareMode、TextureImmutableFormat、TextureMagFilter、TextureMaxLevel、TextureMaxLod、TextureMinFilter、TextureMinLod、TextureSwizzleR、TextureSwizzleG、TextureSwizzleB、TextureSwizzleA、TextureWrapS、TextureWrapT 和 TextureWrapR 被接受。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT15 = 0x8CEF\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT15 = 0x8CEF\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9\r\n            \r\n","\r\n            Original was GL_COUNT_UP_NV = 0x9088\r\n            ":"\r\n            原来是 GL_COUNT_UP_NV = 0x9088\r\n            \r\n","\r\n            Original was GL_MAX_3D_TEXTURE_SIZE_OES = 0x8073\r\n            ":"\r\n            原来是 GL_MAX_3D_TEXTURE_SIZE_OES = 0x8073\r\n            \r\n","\r\n            Original was GL_LIGHT6 = 0x4006\r\n            ":"\r\n            原来是 GL_LIGHT6 = 0x4006\r\n            \r\n","\r\n            Original was GL_FLOAT_MAT2x4_NV = 0x8B66\r\n            ":"\r\n            原来是 GL_FLOAT_MAT2x4_NV = 0x8B66\r\n            \r\n","The GraphicsMode for the GraphicsContext.":"GraphicsContext 的 GraphicsMode。\r\n","\r\n            Original was GL_PRESENT_TIME_NV = 0x8E2A\r\n            ":"\r\n            原来是 GL_PRESENT_TIME_NV = 0x8E2A\r\n            \r\n","\r\n            Occurs whenever the window is resized.\r\n            ":"\r\n            每当调整窗口大小时发生。\r\n            \r\n","\r\n            Used in GL.Amd.GetPerfMonitorCounterData, GL.Amd.GetPerfMonitorCounterInfo and 213 other functions\r\n            ":"\r\n            用于 GL.Amd.GetPerfMonitorCounterData、GL.Amd.GetPerfMonitorCounterInfo 和 213 个其他函数\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Create a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            创建程序对象\r\n            \r\n"," \r\n            Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.\r\n            ":" \r\n            指定索引中值的类型。必须是 UnsignedByte 或 UnsignedShort。\r\n            \r\n","[requires: SGI_color_table]\r\n            Get color lookup table parameters\r\n            ":"[要求：SGI_color_table]\r\n            获取颜色查找表参数\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Set texture parameters\r\n            ":"[要求：v1.0 和 1.0]\r\n            设置纹理参数\r\n            \r\n","\r\n            If successful, the function returns a non-negative number that is\r\n            the number of RawInputDevice structures written to the buffer. \r\n            ":"\r\n            如果成功，该函数返回一个非负数，即\r\n            写入缓冲区的 RawInputDevice 结构的数量。\r\n            \r\n","[requires: EXT_vertex_array]\r\n            Define an array of normals\r\n            ":"[需要：EXT_vertex_array]\r\n            定义法线数组\r\n            \r\n","[requires: v1.0]\r\n            Replace the current matrix with the identity matrix\r\n            ":"[要求：v1.0]\r\n            用单位矩阵替换当前矩阵\r\n            \r\n","\r\n            Original was GL_SPRITE_MODE_SGIX = 0x8149\r\n            ":"\r\n            原来是 GL_SPRITE_MODE_SGIX = 0x8149\r\n            \r\n","[length: pname] \r\n            Specifies a single-valued texture generation parameter, one of ObjectLinear, EyeLinear, SphereMap, NormalMap, or ReflectionMap.\r\n            ":"[长度：pname]\r\n            指定单值纹理生成参数，ObjectLinear、EyeLinear、SphereMap、NormalMap 或 ReflectionMap 之一。\r\n            \r\n","[requires: v1.4]\r\n            Specify point parameters\r\n            ":"[要求：v1.4]\r\n            指定点参数\r\n            \r\n","\r\n            Original was GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13\r\n            ":"\r\n            原来是 GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13\r\n            \r\n","[requires: v1.1][deprecated: v3.2]\r\n            Simultaneously specify and enable several interleaved arrays\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            同时指定并启用多个交错数组\r\n            \r\n","\r\n            Original was GL_HILO16_NV = 0x86F8\r\n            ":"\r\n            原来是 GL_HILO16_NV = 0x86F8\r\n            \r\n","\r\n            Original was GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170\r\n            ":"\r\n            原来是 GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170\r\n            \r\n","\r\n            Original was GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37\r\n            ":"\r\n            原来是 GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37\r\n            \r\n","\r\n            Original was GL_SMALL_CCW_ARC_TO_NV = 0x12\r\n            ":"\r\n            原来是 GL_SMALL_CCW_ARC_TO_NV = 0x12\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_10_10_10_2 = 0x8036\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_10_10_10_2 = 0x8036\r\n            \r\n"," \r\n            Specifies a single-valued point parameter. PointFadeThresholdSize, and PointSpriteCoordOrigin are accepted.\r\n            ":" \r\n            指定单值点参数。接受 PointFadeThresholdSize 和 PointSpriteCoordOrigin。\r\n            \r\n"," \r\n            Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, AnySamplesPassedConservative, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.\r\n            ":" \r\n            指定在 glBeginQuery 和后续的 glEndQuery 之间建立的查询对象的目标类型。符号常量必须是 SamplesPassed、AnySamplesPassed、AnySamplesPassedConservative、PrimitivesGenerated、TransformFeedbackPrimitivesWritten 或 TimeElapsed 之一。\r\n            \r\n","\r\n            Used in GL.NamedRenderbufferStorage, GL.NamedRenderbufferStorageMultisample and 6 other functions\r\n            ":"\r\n            用于GL.NamedRenderbufferStorage、GL.NamedRenderbufferStorageMultisample等6个函数\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E\r\n            \r\n","\r\n            Original was GL_MODELVIEW13_ARB = 0x872D\r\n            ":"\r\n            原来是 GL_MODELVIEW13_ARB = 0x872D\r\n            \r\n"," \r\n            Specifies the size in bytes of the data store region being returned.\r\n            ":" \r\n            指定要返回的数据存储区域的大小（以字节为单位）。\r\n            \r\n","[requires: ARB_geometry_shader4]\r\n            Specify a parameter for a program object\r\n            ":"[需要：ARB_geometry_shader4]\r\n            为程序对象指定参数\r\n            \r\n","\r\n            Original was GL_COVERAGE_BUFFERS_NV = 0x8ED3\r\n            ":"\r\n            原来是 GL_COVERAGE_BUFFERS_NV = 0x8ED3\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897\r\n            \r\n","\r\n            A zero-based index for the game controller.\r\n            This index is the value which will identify this controller in future controller events.\r\n            ":"\r\n            游戏控制器的从零开始的索引。\r\n            该索引是将在未来的控制器事件中标识该控制器的值。\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B\r\n            ":"原来是 GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B\r\n            \r\n","\r\n            Original was GL_CURRENT_VERTEX_EXT = 0x87E2\r\n            ":"\r\n            原来是 GL_CURRENT_VERTEX_EXT = 0x87E2\r\n            \r\n","\r\n            Original was GL_Alpha = 0X1906\r\n            ":"\r\n            原来是 GL_Alpha = 0X1906\r\n            \r\n","\r\n            Original was GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F\r\n            ":"\r\n            原来是 GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F\r\n            \r\n","\r\n            Original was GL_COORD_REPLACE_ARB = 0x8862\r\n            ":"\r\n            原来是 GL_COORD_REPLACE_ARB = 0x8862\r\n            \r\n","\r\n            Original was GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E\r\n            ":"\r\n            原来是 GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E\r\n            \r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5\r\n            \r\n","\r\n            Original was GL_FULL_STIPPLE_HINT_PGI = 0x1A219\r\n            ":"\r\n            原来是 GL_FULL_STIPPLE_HINT_PGI = 0x1A219\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000\r\n            \r\n","\r\n            Original was GL_CON_16_ATI = 0x8951\r\n            ":"\r\n            原来是 GL_CON_16_ATI = 0x8951\r\n            \r\n","[length: pname] \r\n            A pointer to an array where the values of the parameters are stored.\r\n            ":"[长度：pname]\r\n            指向存储参数值的数组的指针。\r\n            \r\n","\r\n            If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating NULL character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call GetLastError.\r\n            ":"\r\n            如果函数成功，则返回值是复制字符串的长度（以字符为单位），不包括终止 NULL 字符。如果窗口没有标题栏或文本，如果标题栏为空，或者如果窗口或控件句柄无效，则返回值为零。要获取扩展的错误信息，请调用 GetLastError。\r\n            \r\n","\r\n            Original was GL_DOUBLE_VEC4_EXT = 0x8FFE\r\n            ":"\r\n            原来是 GL_DOUBLE_VEC4_EXT = 0x8FFE\r\n            \r\n","\r\n            Original was GL_FragmentShader = 0X8b30\r\n            ":"\r\n            原来是 GL_FragmentShader = 0X8b30\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679\r\n            \r\n","\r\n            Original was GL_T2F_N3F_V3F = 0x2A2B\r\n            ":"\r\n            原来是 GL_T2F_N3F_V3F = 0x2A2B\r\n            \r\n"," device to affect":" 设备影响\r\n","\r\n            Original was GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9\r\n            ":"\r\n            原来是 GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9\r\n            \r\n","\r\n            Original was GL_TANGENT_ARRAY_TYPE_EXT = 0x843E\r\n            ":"\r\n            原来是 GL_TANGENT_ARRAY_TYPE_EXT = 0x843E\r\n            \r\n","[requires: EXT_convolution]\r\n            Define a separable two-dimensional convolution filter\r\n            ":"[需要：EXT_convolution]\r\n            定义一个可分离的二维卷积滤波器\r\n            \r\n","[length: primcount] \r\n            Specifies a pointer to the location where the indices are stored.\r\n            ":"[长度：primcount]\r\n            指定指向存储索引的位置的指针。\r\n            \r\n","\r\n            Original was GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1\r\n            ":"\r\n            原来是 GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1\r\n            \r\n","\r\n            Original was GL_BLUE_SCALE = 0x0D1A\r\n            ":"\r\n            原来是 GL_BLUE_SCALE = 0x0D1A\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7\r\n            \r\n","The keyboard.":"键盘。\r\n","[length: target,stride,order] \r\n            Specifies a pointer to the array of control points.\r\n            ":"[长度：目标、步幅、顺序]\r\n            指定指向控制点数组的指针。\r\n            \r\n"," \r\n            The Y offset of the region to be invalidated.\r\n            ":" \r\n            要失效的区域的 Y 偏移量。\r\n            \r\n","\r\n            Generates a hashcode for the current instance.\r\n            ":"为当前实例生成哈希码。\r\n            \r\n","\r\n            Specifies the number of elements to be rendered.\r\n            ":"\r\n            指定要呈现的元素数。\r\n            \r\n","\r\n            Original was GL_EYE_PLANE = 0x2502\r\n            ":"\r\n            原来是 GL_EYE_PLANE = 0x2502\r\n            \r\n","\r\n            Original was GL_OBJECT_TYPE = 0x9112\r\n            ":"\r\n            原来是 GL_OBJECT_TYPE = 0x9112\r\n            \r\n","[requires: v2.0]\r\n            Returns the information log for a shader object\r\n            ":"[要求：v2.0]\r\n            返回着色器对象的信息日志\r\n            \r\n","\r\n            Original was GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318\r\n            ":"\r\n            原来是 GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318\r\n            \r\n"," \r\n            The coordinate of the lower edge of the region to be cleared.\r\n            ":"待清除区域下边缘的坐标。\r\n            \r\n","\r\n            Original was GL_TEXTURE_GEQUAL_R_SGIX = 0x819D\r\n            ":"\r\n            原来是 GL_TEXTURE_GEQUAL_R_SGIX = 0x819D\r\n            \r\n"," \r\n            Specifies the attachment point of the framebuffer.\r\n            ":" \r\n            指定帧缓冲区的附加点。\r\n            \r\n","[requires: v4.3 or KHR_debug|VERSION_4_3]\r\n            Inject an application-supplied message into the debug message queue\r\n            ":"[要求：v4.3 或 KHR_debug|VERSION_4_3]\r\n            将应用程序提供的消息注入调试消息队列\r\n            \r\n","[length: n] \r\n            A pointer to an array containing n framebuffer objects to be deleted.\r\n            ":"[长度：n]\r\n            指向包含 n 个要删除的帧缓冲区对象的数组的指针。\r\n            \r\n","Indicates whether the current matrix is equal to another matrix.":"指示当前矩阵是否等于另一个矩阵。\r\n"," \r\n            Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.\r\n            ":" \r\n            指定像素数据的格式。接受以下符号值：Alpha、Rgb 和 Rgba。\r\n            \r\n","\r\n            Original was GL_Y_EXT = 0x87D6\r\n            ":"\r\n            原来是 GL_Y_EXT = 0x87D6\r\n            \r\n"," represting the hashcode for this instance.\r\n            ":" 为这个实例重制哈希码。\r\n            \r\n"," to marshal.":" 元帅。\r\n","\r\n            Original was GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4\r\n            ":"\r\n            原来是 GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4\r\n            \r\n","\r\n            Original was GL_PROGRAM_BINARY_ANGLE = 0x93A6\r\n            ":"\r\n            原来是 GL_PROGRAM_BINARY_ANGLE = 0x93A6\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Create a new sync object and insert it into the GL command stream\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            创建一个新的同步对象并将其插入到 GL 命令流中\r\n            \r\n","\r\n            Original was GL_CLIP_ORIGIN = 0x935C\r\n            ":"\r\n            原来是 GL_CLIP_ORIGIN = 0x935C\r\n            \r\n","\r\n            Original was GL_VertexAttribArrayStride = 0X8624\r\n            ":"\r\n            原来是 GL_VertexAttribArrayStride = 0X8624\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E\r\n            \r\n","\r\n            Original was GL_TEXTURE_ALPHA_MODULATE_IMG = 0x8C06\r\n            ":"\r\n            原来是 GL_TEXTURE_ALPHA_MODULATE_IMG = 0x8C06\r\n            \r\n","[requires: ATI_vertex_streams]":"[需要：ATI_vertex_streams]\r\n","[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]\r\n            Query the name of an indexed resource within a program\r\n            ":"[要求：v4.3 或 ARB_program_interface_query|VERSION_4_3]\r\n            查询程序中索引资源的名称\r\n            \r\n"," \r\n            The internal storage format of the texture image. Must be one of the following symbolic constants: Alpha, Alpha4, Alpha8, Alpha12, Alpha16, Luminance, Luminance4, Luminance8, Luminance12, Luminance16, LuminanceAlpha, Luminance4Alpha4, Luminance6Alpha2, Luminance8Alpha8, Luminance12Alpha4, Luminance12Alpha12, Luminance16Alpha16, Intensity, Intensity4, Intensity8, Intensity12, Intensity16, R3G3B2, Rgb, Rgb4, Rgb5, Rgb8, Rgb10, Rgb12, Rgb16, Rgba, Rgba2, Rgba4, Rgb5A1, Rgba8, Rgb10A2, Rgba12, or Rgba16.\r\n            ":" \r\n            纹理图像的内部存储格式。必须是以下符号常量之一：Alpha、Alpha4、Alpha8、Alpha12、Alpha16、Luminance、Luminance4、Luminance8、Luminance12、Luminance16、LuminanceAlpha、Luminance4Alpha4、Luminance6Alpha2、Luminance8Alpha8、Luminance12Alpha4、Luminance12Alpha12、Luminance16Alpha16、Intensity、Intensity4、Intensity2、Intensity8 、强度 16、R3G3B2、Rgb、Rgb4、Rgb5、Rgb8、Rgb10、Rgb12、Rgb16、Rgba、Rgba2、Rgba4、Rgb5A1、Rgba8、Rgb10A2、Rgba12 或 Rgba16。\r\n            \r\n","\r\n            Original was GL_MATRIX23 = 0x88D7\r\n            ":"\r\n            原来是 GL_MATRIX23 = 0x88D7\r\n            \r\n","\r\n            Original was GL_FRAGMENT_PROGRAM = 0x8804\r\n            ":"\r\n            原来是 GL_FRAGMENT_PROGRAM = 0x8804\r\n            \r\n","\r\n            Original was GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777\r\n            ":"\r\n            原来是 GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777\r\n            \r\n","\r\n            Original was GL_INT_SAMPLER_1D_EXT = 0x8DC9\r\n            ":"\r\n            原来是 GL_INT_SAMPLER_1D_EXT = 0x8DC9\r\n            \r\n","\r\n            Original was GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13\r\n            ":"\r\n            原来是 GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE\r\n            ":"\r\n            原来是 GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE\r\n            \r\n","\r\n            Original was GL_SIGNED_HILO8_NV = 0x885F\r\n            ":"\r\n            原来是 GL_SIGNED_HILO8_NV = 0x885F\r\n            \r\n","\r\n            Original was GL_CONSTANT_BORDER = 0x8151\r\n            ":"\r\n            原来是 GL_CONSTANT_BORDER = 0x8151\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Deletes a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            删除程序对象\r\n            \r\n","\r\n            Original was GL_FLOAT16_VEC2_NV = 0x8FF9\r\n            ":"\r\n            原来是 GL_FLOAT16_VEC2_NV = 0x8FF9\r\n            \r\n","\r\n            Original was GL_READ_FRAMEBUFFER_ANGLE = 0x8CA8\r\n            ":"\r\n            原来是 GL_READ_FRAMEBUFFER_ANGLE = 0x8CA8\r\n            \r\n","\r\n            The GetWindowText function copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, GetWindowText cannot retrieve the text of a control in another application.\r\n            ":"\r\n            GetWindowText 函数将指定窗口的标题栏（如果有的话）的文本复制到缓冲区中。如果指定的窗口是一个控件，则复制该控件的文本。但是，GetWindowText 无法检索另一个应用程序中控件的文本。\r\n            \r\n"," if this instance has a right shoulder button; otherwise, ":" 如果这个实例有一个右肩按钮；否则，\r\n","\r\n            Original was GL_LINEARBURN_NV = 0x92A5\r\n            ":"\r\n            原来是 GL_LINEARBURN_NV = 0x92A5\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000\r\n            \r\n","\r\n            Original was GL_BLUE_INTEGER = 0x8D96\r\n            ":"\r\n            原来是 GL_BLUE_INTEGER = 0x8D96\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER3_ARB = 0x8828\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER3_ARB = 0x8828\r\n            \r\n","\r\n            Original was GL_FRACTIONAL_EVEN = 0x8E7C\r\n            ":"\r\n            原来是 GL_FRACTIONAL_EVEN = 0x8E7C\r\n            \r\n","[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]\r\n            Generate sampler object names\r\n            ":"[要求：v3.3 或 ARB_sampler_objects|VERSION_3_3]\r\n            生成采样器对象名称\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19\r\n            \r\n"," \r\n            Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.\r\n            ":" \r\n            指定对象参数。接受的符号名称是 ShaderType、DeleteStatus、CompileStatus、InfoLogLength、ShaderSourceLength。\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_APPLICATION = 0x824A\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_APPLICATION = 0x824A\r\n            \r\n","The width of the GameWindow in pixels.":"GameWindow 的宽度（以像素为单位）。\r\n","\r\n            Original was GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE\r\n            ":"\r\n            原来是 GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE\r\n            \r\n","\r\n            Original was GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A\r\n            ":"\r\n            原来是 GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A\r\n            \r\n","\r\n            Original was GL_MODULATE_ADD_ATI = 0x8744\r\n            ":"\r\n            原来是 GL_MODULATE_ADD_ATI = 0x8744\r\n            \r\n","\r\n            Used in GL.BindImageTexture, GL.GetInternalformat and 14 other functions\r\n            ":"\r\n            用于 GL.BindImageTexture、GL.GetInternalformat 和其他 14 个函数\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY = 0x8076\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY = 0x8076\r\n            \r\n","\r\n            Original was GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162\r\n            ":"\r\n            原来是 GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162\r\n            \r\n","\r\n            Used in GL.NV.BlendParameter\r\n            ":"\r\n            在 GL.NV.BlendParameter 中使用\r\n            \r\n","[requires: NV_draw_buffers]\r\n            Specifies a list of color buffers to be drawn into\r\n            ":"[需要：NV_draw_buffers]\r\n            指定要绘制到的颜色缓冲区列表\r\n            \r\n","If mode or device is null.":"如果模式或设备为空。\r\n","\r\n            Original was GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1\r\n            \r\n","A bitwise collection of GraphicsContextFlags with specific options for this IGraphicsContext.":"具有此 IGraphicsContext 的特定选项的 GraphicsContextFlags 的按位集合。\r\n","[requires: v3.0 or ARB_map_buffer_range|VERSION_3_0]\r\n            Map a section of a buffer object's data store\r\n            ":"[要求：v3.0 或 ARB_map_buffer_range|VERSION_3_0]\r\n            映射缓冲区对象数据存储的一部分\r\n            \r\n"," \r\n            Specifies the number of framebuffer object names to be generated.\r\n            ":" \r\n            指定要生成的帧缓冲区对象名称的数量。\r\n            \r\n","\r\n            Original was GL_OBJECT_LINEAR = 0x2401\r\n            ":"\r\n            原来是 GL_OBJECT_LINEAR = 0x2401\r\n            \r\n","\r\n            Original was GL_COMBINER_SCALE_NV = 0x8548\r\n            ":"\r\n            原来是 GL_COMBINER_SCALE_NV = 0x8548\r\n            \r\n","\r\n            Occurs whenever the window is moved. \r\n            ":"\r\n            每当窗口移动时发生。\r\n            \r\n","\r\n            Left stick down direction button\r\n            ":"\r\n            左摇杆向下方向按钮\r\n            \r\n","\r\n            Used in GL.Ext.GetMinmaxParameter\r\n            ":"\r\n            在 GL.Ext.GetMinmaxParameter 中使用\r\n            \r\n","\r\n            Original was GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141\r\n            ":"\r\n            原来是 GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141\r\n            \r\n"," \r\n            Specifies the integer name of the display list to be executed.\r\n            ":" \r\n            指定要执行的显示列表的整数名称。\r\n            \r\n","[requires: v4.5 or ARB_get_texture_sub_image|VERSION_4_5]":"[要求：v4.5 或 ARB_get_texture_sub_image|VERSION_4_5]\r\n","A scale matrix.":"比例矩阵。\r\n","\r\n            Original was GL_Texture28 = 0X84dc\r\n            ":"\r\n            原来是 GL_Texture28 = 0X84dc\r\n            \r\n","\r\n            Original was GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C\r\n            ":"\r\n            原来是 GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C\r\n            \r\n","[length: numTextureNames]":"[长度：numTextureNames]\r\n","\r\n            Original was GL_COLOR_ATTACHMENT10_NV = 0x8CEA\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT10_NV = 0x8CEA\r\n            \r\n","\r\n            Original was GL_COVERAGE_COMPONENT4_NV = 0x8ED1\r\n            ":"\r\n            原来是 GL_COVERAGE_COMPONENT4_NV = 0x8ED1\r\n            \r\n","\r\n            Original was GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C\r\n            ":"\r\n            原来是 GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B\r\n            \r\n","Represents a 4D vector using four single-precision floating-point numbers.":"使用四个单精度浮点数表示 4D 向量。\r\n","If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. Windows NT/2000/XP: To get extended error information, call GetLastError.":"如果函数成功，则返回值为非零。如果函数失败，则返回值为零。 Windows NT/2000/XP：要获取扩展错误信息，请调用 GetLastError。\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Attach a texture image to a framebuffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            将纹理图像附加到帧缓冲区对象\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 0x93E7\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 0x93E7\r\n            \r\n","\r\n            Original was GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211\r\n            ":"\r\n            原来是 GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = 0x93C8\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = 0x93C8\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 0x8A57\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 0x8A57\r\n            \r\n","\r\n            Original was GL_One = 1\r\n            ":"\r\n            原来是 GL_One = 1\r\n            \r\n","\r\n            Specifies the capability to enable. Symbolic constants GL_COLOR_ARRAY, GL_EDGE_FLAG_ARRAY, GL_FOG_COORD_ARRAY, GL_INDEX_ARRAY, GL_NORMAL_ARRAY, GL_SECONDARY_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY, and GL_VERTEX_ARRAY are accepted.\r\n            ":"\r\n            指定启用的能力。接受符号常量 GL_COLOR_ARRAY、GL_EDGE_FLAG_ARRAY、GL_FOG_COORD_ARRAY、GL_INDEX_ARRAY、GL_NORMAL_ARRAY、GL_SECONDARY_COLOR_ARRAY、GL_TEXTURE_COORD_ARRAY 和 GL_VERTEX_ARRAY。\r\n            \r\n","\r\n            Original was GL_INT8_VEC3_NV = 0x8FE2\r\n            ":"\r\n            原来是 GL_INT8_VEC3_NV = 0x8FE2\r\n            \r\n","\r\n            Original was GL_SampleCoverageValue = 0X80aa\r\n            ":"\r\n            原来是 GL_SampleCoverageValue = 0X80aa\r\n            \r\n","\r\n            Original was GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3\r\n            ":"\r\n            原来是 GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3\r\n            \r\n","\r\n            Original was GL_TEXTURE_LUMINANCE_TYPE = 0x8C14\r\n            ":"\r\n            原来是 GL_TEXTURE_LUMINANCE_TYPE = 0x8C14\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER14_ARB = 0x8833\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER14_ARB = 0x8833\r\n            \r\n","\r\n            Original was GL_COLOR_INDEX8_EXT = 0x80E5\r\n            ":"\r\n            原来是 GL_COLOR_INDEX8_EXT = 0x80E5\r\n            \r\n","\r\n            Original was GL_STREAM_DRAW_ARB = 0x88E0\r\n            ":"\r\n            原来是 GL_STREAM_DRAW_ARB = 0x88E0\r\n            \r\n","\r\n            Original was GL_BLEND_DST_RGB_EXT = 0x80C8\r\n            ":"\r\n            原来是 GL_BLEND_DST_RGB_EXT = 0x80C8\r\n            \r\n","Y translation.":"Y翻译。\r\n","\r\n            Home button\r\n            ":"\r\n            主页按钮\r\n            \r\n","\r\n            Original was GL_UNKNOWN_CONTEXT_RESET = 0x8255\r\n            ":"\r\n            原来是 GL_UNKNOWN_CONTEXT_RESET = 0x8255\r\n            \r\n","\r\n            Indicates that the GameWindow should cover the whole screen.\r\n            ":"\r\n            指示 GameWindow 应覆盖整个屏幕。\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4\r\n            \r\n","[requires: ARB_vertex_shader]\r\n            Associates a generic vertex attribute index with a named attribute variable\r\n            ":"[需要：ARB_vertex_shader]\r\n            将通用顶点属性索引与命名属性变量相关联\r\n            \r\n","\r\n            Original was GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE\r\n            ":"\r\n            原来是 GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE\r\n            \r\n"," \r\n            Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachmment.\r\n            ":" \r\n            指定帧缓冲区的附加点。附件必须是 ColorAttachmenti、DepthAttachment、StencilAttachment 或 DepthStencilAttachment。\r\n            \r\n","\r\n            Used in GL.Ext.ProvokingVertex\r\n            ":"\r\n            在 GL.Ext.ProvokingVertex 中使用\r\n            \r\n","\r\n            Original was GL_StencilBackWritemask = 0X8ca5\r\n            ":"\r\n            原来是 GL_StencilBackWritemask = 0X8ca5\r\n            \r\n","\r\n            Original was GL_UNIFORM_BUFFER_BINDING = 0x8A28\r\n            ":"\r\n            原来是 GL_UNIFORM_BUFFER_BINDING = 0x8A28\r\n            \r\n","\r\n            Activates the window and displays it as a minimized window.\r\n            ":"\r\n            激活窗口并将其显示为最小化窗口。\r\n            \r\n","\r\n            Original was GL_TEXTURE_FILTER_CONTROL = 0x8500\r\n            ":"\r\n            原来是 GL_TEXTURE_FILTER_CONTROL = 0x8500\r\n            \r\n","The caps lock key.":"大写锁定键。\r\n","\r\n            Original was GL_PATH_GEN_COEFF_NV = 0x90B1\r\n            ":"\r\n            原来是 GL_PATH_GEN_COEFF_NV = 0x90B1\r\n            \r\n","\r\n            Original was GL_R16F = 0x822D\r\n            ":"\r\n            原来是 GL_R16F = 0x822D\r\n            \r\n"," \r\n            Specify new red, green, and blue values for the current secondary color.\r\n            ":" \r\n            为当前的次要颜色指定新的红色、绿色和蓝色值。\r\n            \r\n","\r\n            Original was GL_COLOR_SAMPLES_NV = 0x8E20\r\n            ":"\r\n            原来是 GL_COLOR_SAMPLES_NV = 0x8E20\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F\r\n            \r\n"," \r\n            Specify scale factors along the x, y, and z axes, respectively.\r\n            ":" \r\n            分别指定沿 x、y 和 z 轴的比例因子。\r\n            \r\n","\r\n            Used in GL.ProgramParameter, GL.Ext.ProgramParameter\r\n            ":"\r\n            用于GL.ProgramParameter, GL.Ext.ProgramParameter\r\n            \r\n","\r\n            Original was GL_LINEAR_MIPMAP_NEAREST = 0x2701\r\n            ":"\r\n            原来是 GL_LINEAR_MIPMAP_NEAREST = 0x2701\r\n            \r\n","\r\n            Original was GL_BufferSize = 0X8764\r\n            ":"\r\n            原来是 GL_BufferSize = 0X8764\r\n            \r\n","\r\n            Original was GL_CONSTANT_COLOR_EXT = 0x8001\r\n            ":"\r\n            原来是 GL_CONSTANT_COLOR_EXT = 0x8001\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_ERROR = 0x824C\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_ERROR = 0x824C\r\n            \r\n","\r\n            Original was GL_TEXTURE_MAG_SIZE_NV = 0x871F\r\n            ":"\r\n            原来是 GL_TEXTURE_MAG_SIZE_NV = 0x871F\r\n            \r\n","\r\n            Used in GL.BufferData, GL.NamedBufferData and 1 other function\r\n            ":"\r\n            用于 GL.BufferData、GL.NamedBufferData 和 1 个其他函数\r\n            \r\n","\r\n            Original was GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242\r\n            ":"\r\n            原来是 GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242\r\n            \r\n","\r\n            Updates the state of the driver.\r\n            ":"\r\n            更新驱动程序的状态。\r\n            \r\n","\r\n            Original was GL_CLIP_FAR_HINT_PGI = 0x1A221\r\n            ":"\r\n            原来是 GL_CLIP_FAR_HINT_PGI = 0x1A221\r\n            \r\n","\r\n            Original was GL_NEGATIVE_ONE_EXT = 0x87DF\r\n            ":"\r\n            原来是 GL_NEGATIVE_ONE_EXT = 0x87DF\r\n            \r\n"," \r\n            Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, VertexAttribArrayInteger, VertexAttribArrayDivisor, or CurrentVertexAttrib.\r\n            ":" \r\n            指定要查询的顶点属性参数的符号名称。可接受的值为 VertexAttribArrayBufferBinding、VertexAttribArrayEnabled、VertexAttribArraySize、VertexAttribArrayStride、VertexAttribArrayType、VertexAttribArrayNormalized、VertexAttribArrayInteger、VertexAttribArrayDivisor 或 CurrentVertexAttrib。\r\n            \r\n","A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a\r\n            hash table.":"此实例的哈希码，适用于哈希算法和数据结构，例如\r\n            哈希表。\r\n"," \r\n            Specifies the number of components per color. Must be 3 or 4. The initial value is 4.\r\n            ":" \r\n            指定每种颜色的分量数。必须为 3 或 4。初始值为 4。\r\n            \r\n","\r\n            Original was GL_PROGRAM_STRING_NV = 0x8628\r\n            ":"\r\n            原来是 GL_PROGRAM_STRING_NV = 0x8628\r\n            \r\n","\r\n            Original was GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200\r\n            ":"\r\n            原来是 GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200\r\n            \r\n"," describing the state of the right thumb stick.\r\n            ":" 描述右手摇杆的状态。\r\n            \r\n","\r\n            Original was GL_FOG_DISTANCE_MODE_NV = 0x855A\r\n            ":"\r\n            原来是 GL_FOG_DISTANCE_MODE_NV = 0x855A\r\n            \r\n","\r\n            Original was GL_SAMPLE_POSITION_NV = 0x8E50\r\n            ":"\r\n            原来是 GL_SAMPLE_POSITION_NV = 0x8E50\r\n            \r\n","\r\n            Original was GL_TextureBorderColor = 0x1004\r\n            ":"\r\n            原来是 GL_TextureBorderColor = 0x1004\r\n            \r\n","\r\n            Specifies the value that parameter GL_SHININESS will be set to.\r\n            ":"指定参数 GL_SHININESS 将被设置的值。\r\n            \r\n","\r\n            Used in GL.ColorMaterial, GL.GetMaterial and 8 other functions\r\n            ":"\r\n            用于 GL.ColorMaterial、GL.GetMaterial 和其他 8 个函数\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_4_4_4_4_REVERSED = 0x8365\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_4_4_4_4_REVERSED = 0x8365\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_SGI = 0x80D0\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_SGI = 0x80D0\r\n            \r\n","\r\n            Used in GL.ClampColor\r\n            ":"\r\n            用于 GL.ClampColor\r\n            \r\n","Second row of the matrix.":"矩阵的第二行。\r\n","[requires: v1.4][deprecated: v3.2]\r\n            Define an array of fog coordinates\r\n            ":"[要求：v1.4][弃用：v3.2]\r\n            定义雾坐标数组\r\n            \r\n","\r\n            Original was GL_REPLACE = 0x1E01\r\n            ":"\r\n            原来是 GL_REPLACE = 0x1E01\r\n            \r\n","\r\n            Gets or sets the fourth column of the matrix.\r\n            ":"\r\n            获取或设置矩阵的第四列。\r\n            \r\n","\r\n            Used in GL.Arb.GetActiveAttrib\r\n            ":"\r\n            在 GL.Arb.GetActiveAttrib 中使用\r\n            \r\n","\r\n            Original was GL_PROGRAM_ATTRIBS = 0x88AC\r\n            ":"\r\n            原来是 GL_PROGRAM_ATTRIBS = 0x88AC\r\n            \r\n","\r\n            Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.\r\n            ":"\r\n            指定视口的宽度和高度。当 GL 上下文首次附加到窗口时，宽度和高度将设置为该窗口的尺寸。\r\n            \r\n"," \r\n            Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedInt, Int, or Float. An implementation-chosen type will also be accepted. This can be queried with glGet and ImplementationColorReadType.\r\n            ":" \r\n            指定像素数据的数据类型。必须是 UnsignedByte、UnsignedInt、Int 或 Float 之一。实现选择的类型也将被接受。这可以使用 glGet 和 ImplementationColorReadType 查询。\r\n            \r\n","\r\n            Retreves the ":"\r\n            恢复\r\n","\r\n            Original was GL_GEOMETRY_SHADER = 0x8DD9\r\n            ":"\r\n            原来是 GL_GEOMETRY_SHADER = 0x8DD9\r\n            \r\n","\r\n            Original was GL_MATRIX8 = 0x88C8\r\n            ":"\r\n            原来是 GL_MATRIX8 = 0x88C8\r\n            \r\n"," \r\n            Specifies the format of the pixel data. The following symbolic values are accepted: Red, RedInteger, Rg, RgInteger, Rgb, RgbInteger, Rgba, RgbaInteger, DepthComponent, DepthStencil, LuminanceAlpha, Luminance, and Alpha,\r\n            ":" \r\n            指定像素数据的格式。接受以下符号值：Red、RedInteger、Rg、RgInteger、Rgb、RgbInteger、Rgba、RgbaInteger、DepthComponent、DepthStencil、LuminanceAlpha、Luminance 和 Alpha，\r\n            \r\n"," \r\n            Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.\r\n            ":" \r\n            指定纹理图像的深度。所有实现都支持至少 16 纹素深的 3D 纹理图像。\r\n            \r\n"," \r\n            Specifies the display-list name.\r\n            ":" \r\n            指定显示列表名称。\r\n            \r\n",", which indicates whether\r\n            this instance has been disposed.\r\n            ":", 表示是否\r\n            此实例已被处置。\r\n            \r\n"," \r\n            Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.\r\n            ":" \r\n            指定近裁剪平面到窗口坐标的映射。初始值为 0。\r\n            \r\n","\r\n            Original was GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197\r\n            ":"\r\n            原来是 GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197\r\n            \r\n","\r\n            A handle to the icon color bitmap. This member can be optional if\r\n            this structure defines a black and white icon. The AND bitmask of\r\n            hbmMask is applied with the SRCAND flag to the destination; \r\n            subsequently, the color bitmap is applied (using XOR) to the \r\n            destination by using the SRCINVERT flag.\r\n            ":"\r\n            图标颜色位图的句柄。该成员可以是可选的，如果\r\n            这个结构定义了一个黑白图标。的 AND 位掩码\r\n            hbmMask 与 SRCAND 标志一起应用于目的地；\r\n            随后，颜色位图被应用（使用 XOR）到\r\n            目的地通过使用 SRCINVERT 标志。\r\n            \r\n","\r\n            Original was GL_MATRIX19 = 0x88D3\r\n            ":"\r\n            原来是 GL_MATRIX19 = 0x88D3\r\n            \r\n","\r\n            Original was GL_WAIT_FAILED = 0x911D\r\n            ":"\r\n            原来是 GL_WAIT_FAILED = 0x911D\r\n            \r\n","\r\n            Adds two instances.\r\n            ":"\r\n            添加两个实例。\r\n            \r\n","[requires: OES_single_precision]\r\n            Specify a plane against which all geometry is clipped\r\n            ":"[要求：OES_single_precision]\r\n            指定一个平面，所有几何图形都将根据该平面进行剪裁\r\n            \r\n","\r\n            Gets or sets the handle of the window.\r\n            ":"\r\n            获取或设置窗口的句柄。\r\n            \r\n","Pointer to a variable that specifies the size, in bytes, of the data in Data.":"指向指定数据大小（以字节为单位）的变量的指针。\r\n","\r\n            Original was GL_IMAGE_CLASS_2_X_32 = 0x82BA\r\n            ":"\r\n            原来是 GL_IMAGE_CLASS_2_X_32 = 0x82BA\r\n            \r\n","\r\n            Original was GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 0x82DB\r\n            ":"\r\n            原来是 GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 0x82DB\r\n            \r\n","Assumes that the NSWindow's contentView is the NSView we want to attach to our context.":"假设 NSWindow 的 contentView 是我们想要附加到上下文的 NSView。\r\n","\r\n            Original was GL_DISCARD_ATI = 0x8763\r\n            ":"\r\n            原来是 GL_DISCARD_ATI = 0x8763\r\n            \r\n","\r\n            Used in GL.DrawArrays, GL.DrawArraysIndirect and 19 other functions\r\n            ":"\r\n            用于 GL.DrawArrays、GL.DrawArraysIndirect 和 19 个其他函数\r\n            \r\n","\r\n            Original was GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8\r\n            ":"\r\n            原来是 GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_HEIGHT_OES = 0x8D43\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_HEIGHT_OES = 0x8D43\r\n            \r\n"," for this window.\r\n            ":" 对于这个窗口。\r\n            \r\n","\r\n            Original was GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E\r\n            ":"\r\n            原来是 GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E\r\n            \r\n","\r\n            Original was GL_PRIMITIVE_RESTART = 0x8F9D\r\n            ":"\r\n            原来是 GL_PRIMITIVE_RESTART = 0x8F9D\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8\r\n            \r\n","\r\n            Original was GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 0x8FB3\r\n            ":"\r\n            原来是 GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 0x8FB3\r\n            \r\n","\r\n            Original was GL_Rgb565 = 0X8d62\r\n            ":"\r\n            原来是 GL_Rgb565 = 0X8d62\r\n            \r\n","\r\n            Original was GL_Never = 0X0200\r\n            ":"\r\n            原来是 GL_Never = 0X0200\r\n            \r\n","\r\n            Original was GL_FuncReverseSubtract = 0X800b\r\n            ":"\r\n            原来是 GL_FuncReverseSubtract = 0X800b\r\n            \r\n"," \r\n            Specify the , , , and  object coordinates (if present) for the raster position.\r\n            ":"为光栅位置指定 、 、 和对象坐标（如果存在）。\r\n            \r\n","\r\n            Original was GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E\r\n            ":"\r\n            原来是 GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E\r\n            \r\n"," \r\n            Specifies the symbolic name of a single-valued texture environment parameter. May be either TextureEnvMode, TextureLodBias, CombineRgb, CombineAlpha, Src0Rgb, Src1Rgb, Src2Rgb, Src0Alpha, Src1Alpha, Src2Alpha, Operand0Rgb, Operand1Rgb, Operand2Rgb, Operand0Alpha, Operand1Alpha, Operand2Alpha, RgbScale, AlphaScale, or CoordReplace.\r\n            ":" \r\n            指定单值纹理环境参数的符号名称。可以是 TextureEnvMode、TextureLodBias、CombineRgb、CombineAlpha、Src0Rgb、Src1Rgb、Src2Rgb、Src0Alpha、Src1Alpha、Src2Alpha、Operand0Rgb、Operand1Rgb、Operand2Rgb、Operand0Alpha、Operand1Alpha、Operand2Alpha、RgbScale、AlphaScale 或 CoordReplace。\r\n            \r\n","\r\n            Original was GL_POINT_SPRITE = 0x8861\r\n            ":"\r\n            原来是 GL_POINT_SPRITE = 0x8861\r\n            \r\n","[length: pname] \r\n            Specifies the address of an array to receive the value of the queried parameter.\r\n            ":"[长度：pname]\r\n            指定接收查询参数值的数组地址。\r\n            \r\n","The number 5 key.":"5 号键。\r\n","\r\n            Original was GL_DECR_WRAP_OES = 0x8508\r\n            ":"\r\n            原来是 GL_DECR_WRAP_OES = 0x8508\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24\r\n            \r\n","A Matrix4 to take the upper-left 3x3 from.":"从中获取左上角 3x3 的 Matrix4。\r\n"," \r\n            Specify the opposite vertex of the rectangle.\r\n            ":" \r\n            指定矩形的相对顶点。\r\n            \r\n"," hardware does not support vibration or if it cannot respond to\r\n            the command for any reason. Do not loop until this becomes true, but rather ignore\r\n            a return value of false.\r\n            ":" 硬件不支持振动或无法响应\r\n            命令出于任何原因。在这变为真之前不要循环，而是忽略\r\n            返回值为 false。\r\n            \r\n"," A valid OpenGL context must be created before calling any OpenGL function.":" 在调用任何 OpenGL 函数之前必须创建一个有效的 OpenGL 上下文。\r\n","\r\n            Original was GL_COMPRESSED_R11_EAC = 0x9270\r\n            ":"\r\n            原来是 GL_COMPRESSED_R11_EAC = 0x9270\r\n            \r\n","\r\n            Original was GL_DECR = 0x1E03\r\n            ":"\r\n            原来是 GL_DECR = 0x1E03\r\n            \r\n","GameControllerButton":"游戏控制器按钮\r\n","\r\n            Original was GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23\r\n            \r\n","\r\n            Retrieves the hardware ":"\r\n            检索硬件\r\n","\r\n            Original was GL_VertexShader = 0X8b31\r\n            ":"\r\n            原来是 GL_VertexShader = 0X8b31\r\n            \r\n","\r\n            Original was GL_RGB565 = 0x8D62\r\n            ":"\r\n            原来是 GL_RGB565 = 0x8D62\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2\r\n            \r\n","\r\n            Original was GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3\r\n            ":"\r\n            原来是 GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3\r\n            \r\n","\r\n            Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.\r\n            ":"\r\n            指定近裁剪平面到窗口坐标的映射。初始值为 0。\r\n            \r\n","[length: count] \r\n            Specifies the address of an array of offsets to associate with the binding points.\r\n            ":"[长度：计数]\r\n            指定要与绑定点关联的偏移量数组的地址。\r\n            \r\n","\r\n            Original was GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19\r\n            ":"\r\n            原来是 GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19\r\n            \r\n","\r\n            Specify a single floating-point sample coverage value. The value is clamped to the range [0 ,1]. The initial value is 1.0.\r\n            ":"\r\n            指定单个浮点样本覆盖率值。该值被限制在 [0 ,1] 范围内。初始值为 1.0。\r\n            \r\n","\r\n            Original was GL_TEXTURE_1D_BINDING_EXT = 0x8068\r\n            ":"\r\n            原来是 GL_TEXTURE_1D_BINDING_EXT = 0x8068\r\n            \r\n","The right operand of the subtraction.":"减法的右操作数。\r\n","\r\n            Original was GL_VERTEX_PROGRAM = 0x8620\r\n            ":"\r\n            原来是 GL_VERTEX_PROGRAM = 0x8620\r\n            \r\n"," \r\n            Format of the output images. Must be one of Red, Green, Blue, Alpha, Rgb, BgrRgba, Bgra, Luminance, or LuminanceAlpha.\r\n            ":" \r\n            输出图像的格式。必须是 Red、Green、Blue、Alpha、Rgb、BgrRgba、Bgra、Luminance 或 LuminanceAlpha 之一。\r\n            \r\n","\r\n            Original was GL_FEEDBACK_BUFFER_POINTER = 0x0DF0\r\n            ":"\r\n            原来是 GL_FEEDBACK_BUFFER_POINTER = 0x0DF0\r\n            \r\n","\r\n            Original was GL_TEXTURE_2D_ARRAY = 0x8C1A\r\n            ":"\r\n            原来是 GL_TEXTURE_2D_ARRAY = 0x8C1A\r\n            \r\n","\r\n            Constructs a new FrameEventArgs instance. \r\n            ":"\r\n            构造一个新的 FrameEventArgs 实例。\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_RED_SCALE = 0x801C\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_RED_SCALE = 0x801C\r\n            \r\n","\r\n            Original was GL_StencilBackFail = 0X8801\r\n            ":"\r\n            原来是 GL_StencilBackFail = 0X8801\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669\r\n            \r\n","[requires: AMD_multi_draw_indirect]\r\n            Render multiple sets of primitives from array data, taking parameters from memory\r\n            ":"[需要：AMD_multi_draw_indirect]\r\n            从数组数据中渲染多组图元，从内存中获取参数\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER6_EXT = 0x882B\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER6_EXT = 0x882B\r\n            \r\n","\r\n            Original was GL_LUMINANCE_FLOAT32_APPLE = 0x8818\r\n            ":"\r\n            原来是 GL_LUMINANCE_FLOAT32_APPLE = 0x8818\r\n            \r\n","[length: count*1] \r\n            For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.\r\n            ":"[长度：计数*1]\r\n            对于向量和矩阵命令，指定一个指向计数值数组的指针，该数组将用于更新指定的统一变量。\r\n            \r\n","[length: bufSize] \r\n            Specifies the address an array into which the GL will return program's binary representation.\r\n            ":"[长度：bufSize]\r\n            指定数组的地址，GL 将把程序的二进制表示返回到该数组中。\r\n            \r\n","\r\n            Defines available Joystick hats.\r\n            ":"\r\n            定义可用的操纵杆帽子。\r\n            \r\n","[requires: v1.0]\r\n            Determine if a name corresponds to a texture\r\n            ":"[要求：v1.0]\r\n            确定名称是否对应于纹理\r\n            \r\n"," \r\n            Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.\r\n            ":" \r\n            指定要获取的纹理。接受 Texture1D、Texture2D、Texture3D、Texture1DArray、Texture2DArray、TextureRectangle、TextureCubeMapPositiveX、TextureCubeMapNegativeX、TextureCubeMapPositiveY、TextureCubeMapNegativeY、TextureCubeMapPositiveZ 和 TextureCubeMapNegativeZ。\r\n            \r\n"," \r\n            Specifies the new value for the current color index.\r\n            ":" \r\n            指定当前颜色索引的新值。\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX = 0x1901\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX = 0x1901\r\n            \r\n","\r\n            Original was GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF\r\n            ":"\r\n            原来是 GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF\r\n            \r\n","\r\n            Original was GL_COMBINE_ARB = 0x8570\r\n            ":"\r\n            原来是 GL_COMBINE_ARB = 0x8570\r\n            \r\n","\r\n            Used in GL.GetPointer, GL.Ext.GetPointer\r\n            ":"\r\n            用于GL.GetPointer、GL.Ext.GetPointer\r\n            \r\n","\r\n            Original was GL_DepthComponent16 = 0X81a5\r\n            ":"\r\n            原来是 GL_DepthComponent16 = 0X81a5\r\n            \r\n","\r\n            Original was GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2\r\n            ":"\r\n            原来是 GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2\r\n            \r\n","\r\n            Original was GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0\r\n            ":"\r\n            原来是 GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0\r\n            \r\n","\r\n            Original was GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3\r\n            ":"\r\n            原来是 GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3\r\n            \r\n","[requires: EXT_texture_storage]\r\n            Simultaneously specify storage for all levels of a one-dimensional texture\r\n            ":"[需要：EXT_texture_storage]\r\n            同时为一维纹理的所有级别指定存储\r\n            \r\n"," \r\n            specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.\r\n            ":"指定 RGB 混合方程式，源颜色和目标颜色的红色、绿色和蓝色分量如何组合。它必须是 FuncAdd、FuncSubtract 或 FuncReverseSubtract。\r\n            \r\n","\r\n            Original was GL_RG8_EXT = 0x822B\r\n            ":"\r\n            原来是 GL_RG8_EXT = 0x822B\r\n            \r\n","[requires: EXT_convolution]\r\n            Define a two-dimensional convolution filter\r\n            ":"[需要：EXT_convolution]\r\n            定义一个二维卷积滤波器\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 0x93F0\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 0x93F0\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023\r\n            \r\n","\r\n            Original was GL_ArrayBuffer = 0X8892\r\n            ":"\r\n            原来是 GL_ArrayBuffer = 0X8892\r\n            \r\n","\r\n            Original was GL_INT_SAMPLER_2D_EXT = 0x8DCA\r\n            ":"\r\n            原来是 GL_INT_SAMPLER_2D_EXT = 0x8DCA\r\n            \r\n"," has\r\n            an A button.\r\n            ":" 有\r\n            一个按钮。\r\n            \r\n","\r\n            Specifies the number of textures to be deleted.\r\n            ":"\r\n            指定要删除的纹理数。\r\n            \r\n","[requires: v1.1][deprecated: v3.2]\r\n            Define an array of edge flags\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            定义一个边标志数组\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F\r\n            \r\n","\r\n            Returns a copy of this Quaterniond with its rotation angle reversed.\r\n            ":"\r\n            返回此 Quaterniond 的副本，其旋转角度已反转。\r\n            \r\n","\r\n            Original was GL_MODELVIEW9_ARB = 0x8729\r\n            ":"\r\n            原来是 GL_MODELVIEW9_ARB = 0x8729\r\n            \r\n","\r\n            Retrieve the joystick handle that corresponds to the specified game controller.\r\n            ":"\r\n            检索与指定游戏控制器对应的操纵杆句柄。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Control the front and back writing of individual bits in the stencil planes\r\n            ":"[要求：v1.0 和 1.0]\r\n            控制模板平面中各个位的正面和背面写入\r\n            \r\n","\r\n            Original was GL_PROGRAM_OBJECT_EXT = 0x8B40\r\n            ":"\r\n            原来是 GL_PROGRAM_OBJECT_EXT = 0x8B40\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_BINDING_OES = 0x8CA7\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_BINDING_OES = 0x8CA7\r\n            \r\n","\r\n            Original was GL_SKIP_COMPONENTS1_NV = -6\r\n            ":"\r\n            原来是 GL_SKIP_COMPONENTS1_NV = -6\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER2_ARB = 0x8827\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER2_ARB = 0x8827\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Set the blend color\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            设置混合色\r\n            \r\n","Returns nonzero if successful or zero otherwise. To get extended error information, call GetLastError.":"如果成功则返回非零值，否则返回零值。要获取扩展的错误信息，请调用 GetLastError。\r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516\r\n            \r\n","\r\n            Original was GL_BLEND_EQUATION_OES = 0x8009\r\n            ":"\r\n            原来是 GL_BLEND_EQUATION_OES = 0x8009\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D\r\n            \r\n","\r\n            Original was GL_MODELVIEW16_ARB = 0x8730\r\n            ":"\r\n            原来是 GL_MODELVIEW16_ARB = 0x8730\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Determines if a name corresponds to a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            确定名称是否对应于着色器对象\r\n            \r\n","\r\n            Original was GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3\r\n            ":"\r\n            原来是 GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3\r\n            \r\n","\r\n            Original was GL_ShaderType = 0X8b4f\r\n            ":"\r\n            原来是 GL_ShaderType = 0X8b4f\r\n            \r\n","\r\n            Original was GL_SIGNED_NORMALIZED = 0x8F9C\r\n            ":"\r\n            原来是 GL_SIGNED_NORMALIZED = 0x8F9C\r\n            \r\n","\r\n            The extended window styles. For a table of extended window styles, see CreateWindowEx.\r\n            ":"\r\n            扩展窗口样式。有关扩展窗口样式的表，请参阅 CreateWindowEx。\r\n            \r\n","\r\n            Gets an integer representing the number of function keys (F-keys) on this KeyboardDevice.\r\n            ":"\r\n            获取一个整数，表示此 KeyboardDevice 上的功能键（F 键）的数量。\r\n            \r\n","[requires: EXT_blend_minmax]\r\n            Specify the equation used for both the RGB blend equation and the Alpha blend equation\r\n            ":"[要求：EXT_blend_minmax]\r\n            指定用于 RGB 混合方程和 Alpha 混合方程的方程\r\n            \r\n"," \r\n            Specifies the sized internal format to be used to store texture image data.\r\n            ":" \r\n            指定用于存储纹理图像数据的大小内部格式。\r\n            \r\n"," \r\n            Specifies the number of uniforms whose indices to query.\r\n            ":" \r\n            指定要查询其索引的制服数量。\r\n            \r\n","\r\n            Used in GL.StencilFunc, GL.StencilFuncSeparate\r\n            ":"\r\n            在GL.StencilFunc中使用，GL.StencilFunc分开\r\n            \r\n","[requires: ARB_transpose_matrix]\r\n            Replace the current matrix with the specified row-major ordered matrix\r\n            ":"[需要：ARB_transpose_matrix]\r\n            用指定的行优先有序矩阵替换当前矩阵\r\n            \r\n","\r\n            Original was GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C\r\n            ":"\r\n            原来是 GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C\r\n            \r\n","Windows 95/98/Me: GetWindowTextW is supported by the Microsoft Layer for Unicode (MSLU). To use this, you must add certain files to your application, as outlined in Microsoft Layer for Unicode on Windows 95/98/Me":"Windows 95/98/Me：Microsoft Layer for Unicode (MSLU) 支持 GetWindowTextW。要使用它，您必须将某些文件添加到您的应用程序，如 Microsoft Layer for Unicode on Windows 95/98/Me 中所述\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return the framebuffer completeness status of a framebuffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回帧缓冲区对象的帧缓冲区完整性状态\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000\r\n            \r\n","\r\n            Specifies the test function. Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS.\r\n            ":"\r\n            指定测试函数。八个符号常量是有效的：GL_NEVER、GL_LESS、GL_LEQUAL、GL_GREATER、GL_GEQUAL、GL_EQUAL、GL_NOTEQUAL 和 GL_ALWAYS。初始值为 GL_ALWAYS。\r\n            \r\n","\r\n            Original was GL_SIGNED_RGB_NV = 0x86FE\r\n            ":"\r\n            原来是 GL_SIGNED_RGB_NV = 0x86FE\r\n            \r\n","\r\n            Original was GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045\r\n            ":"\r\n            原来是 GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045\r\n            \r\n","\r\n            Used in GL.ClearBuffer, GL.ClearNamedFramebuffer\r\n            ":"\r\n            用于GL.ClearBuffer、GL.ClearNamedFramebuffer\r\n            \r\n","[requires: v1.0]\r\n            Return texture parameter values for a specific level of detail\r\n            ":"[要求：v1.0]\r\n            返回特定细节级别的纹理参数值\r\n            \r\n","\r\n            Original was GL_PERTURB_EXT = 0x85AE\r\n            ":"\r\n            原来是 GL_PERTURB_EXT = 0x85AE\r\n            \r\n","\r\n            Original was GL_REG_10_ATI = 0x892B\r\n            ":"\r\n            原来是 GL_REG_10_ATI = 0x892B\r\n            \r\n","[requires: v1.5]\r\n            Generate query object names\r\n            ":"[要求：v1.5]\r\n            生成查询对象名称\r\n            \r\n","[requires: EXT_histogram]\r\n            Reset minmax table entries to initial values\r\n            ":"[需要：EXT_histogram]\r\n            将 minmax 表条目重置为初始值\r\n            \r\n","[length: count,type] \r\n            Specifies a pointer to the location where the indices are stored.\r\n            ":"[长度：计数，类型]\r\n            指定指向存储索引的位置的指针。\r\n            \r\n","The seventeenth button of the JoystickDevice.":"JoystickDevice 的第十七个按钮。\r\n","[requires: v1.0 and 1.0]\r\n            Specify implementation-specific hints\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定特定于实现的提示\r\n            \r\n","\r\n            Original was GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F\r\n            ":"\r\n            原来是 GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F\r\n            \r\n","\r\n            Original was GL_CURRENT_TIME_NV = 0x8E28\r\n            ":"\r\n            原来是 GL_CURRENT_TIME_NV = 0x8E28\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A\r\n            \r\n","\r\n            Used in GL.CullFace, GL.StencilFuncSeparate and 2 other functions\r\n            ":"\r\n            用于 GL.CullFace、GL.StencilFuncSeparate 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_Texture4 = 0X84c4\r\n            ":"\r\n            原来是 GL_Texture4 = 0X84c4\r\n            \r\n","\r\n            Original was GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B\r\n            ":"\r\n            原来是 GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B\r\n            \r\n","\r\n            Used in GL.MatrixMode, GL.Ext.MatrixFrustum and 11 other functions\r\n            ":"\r\n            用于 GL.MatrixMode、GL.Ext.MatrixFrustum 和其他 11 个函数\r\n            \r\n"," indicating\r\n            whether this hat lies in the right hemicircle.\r\n            ":" 表明\r\n            这顶帽子是否位于右半圆。\r\n            \r\n"," \r\n            Specifies the program object to set as the active program pipeline object pipeline.\r\n            ":" \r\n            指定要设置为活动程序管道对象管道的程序对象。\r\n            \r\n","\r\n            Original was GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75\r\n            ":"\r\n            原来是 GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75\r\n            \r\n"," \r\n            Specifies a value that may be the name of a transform feedback object.\r\n            ":" \r\n            指定一个值，该值可以是变换反馈对象的名称。\r\n            \r\n","\r\n            Original was GL_R16_SNORM = 0x8F98\r\n            ":"\r\n            原来是 GL_R16_SNORM = 0x8F98\r\n            \r\n","\r\n            Original was GL_FramebufferBinding = 0X8ca6\r\n            ":"\r\n            原来是 GL_FramebufferBinding = 0X8ca6\r\n            \r\n","\r\n            Original was GL_PROGRAM_RESIDENT_NV = 0x8647\r\n            ":"\r\n            原来是 GL_PROGRAM_RESIDENT_NV = 0x8647\r\n            \r\n","\r\n            Original was GL_MATRIX7_NV = 0x8637\r\n            ":"\r\n            原来是 GL_MATRIX7_NV = 0x8637\r\n            \r\n"," structure contains information about the placement and orientation of a glyph in a\r\n            character cell.\r\n            ":" 结构包含有关字形在图形中的位置和方向的信息\r\n            字符单元格。\r\n            \r\n","\r\n            The fourth extra mouse button.\r\n            ":"\r\n            第四个额外的鼠标按钮。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_DEFAULT = 0x8218\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_DEFAULT = 0x8218\r\n            \r\n","[requires: v1.4][deprecated: v3.2]\r\n            Set the current secondary color\r\n            ":"[要求：v1.4][弃用：v3.2]\r\n            设置当前的次要颜色\r\n            \r\n","The keypad 7 key.":"键盘 7 键。\r\n","\r\n            Original was GL_GEOMETRY_SHADER_EXT = 0x8DD9\r\n            ":"\r\n            原来是 GL_GEOMETRY_SHADER_EXT = 0x8DD9\r\n            \r\n","\r\n            Original was GL_RGBA_FLOAT32_ATI = 0x8814\r\n            ":"\r\n            原来是 GL_RGBA_FLOAT32_ATI = 0x8814\r\n            \r\n"," \r\n            Specifies the number of viewports whose depth range to update.\r\n            ":" \r\n            指定要更新其深度范围的视口数。\r\n            \r\n","\r\n            Defines available JoystickDevice axes.\r\n            ":"\r\n            定义可用的 JoystickDevice 轴。\r\n            \r\n","\r\n            Checks if a Wgl extension is supported by the given context.\r\n            ":"\r\n            检查给定上下文是否支持 Wgl 扩展。\r\n            \r\n","A new Matrix4x3d which holds the result of the multiplication":"保存乘法结果的新 Matrix4x3d\r\n","\r\n            Original was GL_DEBUG_SOURCE_APPLICATION_KHR = 0x824A\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_APPLICATION_KHR = 0x824A\r\n            \r\n","\r\n            Original was GL_CULL_VERTEX_IBM = 103050\r\n            ":"\r\n            原来是 GL_CULL_VERTEX_IBM = 103050\r\n            \r\n","\r\n            Original was GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45\r\n            ":"\r\n            原来是 GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45\r\n            \r\n","\r\n            Defines the raw input data coming from the specified keyboard.\r\n            ":"\r\n            定义来自指定键盘的原始输入数据。\r\n            \r\n","\r\n            The fourth hat of the Joystick device.\r\n            ":"\r\n            Joystick 设备的第四顶帽子。\r\n            \r\n","[requires: OES_framebuffer_object]\r\n            Bind a named renderbuffer object\r\n            ":"[要求：OES_framebuffer_object]\r\n            绑定一个命名的渲染缓冲区对象\r\n            \r\n"," for the specified mouse device.\r\n            This method is equivalent to ":" 对于指定的鼠标设备。\r\n            这个方法相当于\r\n","\r\n            Original was GL_MIPMAP = 0x8293\r\n            ":"\r\n            原来是 GL_MIPMAP = 0x8293\r\n            \r\n","\r\n            Original was GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203\r\n            ":"\r\n            原来是 GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0\r\n            \r\n"," is a game pad.\r\n            ":" 是一个游戏手柄。\r\n            \r\n","\r\n            Returns a copy of this Matrix3 without scale.\r\n            ":"\r\n            返回此 Matrix3 的副本，没有缩放。\r\n            \r\n"," \r\n            Specifies the number of shader object handles present in shaders.\r\n            ":" \r\n            指定着色器中存在的着色器对象句柄数。\r\n            \r\n","\r\n            Original was GL_IMAGE_BUFFER_EXT = 0x9051\r\n            ":"\r\n            原来是 GL_IMAGE_BUFFER_EXT = 0x9051\r\n            \r\n","[requires: v3.0]\r\n            Test whether a capability is enabled\r\n            ":"[要求：v3.0]\r\n            测试一个能力是否开启\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_OES = 0x8513\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_OES = 0x8513\r\n            \r\n","\r\n            Original was GL_PIXEL_PACK_BUFFER_ARB = 0x88EB\r\n            ":"\r\n            原来是 GL_PIXEL_PACK_BUFFER_ARB = 0x88EB\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146\r\n            \r\n","\r\n            Original was GL_REG_12_ATI = 0x892D\r\n            ":"\r\n            原来是 GL_REG_12_ATI = 0x892D\r\n            \r\n","[length: 0]":"[长度：0]\r\n","[requires: SGIS_texture4D]":"[要求：SGIS_texture4D]\r\n"," \r\n            Specify the target of the operation. target must be Texture2DMultisampleArray or ProxyTexture2DMultisampleMultisample.\r\n            ":" \r\n            指定操作的目标。目标必须是 Texture2DMultisampleArray 或 ProxyTexture2DMultisampleMultisample。\r\n            \r\n","[requires: v3.3 or ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]":"[要求：v3.3 或 ARB_vertex_type_2_10_10_10_rev|VERSION_3_3]\r\n","\r\n            Original was GL_MaxRenderbufferSize = 0X84e8\r\n            ":"\r\n            原来是 GL_MaxRenderbufferSize = 0X84e8\r\n            \r\n","[requires: AMD_sample_positions]":"[需要：AMD_sample_positions]\r\n","\r\n            Used in GL.Sgix.FragmentLightModel\r\n            ":"\r\n            用于 GL.Sgix.FragmentLightModel\r\n            \r\n","\r\n            Original was GL_MATRIX2_ARB = 0x88C2\r\n            ":"\r\n            原来是 GL_MATRIX2_ARB = 0x88C2\r\n            \r\n","\r\n            Original was GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142\r\n            ":"\r\n            原来是 GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142\r\n            \r\n","Returns the hash code for this KeyboardDevice.":"返回此 KeyboardDevice 的哈希码。\r\n","\r\n            Original was GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA\r\n            \r\n","\r\n            Used in GL.GetLight, GL.Light and 1 other function\r\n            ":"\r\n            用于 GL.GetLight、GL.Light 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_CND_ATI = 0x896A\r\n            ":"\r\n            原来是 GL_CND_ATI = 0x896A\r\n            \r\n","\r\n            If set, the mouse button click does not activate the other window.\r\n            ":"\r\n            如果设置，则单击鼠标按钮不会激活其他窗口。\r\n            \r\n","\r\n            Original was GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048\r\n            ":"\r\n            原来是 GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB\r\n            \r\n","\r\n            Original was GL_MODELVIEW29_ARB = 0x873D\r\n            ":"\r\n            原来是 GL_MODELVIEW29_ARB = 0x873D\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910D\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910D\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB\r\n            \r\n","[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]\r\n            Query the name of an active uniform\r\n            ":"[要求：v3.1 或 ARB_uniform_buffer_object|VERSION_3_1]\r\n            查询现役制服名称\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGB = 0x84ED\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGB = 0x84ED\r\n            \r\n"," \r\n            Specifies a name that will be pushed onto the name stack.\r\n            ":" \r\n            指定将被压入名称堆栈的名称。\r\n            \r\n","\r\n            Original was GL_TEXTURE_MAG_FILTER = 0x2800\r\n            ":"\r\n            原来是 GL_TEXTURE_MAG_FILTER = 0x2800\r\n            \r\n","[requires: v1.3][deprecated: v3.2]\r\n            Select active texture unit\r\n            ":"[要求：v1.3][弃用：v3.2]\r\n            选择活动纹理单元\r\n            \r\n","\r\n            Makes the GraphicsContext current on the calling thread.\r\n            ":"\r\n            使 GraphicsContext 在调用线程上处于当前状态。\r\n            \r\n","\r\n            Original was GL_SHADER_OPERATION_NV = 0x86DF\r\n            ":"\r\n            原来是 GL_SHADER_OPERATION_NV = 0x86DF\r\n            \r\n","[requires: NV_vertex_attrib_integer_64bit]":"[要求：NV_vertex_attrib_integer_64bit]\r\n"," \r\n            specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.\r\n            ":" \r\n            指定 alpha 混合方程式，源颜色和目标颜色的 alpha 分量如何组合。它必须是 FuncAdd、FuncSubtract、FuncReverseSubtract、Min、Max。\r\n            \r\n","\r\n            Original was GL_CLAMP_TO_BORDER = 0x812D\r\n            ":"\r\n            原来是 GL_CLAMP_TO_BORDER = 0x812D\r\n            \r\n","[length: count*12]":"[长度：计数*12]\r\n","\r\n            Original was GL_TEXTURE_GEN_MODE_OES = 0x2500\r\n            ":"\r\n            原来是 GL_TEXTURE_GEN_MODE_OES = 0x2500\r\n            \r\n"," \r\n            Specify the window coordinates of the left corner of the row of pixels to be copied.\r\n            ":" \r\n            指定要复制的像素行左角的窗口坐标。\r\n            \r\n","\r\n            Compares two ContextHandles for equality.\r\n            ":"\r\n            比较两个 ContextHandle 是否相等。\r\n            \r\n","\r\n            Original was GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A\r\n            ":"\r\n            原来是 GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A\r\n            \r\n","\r\n            Original was GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E\r\n            ":"\r\n            原来是 GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E\r\n            \r\n","\r\n            Original was GL_RGBA16_SNORM = 0x8F9B\r\n            ":"\r\n            原来是 GL_RGBA16_SNORM = 0x8F9B\r\n            \r\n"," \r\n            Specifies the maximum number of basic machine units that may be written to params by the function.\r\n            ":" \r\n            指定函数可以写入参数的最大基本机器单元数。\r\n            \r\n"," \r\n            Specify the fog distance.\r\n            ":" \r\n            指定雾距离。\r\n            \r\n","\r\n            Original was GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED\r\n            ":"\r\n            原来是 GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED\r\n            \r\n","[requires: v1.3]\r\n            Specify a three-dimensional texture image in a compressed format\r\n            ":"[要求：v1.3]\r\n            以压缩格式指定三维纹理图像\r\n            \r\n","\r\n            If the function succeeds, the return value is nonzero and the \r\n            function fills in the members of the specified IconInfo structure.\r\n            \r\n            If the function fails, the return value is zero. To get extended \r\n            error information, call Marshal.GetLastWin32Error.\r\n            ":"\r\n            如果函数成功，则返回值为非零，并且\r\n            函数填充指定 IconInfo 结构的成员。\r\n            \r\n            如果函数失败，则返回值为零。得到扩展\r\n            错误信息，调用Marshal.GetLastWin32Error。\r\n            \r\n","\r\n            Query the underlying platform pointer / handle for an EGLSurface \r\n            created with CreateSurface.\r\n            ":"\r\n            查询 EGLSurface 的底层平台指针/句柄\r\n            使用 CreateSurface 创建。\r\n            \r\n","\r\n            Original was GL_CURRENT_QUERY = 0x8865\r\n            ":"\r\n            原来是 GL_CURRENT_QUERY = 0x8865\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2\r\n            \r\n","\r\n            Original was GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D\r\n            ":"\r\n            原来是 GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector4 with the X, Z, W, and Y components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 X、Z、W 和 Y 组件的 OpenTK.Vector4。\r\n            \r\n"," \r\n            Specifies the handle of the program object to be validated.\r\n            ":" \r\n            指定要验证的程序对象的句柄。\r\n            \r\n","\r\n            Original was GL_COUNTER_RANGE_AMD = 0x8BC1\r\n            ":"\r\n            原来是 GL_COUNTER_RANGE_AMD = 0x8BC1\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80\r\n            \r\n","\r\n            Original was GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74\r\n            ":"\r\n            原来是 GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74\r\n            \r\n","\r\n            Original was GL_RG32UI = 0x823C\r\n            ":"\r\n            原来是 GL_RG32UI = 0x823C\r\n            \r\n","\r\n            Original was GL_Nearest = 0X2600\r\n            ":"\r\n            原来是 GL_Nearest = 0X2600\r\n            \r\n","\r\n            Original was GL_Replace = 0X1e01\r\n            ":"\r\n            原来是 GL_Replace = 0X1e01\r\n            \r\n","\r\n            Original was GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127\r\n            ":"\r\n            原来是 GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127\r\n            \r\n"," \r\n            Specifies a binding to which the target buffer is bound.\r\n            ":" \r\n            指定目标缓冲区绑定到的绑定。\r\n            \r\n","[requires: ARB_shader_objects]\r\n            Returns the location of a uniform variable\r\n            ":"[需要：ARB_shader_objects]\r\n            返回统一变量的位置\r\n            \r\n","[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]\r\n            Set the active program object for a program pipeline object\r\n            ":"[要求：v4.1 或 ARB_separate_shader_objects|VERSION_4_1]\r\n            为程序管道对象设置活动程序对象\r\n            \r\n","\r\n            Original was GL_RGB = 0X1907\r\n            ":"\r\n            原来是 GL_RGB = 0X1907\r\n            \r\n","\r\n            Used in GL.Amd.TessellationMode\r\n            ":"\r\n            用于 GL.Amd.TessellationMode\r\n            \r\n","\r\n            Original was GL_UNPACK_ROW_LENGTH = 0x0CF2\r\n            ":"原来是 GL_UNPACK_ROW_LENGTH = 0x0CF2\r\n            \r\n","Pointer to the data that comes from the RawInput structure. This depends on the value of uiCommand. If Data is NULL, the required size of the buffer is returned in Size.":"指向来自 RawInput 结构的数据的指针。这取决于 uiCommand 的值。如果 Data 为 NULL，则在 Size 中返回所需的缓冲区大小。\r\n","\r\n            Original was GL_SRC2_RGB = 0x8582\r\n            ":"\r\n            原来是 GL_SRC2_RGB = 0x8582\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905\r\n            \r\n","\r\n            Original was GL_INDEX_ARRAY_TYPE_EXT = 0x8085\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_TYPE_EXT = 0x8085\r\n            \r\n","\r\n            Retrieves high resolution points. Points can range from zero to \r\n            65,535 (0xFFFF) in both x and y coordinates. This is the resolution \r\n            provided by absolute coordinate pointing devices such as drawing \r\n            tablets.\r\n            ":"\r\n            检索高分辨率点。点的范围可以从零到\r\n            x 和 y 坐标均为 65,535 (0xFFFF)。这是决议\r\n            由绘图等绝对坐标定位设备提供\r\n            平板电脑。\r\n            \r\n"," \r\n            Specify a linear mapping of , as presented to glEvalCoord2, to v hat, one of the two variables that are evaluated by the equations specified by this command. Initially, v1 is 0 and v2 is 1.\r\n            ":" \r\n            指定 的线性映射，如提供给 glEvalCoord2，到 v hat，由此命令指定的方程式评估的两个变量之一。最初，v1 为 0，v2 为 1。\r\n            \r\n","\r\n            Original was GL_MaxVertexUniformVectors = 0X8dfb\r\n            ":"\r\n            原来是 GL_MaxVertexUniformVectors = 0X8dfb\r\n            \r\n","\r\n            Original was GL_GREEN_BITS = 0x0D53\r\n            ":"\r\n            原来是 GL_GREEN_BITS = 0x0D53\r\n            \r\n","\r\n            Original was GL_NUM_EXTENSIONS = 0x821D\r\n            ":"\r\n            原来是 GL_NUM_EXTENSIONS = 0x821D\r\n            \r\n","The root window for screen.":"屏幕的根窗口。\r\n","\r\n            Original was GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF\r\n            ":"\r\n            原来是 GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF\r\n            \r\n","\r\n            Original was GL_CLAMP_FRAGMENT_COLOR = 0x891B\r\n            ":"\r\n            原来是 GL_CLAMP_FRAGMENT_COLOR = 0x891B\r\n            \r\n","\r\n            Used in GL.Arb.CompressedTexImage1D, GL.Arb.CompressedTexImage2D and 45 other functions\r\n            ":"\r\n            用于 GL.Arb.CompressedTexImage1D、GL.Arb.CompressedTexImage2D 和 45 个其他函数\r\n            \r\n","\r\n            Original was GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809\r\n            \r\n","\r\n            Used in GL.Ext.GetVertexAttribL, GL.Ext.VertexArrayVertexAttribLOffset and 1 other function\r\n            ":"\r\n            用于 GL.Ext.GetVertexAttribL、GL.Ext.VertexArrayVertexAttribLOffset 和 1 个其他函数\r\n            \r\n","\r\n            Original was GL_MODELVIEW5_ARB = 0x8725\r\n            ":"\r\n            原来是 GL_MODELVIEW5_ARB = 0x8725\r\n            \r\n","\r\n            Enumerates all possible mouse buttons.\r\n            ":"\r\n            枚举所有可能的鼠标按钮。\r\n            \r\n","The resulting Matrix3d instance.":"生成的 Matrix3d 实例。\r\n","\r\n            If Data is NULL and the function is successful, the return value is zero.\r\n            If Data is not NULL and the function is successful, the return value is the number\r\n            of RawInput structures written to Data.\r\n            If an error occurs, the return value is (UINT)-1. Call GetLastError for the error code.\r\n            ":"\r\n            如果数据为 NULL 且函数成功，则返回值为零。\r\n            如果Data不为NULL且函数成功，则返回值为数字\r\n            写入数据的 RawInput 结构。\r\n            如果发生错误，返回值为 (UINT)-1。为错误代码调用 GetLastError。\r\n            \r\n","The instance to compare two.":"要比较两个的实例。\r\n","\r\n            Original was GL_NORMAL_MAP_NV = 0x8511\r\n            ":"\r\n            原来是 GL_NORMAL_MAP_NV = 0x8511\r\n            \r\n","\r\n            Original was GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC\r\n            ":"\r\n            原来是 GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC\r\n            \r\n","\r\n            Original was GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F\r\n            ":"\r\n            原来是 GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F\r\n            \r\n","Returns the minimum number of KeyCodes":"返回最少数量的 KeyCodes\r\n","\r\n            Original was GL_WEIGHT_ARRAY_OES = 0x86AD\r\n            ":"\r\n            原来是 GL_WEIGHT_ARRAY_OES = 0x86AD\r\n            \r\n","\r\n            Original was GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D\r\n            ":"\r\n            原来是 GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D\r\n            \r\n","The backspace key (equivalent to BackSpace).":"退格键（相当于 BackSpace）。\r\n","\r\n            Original was GL_MAX_PROGRAM_INSTRUCTIONS = 0x88A1\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_INSTRUCTIONS = 0x88A1\r\n            \r\n","\r\n            Original was GL_TEXTURE22 = 0x84D6\r\n            ":"\r\n            原来是 GL_TEXTURE22 = 0x84D6\r\n            \r\n","\r\n            Original was GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2\r\n            ":"\r\n            原来是 GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2\r\n            \r\n"," \r\n            The number of debug messages to retrieve from the log.\r\n            ":" \r\n            要从日志中检索的调试消息数。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT11_NV = 0x8CEB\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT11_NV = 0x8CEB\r\n            \r\n","[requires: v1.0]\r\n            Define front- and back-facing polygons\r\n            ":"[要求：v1.0]\r\n            定义正面和背面的多边形\r\n            \r\n"," has\r\n            a right shoulder button.\r\n            ":" 有\r\n            一个右肩按钮。\r\n            \r\n","\r\n            Original was GL_GUILTY_CONTEXT_RESET_ARB = 0x8253\r\n            ":"\r\n            原来是 GL_GUILTY_CONTEXT_RESET_ARB = 0x8253\r\n            \r\n","\r\n            Original was GL_PIXEL_TILE_WIDTH_SGIX = 0x8140\r\n            ":"\r\n            原来是 GL_PIXEL_TILE_WIDTH_SGIX = 0x8140\r\n            \r\n","\r\n            Original was GL_FramebufferAttachmentObjectName = 0X8cd1\r\n            ":"\r\n            原来是 GL_FramebufferAttachmentObjectName = 0X8cd1\r\n            \r\n","\r\n            Original was GL_LUMINANCE16_EXT = 0x8042\r\n            ":"\r\n            原来是 GL_LUMINANCE16_EXT = 0x8042\r\n            \r\n","\r\n            Original was GL_SAMPLE_MASK_INVERT_EXT = 0x80AB\r\n            ":"\r\n            原来是 GL_SAMPLE_MASK_INVERT_EXT = 0x80AB\r\n            \r\n","\r\n            Original was GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF\r\n            ":"\r\n            原来是 GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_BIAS_SGI = 0x80D7\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_BIAS_SGI = 0x80D7\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E\r\n            \r\n"," \r\n            Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.\r\n            ":" \r\n            指定像素数据的格式。接受以下符号值：Red、Rg、Rgb、Bgr、Rgba、DepthComponent 和 StencilIndex。\r\n            \r\n","The twentieth button of the JoystickDevice.":"JoystickDevice 的第二十个按钮。\r\n","\r\n            Original was GL_ALPHA = 0x1906\r\n            ":"\r\n            原来是 GL_ALPHA = 0x1906\r\n            \r\n"," \r\n            The number of entries in the color lookup table specified by data.\r\n            ":" \r\n            数据指定的颜色查找表中的条目数。\r\n            \r\n","\r\n            Used in GL.BindFramebuffer, GL.CheckFramebufferStatus and 12 other functions\r\n            ":"\r\n            用于GL.BindFramebuffer、GL.CheckFramebufferStatus等12个函数\r\n            \r\n"," \r\n            The color table target. Must be ColorTable, PostConvolutionColorTable, or PostColorMatrixColorTable.\r\n            ":" \r\n            颜色表目标。必须是 ColorTable、PostConvolutionColorTable 或 PostColorMatrixColorTable。\r\n            \r\n","[length: buf,length] \r\n            The address of a character array containing the message to insert.\r\n            ":"[长度：缓冲区，长度]\r\n            包含要插入的消息的字符数组的地址。\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC\r\n            \r\n"," structure describing the\r\n            state of the ":"描述的结构\r\n            的状态\r\n","[requires: v1.0]\r\n            Render primitives from array data\r\n            ":"[要求：v1.0]\r\n            从数组数据渲染图元\r\n            \r\n"," \r\n            Specifies the texture target of the active texture unit to which the texture object is bound whose mipmaps will be generated.  Must be one of the following symbolic constants: Texture2D or TextureCubeMap.\r\n            ":"指定纹理对象绑定到的活动纹理单元的纹理目标，其纹理对象将被生成。必须是以下符号常量之一：Texture2D 或 TextureCubeMap。\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23\r\n            ":"原来是 GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065\r\n            \r\n"," \r\n            The depth of the region to be cleared.\r\n            ":" \r\n            要清除的区域的深度。\r\n            \r\n","\r\n            Original was GL_IMAGE_BINDING_LAYERED = 0x8F3C\r\n            ":"\r\n            原来是 GL_IMAGE_BINDING_LAYERED = 0x8F3C\r\n            \r\n","\r\n            Original was GL_PARALLEL_ARRAYS_INTEL = 0x83F4\r\n            ":"\r\n            原来是 GL_PARALLEL_ARRAYS_INTEL = 0x83F4\r\n            \r\n","Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).":"逆时针旋转的弧度角（沿给定轴的方向看）。\r\n","\r\n            Original was GL_DRAW_BUFFER2_EXT = 0x8827\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER2_EXT = 0x8827\r\n            \r\n","\r\n            Original was GL_OES_mapbuffer = 1\r\n            ":"\r\n            原来是 GL_OES_mapbuffer = 1\r\n            \r\n","[requires: v1.5]\r\n            Map a buffer object's data store\r\n            ":"[要求：v1.5]\r\n            映射缓冲区对象的数据存储\r\n            \r\n","[requires: v2.0]":"[要求：v2.0]\r\n","\r\n            A mouse-button message (WM_LBUTTONUP, WM_RBUTTONDOWN, and so on).\r\n            ":"\r\n            鼠标按钮消息（WM_LBUTTONUP、WM_RBUTTONDOWN 等）。\r\n            \r\n","\r\n            Releases all non-managed resources belonging to this NativeWindow.\r\n            ":"\r\n            释放属于此 NativeWindow 的所有非托管资源。\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5\r\n            \r\n"," \r\n            Specify the target of the operation. target must be one of Texture3D, or Texture2DArray.\r\n            ":" \r\n            指定操作的目标。 target 必须是 Texture3D 或 Texture2DArray 之一。\r\n            \r\n","[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]\r\n            Query information about an active uniform block\r\n            ":"[要求：v3.1 或 ARB_uniform_buffer_object|VERSION_3_1]\r\n            查询活动统一块的信息\r\n            \r\n","\r\n            Returns a System.String that represents the current Matrix2x3d.\r\n            ":"\r\n            返回表示当前 Matrix2x3d 的 System.String。\r\n            \r\n","\r\n            Original was GL_PRIMARY_COLOR_ARB = 0x8577\r\n            ":"\r\n            原来是 GL_PRIMARY_COLOR_ARB = 0x8577\r\n            \r\n"," \r\n            Specify a linear mapping of , as presented to glEvalCoord2, to u hat, one of the two variables that are evaluated by the equations specified by this command. Initially, u1 is 0 and u2 is 1.\r\n            ":" \r\n            指定 的线性映射，如提供给 glEvalCoord2 的那样，到 u hat，由此命令指定的方程式评估的两个变量之一。最初，u1 为 0，u2 为 1。\r\n            \r\n","\r\n            Original was GL_DEPTH_CLAMP_NV = 0x864F\r\n            ":"\r\n            原来是 GL_DEPTH_CLAMP_NV = 0x864F\r\n            \r\n","\r\n            Original was GL_OP_CLAMP_EXT = 0x878E\r\n            ":"\r\n            原来是 GL_OP_CLAMP_EXT = 0x878E\r\n            \r\n","[requires: ARB_texture_compression]\r\n            Specify a two-dimensional texture image in a compressed format\r\n            ":"[需要：ARB_texture_compression]\r\n            以压缩格式指定二维纹理图像\r\n            \r\n","\r\n            Original was GL_PLUS_CLAMPED_NV = 0x92B1\r\n            ":"\r\n            原来是 GL_PLUS_CLAMPED_NV = 0x92B1\r\n            \r\n"," \r\n            Specifies the target of the operation. target must be Texture2DMultisampleArray or ProxyTexture2DMultisampleArray.\r\n            ":" \r\n            指定操作的目标。目标必须是 Texture2DMultisampleArray 或 ProxyTexture2DMultisampleArray。\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT24_ARB = 0x81A6\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT24_ARB = 0x81A6\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA16F_EXT = 0x881F\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA16F_EXT = 0x881F\r\n            \r\n","[requires: ARB_debug_output]\r\n            Specify a callback to receive debugging messages from the GL\r\n            ":"[需要：ARB_debug_output]\r\n            指定回调以接收来自 GL 的调试消息\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 0x93E6\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 0x93E6\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E\r\n            \r\n"," \r\n            Specifies a texture coordinate. Must be S, T, R, or Q.\r\n            ":" \r\n            指定纹理坐标。必须是 S、T、R 或 Q。\r\n            \r\n","\r\n            Original was GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF\r\n            ":"\r\n            原来是 GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454\r\n            \r\n","[length: bufsize] \r\n            Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform.\r\n            ":"[长度：bufsize]\r\n            指定缓冲区的地址，该缓冲区将接收指定着色器子例程 uniform 的名称。\r\n            \r\n","[requires: OES_texture_storage_multisample_2d_array]\r\n            Specify storage for a two-dimensional multisample array texture\r\n            ":"[要求：OES_texture_storage_multisample_2d_array]\r\n            为二维多样本数组纹理指定存储\r\n            \r\n","\r\n            Original was GL_TEXTURE_STENCIL_SIZE = 0x88F1\r\n            ":"\r\n            原来是 GL_TEXTURE_STENCIL_SIZE = 0x88F1\r\n            \r\n","[requires: v1.1]\r\n            Determine if a name corresponds to a texture\r\n            ":"[要求：v1.1]\r\n            确定名称是否对应于纹理\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF\r\n            \r\n","\r\n            Get the conjugate of the given quaternion\r\n            ":"\r\n            获取给定四元数的共轭\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211\r\n            \r\n","\r\n            Original was GL_GREEN_MIN_CLAMP_INGR = 0x8561\r\n            ":"\r\n            原来是 GL_GREEN_MIN_CLAMP_INGR = 0x8561\r\n            \r\n","\r\n            Original was GL_LineLoop = 0X0002\r\n            ":"\r\n            原来是 GL_LineLoop = 0X0002\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27\r\n            \r\n","\r\n            Gets or sets the value at row 3, column 3 of this instance.\r\n            ":"\r\n            获取或设置此实例第 3 行第 3 列的值。\r\n            \r\n","\r\n            Original was GL_VERTEX_SUBROUTINE = 0x92E8\r\n            ":"\r\n            原来是 GL_VERTEX_SUBROUTINE = 0x92E8\r\n            \r\n"," \r\n            Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.\r\n            ":" \r\n            指定帧缓冲区目标。 target 必须是 DrawFramebuffer、ReadFramebuffer 或 Framebuffer。 Framebuffer 相当于 DrawFramebuffer。\r\n            \r\n","\r\n            Used in GL.Sgix.SpriteParameter\r\n            ":"\r\n            在 GL.Sgix.SpriteParameter 中使用\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Replace the current matrix with the specified matrix\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            用指定矩阵替换当前矩阵\r\n            \r\n","\r\n            Original was GL_TEXTURE_WRAP_R_OES = 0x8072\r\n            ":"\r\n            原来是 GL_TEXTURE_WRAP_R_OES = 0x8072\r\n            \r\n","Divide this instance by a scalar.":"将此实例除以标量。\r\n","[length: format,type,width] \r\n            Specifies a pointer to the image data in memory.\r\n            ":"[长度：格式，类型，宽度]\r\n            指定指向内存中图像数据的指针。\r\n            \r\n","\r\n            Used in GL.Ext.ActiveStencilFace\r\n            ":"\r\n            在 GL.Ext.ActiveStencilFace 中使用\r\n            \r\n","\r\n            Gets a System.Boolean indicating whether the JoystickButton with the specified index is pressed.\r\n            ":"\r\n            获取一个 System.Boolean，指示是否按下具有指定索引的 JoystickButton。\r\n            \r\n","\r\n            Original was GL_TEXCOORD1_BIT_PGI = 0x10000000\r\n            ":"\r\n            原来是 GL_TEXCOORD1_BIT_PGI = 0x10000000\r\n            \r\n","\r\n            Size, in bytes, of a RawInputDevice structure.\r\n            ":"\r\n            RawInputDevice 结构的大小（以字节为单位）。\r\n            \r\n","\r\n            Original was GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2\r\n            ":"\r\n            原来是 GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2\r\n            \r\n","[requires: v1.0]\r\n            Multiply the current matrix by a general scaling matrix\r\n            ":"[要求：v1.0]\r\n            将当前矩阵乘以通用缩放矩阵\r\n            \r\n","\r\n            Original was GL_NEXT_BUFFER_NV = -2\r\n            ":"\r\n            原来是 GL_NEXT_BUFFER_NV = -2\r\n            \r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B\r\n            \r\n","[length: n] \r\n            Specifies an array in which the texture residence status is returned. The residence status of a texture named by an element of textures is returned in the corresponding element of residences.\r\n            ":"[长度：n]\r\n            指定返回纹理驻留状态的数组。以textures元素命名的texture的驻留状态返回对应的residences元素。\r\n            \r\n","\r\n            Original was GL_RGB_FLOAT32_APPLE = 0x8815\r\n            ":"\r\n            原来是 GL_RGB_FLOAT32_APPLE = 0x8815\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Associates a generic vertex attribute index with a named attribute variable\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            将通用顶点属性索引与命名属性变量相关联\r\n            \r\n"," which describes this instance.\r\n            ":" 描述了这个实例。\r\n            \r\n","\r\n            Original was GL_ROUND_NV = 0x90A4\r\n            ":"\r\n            原来是 GL_ROUND_NV = 0x90A4\r\n            \r\n","\r\n            Original was GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3\r\n            ":"\r\n            原来是 GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3\r\n            \r\n","\r\n            Defines the raw input data coming from the specified Human Interface Device (HID).\r\n            ":"\r\n            定义来自指定人机接口设备 (HID) 的原始输入数据。\r\n            \r\n","\r\n            Original was GL_PACK_ALIGNMENT = 0x0D05\r\n            ":"\r\n            原来是 GL_PACK_ALIGNMENT = 0x0D05\r\n            \r\n","\r\n            True, if the function is implemented and the version number of the info struct is valid;\r\n            false, otherwise.\r\n            ":"\r\n            True，如果函数被实现并且信息结构的版本号有效；\r\n            假的，否则。\r\n            \r\n","\r\n            Original was GL_MAX_PATCH_VERTICES_EXT = 0x8E7D\r\n            ":"\r\n            原来是 GL_MAX_PATCH_VERTICES_EXT = 0x8E7D\r\n            \r\n","\r\n            Original was GL_DEBUG_CALLBACK_FUNCTION = 0x8244\r\n            ":"原来是 GL_DEBUG_CALLBACK_FUNCTION = 0x8244\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK = 0x8E22\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK = 0x8E22\r\n            \r\n","[requires: EXT_draw_buffers2]":"[需要：EXT_draw_buffers2]\r\n","\r\n            Original was GL_OP_DOT3_EXT = 0x8784\r\n            ":"\r\n            原来是 GL_OP_DOT3_EXT = 0x8784\r\n            \r\n","\r\n            Original was GL_MATRIX7 = 0x88C7\r\n            ":"\r\n            原来是 GL_MATRIX7 = 0x88C7\r\n            \r\n"," \r\n            Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.\r\n            ":" \r\n            指定远裁剪平面到窗口坐标的映射。初始值为 1。\r\n            \r\n","\r\n            Original was GL_MaxCubeMapTextureSize = 0X851c\r\n            ":"\r\n            原来是 GL_MaxCubeMapTextureSize = 0X851c\r\n            \r\n","[requires: EXT_direct_state_access]\r\n            Specify the value of a uniform variable for a specified program object\r\n            ":"[需要：EXT_direct_state_access]\r\n            为指定的程序对象指定统一变量的值\r\n            \r\n","\r\n            Original was GL_RGBA4 = 0X8056\r\n            ":"\r\n            原来是 GL_RGBA4 = 0X8056\r\n            \r\n","\r\n            Original was GL_FRAGMENT_NORMAL_EXT = 0x834A\r\n            ":"\r\n            原来是 GL_FRAGMENT_NORMAL_EXT = 0x834A\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Cause a material color to track the current color\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            使材质颜色跟踪当前颜色\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Multiply the current matrix by a rotation matrix\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            将当前矩阵乘以旋转矩阵\r\n            \r\n","\r\n            Gets or sets a double representing the target render period, in seconds.\r\n            ":"\r\n            获取或设置一个表示目标渲染周期的双精度数，以秒为单位。\r\n            \r\n","\r\n            Original was GL_RGBA4_EXT = 0x8056\r\n            ":"\r\n            原来是 GL_RGBA4_EXT = 0x8056\r\n            \r\n"," \r\n            The index storage block binding to associate with the specified storage block.\r\n            ":" \r\n            索引存储块绑定以与指定的存储块相关联。\r\n            \r\n","\r\n            Original was GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED\r\n            ":"\r\n            原来是 GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED\r\n            \r\n","\r\n            Original was GL_TEXTURE_SWIZZLE_A = 0x8E45\r\n            ":"\r\n            原来是 GL_TEXTURE_SWIZZLE_A = 0x8E45\r\n            \r\n"," \r\n            Points to a null terminated string containing the name of the uniform variable whose location is to be queried.\r\n            ":" \r\n            指向一个以空字符结尾的字符串，该字符串包含要查询其位置的统一变量的名称。\r\n            \r\n","[requires: v3.2 or ARB_provoking_vertex|VERSION_3_2]\r\n            Specifiy the vertex to be used as the source of data for flat shaded varyings\r\n            ":"[要求：v3.2 或 ARB_provoking_vertex|VERSION_3_2]\r\n            指定要用作平面着色变量数据源的顶点\r\n            \r\n","\r\n            Original was GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1\r\n            ":"\r\n            原来是 GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1\r\n            \r\n"," \r\n            The offset, in basic machine units into the buffer object's data store at which to start filling.\r\n            ":" \r\n            以基本机器单位表示的缓冲区对象数据存储中开始填充的偏移量。\r\n            \r\n","\r\n            Prevents the window from receiving the WM_WINDOWPOSCHANGING message.\r\n            ":"\r\n            阻止窗口接收 WM_WINDOWPOSCHANGING 消息。\r\n            \r\n","\r\n            Indicates the type of messages found in the calling thread's message queue.\r\n            ":"\r\n            指示在调用线程的消息队列中找到的消息类型。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC\r\n            \r\n","\r\n            Specifies a symbolic constant indicating a GL capability.\r\n            ":"\r\n            指定表示 GL 功能的符号常量。\r\n            \r\n","\r\n            Original was GL_RGBA32F = 0x8814\r\n            ":"\r\n            原来是 GL_RGBA32F = 0x8814\r\n            \r\n","\r\n            Original was GL_OP_NEGATE_EXT = 0x8783\r\n            ":"\r\n            原来是 GL_OP_NEGATE_EXT = 0x8783\r\n            \r\n","\r\n            Original was GL_READ_PIXEL_DATA_RANGE_NV = 0x8879\r\n            ":"\r\n            原来是 GL_READ_PIXEL_DATA_RANGE_NV = 0x8879\r\n            \r\n","\r\n            Original was GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6\r\n            ":"\r\n            原来是 GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6\r\n            \r\n","\r\n            Size, in bytes, of each HID input in bRawData.\r\n            ":"\r\n            bRawData 中每个 HID 输入的大小（以字节为单位）。\r\n            \r\n","\r\n            Indicates whether the current matrix is equal to another matrix.\r\n            ":"\r\n            指示当前矩阵是否等于另一个矩阵。\r\n            \r\n","\r\n            Constructs a new Vector4 from the given Vector2.\r\n            ":"\r\n            从给定的 Vector2 构造一个新的 Vector4。\r\n            \r\n","[length: 4] \r\n            Specifies the new value of the parameter specified by pname for program.\r\n            ":"[长度：4]\r\n            为程序指定由 pname 指定的参数的新值。\r\n            \r\n","\r\n            Specify the , , and coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).\r\n            ":"\r\n            指定新的当前法线的 、 和 坐标。当前法线的初始值是单位向量，(0, 0, 1)。\r\n            \r\n","\r\n            Original was GL_REPLACE_VALUE_AMD = 0x874B\r\n            ":"\r\n            原来是 GL_REPLACE_VALUE_AMD = 0x874B\r\n            \r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7\r\n            \r\n"," \r\n            Specifies the name of a texture.\r\n            ":" \r\n            指定纹理的名称。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]":"[要求：v3.0 或 ES_VERSION_3_0]\r\n","\r\n            Gets or sets the value at a specified row and column.\r\n            ":"\r\n            获取或设置指定行和列的值。\r\n            \r\n","\r\n            Original was GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197\r\n            ":"\r\n            原来是 GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197\r\n            \r\n","[length: count] \r\n            Specifies an array of string lengths.\r\n            ":"[长度：计数]\r\n            指定字符串长度数组。\r\n            \r\n"," \r\n            The type of the data whose address in memory is given by data.\r\n            ":" \r\n            数据的类型，其在内存中的地址由数据给出。\r\n            \r\n","\r\n            Original was GL_DEPTH_STENCIL_NV = 0x84F9\r\n            ":"\r\n            原来是 GL_DEPTH_STENCIL_NV = 0x84F9\r\n            \r\n","\r\n            The first hat of the Joystick device.\r\n            ":"\r\n            Joystick 设备的第一顶帽子。\r\n            \r\n"," \r\n            Specifies the renderbuffer target and must be Renderbuffer.\r\n            ":" \r\n            指定渲染缓冲区目标并且必须是渲染缓冲区。\r\n            \r\n","\r\n            Original was GL_Texture25 = 0X84d9\r\n            ":"\r\n            原来是 GL_Texture25 = 0X84d9\r\n            \r\n"," \r\n            The type of the pixel data in table. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            ":" \r\n            表中像素数据的类型。 Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_PORTABILITY = 0x824F\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_PORTABILITY = 0x824F\r\n            \r\n","\r\n            Original was GL_MediumInt = 0X8df4\r\n            ":"\r\n            原来是 GL_MediumInt = 0X8df4\r\n            \r\n","[length: 3] \r\n            Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).\r\n            ":"[长度：3]\r\n            指定新的当前法线的 、 和 坐标。当前法线的初始值是单位向量，(0, 0, 1)。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify the width of rasterized lines\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            指定栅格化线条的宽度\r\n            \r\n","\r\n            Specifies the x-coordinate of the lower-right corner of the rectangle.\r\n            ":"\r\n            指定矩形右下角的 x 坐标。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7\r\n            \r\n","\r\n            Original was GL_FLOAT_MAT3x4_NV = 0x8B68\r\n            ":"\r\n            原来是 GL_FLOAT_MAT3x4_NV = 0x8B68\r\n            \r\n","\r\n            Original was GL_SINGLE_COLOR = 0x81F9\r\n            ":"\r\n            原来是 GL_SINGLE_COLOR = 0x81F9\r\n            \r\n","\r\n            Original was GL_4_BYTES_NV = 0x1409\r\n            ":"\r\n            原来是 GL_4_BYTES_NV = 0x1409\r\n            \r\n","\r\n            Original was GL_PATH_STENCIL_FUNC_NV = 0x90B7\r\n            ":"\r\n            原来是 GL_PATH_STENCIL_FUNC_NV = 0x90B7\r\n            \r\n","\r\n            Original was GL_NUM_PROGRAM_BINARY_FORMATS_OES = 0x87FE\r\n            ":"\r\n            原来是 GL_NUM_PROGRAM_BINARY_FORMATS_OES = 0x87FE\r\n            \r\n","\r\n            Original was GL_VERTEX_STREAM7_ATI = 0x8773\r\n            ":"\r\n            原来是 GL_VERTEX_STREAM7_ATI = 0x8773\r\n            \r\n"," \r\n            Specifies the symbolic name of a query object target parameter. Must be CurrentQuery.\r\n            ":" \r\n            指定查询对象目标参数的符号名称。必须是当前查询。\r\n            \r\n","\r\n            Original was GL_BoolVec2 = 0X8b57\r\n            ":"\r\n            原来是 GL_BoolVec2 = 0X8b57\r\n            \r\n","\r\n            Gets an integer representing the number of buttons on this MouseDevice.\r\n            ":"\r\n            获取一个整数，表示此 MouseDevice 上的按钮数。\r\n            \r\n","\r\n            Original was GL_DEBUG_OUTPUT_KHR = 0x92E0\r\n            ":"\r\n            原来是 GL_DEBUG_OUTPUT_KHR = 0x92E0\r\n            \r\n","[length: id,type,stride]":"[长度：id，类型，步幅]\r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1\r\n            \r\n","\r\n            Original was GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144\r\n            ":"\r\n            原来是 GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144\r\n            \r\n","\r\n            Original was GL_MATRIX2 = 0x88C2\r\n            ":"\r\n            原来是 GL_MATRIX2 = 0x88C2\r\n            \r\n","\r\n            Original was GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316\r\n            ":"\r\n            原来是 GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Bind a named buffer object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            绑定命名缓冲区对象\r\n            \r\n","[requires: OES_texture_3D]\r\n            Specify a three-dimensional texture subimage in a compressed format\r\n            ":"[要求：OES_texture_3D]\r\n            以压缩格式指定三维纹理子图像\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247\r\n            \r\n","[requires: v1.0]\r\n            Define an array of texture coordinates\r\n            ":"[要求：v1.0]\r\n            定义一个纹理坐标数组\r\n            \r\n"," has\r\n            a big button. (also known as \"guide\" or \"home\" button).\r\n            ":" 有\r\n            一个大按钮。 （也称为“指南”或“主页”按钮）。\r\n            \r\n","\r\n            Number of buttons for the mouse.\r\n            ":"\r\n            鼠标按钮的数量。\r\n            \r\n"," \r\n            Specifies the reference value that incoming alpha values are compared to. This value is clamped to the range [0,1], where 0 represents the lowest possible alpha value and 1 the highest possible value. The initial reference value is 0.\r\n            ":" \r\n            指定与传入的 alpha 值进行比较的参考值。该值限制在 [0,1] 范围内，其中 0 表示可能的最低 alpha 值，1 表示可能的最高值。初始参考值为 0。\r\n            \r\n","\r\n            Occurs when a button is released.\r\n            ":"\r\n            释放按钮时发生。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2\r\n            \r\n","\r\n            Original was GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847\r\n            ":"\r\n            原来是 GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA\r\n            \r\n","\r\n            Original was GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857\r\n            ":"\r\n            原来是 GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857\r\n            \r\n","\r\n            Original was GL_PATH_INITIAL_END_CAP_NV = 0x9077\r\n            ":"\r\n            原来是 GL_PATH_INITIAL_END_CAP_NV = 0x9077\r\n            \r\n","[requires: v1.2]\r\n            Copy a three-dimensional texture subimage\r\n            ":"[要求：v1.2]\r\n            复制三维纹理子图像\r\n            \r\n","\r\n            Original was GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099\r\n            ":"\r\n            原来是 GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 0x8A54\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 0x8A54\r\n            \r\n","\r\n            Used in GL.DisableClientState, GL.EnableClientState and 4 other functions\r\n            ":"\r\n            用于GL.DisableClientState、GL.EnableClientState等4个函数\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER14_ATI = 0x8833\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER14_ATI = 0x8833\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F\r\n            \r\n","\r\n            Original was GL_NEGATIVE_ONE_TO_ONE = 0x935E\r\n            ":"\r\n            原来是 GL_NEGATIVE_ONE_TO_ONE = 0x935E\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0\r\n            \r\n"," \r\n            If True, all entries in the minmax table that are actually returned are reset to their initial values.  (Other entries are unaltered.) If False, the minmax table is unaltered.\r\n            ":" \r\n            如果为 True，则实际返回的 minmax 表中的所有条目都将重置为其初始值。 （其他条目未更改。）如果为 False，则 minmax 表未更改。\r\n            \r\n","Fourth item of the first row of the matrix.":"矩阵第一行的第四项。\r\n","\r\n            Reverses the rotation angle of this Quaterniond.\r\n            ":"\r\n            反转此 Quaterniond 的旋转角度。\r\n            \r\n","\r\n            The icon bitmask bitmap. If this structure defines a black and \r\n            white icon, this bitmask is formatted so that the upper half is \r\n            the icon AND bitmask and the lower half is the icon XOR bitmask. \r\n            Under this condition, the height should be an even multiple of \r\n            two. If this structure defines a color icon, this mask only \r\n            defines the AND bitmask of the icon.\r\n            ":"\r\n            图标位掩码位图。如果这个结构定义了一个黑色和\r\n            白色图标，此位掩码的格式设置为上半部分为\r\n            图标和位掩码，下半部分是图标 XOR 位掩码。\r\n            在这种情况下，高度应该是偶数倍\r\n            二。如果这个结构定义了一个颜色图标，这个掩码只\r\n            定义图标的 AND 位掩码。\r\n            \r\n","\r\n            Original was GL_TEXTURE_BORDER_COLOR_NV = 0x1004\r\n            ":"\r\n            原来是 GL_TEXTURE_BORDER_COLOR_NV = 0x1004\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B\r\n            \r\n","[requires: v4.4 or ARB_multi_bind|VERSION_4_4]\r\n            Bind one or more named textures to a sequence of consecutive texture units\r\n            ":"[要求：v4.4 或 ARB_multi_bind|VERSION_4_4]\r\n            将一个或多个命名纹理绑定到一系列连续的纹理单元\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E\r\n            \r\n","The keypad plus key (equivalent to KeypadAdd).":"小键盘加号键（相当于KeypadAdd）。\r\n","\r\n            Original was GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173\r\n            ":"\r\n            原来是 GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173\r\n            \r\n","\r\n            Original was GL_CON_29_ATI = 0x895E\r\n            ":"\r\n            原来是 GL_CON_29_ATI = 0x895E\r\n            \r\n","\r\n            Original was GL_QUERY_NO_WAIT_NV = 0x8E14\r\n            ":"\r\n            原来是 GL_QUERY_NO_WAIT_NV = 0x8E14\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E\r\n            \r\n","\r\n            Original was GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4\r\n            ":"\r\n            原来是 GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4\r\n            \r\n","\r\n            Original was GL_NAMED_STRING_LENGTH_ARB = 0x8DE9\r\n            ":"\r\n            原来是 GL_NAMED_STRING_LENGTH_ARB = 0x8DE9\r\n            \r\n","\r\n            Original was GL_InfoLogLength = 0X8b84\r\n            ":"\r\n            原来是 GL_InfoLogLength = 0X8b84\r\n            \r\n","\r\n            Original was GL_PRESERVE_ATI = 0x8762\r\n            ":"\r\n            原来是 GL_PRESERVE_ATI = 0x8762\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Bind a framebuffer to a framebuffer target\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            将帧缓冲区绑定到帧缓冲区目标\r\n            \r\n","\r\n            Original was GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF\r\n            ":"\r\n            原来是 GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF\r\n            \r\n"," \r\n            Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.\r\n            ":" \r\n            指定索引数组 uniformIndices 中的元素数量和成功返回时写入 params 的参数数量。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT3 = 0x8CE3\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT3 = 0x8CE3\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C\r\n            \r\n","\r\n            Original was GL_SWIZZLE_STQ_ATI = 0x8977\r\n            ":"\r\n            原来是 GL_SWIZZLE_STQ_ATI = 0x8977\r\n            \r\n","\r\n            Original was GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70\r\n            ":"\r\n            原来是 GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70\r\n            \r\n","\r\n            Original was GL_OR = 0x1507\r\n            ":"\r\n            原来是 GL_OR = 0x1507\r\n            \r\n","\r\n            Original was GL_LUMINANCE8UI_EXT = 0x8D80\r\n            ":"\r\n            原来是 GL_LUMINANCE8UI_EXT = 0x8D80\r\n            \r\n","\r\n            Query the underlying platform pointer / handle for this window's \r\n            default surface or IntPtr.Zero\r\n            ":"\r\n            查询此窗口的底层平台指针/句柄\r\n            默认表面或 IntPtr.Zero\r\n            \r\n","\r\n            Original was GL_SYNC_FLAGS_APPLE = 0x9115\r\n            ":"\r\n            原来是 GL_SYNC_FLAGS_APPLE = 0x9115\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Return the polygon stipple pattern\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            返回多边形点画图案\r\n            \r\n","\r\n            Original was GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88\r\n            ":"\r\n            原来是 GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675\r\n            \r\n","\r\n            Used in GL.Ingr.BlendFuncSeparate\r\n            ":"\r\n            在 GL.Ingr.BlendFuncSeparate 中使用\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B\r\n            \r\n","\r\n            Used in GL.FeedbackBuffer\r\n            ":"\r\n            在 GL.FeedbackBuffer 中使用\r\n            \r\n","\r\n            Original was GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197\r\n            ":"\r\n            原来是 GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197\r\n            \r\n","\r\n            The GameWindow class contains cross-platform methods to create and render on an OpenGL\r\n            window, handle input and load resources.\r\n            ":"\r\n            GameWindow 类包含在 OpenGL 上创建和渲染的跨平台方法\r\n            窗口，处理输入和加载资源。\r\n            \r\n","[length: format,type] \r\n            The address in memory of the data to be used to clear the specified region.\r\n            ":"[长度：格式，类型]\r\n            用于清除指定区域的数据在内存中的地址。\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPARE_SGIX = 0x819A\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPARE_SGIX = 0x819A\r\n            \r\n","[requires: EXT_transform_feedback]\r\n            Specify values to record in transform feedback buffers\r\n            ":"[需要：EXT_transform_feedback]\r\n            指定要记录在变换反馈缓冲区中的值\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B\r\n            \r\n","\r\n            The window has a fixed border. A window with a fixed border can only be resized programmatically.\r\n            ":"\r\n            窗口有一个固定的边框。具有固定边框的窗口只能通过编程方式调整大小。\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the Z, Y, and X components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Z、Y 和 X 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Specifies the data type of each color component in the array. Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.\r\n            ":"\r\n            指定数组中每个颜色分量的数据类型。接受符号常量 GL_BYTE、GL_UNSIGNED_BYTE、GL_SHORT、GL_UNSIGNED_SHORT、GL_INT、GL_UNSIGNED_INT、GL_FLOAT 和 GL_DOUBLE。初始值为 GL_FLOAT。\r\n            \r\n"," \r\n            The number of varying variables used for transform feedback.\r\n            ":" \r\n            用于变换反馈的可变变量的数量。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Returns the source code string from a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            从着色器对象返回源代码字符串\r\n            \r\n","The resulting Matrix3 instance.":"生成的 Matrix3 实例。\r\n","\r\n            Horizontal sync start\r\n            ":"\r\n            水平同步开始\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02\r\n            \r\n","\r\n            Original was GL_Texture13 = 0X84cd\r\n            ":"\r\n            原来是 GL_Texture13 = 0X84cd\r\n            \r\n","Constructs a new centered NativeWindow with the specified attributes.":"构造具有指定属性的新居中 NativeWindow。\r\n","[requires: v3.0]\r\n            Specify whether data read via glReadPixels should be clamped\r\n            ":"[要求：v3.0]\r\n            指定是否应限制通过 glReadPixels 读取的数据\r\n            \r\n","The index of the joystick to check.":"要检查的操纵杆索引。\r\n","[requires: EXT_multisample]":"[需要：EXT_multisample]\r\n","\r\n            Original was GL_SHADER_BINARY_FORMATS = 0x8DF8\r\n            ":"\r\n            原来是 GL_SHADER_BINARY_FORMATS = 0x8DF8\r\n            \r\n","[requires: v4.2 or ARB_shader_image_load_store|VERSION_4_2]\r\n            Defines a barrier ordering memory transactions\r\n            ":"[要求：v4.2 或 ARB_shader_image_load_store|VERSION_4_2]\r\n            定义排序内存事务的障碍\r\n            \r\n","\r\n            Original was GL_OUTPUT_COLOR0_EXT = 0x879B\r\n            ":"\r\n            原来是 GL_OUTPUT_COLOR0_EXT = 0x879B\r\n            \r\n","\r\n            Original was GL_TEXTURE_EXTERNAL_OES = 0x8D65\r\n            ":"\r\n            原来是 GL_TEXTURE_EXTERNAL_OES = 0x8D65\r\n            \r\n","[length: count] \r\n            Specifies the address of an array of names of existing buffer objects.\r\n            ":"[长度：计数]\r\n            指定现有缓冲区对象名称数组的地址。\r\n            \r\n","\r\n            Original was GL_OES_draw_texture = 1\r\n            ":"\r\n            原来是 GL_OES_draw_texture = 1\r\n            \r\n","\r\n            Original was GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402\r\n            ":"\r\n            原来是 GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278\r\n            \r\n","\r\n            Used in GL.NV.GetBufferParameter, GL.NV.GetInteger and 5 other functions\r\n            ":"\r\n            用于GL.NV.GetBufferParameter、GL.NV.GetInteger等5个函数\r\n            \r\n","uCode is a virtual-key code and is translated into a scan code. If it is a virtual-key code that does not distinguish between left- and right-hand keys, the left-hand scan code is returned. If there is no translation, the function returns 0.":"uCode是一个虚拟键码，被翻译成一个扫描码。如果是不区分左右键的虚拟键码，则返回左手扫码。如果没有翻译，函数返回 0。\r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 0x8CD4\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 0x8CD4\r\n            \r\n","\r\n            Original was GL_ACCUM_GREEN_BITS = 0x0D59\r\n            ":"\r\n            原来是 GL_ACCUM_GREEN_BITS = 0x0D59\r\n            \r\n","\r\n            Provides information about the underlying OS and runtime.\r\n            You must call ":"\r\n            提供有关底层操作系统和运行时的信息。\r\n            你必须打电话\r\n","\r\n            Used in GL.GetProgramBinary, GL.ProgramBinary and 1 other function\r\n            ":"\r\n            用于 GL.GetProgramBinary、GL.ProgramBinary 和其他 1 个函数\r\n            \r\n","[requires: v4.4 or ARB_multi_bind|VERSION_4_4]\r\n            Bind one or more named sampler objects to a sequence of consecutive sampler units\r\n            ":"[要求：v4.4 或 ARB_multi_bind|VERSION_4_4]\r\n            将一个或多个命名采样器对象绑定到一系列连续的采样器单元\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify a two-dimensional texture image\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            指定二维纹理图像\r\n            \r\n","[requires: ARB_bindless_texture]":"[需要：ARB_bindless_texture]\r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_BLUE_SIZE = 0x8273\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_BLUE_SIZE = 0x8273\r\n            \r\n","\r\n            Original was GL_LUMINANCE12 = 0x8041\r\n            ":"\r\n            原来是 GL_LUMINANCE12 = 0x8041\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX4_OES = 0x8D47\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX4_OES = 0x8D47\r\n            \r\n","\r\n            Original was GL_SAMPLE_COVERAGE_ARB = 0x80A0\r\n            ":"\r\n            原来是 GL_SAMPLE_COVERAGE_ARB = 0x80A0\r\n            \r\n","[length: count] \r\n            Specify the address of an array containing the viewport parameters.\r\n            ":"[长度：计数]\r\n            指定包含视口参数的数组的地址。\r\n            \r\n","[requires: AMD_gpu_shader_int64|NV_gpu_shader5]\r\n            Specify the value of a uniform variable for a specified program object\r\n            ":"[要求：AMD_gpu_shader_int64|NV_gpu_shader5]\r\n            为指定的程序对象指定统一变量的值\r\n            \r\n","[requires: v1.1][deprecated: v3.2]\r\n            Define an array of texture coordinates\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            定义一个纹理坐标数组\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344\r\n            \r\n","\r\n            Original was GL_COMBINER0_NV = 0x8550\r\n            ":"\r\n            原来是 GL_COMBINER0_NV = 0x8550\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_UNITS = 0x84E2\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_UNITS = 0x84E2\r\n            \r\n","\r\n            Original was GL_IUI_V3F_EXT = 0x81AE\r\n            ":"\r\n            原来是 GL_IUI_V3F_EXT = 0x81AE\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8\r\n            \r\n","\r\n            Original was GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3\r\n            ":"\r\n            原来是 GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3\r\n            \r\n","\r\n            Original was GL_SAMPLES = 0x80A9\r\n            ":"\r\n            原来是 GL_SAMPLES = 0x80A9\r\n            \r\n","\r\n            Prefer native OpenTK.Platform implementations. \r\n            Platform abstractions such as SDL will not be considered,\r\n            even if available. Use this if you need support for multiple\r\n            mice or keyboards.\r\n            ":"\r\n            首选本机 OpenTK.Platform 实现。\r\n            不考虑SDL等平台抽象，\r\n            即使可用。如果您需要支持多个，请使用它\r\n            鼠标或键盘。\r\n            \r\n","\r\n            Multiplies an instance by a scalar.\r\n            ":"\r\n            将实例乘以标量。\r\n            \r\n","\r\n            Pointer to a buffer of RawInput structures that contain the raw input data.\r\n            If NULL, the minimum required buffer, in bytes, is returned in Size.\r\n            ":"指向包含原始输入数据的 RawInput 结构缓冲区的指针。\r\n            如果为 NULL，则在 Size 中返回所需的最小缓冲区（以字节为单位）。\r\n            \r\n","\r\n            Original was GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46\r\n            ":"\r\n            原来是 GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46\r\n            \r\n","Represents errors related to Graphics operations.":"表示与图形操作相关的错误。\r\n"," \r\n            Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative.\r\n            ":" \r\n            指定要复制的像素矩形区域的尺寸。两者都必须是非负的。\r\n            \r\n"," \r\n            Specify the buffer to clear.\r\n            ":" \r\n            指定要清除的缓冲区。\r\n            \r\n","\r\n            Original was GL_MAX_DEPTH = 0x8280\r\n            ":"\r\n            原来是 GL_MAX_DEPTH = 0x8280\r\n            \r\n","\r\n            Original was GL_T2F_V3F = 0x2A27\r\n            ":"\r\n            原来是 GL_T2F_V3F = 0x2A27\r\n            \r\n","\r\n            Used in GL.CopyImageSubData, GL.GetInternalformat\r\n            ":"\r\n            用于GL.CopyImageSubData、GL.GetInternalformat\r\n            \r\n","Timing resolution in msec (?)":"以毫秒为单位的时间分辨率（？）\r\n","\r\n            Original was GL_TEXTURE_2D_STACK_MESAX = 0x875A\r\n            ":"原来是 GL_TEXTURE_2D_STACK_MESAX = 0x875A\r\n            \r\n","\r\n            Original was GL_T2F_C3F_V3F = 0x2A2A\r\n            ":"\r\n            原来是 GL_T2F_C3F_V3F = 0x2A2A\r\n            \r\n","[length: target,format,type] \r\n            Pointer to storage for the output image.\r\n            ":"[长度：目标、格式、类型]\r\n            指向输出图像存储的指针。\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_TYPE = 0x8082\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_TYPE = 0x8082\r\n            \r\n","Third row of the matrix.":"矩阵的第三行。\r\n","\r\n            Original was GL_SGX_BINARY_IMG = 0x8C0A\r\n            ":"\r\n            原来是 GL_SGX_BINARY_IMG = 0x8C0A\r\n            \r\n"," \r\n            The name of a program object containing the active uniform block whose binding to assign.\r\n            ":" \r\n            包含要分配其绑定的活动统一块的程序对象的名称。\r\n            \r\n","\r\n            Original was GL_FUNC_REVERSE_SUBTRACT_OES = 0x800B\r\n            ":"\r\n            原来是 GL_FUNC_REVERSE_SUBTRACT_OES = 0x800B\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_PORTABILITY_KHR = 0x824F\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_PORTABILITY_KHR = 0x824F\r\n            \r\n","[length: pname] \r\n            Specifies the address of a variable into which will be written the value or values of pname for pipeline.\r\n            ":"[长度：pname]\r\n            指定变量的地址，将写入管道的一个或多个 pname 值。\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 0x886C\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 0x886C\r\n            \r\n","\r\n            Original was GL_ALPHA32F_EXT = 0x8816\r\n            ":"\r\n            原来是 GL_ALPHA32F_EXT = 0x8816\r\n            \r\n","[length: program,index,bufSize]":"[长度：程序、索引、bufSize]\r\n"," \r\n            The name of the target program object.\r\n            ":" \r\n            目标程序对象的名称。\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872\r\n            \r\n","[length: count*4] \r\n            Specifies the new values to be used for the specified uniform variable.\r\n            ":"[长度：计数*4]\r\n            指定要用于指定统一变量的新值。\r\n            \r\n","\r\n            Original was GL_ConstantAlpha = 0X8003\r\n            ":"\r\n            原来是 GL_ConstantAlpha = 0X8003\r\n            \r\n","\r\n            Constructs and initializes a new X11GLNative window.\r\n            Call CreateWindow to create the actual render window.\r\n            ":"\r\n            构造并初始化一个新的 X11GLNative 窗口。\r\n            调用 CreateWindow 创建实际的渲染窗口。\r\n            \r\n","\r\n            Original was GL_BUFFER_MAP_POINTER_ARB = 0x88BD\r\n            ":"\r\n            原来是 GL_BUFFER_MAP_POINTER_ARB = 0x88BD\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Create or replace a display list\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            创建或替换显示列表\r\n            \r\n","\r\n            Original was GL_IMAGE_1D_EXT = 0x904C\r\n            ":"\r\n            原来是 GL_IMAGE_1D_EXT = 0x904C\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Define an array of texture coordinates\r\n            ":"[要求：v1.0 和 1.0]\r\n            定义一个纹理坐标数组\r\n            \r\n","\r\n            Original was GL_PROGRAM_NATIVE_ATTRIBS = 0x88AE\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_ATTRIBS = 0x88AE\r\n            \r\n","[requires: v1.0]\r\n            Return texture environment parameters\r\n            ":"[要求：v1.0]\r\n            返回纹理环境参数\r\n            \r\n","\r\n            Used in GL.Ati.ArrayObject, GL.Ati.GetArrayObject and 5 other functions\r\n            ":"\r\n            用于 GL.Ati.ArrayObject、GL.Ati.GetArrayObject 等5个函数\r\n            \r\n","\r\n            Original was GL_Texture31 = 0X84df\r\n            ":"\r\n            原来是 GL_Texture31 = 0X84df\r\n            \r\n","\r\n            Original was GL_ZERO_TO_ONE = 0x935F\r\n            ":"\r\n            原来是 GL_ZERO_TO_ONE = 0x935F\r\n            \r\n","Gets or sets the X11 screen.":"获取或设置 X11 屏幕。\r\n","The third button of the JoystickDevice.":"JoystickDevice 的第三个按钮。\r\n","Second item of the second row of the matrix.":"矩阵第二行的第二项。\r\n","[requires: v1.1]\r\n            Render primitives from array data\r\n            ":"[要求：v1.1]\r\n            从数组数据渲染图元\r\n            \r\n"," \r\n            Specifies the new value of the parameter specified by pname for program.\r\n            ":" \r\n            为程序指定由 pname 指定的参数的新值。\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the X, W, and Z components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 X、W 和 Z 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Initializes OpenTK with the specified options. Use this method\r\n            to influence the OpenTK.Platform implementation that will be used.\r\n            ":"\r\n            使用指定的选项初始化 OpenTK。使用这个方法\r\n            影响将要使用的 OpenTK.Platform 实现。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8\r\n            \r\n"," \r\n            Specify the distances to the near and far depth clipping planes. Both distances must be positive.\r\n            ":" \r\n            指定到近深度和远深度裁剪平面的距离。两个距离都必须为正。\r\n            \r\n","[requires: v1.4 or ARB_imaging|VERSION_1_4]\r\n            Set the blend color\r\n            ":"[要求：v1.4 或 ARB_imaging|VERSION_1_4]\r\n            设置混合色\r\n            \r\n","[requires: v4.0 or ARB_transform_feedback3|VERSION_4_0]\r\n            Render primitives using a count derived from a specifed stream of a transform feedback object\r\n            ":"[要求：v4.0 或 ARB_transform_feedback3|VERSION_4_0]\r\n            使用从变换反馈对象的指定流派生的计数来渲染基元\r\n            \r\n"," \r\n            Specifies the format of the pixel data. The following symbolic values are accepted: Rgba, and RgbaInteger. An implementation-chosen format will also be accepted. This can be queried with glGet and ImplementationColorReadFormat.\r\n            ":" \r\n            指定像素数据的格式。接受以下符号值：Rgba 和 RgbaInteger。一个实现选择的格式也将被接受。这可以使用 glGet 和 ImplementationColorReadFormat 查询。\r\n            \r\n"," \r\n            The level of detail of the texture object to invalidate.\r\n            ":" \r\n            要失效的纹理对象的详细程度。\r\n            \r\n","\r\n            Used in GL.Ext.CullParameter\r\n            ":"\r\n            在 GL.Ext.CullParameter 中使用\r\n            \r\n","\r\n            Original was GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3\r\n            ":"\r\n            原来是 GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3\r\n            \r\n","\r\n            Original was GL_STENCIL_BUFFER_BIT0_QCOM = 0x00010000\r\n            ":"\r\n            原来是 GL_STENCIL_BUFFER_BIT0_QCOM = 0x00010000\r\n            \r\n","\r\n            Used in GL.BlendEquation, GL.BlendFunc and 1 other function\r\n            ":"\r\n            用于 GL.BlendEquation、GL.BlendFunc 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_DOT3_ATI = 0x8966\r\n            ":"\r\n            原来是 GL_DOT3_ATI = 0x8966\r\n            \r\n","[requires: AMD_gpu_shader_int64|NV_shader_buffer_load]\r\n            Returns the value of a uniform variable\r\n            ":"[要求：AMD_gpu_shader_int64|NV_shader_buffer_load]\r\n            返回统一变量的值\r\n            \r\n","\r\n            Original was GL_MATRIX21 = 0x88D5\r\n            ":"\r\n            原来是 GL_MATRIX21 = 0x88D5\r\n            \r\n","Applications create their main window by calling CreateWindow with the WS_VISIBLE flag cleared, and later call ShowWindow with the SW_SHOW flag set to make it visible.":"应用程序通过调用 CreateWindow 并清除 WS_VISIBLE 标志来创建它们的主窗口，然后调用 ShowWindow 并设置 SW_SHOW 标志以使其可见。\r\n","\r\n            Original was GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895\r\n            \r\n","\r\n            Used in GL.NV.VDPAUGetSurface, GL.NV.VDPAURegisterOutputSurface and 2 other functions\r\n            ":"\r\n            用于 GL.NV.VDPAUGetSurface、GL.NV.VDPAURegisterOutputSurface 和其他 2 个函数\r\n            \r\n","[length: width,height] \r\n            Specifies the address of the bitmap image.\r\n            ":"[长宽高]\r\n            指定位图图像的地址。\r\n            \r\n","The twentysixth button of the JoystickDevice.":"JoystickDevice 的第二十六个按钮。\r\n","\r\n            Original was GL_DATA_BUFFER_AMD = 0x9151\r\n            ":"\r\n            原来是 GL_DATA_BUFFER_AMD = 0x9151\r\n            \r\n","\r\n            Original was GL_INT_2_10_10_10_REV = 0x8D9F\r\n            ":"\r\n            原来是 GL_INT_2_10_10_10_REV = 0x8D9F\r\n            \r\n"," \r\n            Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccessFlags, BufferMapped, BufferMapLength, BufferMapOffset, BufferSize, or BufferUsage.\r\n            ":" \r\n            指定缓冲区对象参数的符号名称。接受的值为 BufferAccessFlags、BufferMapped、BufferMapLength、BufferMapOffset、BufferSize 或 BufferUsage。\r\n            \r\n"," \r\n            For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.\r\n            ":" \r\n            对于矢量命令 (glProgramUniform*v)，指定要修改的元素数。如果目标统一变量不是数组，这应该是 1，如果是数组，则应该是 1 或更多。对于矩阵命令 (glProgramUniformMatrix*)，指定要修改的矩阵数。如果目标统一变量不是矩阵数组，则它应该为 1，如果它是矩阵数组，则它应该为 1 或更多。\r\n            \r\n"," \r\n            Indicates the usage of the internal format. target must be Renderbuffer.\r\n            ":" \r\n            指示内部格式的用法。目标必须是 Renderbuffer。\r\n            \r\n","[requires: OES_fixed_point|OES_texture_cube_map]":"[需要：OES_fixed_point|OES_texture_cube_map]\r\n","Returns the matched event's associated structure.":"返回匹配事件的关联结构。\r\n","\r\n            Original was GL_RASTERIZER_DISCARD_EXT = 0x8C89\r\n            ":"\r\n            原来是 GL_RASTERIZER_DISCARD_EXT = 0x8C89\r\n            \r\n","\r\n            Original was GL_RGBA8_SNORM = 0x8F97\r\n            ":"\r\n            原来是 GL_RGBA8_SNORM = 0x8F97\r\n            \r\n","\r\n            Enters the game loop of the GameWindow using the maximum update rate.\r\n            ":"\r\n            使用最大更新率进入 GameWindow 的游戏循环。\r\n            \r\n","\r\n            Original was GL_LUMINANCE16_ALPHA16_EXT = 0x8048\r\n            ":"\r\n            原来是 GL_LUMINANCE16_ALPHA16_EXT = 0x8048\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_SRGB = 0x8DB9\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_SRGB = 0x8DB9\r\n            \r\n","[requires: EXT_separate_shader_objects]\r\n            Create a stand-alone program from an array of null-terminated source code strings\r\n            ":"[需要：EXT_separate_shader_objects]\r\n            从一组以 null 结尾的源代码字符串创建独立程序\r\n            \r\n","\r\n            Used in GL.CompressedTexImage2D, GL.CompressedTexSubImage2D and 7 other functions\r\n            ":"用于 GL.CompressedTexImage2D、GL.CompressedTexSubImage2D 和其他 7 个函数\r\n            \r\n","\r\n            Original was GL_RG16 = 0x822C\r\n            ":"\r\n            原来是 GL_RG16 = 0x822C\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPONENTS = 0x1003\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPONENTS = 0x1003\r\n            \r\n","\r\n            Used in GL.Angle.RenderbufferStorageMultisample, GL.Apple.RenderbufferStorageMultisample and 4 other functions\r\n            ":"\r\n            用于GL.Angle.RenderbufferStorageMultisample、GL.Apple.RenderbufferStorageMultisample等4个函数\r\n            \r\n","\r\n            Original was GL_MINMAX_SINK_EXT = 0x8030\r\n            ":"\r\n            原来是 GL_MINMAX_SINK_EXT = 0x8030\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_POINTER = 0x808E\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_POINTER = 0x808E\r\n            \r\n","\r\n            Original was GL_ACTIVE_SUBROUTINES = 0x8DE5\r\n            ":"\r\n            原来是 GL_ACTIVE_SUBROUTINES = 0x8DE5\r\n            \r\n","[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]\r\n            Query the name of an active shader subroutine\r\n            ":"[需要：v4.0 或 ARB_shader_subroutine|VERSION_4_0]\r\n            查询活动着色器子程序的名称\r\n            \r\n","\r\n            Used in GL.GetTexParameter, GL.Ext.GetTexParameterI\r\n            ":"\r\n            用于GL.GetTexParameter, GL.Ext.GetTexParameterI\r\n            \r\n","\r\n            Original was GL_RG32I = 0x823B\r\n            ":"\r\n            原来是 GL_RG32I = 0x823B\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A\r\n            \r\n","\r\n            Used in GL.ColorMaterial\r\n            ":"\r\n            用于 GL.ColorMaterial\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_WIDTH = 0x8D42\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_WIDTH = 0x8D42\r\n            \r\n","[length: maxCount] \r\n            Specifies an array that is used to return the names of attached shader objects.\r\n            ":"[长度：maxCount]\r\n            指定一个数组，用于返回附加着色器对象的名称。\r\n            \r\n","A new Matrix3x4 which holds the result of the addition":"保存加法结果的新 Matrix3x4\r\n","\r\n            Original was GL_CLIP_PLANE1 = 0x3001\r\n            ":"\r\n            原来是 GL_CLIP_PLANE1 = 0x3001\r\n            \r\n","\r\n            Original was GL_4PASS_2_SGIS = 0x80A6\r\n            ":"\r\n            原来是 GL_4PASS_2_SGIS = 0x80A6\r\n            \r\n","\r\n            Original was GL_TEXTURE20_ARB = 0x84D4\r\n            ":"\r\n            原来是 GL_TEXTURE20_ARB = 0x84D4\r\n            \r\n","\r\n            Original was GL_RGBA_INTEGER = 0x8D99\r\n            ":"\r\n            原来是 GL_RGBA_INTEGER = 0x8D99\r\n            \r\n","\r\n            Specify scale factors along the x, y, and z axes, respectively.\r\n            ":"\r\n            分别指定沿 x、y 和 z 轴的比例因子。\r\n            \r\n","\r\n            Original was GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD\r\n            ":"\r\n            原来是 GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD\r\n            \r\n","\r\n            Original was GL_CPU_OPTIMIZED_QCOM = 0x8FB1\r\n            ":"\r\n            原来是 GL_CPU_OPTIMIZED_QCOM = 0x8FB1\r\n            \r\n","\r\n            Original was GL_PATCH_VERTICES = 0x8E72\r\n            ":"\r\n            原来是 GL_PATCH_VERTICES = 0x8E72\r\n            \r\n","The scroll lock key.":"滚动锁定键。\r\n","\r\n            Original was GL_Lequal = 0X0203\r\n            ":"\r\n            原来是 GL_Lequal = 0X0203\r\n            \r\n"," device\r\n            ":" 设备\r\n            \r\n","\r\n            Original was GL_PARAMETER_BUFFER_ARB = 0x80EE\r\n            ":"\r\n            原来是 GL_PARAMETER_BUFFER_ARB = 0x80EE\r\n            \r\n","A new instance that is the result of the multiplication.":"作为乘法结果的新实例。\r\n"," \r\n            Specifies the target buffer object being mapped. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer or UniformBuffer.\r\n            ":" \r\n            指定正在映射的目标缓冲区对象。符号常量必须是 ArrayBuffer、AtomicCounterBuffer、CopyReadBuffer、CopyWriteBuffer、DrawIndirectBuffer、DispatchIndirectBuffer、ElementArrayBuffer、PixelPackBuffer、PixelUnpackBuffer、QueryBuffer、ShaderStorageBuffer、TextureBuffer、TransformFeedbackBuffer 或 UniformBuffer。\r\n            \r\n","[length: n] \r\n            Specifies an array containing the texture priorities. A priority given in an element of priorities applies to the texture named by the corresponding element of textures.\r\n            ":"[长度：n]\r\n            指定包含纹理优先级的数组。 priorities 元素中给出的优先级适用于由相应的 textures 元素命名的纹理。\r\n            \r\n","[requires: EXT_copy_image]\r\n            Perform a raw data copy between two images\r\n            ":"[需要：EXT_copy_image]\r\n            在两个图像之间执行原始数据复制\r\n            \r\n"," \r\n            The user-supplied identifier of the message to insert.\r\n            ":" \r\n            要插入的消息的用户提供的标识符。\r\n            \r\n","[requires: SUN_mesh_array]":"[需要：SUN_mesh_array]\r\n"," \r\n            The parameter to be retrieved. Must be one of ConvolutionBorderMode, ConvolutionBorderColor, ConvolutionFilterScale, ConvolutionFilterBias, ConvolutionFormat, ConvolutionWidth, ConvolutionHeight, MaxConvolutionWidth, or MaxConvolutionHeight.\r\n            ":" \r\n            要检索的参数。必须是 ConvolutionBorderMode、ConvolutionBorderColor、ConvolutionFilterScale、ConvolutionFilterBias、ConvolutionFormat、ConvolutionWidth、ConvolutionHeight、MaxConvolutionWidth 或 MaxConvolutionHeight 之一。\r\n            \r\n","\r\n            For the keyboard, the Usage Page is 1 and the Usage is 6.\r\n            ":"\r\n            对于键盘，Usage Page 为 1，Usage 为 6。\r\n            \r\n","The change in Y position produced by this event.":"此事件产生的 Y 位置变化。\r\n","\r\n            Original was GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A\r\n            ":"\r\n            原来是 GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248\r\n            \r\n","\r\n            Original was GL_DUAL_ALPHA4_SGIS = 0x8110\r\n            ":"\r\n            原来是 GL_DUAL_ALPHA4_SGIS = 0x8110\r\n            \r\n","\r\n            Original was GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149\r\n            ":"\r\n            原来是 GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149\r\n            \r\n","[requires: SGIS_texture_color_mask]":"[要求：SGIS_texture_color_mask]\r\n","\r\n            Original was GL_TEXTURE_BUFFER_OFFSET = 0x919D\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_OFFSET = 0x919D\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 0x886D\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 0x886D\r\n            \r\n","The axis to rotate about":"要旋转的轴\r\n","\r\n            Original was GL_OES_texture_env_crossbar = 1\r\n            ":"\r\n            原来是 GL_OES_texture_env_crossbar = 1\r\n            \r\n","Diagnostics:":"诊断：\r\n"," \r\n            Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency, and Patches are accepted.\r\n            ":" \r\n            指定要渲染的图元类型。接受符号常量 Points、LineStrip、LineLoop、Lines、LineStripAdjacency、LinesAdjacency、TriangleStrip、TriangleFan、Triangles、TriangleStripAdjacency、TrianglesAdjacency 和 Patches。\r\n            \r\n","\r\n            Original was GL_RGB4_EXT = 0x804F\r\n            ":"\r\n            原来是 GL_RGB4_EXT = 0x804F\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Render primitives from array data\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            从数组数据渲染图元\r\n            \r\n"," \r\n            Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.\r\n            ":" \r\n            指定纹素数据的数据类型。接受以下符号值：UnsignedByte、UnsignedShort565、UnsignedShort4444 和 UnsignedShort5551。\r\n            \r\n","[requires: EXT_copy_texture]\r\n            Copy pixels into a 2D texture image\r\n            ":"[需要：EXT_copy_texture]\r\n            将像素复制到二维纹理图像中\r\n            \r\n","\r\n            Original was GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B\r\n            ":"\r\n            原来是 GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B\r\n            \r\n","\r\n            Original was GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC\r\n            ":"\r\n            原来是 GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC\r\n            \r\n","\r\n            Original was GL_TEXTURE_WRAP_S = 0x2802\r\n            ":"\r\n            原来是 GL_TEXTURE_WRAP_S = 0x2802\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036\r\n            \r\n","\r\n            Original was GL_TEXTURE16 = 0x84D0\r\n            ":"\r\n            原来是 GL_TEXTURE16 = 0x84D0\r\n            \r\n","\r\n            Original was GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 0x8E75\r\n            ":"\r\n            原来是 GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 0x8E75\r\n            \r\n","\r\n            Original was GL_MATRIX24 = 0x88D8\r\n            ":"\r\n            原来是 GL_MATRIX24 = 0x88D8\r\n            \r\n"," \r\n            Specifies how glBeginConditionalRender interprets the results of the occlusion query.\r\n            ":" \r\n            指定 glBeginConditionalRender 如何解释遮挡查询的结果。\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER12_NV = 0x8831\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER12_NV = 0x8831\r\n            \r\n"," \r\n            Specifies the pointer to be returned.  The symbolic constant must be BufferMapPointer.\r\n            ":" \r\n            指定要返回的指针。符号常量必须是 BufferMapPointer。\r\n            \r\n","\r\n            Original was GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0\r\n            ":"\r\n            原来是 GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0\r\n            \r\n","\r\n            Original was GL_PINLIGHT_NV = 0x92A8\r\n            ":"\r\n            原来是 GL_PINLIGHT_NV = 0x92A8\r\n            \r\n","\r\n            Used in GL.StencilOp\r\n            ":"\r\n            在 GL.StencilOp 中使用\r\n            \r\n","\r\n            Used in GL.Sgix.IglooInterface\r\n            ":"\r\n            在 GL.Sgix.IglooInterface 中使用\r\n            \r\n","\r\n            Original was GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0\r\n            ":"\r\n            原来是 GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPARE_FAIL_VALUE = 0x80BF\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPARE_FAIL_VALUE = 0x80BF\r\n            \r\n"," \r\n            Specifies the number of program pipeline objects to delete.\r\n            ":" \r\n            指定要删除的程序管道对象的数量。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_BLEND = 0x828B\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_BLEND = 0x828B\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021\r\n            \r\n","\r\n            Used in GL.MapBuffer, GL.MapNamedBuffer and 1 other function\r\n            ":"\r\n            用于 GL.MapBuffer、GL.MapNamedBuffer 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA\r\n            \r\n","\r\n            Represents a 2x2 matrix\r\n            ":"\r\n            表示一个 2x2 矩阵\r\n            \r\n","\r\n            An unmanaged pointer containing the marshalled string.\r\n            This pointer must be freed with ":"\r\n            包含编组字符串的非托管指针。\r\n            这个指针必须被释放\r\n","\r\n            Original was GL_LUMINANCE4 = 0x803F\r\n            ":"\r\n            原来是 GL_LUMINANCE4 = 0x803F\r\n            \r\n","The slash key.":"斜杠键。\r\n","\r\n            Original was GL_DRAW_BUFFER0_ARB = 0x8825\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER0_ARB = 0x8825\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29\r\n            \r\n"," \r\n            Specifies the index of the attribute variable to be queried.\r\n            ":" \r\n            指定要查询的属性变量的索引。\r\n            \r\n","\r\n            Original was GL_IMAGE_TRANSLATE_X_HP = 0x8157\r\n            ":"\r\n            原来是 GL_IMAGE_TRANSLATE_X_HP = 0x8157\r\n            \r\n","The sixth button of the JoystickDevice.":"JoystickDevice 的第六个按钮。\r\n","\r\n            Used in GL.DebugMessageControl, GL.Khr.DebugMessageControl\r\n            ":"\r\n            用于GL.DebugMessageControl、GL.Khr.DebugMessageControl\r\n            \r\n","\r\n            Original was GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F\r\n            ":"\r\n            原来是 GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F\r\n            \r\n","\r\n            Original was GL_MAX_UNIFORM_LOCATIONS = 0x826E\r\n            ":"\r\n            原来是 GL_MAX_UNIFORM_LOCATIONS = 0x826E\r\n            \r\n","\r\n            Original was GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848\r\n            ":"\r\n            原来是 GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848\r\n            \r\n","\r\n            Original was GL_ATTACHED_SHADERS = 0x8B85\r\n            ":"\r\n            原来是 GL_ATTACHED_SHADERS = 0x8B85\r\n            \r\n","\r\n            Original was GL_TESS_EVALUATION_TEXTURE = 0x829D\r\n            ":"\r\n            原来是 GL_TESS_EVALUATION_TEXTURE = 0x829D\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86\r\n            \r\n","\r\n            Original was GL_VERTEX_SOURCE_ATI = 0x8774\r\n            ":"\r\n            原来是 GL_VERTEX_SOURCE_ATI = 0x8774\r\n            \r\n","\r\n            VSync enabled, unless framerate falls below one half of target framerate.\r\n            If no target framerate is specified, this behaves exactly like ":"\r\n            启用 VSync，除非帧率低于目标帧率的一半。\r\n            如果未指定目标帧率，则其行为与\r\n","\r\n            Gets JoystickButtonCollection containing the state of each button on this instance. True indicates that the button is pressed.\r\n            ":"\r\n            获取包含此实例上每个按钮状态的 JoystickButtonCollection。 True 表示按钮被按下。\r\n            \r\n","\r\n            Original was GL_COMBINER_MAPPING_NV = 0x8543\r\n            ":"\r\n            原来是 GL_COMBINER_MAPPING_NV = 0x8543\r\n            \r\n","\r\n            Original was GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B\r\n            ":"\r\n            原来是 GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B\r\n            \r\n","\r\n            Original was GL_RG16_SNORM = 0x8F99\r\n            ":"\r\n            原来是 GL_RG16_SNORM = 0x8F99\r\n            \r\n","\r\n            Original was GL_TEXTURE_TYPE_QCOM = 0x8BD7\r\n            ":"\r\n            原来是 GL_TEXTURE_TYPE_QCOM = 0x8BD7\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1\r\n            \r\n","\r\n            Original was GL_OES_single_precision = 1\r\n            ":"\r\n            原来是 GL_OES_single_precision = 1\r\n            \r\n","\r\n            Original was GL_SRGB = 0x8C40\r\n            ":"\r\n            原来是 GL_SRGB = 0x8C40\r\n            \r\n","\r\n            Original was GL_CON_8_ATI = 0x8949\r\n            ":"\r\n            原来是 GL_CON_8_ATI = 0x8949\r\n            \r\n","This object should be unique across bindings but consistent between bindings\r\n            of the same type. For example, ES10.GL, OpenGL.GL and CL10.CL should all return \r\n            unique objects, but all instances of ES10.GL should return the same object.":"该对象在绑定之间应该是唯一的，但在绑定之间应该是一致的\r\n            同类型的。例如，ES10.GL、OpenGL.GL 和 CL10.CL 都应该返回\r\n            独特的对象，但 ES10.GL 的所有实例都应返​​回相同的对象。\r\n"," \r\n            Specifies which clipping plane is being positioned. Symbolic names of the form ClipPlanei, where i is an integer between 0 and MaxClipPlanes - 1, are accepted.\r\n            ":" \r\n            指定要定位的剪裁平面。可接受 ClipPlanei 形式的符号名称，其中 i 是介于 0 和 MaxClipPlanes - 1 之间的整数。\r\n            \r\n","\r\n            Original was GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49\r\n            \r\n","\r\n            Original was GL_FRAGMENT_MATERIAL_EXT = 0x8349\r\n            ":"\r\n            原来是 GL_FRAGMENT_MATERIAL_EXT = 0x8349\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8\r\n            \r\n","\r\n            Used in GL.Sgix.PixelTexGen\r\n            ":"\r\n            在 GL.Sgix.PixelTexGen 中使用\r\n            \r\n","[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]\r\n            Specify mapping of depth values from normalized device coordinates to window coordinates\r\n            ":"[要求：v4.1 或 ARB_ES2_compatibility|VERSION_4_1]\r\n            指定深度值从规范化设备坐标到窗口坐标的映射\r\n            \r\n","[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]\r\n            Query a property of an interface in a program\r\n            ":"[要求：v4.3 或 ARB_program_interface_query|VERSION_4_3]\r\n            查询程序中某个接口的属性\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT3_NV = 0x8CE3\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT3_NV = 0x8CE3\r\n            \r\n","\r\n            Returns the opengl IGraphicsContext associated with the current GameWindow.\r\n            ":"\r\n            返回与当前 GameWindow 关联的 opengl IGraphicsContext。\r\n            \r\n","\r\n            Original was GL_MAX_RENDERBUFFER_SIZE = 0x84E8\r\n            ":"\r\n            原来是 GL_MAX_RENDERBUFFER_SIZE = 0x84E8\r\n            \r\n","\r\n            Initializes OpenTK with default options.\r\n            ":"\r\n            使用默认选项初始化 OpenTK。\r\n            \r\n","\r\n            A mapping of core function names to MethodInfo handles.\r\n            ":"\r\n            核心函数名称到 MethodInfo 句柄的映射。\r\n            \r\n","\r\n            Original was GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406\r\n            ":"\r\n            原来是 GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT0_NV = 0x8CE0\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT0_NV = 0x8CE0\r\n            \r\n"," \r\n            Specifies how the red, green, blue, and alpha source blending factors are computed. The initial value is One.\r\n            ":" \r\n            指定如何计算红色、绿色、蓝色和 alpha 源混合因子。初始值为一。\r\n            \r\n","[length: pname] \r\n            Specifies the value that parameter pname of light source light will be set to.\r\n            ":"[长度：pname]\r\n            指定光源 light 的参数 pname 将设置为的值。\r\n            \r\n","\r\n            Indicates that a mouse button is released.\r\n            ":"\r\n            表示释放鼠标按钮。\r\n            \r\n","If successful, this function returns a non-negative number indicating the number of bytes copied to Data.":"如果成功，此函数返回一个非负数，指示复制到 Data 的字节数。\r\n","[requires: v1.0 and 1.0]\r\n            Define an array of colors\r\n            ":"[要求：v1.0 和 1.0]\r\n            定义颜色数组\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D\r\n            \r\n","\r\n            The XCreateWindow function creates an unmapped subwindow for a specified parent window, returns the window ID of the created window, and causes the X server to generate a CreateNotify event. The created window is placed on top in the stacking order with respect to siblings.\r\n            ":"\r\n            XCreateWindow 函数为指定的父窗口创建一个未映射的子窗口，返回创建窗口的窗口 ID，并使 X 服务器生成一个 CreateNotify 事件。创建的窗口相对于兄弟窗口按堆叠顺序放置在顶部。\r\n            \r\n","\r\n            Original was GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867\r\n            ":"\r\n            原来是 GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867\r\n            \r\n","\r\n            Returns the size of a single array element in bytes  or 0 if the element is not blittable.\r\n            ":"\r\n            返回单个数组元素的大小（以字节为单位），如果该元素不可 blittable，则返回 0。\r\n            \r\n"," indicating whether this key is up.\r\n            ":" 指示此键是否启动。\r\n            \r\n","\r\n            Original was GL_Texture6 = 0X84c6\r\n            ":"\r\n            原来是 GL_Texture6 = 0X84c6\r\n            \r\n","[requires: v1.0]\r\n            Specify the diameter of rasterized points\r\n            ":"[要求：v1.0]\r\n            指定光栅化点的直径\r\n            \r\n","\r\n            Original was GL_LUMINANCE8_ALPHA8 = 0x8045\r\n            ":"\r\n            原来是 GL_LUMINANCE8_ALPHA8 = 0x8045\r\n            \r\n","\r\n            Called whenever the mouse cursor leaves the window ":"\r\n            每当鼠标光标离开窗口时调用\r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 0x9009\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 0x9009\r\n            \r\n","\r\n            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP.\r\n            ":"\r\n            指定目标纹理，它必须是 GL_TEXTURE_1D、GL_TEXTURE_2D、GL_TEXTURE_3D、GL_TEXTURE_1D_ARRAY、GL_TEXTURE_2D_ARRAY、GL_TEXTURE_RECTANGLE 或 GL_TEXTURE_CUBE_MAP。\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9\r\n            \r\n","[requires: SGI_color_table]\r\n            Retrieve contents of a color lookup table\r\n            ":"[要求：SGI_color_table]\r\n            检索颜色查找表的内容\r\n            \r\n","\r\n            Original was GL_RGB16I_EXT = 0x8D89\r\n            ":"\r\n            原来是 GL_RGB16I_EXT = 0x8D89\r\n            \r\n"," has\r\n            a down digital pad button.\r\n            ":" 有\r\n            一个向下的数字键盘按钮。\r\n            \r\n","\r\n            Original was GL_SAMPLES_PASSED = 0x8914\r\n            ":"\r\n            原来是 GL_SAMPLES_PASSED = 0x8914\r\n            \r\n","\r\n            Used in GL.Arb.GetnColorTable, GL.Arb.GetnCompressedTexImage and 8 other functions\r\n            ":"\r\n            用于GL.Arb.GetnColorTable、GL.Arb.GetnCompressedTexImage等8个函数\r\n            \r\n","[requires: EXT_blend_func_separate]\r\n            Specify pixel arithmetic for RGB and alpha components separately\r\n            ":"[需要：EXT_blend_func_separate]\r\n            分别为 RGB 和 alpha 分量指定像素算法\r\n            \r\n","[length: target,filter]":"[长度：目标，过滤器]\r\n","\r\n            Used in GL.GetBoolean, GL.GetDouble and 3 other functions\r\n            ":"\r\n            用于 GL.GetBoolean、GL.GetDouble 和其他 3 个函数\r\n            \r\n","\r\n            Gets the SDL joystick layer binding for the specified game controller axis\r\n            ":"\r\n            获取指定游戏控制器轴的 SDL 摇杆层绑定\r\n            \r\n","[requires: EXT_direct_state_access|EXT_separate_shader_objects|EXT_separate_shader_objects]":"[需要：EXT_direct_state_access|EXT_separate_shader_objects|EXT_separate_shader_objects]\r\n","Top row of the matrix":"矩阵的顶行\r\n","[requires: EXT_texture_object]\r\n            Bind a named texture to a texturing target\r\n            ":"[需要：EXT_texture_object]\r\n            将命名纹理绑定到纹理目标\r\n            \r\n","[length: 1] \r\n            Specifies the address of a variable into which the queried value or values will be placed.\r\n            ":"[长度：1]\r\n            指定一个变量的地址，一个或多个查询值将被放入其中。\r\n            \r\n","\r\n            Original was GL_COLOR_MATRIX_SGI = 0x80B1\r\n            ":"\r\n            原来是 GL_COLOR_MATRIX_SGI = 0x80B1\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 0x8CDA\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 0x8CDA\r\n            \r\n","\r\n            Original was GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B\r\n            ":"\r\n            原来是 GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B\r\n            \r\n","\r\n            Original was GL_TEXTURE_SWIZZLE_G = 0x8E43\r\n            ":"\r\n            原来是 GL_TEXTURE_SWIZZLE_G = 0x8E43\r\n            \r\n","\r\n            Occurs whenever the mouse cursor leaves the window ":"\r\n            每当鼠标光标离开窗口时发生\r\n","[length: label,length] \r\n            The address of a string containing the label to assign to the object.\r\n            ":"[长度：标签，长度]\r\n            包含要分配给对象的标签的字符串的地址。\r\n            \r\n","[length: numPaths,pathNameType,paths]":"[长度：numPaths，pathNameType，路径]\r\n"," \r\n            Specify the red, green, blue, and alpha values used when the accumulation buffer is cleared. The initial values are all 0.\r\n            ":" \r\n            指定清除累积缓冲区时使用的红色、绿色、蓝色和 alpha 值。初始值全部为 0。\r\n            \r\n","\r\n            Original was GL_TEXTURE17_ARB = 0x84D1\r\n            ":"\r\n            原来是 GL_TEXTURE17_ARB = 0x84D1\r\n            \r\n"," \r\n            The height of the region to be cleared.\r\n            ":" \r\n            要清除的区域的高度。\r\n            \r\n","\r\n            Original was GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84\r\n            ":"\r\n            原来是 GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Delete a contiguous group of display lists\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            删除一组连续的显示列表\r\n            \r\n"," \r\n            Specifies a symbolic constant, one of Vendor, Renderer, Version, ShadingLanguageVersion, or Extensions.\r\n            ":" \r\n            指定符号常量，Vendor、Renderer、Version、ShadingLanguageVersion 或 Extensions 之一。\r\n            \r\n","\r\n            Original was GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8\r\n            ":"\r\n            原来是 GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8\r\n            \r\n","[requires: EXT_debug_label]\r\n            Retrieve the label of a named object identified within a namespace\r\n            ":"[需要：EXT_debug_label]\r\n            检索命名空间中标识的命名对象的标签\r\n            \r\n"," \r\n            Specifies the number of samplers to bind.\r\n            ":" \r\n            指定要绑定的采样器的数量。\r\n            \r\n","\r\n            Describes the pixel format of a drawing surface.\r\n            ":"\r\n            描述绘图表面的像素格式。\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7\r\n            \r\n","\r\n            Original was GL_OBJECT_PLANE = 0x2501\r\n            ":"\r\n            原来是 GL_OBJECT_PLANE = 0x2501\r\n            \r\n","\r\n            Original was GL_RGB_FLOAT32_ATI = 0x8815\r\n            ":"\r\n            原来是 GL_RGB_FLOAT32_ATI = 0x8815\r\n            \r\n","\r\n            Used in GL.Amd.BlendEquationIndexed, GL.Amd.BlendEquationSeparateIndexed and 2 other functions\r\n            ":"\r\n            用于 GL.Amd.BlendEquationIndexed、GL.Amd.BlendEquationSeparateIndexed 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_PALETTE8_R5_G6_B5_OES = 0x8B97\r\n            ":"\r\n            原来是 GL_PALETTE8_R5_G6_B5_OES = 0x8B97\r\n            \r\n","\r\n            Specifies the number of color components in the texture. Must be one of the following symbolic constants: GL_COMPRESSED_RED, GL_COMPRESSED_RG, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_COMPRESSED_SRGB, GL_COMPRESSED_SRGB_ALPHA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_R3_G3_B2, GL_RED, GL_RG, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.\r\n            ":"\r\n            指定纹理中颜色分量的数量。 Must be one of the following symbolic constants: GL_COMPRESSED_RED, GL_COMPRESSED_RG, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_COMPRESSED_SRGB, GL_COMPRESSED_SRGB_ALPHA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_R3_G3_B2, GL_RED, GL_RG, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA , GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, 或 GL_SRGB8_ALPHA8。\r\n            \r\n"," \r\n            Specifies the type of shader to query. Must be either VertexShader or FragmentShader.\r\n            ":" \r\n            指定要查询的着色器类型。必须是 VertexShader 或 FragmentShader。\r\n            \r\n","Handle to the RawInput structure. This comes from the lParam in WM_INPUT.":"RawInput 结构的句柄。这来自于 WM_INPUT 中的 lParam。\r\n","\r\n            Original was GL_MODELVIEW11_ARB = 0x872B\r\n            ":"\r\n            原来是 GL_MODELVIEW11_ARB = 0x872B\r\n            \r\n","[requires: v1.0]\r\n            Multiply the current matrix with the specified matrix\r\n            ":"[要求：v1.0]\r\n            将当前矩阵与指定矩阵相乘\r\n            \r\n","\r\n            Original was GL_MODELVIEW_PROJECTION_NV = 0x8629\r\n            ":"\r\n            原来是 GL_MODELVIEW_PROJECTION_NV = 0x8629\r\n            \r\n","\r\n            Original was GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB\r\n            ":"\r\n            原来是 GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB\r\n            \r\n","\r\n            Used in GL.TexImage2D, GL.Oes.TexImage3D\r\n            ":"\r\n            用于 GL.TexImage2D, GL.Oes.TexImage3D\r\n            \r\n","\r\n            Original was GL_COLORDODGE_NV = 0x9299\r\n            ":"\r\n            原来是 GL_COLORDODGE_NV = 0x9299\r\n            \r\n","\r\n            Original was GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910\r\n            ":"\r\n            原来是 GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD\r\n            \r\n"," \r\n            The target for the convolution parameter. Must be one of Convolution1D, Convolution2D, or Separable2D.\r\n            ":" \r\n            卷积参数的目标。必须是 Convolution1D、Convolution2D 或 Separable2D 之一。\r\n            \r\n","\r\n            OnUnload: Occurs after exiting the main loop, but before deleting the OpenGL context.\r\n            Override to unload resources.\r\n            ":"\r\n            OnUnload：在退出主循环之后，但在删除 OpenGL 上下文之前发生。\r\n            覆盖以卸载资源。\r\n            \r\n","\r\n            Original was GL_CLAMP_TO_BORDER_SGIS = 0x812D\r\n            ":"\r\n            原来是 GL_CLAMP_TO_BORDER_SGIS = 0x812D\r\n            \r\n"," \r\n            Specifies the width of the texture subimage.\r\n            ":" \r\n            指定纹理子图像的宽度。\r\n            \r\n","\r\n            Original was GL_UNPACK_SKIP_ROWS_EXT = 0x0CF3\r\n            ":"\r\n            原来是 GL_UNPACK_SKIP_ROWS_EXT = 0x0CF3\r\n            \r\n","\r\n            Original was GL_REG_16_ATI = 0x8931\r\n            ":"\r\n            原来是 GL_REG_16_ATI = 0x8931\r\n            \r\n","\r\n            If the function fails for any other reason, it returns -1. For more details, call GetLastError.\r\n            ":"\r\n            如果函数由于任何其他原因失败，则返回 -1。有关详细信息，请调用 GetLastError。\r\n            \r\n","\r\n            Used in GL.GetSeparableFilter, GL.SeparableFilter2D\r\n            ":"\r\n            用于 GL.GetSeparableFilter, GL.SeparableFilter2D\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_BINDING = 0x82D4\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_BINDING = 0x82D4\r\n            \r\n","\r\n            Original was GL_TEXTURE4 = 0x84C4\r\n            ":"\r\n            原来是 GL_TEXTURE4 = 0x84C4\r\n            \r\n"," \r\n            Specifies the name of a transform feedback object from which to retrieve a primitive count.\r\n            ":" \r\n            指定要从中检索原始计数的变换反馈对象的名称。\r\n            \r\n","\r\n            Original was GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 0x8E5D\r\n            ":"\r\n            原来是 GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 0x8E5D\r\n            \r\n"," \r\n            The name of a program object from which to retrieve information.\r\n            ":" \r\n            从中检索信息的程序对象的名称。\r\n            \r\n"," \r\n            Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.\r\n            ":" \r\n            指定控制同步对象行为的标志的按位组合。目前没有为此操作定义任何标志，标志必须为零。标志是一个占位符，用于预期未来扩展的栅栏同步对象功能。\r\n            \r\n","[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]\r\n            Query the fragment color index of a named variable within a program\r\n            ":"[要求：v4.3 或 ARB_program_interface_query|VERSION_4_3]\r\n            查询程序中命名变量的片段颜色索引\r\n            \r\n","\r\n            Original was GL_CLAMP_TO_BORDER_EXT = 0x812D\r\n            ":"\r\n            原来是 GL_CLAMP_TO_BORDER_EXT = 0x812D\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_ERROR_ARB = 0x824C\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_ERROR_ARB = 0x824C\r\n            \r\n","\r\n            Original was GL_SIGNED_HILO_NV = 0x86F9\r\n            ":"\r\n            原来是 GL_SIGNED_HILO_NV = 0x86F9\r\n            \r\n","[requires: v4.2 or ARB_texture_storage|VERSION_4_2]\r\n            Simultaneously specify storage for all levels of a one-dimensional texture\r\n            ":"[要求：v4.2 或 ARB_texture_storage|VERSION_4_2]\r\n            同时为一维纹理的所有级别指定存储\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4\r\n            \r\n","\r\n            Original was GL_MODELVIEW0_EXT = 0x1700\r\n            ":"\r\n            原来是 GL_MODELVIEW0_EXT = 0x1700\r\n            \r\n","\r\n            Original was GL_NAND = 0x150E\r\n            ":"\r\n            原来是 GL_NAND = 0x150E\r\n            \r\n","\r\n            Gets an integer representing the relative x movement of the pointer, in pixel coordinates.\r\n            ":"\r\n            获取一个整数，表示指针在像素坐标中的相对 x 移动。\r\n            \r\n","\r\n            Used in GL.TexCoordPointer, GL.Ext.MultiTexCoordPointer and 4 other functions\r\n            ":"\r\n            用于 GL.TexCoordPointer、GL.Ext.MultiTexCoordPointer 和其他 4 个函数\r\n            \r\n"," \r\n            Specifies the index of the generic vertex attribute to be modified.\r\n            ":" \r\n            指定要修改的通用顶点属性的索引。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Select a color buffer source for pixels\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            为像素选择颜色缓冲源\r\n            \r\n","\r\n            Original was GL_REG_3_ATI = 0x8924\r\n            ":"\r\n            原来是 GL_REG_3_ATI = 0x8924\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 0x8CD6\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 0x8CD6\r\n            \r\n"," that defines the ASCII character that was typed.\r\n            ":" 定义键入的 ASCII 字符。\r\n            \r\n","\r\n            Third row of the matrix.\r\n            ":"\r\n            矩阵的第三行。\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD\r\n            \r\n","\r\n            Represents a 4x2 matrix.\r\n            ":"\r\n            表示一个 4x2 矩阵。\r\n            \r\n","\r\n            The point transformed to screen coordinates.\r\n            ":"\r\n            转换为屏幕坐标的点。\r\n            \r\n","[requires: v4.3 or ARB_copy_image|VERSION_4_3]\r\n            Perform a raw data copy between two images\r\n            ":"[要求：v4.3 或 ARB_copy_image|VERSION_4_3]\r\n            在两个图像之间执行原始数据复制\r\n            \r\n"," \r\n            Specifies the height of the texture image. All implementations support 2D texture and cube map texture images that are at least 16384 texels high.\r\n            ":" \r\n            指定纹理图像的高度。所有实现都支持至少 16384 纹素高的 2D 纹理和立方体贴图纹理图像。\r\n            \r\n","[requires: KHR_blend_equation_advanced]":"[需要：KHR_blend_equation_advanced]\r\n","\r\n            Used in GL.CreateShader, GL.CreateShaderProgram and 9 other functions\r\n            ":"\r\n            用于GL.CreateShader、GL.CreateShaderProgram等9个函数\r\n            \r\n","\r\n            Original was GL_TextureCompareFunc = 0x884D\r\n            ":"\r\n            原来是 GL_TextureCompareFunc = 0x884D\r\n            \r\n","A new Matrix4x3d which holds the result of the addition":"保存加法结果的新 Matrix4x3d\r\n","\r\n            Original was GL_DRAW_BUFFER15_ARB = 0x8834\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER15_ARB = 0x8834\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Delete named framebuffer objects\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            删除命名的帧缓冲区对象\r\n            \r\n","[requires: EXT_geometry_shader]\r\n            Attach a level of a texture object as a logical buffer to the currently bound framebuffer object\r\n            ":"[需要：EXT_geometry_shader]\r\n            将纹理对象的级别作为逻辑缓冲区附加到当前绑定的帧缓冲区对象\r\n            \r\n","A new Matrix2x3 which holds the result of the subtraction":"保存减法结果的新 Matrix2x3\r\n","\r\n            Original was GL_BOOL_VEC2_ARB = 0x8B57\r\n            ":"\r\n            原来是 GL_BOOL_VEC2_ARB = 0x8B57\r\n            \r\n","\r\n            Specifies the data type of each coordinate in the array. Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT.\r\n            ":"\r\n            指定数组中每个坐标的数据类型。接受符号常量 GL_BYTE、GL_SHORT、GL_INT、GL_FLOAT 和 GL_DOUBLE。初始值为 GL_FLOAT。\r\n            \r\n","\r\n            Original was GL_TextureCubeMap = 0X8513\r\n            ":"\r\n            原来是 GL_TextureCubeMap = 0X8513\r\n            \r\n","Thrown if the Matrix2d is singular.":"如果 Matrix2d 是奇异的，则抛出。\r\n"," is\r\n            currently connected.\r\n            ":" 是\r\n            当前已连接。\r\n            \r\n","\r\n            Original was GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252\r\n            ":"\r\n            原来是 GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252\r\n            \r\n","\r\n            Original was GL_SAMPLES_ARB = 0x80A9\r\n            ":"\r\n            原来是 GL_SAMPLES_ARB = 0x80A9\r\n            \r\n","\r\n            Original was GL_COVERAGE_ALL_FRAGMENTS_NV = 0x8ED5\r\n            ":"\r\n            原来是 GL_COVERAGE_ALL_FRAGMENTS_NV = 0x8ED5\r\n            \r\n","[requires: v1.5]\r\n            Bind a named buffer object\r\n            ":"[要求：v1.5]\r\n            绑定命名缓冲区对象\r\n            \r\n","\r\n            Original was GL_FloatVec4 = 0X8b52\r\n            ":"\r\n            原来是 GL_FloatVec4 = 0X8b52\r\n            \r\n","\r\n            Original was GL_STANDARD_FONT_FORMAT_NV = 0x936C\r\n            ":"\r\n            原来是 GL_STANDARD_FONT_FORMAT_NV = 0x936C\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF\r\n            \r\n","[requires: NV_texture_multisample]":"[需要：NV_texture_multisample]\r\n","\r\n            Original was GL_SHADER_IMAGE_LOAD = 0x82A4\r\n            ":"\r\n            原来是 GL_SHADER_IMAGE_LOAD = 0x82A4\r\n            \r\n","[requires: OES_framebuffer_object]\r\n            Delete named framebuffer objects\r\n            ":"[要求：OES_framebuffer_object]\r\n            删除命名的帧缓冲区对象\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY = 0x8075\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY = 0x8075\r\n            \r\n","\r\n            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.\r\n            ":"\r\n            指定指向数组中第一个顶点的第一个坐标的指针。初始值为 0。\r\n            \r\n","\r\n            Used in GL.Apple.GetSync\r\n            ":"\r\n            用于 GL.Apple.GetSync\r\n            \r\n","\r\n            Original was GL_OES_depth24 = 1\r\n            ":"\r\n            原来是 GL_OES_depth24 = 1\r\n            \r\n","\r\n            Original was GL_STENCIL_BUFFER_BIT6_QCOM = 0x00400000\r\n            ":"\r\n            原来是 GL_STENCIL_BUFFER_BIT6_QCOM = 0x00400000\r\n            \r\n","\r\n            Original was GL_OP_CROSS_PRODUCT_EXT = 0x8797\r\n            ":"\r\n            原来是 GL_OP_CROSS_PRODUCT_EXT = 0x8797\r\n            \r\n","[length: 1] \r\n            Specifies the address of a variable into which will be written the number of characters written into infoLog.\r\n            ":"[长度：1]\r\n            指定变量的地址，其中将写入写入 infoLog 的字符数。\r\n            \r\n","\r\n            Original was GL_RGBA = 0x1908\r\n            ":"\r\n            原来是 GL_RGBA = 0x1908\r\n            \r\n","A new Matrix2 which holds the result of the addition":"保存加法结果的新 Matrix2\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Determines if a name corresponds to a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            确定名称是否对应于程序对象\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088\r\n            \r\n","[requires: v4.1 or ARB_separate_shader_objects|VERSION_4_1]\r\n            Delete program pipeline objects\r\n            ":"[要求：v4.1 或 ARB_separate_shader_objects|VERSION_4_1]\r\n            删除程序流水线对象\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP = 0x8513\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP = 0x8513\r\n            \r\n","[length: counterSize]":"[长度：counterSize]\r\n"," \r\n            Specifies the format of the pixel data. The following symbolic values are accepted: StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rgb, Bgr, Rgba, and Bgra.\r\n            ":" \r\n            指定像素数据的格式。接受以下符号值：StencilIndex、DepthComponent、DepthStencil、Red、Green、Blue、Rgb、Bgr、Rgba 和 Bgra。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_BYTE = 0x1401\r\n            ":"\r\n            原来是 GL_UNSIGNED_BYTE = 0x1401\r\n            \r\n","The minimum expected value (inclusive)":"最小期望值（含）\r\n","\r\n            Original was GL_DRAW_BUFFER12_EXT = 0x8831\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER12_EXT = 0x8831\r\n            \r\n","\r\n            Original was GL_LIST_PRIORITY_SGIX = 0x8182\r\n            ":"\r\n            原来是 GL_LIST_PRIORITY_SGIX = 0x8182\r\n            \r\n","[requires: v4.3 or ARB_vertex_attrib_binding|VERSION_4_3]\r\n            Associate a vertex attribute and a vertex buffer binding\r\n            ":"[要求：v4.3 或 ARB_vertex_attrib_binding|VERSION_4_3]\r\n            关联顶点属性和顶点缓冲区绑定\r\n            \r\n"," Pointer to a structure that receives the screen coordinates of the upper-left and lower-right corners of the window.":" 指向接收窗口左上角和右下角屏幕坐标的结构的指针。\r\n"," \r\n            Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.\r\n            ":" \r\n            指定查询对象参数的符号名称。接受的值为 QueryResult 或 QueryResultAvailable。\r\n            \r\n","\r\n            Original was GL_DEPTH24_STENCIL8_EXT = 0x88F0\r\n            ":"\r\n            原来是 GL_DEPTH24_STENCIL8_EXT = 0x88F0\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 0x8515\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 0x8515\r\n            \r\n","\r\n            Original was GL_MIN_SPARSE_LEVEL_AMD = 0x919B\r\n            ":"\r\n            原来是 GL_MIN_SPARSE_LEVEL_AMD = 0x919B\r\n            \r\n","\r\n            Used in GL.GetTexLevelParameter, GL.GetTexParameter and 10 other functions\r\n            ":"\r\n            用于 GL.GetTexLevelParameter、GL.GetTexParameter 和其他 10 个函数\r\n            \r\n","[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]\r\n            Retrieve values for multiple properties of a single active resource within a program object\r\n            ":"[要求：v4.3 或 ARB_program_interface_query|VERSION_4_3]\r\n            检索程序对象中单个活动资源的多个属性的值\r\n            \r\n"," \r\n            The internal format to be used to store the multisample texture's image. internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format.\r\n            ":" \r\n            用于存储多重采样纹理图像的内部格式。 internalformat 必须指定颜色可渲染、深度可渲染或模板可渲染的格式。\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39\r\n            \r\n"," \r\n            Specifies the target of the query operation.\r\n            ":" \r\n            指定查询操作的目标。\r\n            \r\n","\r\n            Original was GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8\r\n            ":"\r\n            原来是 GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8\r\n            \r\n"," \r\n            The histogram whose parameters are to be set. Must be one of Histogram or ProxyHistogram.\r\n            ":" \r\n            待设置参数的直方图。必须是 Histogram 或 ProxyHistogram 之一。\r\n            \r\n","[requires: v1.0]\r\n            Define an array of vertex data\r\n            ":"[要求：v1.0]\r\n            定义一个顶点数据数组\r\n            \r\n","The keypad 4 key.":"键盘 4 键。\r\n","\r\n            Used in GL.CallLists\r\n            ":"\r\n            在 GL.CallLists 中使用\r\n            \r\n","\r\n            Original was GL_INTENSITY12_EXT = 0x804C\r\n            ":"\r\n            原来是 GL_INTENSITY12_EXT = 0x804C\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7\r\n            \r\n"," \r\n            Specifies the value of pname.\r\n            ":" \r\n            指定 pname 的值。\r\n            \r\n","\r\n            Original was GL_CURRENT_ATTRIB_NV = 0x8626\r\n            ":"\r\n            原来是 GL_CURRENT_ATTRIB_NV = 0x8626\r\n            \r\n","A System.String representing this KeyboardDevice.":"表示此 KeyboardDevice 的 System.String。\r\n","[requires: EXT_point_parameters]\r\n            Specify point parameters\r\n            ":"[需要：EXT_point_parameters]\r\n            指定点参数\r\n            \r\n","The w component of the new Vector4.":"新 Vector4 的 w 分量。\r\n","\r\n            Original was GL_Texture5 = 0X84c5\r\n            ":"\r\n            原来是 GL_Texture5 = 0X84c5\r\n            \r\n","\r\n            Used in GL.FenceSync, GL.WaitSync\r\n            ":"\r\n            用于GL.FenceSync、GL.WaitSync\r\n            \r\n","[requires: EXT_stencil_clear_tag]":"[需要：EXT_stencil_clear_tag]\r\n","\r\n            Original was GL_TEXTURE_RENDERBUFFER_NV = 0x8E55\r\n            ":"\r\n            原来是 GL_TEXTURE_RENDERBUFFER_NV = 0x8E55\r\n            \r\n"," \r\n            Specifies the number of layers to include in the view.\r\n            ":" \r\n            指定要包含在视图中的层数。\r\n            \r\n"," \r\n            Specifies the symbolic name of the pixel transfer parameter to be set. Must be one of the following: MapColor, MapStencil, IndexShift, IndexOffset, RedScale, RedBias, GreenScale, GreenBias, BlueScale, BlueBias, AlphaScale, AlphaBias, DepthScale, or DepthBias.  Additionally, if the ARB_imaging extension is supported, the following symbolic names are accepted: PostColorMatrixRedScale, PostColorMatrixGreenScale, PostColorMatrixBlueScale, PostColorMatrixAlphaScale, PostColorMatrixRedBias, PostColorMatrixGreenBias, PostColorMatrixBlueBias, PostColorMatrixAlphaBias, PostConvolutionRedScale, PostConvolutionGreenScale, PostConvolutionBlueScale, PostConvolutionAlphaScale, PostConvolutionRedBias, PostConvolutionGreenBias, PostConvolutionBlueBias, and PostConvolutionAlphaBias.\r\n            ":" \r\n            指定要设置的像素传输参数的符号名称。必须是以下之一：MapColor、MapStencil、IndexShift、IndexOffset、RedScale、RedBias、GreenScale、GreenBias、BlueScale、BlueBias、AlphaScale、AlphaBias、DepthScale 或 DepthBias。 Additionally, if the ARB_imaging extension is supported, the following symbolic names are accepted: PostColorMatrixRedScale, PostColorMatrixGreenScale, PostColorMatrixBlueScale, PostColorMatrixAlphaScale, PostColorMatrixRedBias, PostColorMatrixGreenBias, PostColorMatrixBlueBias, PostColorMatrixAlphaBias, PostConvolutionRedScale, PostConvolutionGreenScale, PostConvolutionBlueScale, PostConvolutionAlphaScale, PostConvolutionRedBias, PostConvolutionGreenBias, PostConvolutionBlueBias, and PostConvolutionAlphaBias.\r\n            \r\n","[length: numSurfaces]":"[长度：numSurfaces]\r\n","\r\n            Original was GL_VertexAttribArrayType = 0X8625\r\n            ":"\r\n            原来是 GL_VertexAttribArrayType = 0X8625\r\n            \r\n","\r\n            Original was GL_ALREADY_SIGNALED_APPLE = 0x911A\r\n            ":"\r\n            原来是 GL_ALREADY_SIGNALED_APPLE = 0x911A\r\n            \r\n"," \r\n            Specifies the size of the buffer whose address is given in name.\r\n            ":" \r\n            指定其地址在名称中给出的缓冲区的大小。\r\n            \r\n","Gets or sets the handle of the window.":"获取或设置窗口的句柄。\r\n"," \r\n            Specifies the shader stage from which to query the subroutine name.\r\n            ":" \r\n            指定从中查询子例程名称的着色器阶段。\r\n            \r\n","\r\n            Original was GL_MATRIX15 = 0x88CF\r\n            ":"\r\n            原来是 GL_MATRIX15 = 0x88CF\r\n            \r\n","[requires: ARB_transpose_matrix]\r\n            Multiply the current matrix with the specified row-major ordered matrix\r\n            ":"[需要：ARB_transpose_matrix]\r\n            将当前矩阵与指定的行优先有序矩阵相乘\r\n            \r\n","\r\n            Original was GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C\r\n            \r\n","\r\n            Original was GL_PATH_END_CAPS_NV = 0x9076\r\n            ":"\r\n            原来是 GL_PATH_END_CAPS_NV = 0x9076\r\n            \r\n","[length: path]":"[长度：路径]\r\n","\r\n            Original was GL_TEXTURE4_ARB = 0x84C4\r\n            ":"\r\n            原来是 GL_TEXTURE4_ARB = 0x84C4\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B\r\n            ":"原来是 GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B\r\n            \r\n","\r\n            Subscribe to the ":"\r\n            订阅\r\n","\r\n            Used in GL.NV.GetMultisample\r\n            ":"\r\n            在 GL.NV.GetMultisample 中使用\r\n            \r\n","The display connection.":"显示连接。\r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2\r\n            \r\n","\r\n            Original was GL_PROGRAM_TEMPORARIES = 0x88A4\r\n            ":"\r\n            原来是 GL_PROGRAM_TEMPORARIES = 0x88A4\r\n            \r\n","\r\n            Original was GL_TextureMaxAnisotropyExt = 0x84FE\r\n            ":"\r\n            原来是 GL_TextureMaxAnisotropyExt = 0x84FE\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_FILTER_SCALE = 0x8014\r\n            ":"\r\n            原来是 GL_CONVOLUTION_FILTER_SCALE = 0x8014\r\n            \r\n","[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]":"[需要：EXT_separate_shader_objects|EXT_separate_shader_objects]\r\n","\r\n            NotUseful, WhenMapped, Always\r\n            ":"\r\n            NotUseful、WhenMapped、Always\r\n            \r\n","\r\n            Original was GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 0x8F66\r\n            ":"\r\n            原来是 GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 0x8F66\r\n            \r\n"," \r\n            The type of the debug message insert.\r\n            ":" \r\n            调试消息插入的类型。\r\n            \r\n","\r\n            Original was GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4\r\n            ":"\r\n            原来是 GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4\r\n            \r\n"," \r\n            Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded.\r\n            ":" \r\n            指定遮挡查询对象的名称，其结果用于确定渲染命令是否被丢弃。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS = 0x88B3\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS = 0x88B3\r\n            \r\n"," if this hat lies in the right hemicircle; otherwise, ":" 如果这顶帽子位于右半圆；否则，\r\n","[length: type,stride,count] \r\n            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.\r\n            ":"[长度：类型、步幅、计数]\r\n            指定指向数组中第一条法线的第一个坐标的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_ALPHA8_OES = 0x803C\r\n            ":"\r\n            原来是 GL_ALPHA8_OES = 0x803C\r\n            \r\n","\r\n            Original was GL_SQUARE_NV = 0x90A3\r\n            ":"\r\n            原来是 GL_SQUARE_NV = 0x90A3\r\n            \r\n","If width or height is less than 1.":"如果宽度或高度小于 1。\r\n","\r\n            Used in GL.Arb.BindBuffer, GL.Arb.BufferData and 7 other functions\r\n            ":"用于GL.Arb.BindBuffer、GL.Arb.BufferData等7个函数\r\n            \r\n","[requires: ARB_shader_objects]\r\n            Specify the value of a uniform variable for the current program object\r\n            ":"[需要：ARB_shader_objects]\r\n            为当前程序对象指定统一变量的值\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT = 0x8DA9\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT = 0x8DA9\r\n            \r\n","\r\n            Gets or sets the second column of this matrix.\r\n            ":"\r\n            获取或设置此矩阵的第二列。\r\n            \r\n","[requires: ANGLE_instanced_arrays]\r\n            Draw multiple instances of a range of elements\r\n            ":"[需要：ANGLE_instanced_arrays]\r\n            绘制一系列元素的多个实例\r\n            \r\n","\r\n            Original was GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900C\r\n            ":"\r\n            原来是 GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900C\r\n            \r\n","\r\n            Number of data points per second. This information may not be applicable for every mouse device.\r\n            ":"\r\n            每秒的数据点数。此信息可能不适用于所有鼠标设备。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035\r\n            \r\n","\r\n            Original was GL_SHININESS = 0x1601\r\n            ":"\r\n            原来是 GL_SHININESS = 0x1601\r\n            \r\n","\r\n            Original was GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B\r\n            ":"\r\n            原来是 GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B\r\n            \r\n","\r\n            Drives GameWindow on Windows.\r\n            This class supports OpenTK, and is not intended for use by OpenTK programs.\r\n            ":"\r\n            在 Windows 上驱动 GameWindow。\r\n            此类支持 OpenTK，并不打算供 OpenTK 程序使用。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 0x8CD0\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 0x8CD0\r\n            \r\n","[length: 2] \r\n            Specify one vertex of a rectangle.\r\n            ":"[长度：2]\r\n            指定矩形的一个顶点。\r\n            \r\n","\r\n            Original was GL_ISOLINES = 0x8E7A\r\n            ":"\r\n            原来是 GL_ISOLINES = 0x8E7A\r\n            \r\n","\r\n            Provides a common foundation for all flat API bindings and implements the extension loading interface.\r\n            ":"\r\n            为所有平面 API 绑定提供通用基础并实现扩展加载接口。\r\n            \r\n","\r\n            Original was GL_BufferUsage = 0X8765\r\n            ":"\r\n            原来是 GL_BufferUsage = 0X8765\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Retrieve information about attachments of a bound framebuffer object\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            检索有关绑定帧缓冲区对象附件的信息\r\n            \r\n","\r\n            Original was GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174\r\n            ":"\r\n            原来是 GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174\r\n            \r\n","\r\n            Original was GL_PROGRAM_UNDER_NATIVE_LIMITS = 0x88B6\r\n            ":"\r\n            原来是 GL_PROGRAM_UNDER_NATIVE_LIMITS = 0x88B6\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Define a two-dimensional evaluator\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            定义二维赋值器\r\n            \r\n","\r\n            OnUpdateFrame: Occurs at the specified logic update rate. Override to add your game\r\n            logic.\r\n            ":"\r\n            OnUpdateFrame：以指定的逻辑更新率发生。覆盖以添加您的游戏\r\n            逻辑。\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER4_NV = 0x8829\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER4_NV = 0x8829\r\n            \r\n","\r\n            Original was GL_OES_fbo_render_mipmap = 1\r\n            ":"\r\n            原来是 GL_OES_fbo_render_mipmap = 1\r\n            \r\n","[requires: NV_primitive_restart]":"[需要：NV_primitive_restart]\r\n","[requires: KHR_debug]\r\n            Control the reporting of debug messages in a debug context\r\n            ":"[要求：KHR_debug]\r\n            在调试上下文中控制调试消息的报告\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the W, Y, and X components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 W、Y 和 X 组件的 OpenTK.Vector3。\r\n            \r\n"," \r\n            Specify ths dimensions of the scissor box, in pixels.\r\n            ":" \r\n            以像素为单位指定剪刀框的尺寸。\r\n            \r\n","\r\n            Original was GL_PROGRAM_STRING_ARB = 0x8628\r\n            ":"\r\n            原来是 GL_PROGRAM_STRING_ARB = 0x8628\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Specify the clear value for the color index buffers\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            为颜色索引缓冲区指定清除值\r\n            \r\n"," \r\n            Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.\r\n            ":" \r\n            指定详细级别编号。级别 0 是基础映像级别。级别 n 是第 n 个 mipmap 缩减图像。\r\n            \r\n","\r\n            Original was GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17\r\n            ":"\r\n            原来是 GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17\r\n            \r\n","\r\n            Original was GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186\r\n            ":"\r\n            原来是 GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186\r\n            \r\n","\r\n            Original was GL_ALREADY_SIGNALED = 0x911A\r\n            ":"\r\n            原来是 GL_ALREADY_SIGNALED = 0x911A\r\n            \r\n","\r\n            Original was GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6\r\n            ":"\r\n            原来是 GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6\r\n            \r\n","\r\n            Original was GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E\r\n            ":"\r\n            原来是 GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E\r\n            \r\n","\r\n            Original was GL_INTERLACE_READ_INGR = 0x8568\r\n            ":"\r\n            原来是 GL_INTERLACE_READ_INGR = 0x8568\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC\r\n            \r\n"," \r\n            Specifies the target to whose data store data should be written.\r\n            ":" \r\n            指定应将其数据存储数据写入的目标。\r\n            \r\n"," \r\n            Specifies the name of a query object.\r\n            ":" \r\n            指定查询对象的名称。\r\n            \r\n","\r\n            Original was GL_R8_EXT = 0x8229\r\n            ":"\r\n            原来是 GL_R8_EXT = 0x8229\r\n            \r\n","The handle to this structure is passed in the lParam parameter of WM_INPUT.":"此结构的句柄在 WM_INPUT 的 lParam 参数中传递。\r\n","[length: size] \r\n            Specifies a pointer to the location where buffer object data is returned.\r\n            ":"[长度：尺寸]\r\n            指定指向返回缓冲区对象数据的位置的指针。\r\n            \r\n","[requires: v1.1][deprecated: v3.2]\r\n            Determine if textures are loaded in texture memory\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            确定纹理是否加载到纹理内存中\r\n            \r\n","The first button of the JoystickDevice.":"JoystickDevice 的第一个按钮。\r\n","The number 2 key.":"2 号键。\r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_GREEN_SIZE = 0x8029\r\n            ":"\r\n            原来是 GL_HISTOGRAM_GREEN_SIZE = 0x8029\r\n            \r\n"," \r\n            Specifies the target texture. Must be Texture1D or ProxyTexture1D.\r\n            ":" \r\n            指定目标纹理。必须是 Texture1D 或 ProxyTexture1D。\r\n            \r\n","\r\n            Original was GL_PARTIAL_SUCCESS_NV = 0x902E\r\n            ":"\r\n            原来是 GL_PARTIAL_SUCCESS_NV = 0x902E\r\n            \r\n","\r\n            Original was GL_EXCLUSION_NV = 0x92A0\r\n            ":"\r\n            原来是 GL_EXCLUSION_NV = 0x92A0\r\n            \r\n","\r\n            Creates an IGraphicsContext instance for the specified window.\r\n            ":"\r\n            为指定窗口创建一个 IGraphicsContext 实例。\r\n            \r\n","\r\n            Original was GL_POSITION = 0x1203\r\n            ":"\r\n            原来是 GL_POSITION = 0x1203\r\n            \r\n","\r\n            Original was GL_FUNC_SUBTRACT_EXT = 0x800A\r\n            ":"\r\n            原来是 GL_FUNC_SUBTRACT_EXT = 0x800A\r\n            \r\n","[length: 4] \r\n            For glScissorIndexedv, specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order.\r\n            ":"[长度：4]\r\n            对于 glScissorIndexedv，指定一个数组的地址，该数组按顺序包含每个剪刀框的左侧、底部、宽度和高度。\r\n            \r\n","\r\n            GetIconInfo creates bitmaps for the hbmMask and hbmColor members \r\n            of IconInfo. The calling application must manage these bitmaps and\r\n            delete them when they are no longer necessary.\r\n            ":"\r\n            GetIconInfo 为 hbmMask 和 hbmColor 成员创建位图\r\n            图标信息。调用应用程序必须管理这些位图和\r\n            不再需要时删除它们。\r\n            \r\n","\r\n            Get current 1D or 2D convolution filter kernel\r\n            ":"\r\n            获取当前的 1D 或 2D 卷积核\r\n            \r\n","If the target window is owned by the current process, GetWindowText causes a WM_GETTEXT message to be sent to the specified window or control. If the target window is owned by another process and has a caption, GetWindowText retrieves the window caption text. If the window does not have a caption, the return value is a null string. This behavior is by design. It allows applications to call GetWindowText without becoming unresponsive if the process that owns the target window is not responding. However, if the target window is not responding and it belongs to the calling application, GetWindowText will cause the calling application to become unresponsive.":"如果目标窗口为当前进程所有，则 GetWindowText 会导致将 WM_GETTEXT 消息发送到指定的窗口或控件。如果目标窗口由另一个进程拥有并且有标题，则 GetWindowText 检索窗口标题文本。如果窗口没有标题，则返回值为空字符串。此行为是设计使然。如果拥有目标窗口的进程没有响应，它允许应用程序调用 GetWindowText 而不会变得无响应。但是，如果目标窗口没有响应并且它属于调用应用程序，则 GetWindowText 将导致调用应用程序变得无响应。\r\n","\r\n            Gets or sets an OpenTK.Vector4 with the X, Z, Y, and W components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 X、Z、Y 和 W 组件的 OpenTK.Vector4。\r\n            \r\n","\r\n            The format of the pixel data in row and column. The allowable values are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_INTENSITY, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.\r\n            ":"\r\n            行和列中像素数据的格式。允许的值为 GL_RED、GL_GREEN、G​​L_BLUE、GL_ALPHA、GL_RGB、GL_BGR、GL_RGBA、GL_BGRA、GL_INTENSITY、GL_LUMINANCE 和 GL_LUMINANCE_ALPHA。\r\n            \r\n","\r\n            Original was GL_TEXTURE_MIN_LOD_SGIS = 0x813A\r\n            ":"\r\n            原来是 GL_TEXTURE_MIN_LOD_SGIS = 0x813A\r\n            \r\n","[length: uniformCount] \r\n            Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.\r\n            ":"[长度：uniformCount]\r\n            指定指向包含所查询制服名称的缓冲区的指针数组的地址。\r\n            \r\n","\r\n            Used in GL.DrawElements, GL.DrawElementsBaseVertex and 8 other functions\r\n            ":"\r\n            用于 GL.DrawElements、GL.DrawElementsBaseVertex 和其他 8 个函数\r\n            \r\n","\r\n            Used in GL.ConvolutionFilter1D, GL.ConvolutionFilter2D and 5 other functions\r\n            ":"\r\n            用于GL.ConvolutionFilter1D、GL.ConvolutionFilter2D等5个函数\r\n            \r\n","A new Matrix2x3d which holds the result of the subtraction":"保存减法结果的新 Matrix2x3d\r\n","\r\n            Original was GL_LINES_ADJACENCY = 0xA\r\n            ":"\r\n            原来是 GL_LINES_ADJACENCY = 0xA\r\n            \r\n","[length: 1] \r\n            The address of a variable that will receive the size of the varying.\r\n            ":"[长度：1]\r\n            将接收 varying 大小的变量的地址。\r\n            \r\n","\r\n            Specifies an XF86 display mode.\r\n            ":"\r\n            指定 XF86 显示模式。\r\n            \r\n"," \r\n            Specifies the target texture. Must be Texture1D.\r\n            ":" \r\n            指定目标纹理。必须是 Texture1D。\r\n            \r\n"," \r\n            The number of samples in the multisample texture's image.\r\n            ":" \r\n            多样本纹理图像中的样本数。\r\n            \r\n","\r\n            Disposes of the resources consumed by this instance.\r\n            ":"\r\n            处理此实例消耗的资源。\r\n            \r\n","\r\n            Used in GL.DebugMessageInsert, GL.GetDebugMessageLog\r\n            ":"\r\n            用于GL.DebugMessageInsert、GL.GetDebugMessageLog\r\n            \r\n","\r\n            Original was GL_TEXTURE_4D_BINDING_SGIS = 0x814F\r\n            ":"\r\n            原来是 GL_TEXTURE_4D_BINDING_SGIS = 0x814F\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER5 = 0x882A\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER5 = 0x882A\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Load a name onto the name stack\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            将名称加载到名称堆栈\r\n            \r\n","\r\n            Original was GL_STENCIL_BITS = 0x0D57\r\n            ":"\r\n            原来是 GL_STENCIL_BITS = 0x0D57\r\n            \r\n","The result of the calculation.":"计算的结果。\r\n","\r\n            Original was GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521\r\n            \r\n","[requires: v1.0]\r\n            Control the front and back writing of individual bits in the stencil planes\r\n            ":"[要求：v1.0]\r\n            控制模板平面中各个位的正面和背面写入\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER10 = 0x882F\r\n            ":"原来是 GL_DRAW_BUFFER10 = 0x882F\r\n            \r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30\r\n            \r\n","\r\n            Gets the absolute wheel position in integer units.\r\n            To support high-precision mice, it is recommended to use ":"\r\n            获取以整数为单位的绝对车轮位置。\r\n            支持高精度鼠标，推荐使用\r\n","A System.IntPtr containing the value for this instance.":"包含此实例值的 System.IntPtr。\r\n","\r\n            Converts this instance to it's transpose.\r\n            ":"\r\n            将此实例转换为其转置。\r\n            \r\n"," \r\n            The index of the color input to bind the user-defined varying out variable to\r\n            ":" \r\n            将用户定义的 varying out 变量绑定到的颜色输入的索引\r\n            \r\n","\r\n            Original was GL_LIGHT7 = 0x4007\r\n            ":"\r\n            原来是 GL_LIGHT7 = 0x4007\r\n            \r\n","\r\n            Original was GL_LowFloat = 0X8df0\r\n            ":"\r\n            原来是 GL_LowFloat = 0X8df0\r\n            \r\n","\r\n            Original was GL_CON_26_ATI = 0x895B\r\n            ":"\r\n            原来是 GL_CON_26_ATI = 0x895B\r\n            \r\n","[requires: NV_vertex_program4]":"[要求：NV_vertex_program4]\r\n","\r\n            Original was GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061\r\n            ":"\r\n            原来是 GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT32F = 0x8CAC\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT32F = 0x8CAC\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Determine if a name corresponds to a sync object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            确定名称是否对应于同步对象\r\n            \r\n","\r\n            Original was GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1\r\n            ":"\r\n            原来是 GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1\r\n            \r\n","\r\n            When overriding the default game loop you should call ProcessEvents()\r\n            to ensure that your GameWindow responds to operating system events.\r\n            ":"\r\n            覆盖默认游戏循环时，您应该调用 ProcessEvents()\r\n            以确保您的 GameWindow 响应操作系统事件。\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_OTHER_KHR = 0x824B\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_OTHER_KHR = 0x824B\r\n            \r\n"," \r\n            Specifies a floating-point value used in the accumulation buffer operation. op determines how value is used.\r\n            ":" \r\n            指定在累积缓冲区操作中使用的浮点值。 op 确定如何使用值。\r\n            \r\n","\r\n            Original was GL_TRIANGULAR_NV = 0x90A5\r\n            ":"\r\n            原来是 GL_TRIANGULAR_NV = 0x90A5\r\n            \r\n","\r\n            background, None, or ParentRelative\r\n            ":"\r\n            背景、无或 ParentRelative\r\n            \r\n","\r\n            Original was GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12\r\n            ":"\r\n            原来是 GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12\r\n            \r\n","[in] Pointer to a DEVMODE structure that describes the new graphics mode. If lpDevMode is NULL, all the values currently in the registry will be used for the display setting. Passing NULL for the lpDevMode parameter and 0 for the dwFlags parameter is the easiest way to return to the default mode after a dynamic mode change.":"[in] 指向描述新图形模式的 DEVMODE 结构的指针。如果 lpDevMode 为 NULL，则当前注册表中的所有值都将用于显示设置。为 lpDevMode 参数传递 NULL 并为 dwFlags 参数传递 0 是动态模式更改后返回默认模式的最简单方法。\r\n","[requires: NV_framebuffer_multisample]\r\n            Establish data storage, format, dimensions and sample count of a renderbuffer object's image\r\n            ":"[需要：NV_framebuffer_multisample]\r\n            建立渲染缓冲区对象图像的数据存储、格式、尺寸和样本计数\r\n            \r\n","\r\n            Original was GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9\r\n            ":"\r\n            原来是 GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9\r\n            \r\n","\r\n            Original was GL_SHADER_STORAGE_BUFFER_START = 0x90D4\r\n            ":"\r\n            原来是 GL_SHADER_STORAGE_BUFFER_START = 0x90D4\r\n            \r\n","\r\n            Original was GL_EYE_PLANE_ABSOLUTE_NV = 0x855C\r\n            ":"\r\n            原来是 GL_EYE_PLANE_ABSOLUTE_NV = 0x855C\r\n            \r\n"," \r\n            Specifies the number of vertex array object names to generate.\r\n            ":" \r\n            指定要生成的顶点数组对象名称的数量。\r\n            \r\n","\r\n            Gets a System.Boolean representing the state of the mouse button for the event.\r\n            ":"\r\n            获取表示事件的鼠标按钮状态的 System.Boolean。\r\n            \r\n","\r\n            Displays the window as a minimized window. This value is similar to SW_SHOWMINIMIZED, except the window is not activated.\r\n            ":"\r\n            将窗口显示为最小化窗口。这个值类似于 SW_SHOWMINIMIZED，只是窗口没有被激活。\r\n            \r\n"," for the specified keyboard device.\r\n            ":" 对于指定的键盘设备。\r\n            \r\n","[requires: v4.2 or ARB_texture_storage|VERSION_4_2]\r\n            Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture\r\n            ":"[要求：v4.2 或 ARB_texture_storage|VERSION_4_2]\r\n            同时为二维或一维数组纹理的所有级别指定存储\r\n            \r\n","[requires: EXT_light_texture]":"[需要：EXT_light_texture]\r\n","\r\n            Used in GL.FramebufferParameter, GL.GetFramebufferParameter and 2 other functions\r\n            ":"\r\n            用于 GL.FramebufferParameter、GL.GetFramebufferParameter 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_RGB_SNORM = 0x8F92\r\n            ":"\r\n            原来是 GL_RGB_SNORM = 0x8F92\r\n            \r\n","Add the Vector passed as parameter to this instance.":"将作为参数传递的 Vector 添加到此实例。\r\n"," \r\n            Specified how the alpha destination blending factor is computed.  The same symbolic constants are accepted as for dstRGB. The initial value is Zero.\r\n            ":" \r\n            指定如何计算 alpha 目标混合因子。接受与 dstRGB 相同的符号常量。初始值为零。\r\n            \r\n","[requires: v4.5 or ARB_texture_barrier|VERSION_4_5]":"[要求：v4.5 或 ARB_texture_barrier|VERSION_4_5]\r\n","The x component":"x 分量\r\n","\r\n            Gets a System.Int32 indicating the available amount of JoystickButtons.\r\n            ":"\r\n            获取一个 System.Int32，指示可用的 JoystickButtons 数量。\r\n            \r\n","[requires: v1.5]\r\n            Return parameters of a query object target\r\n            ":"[要求：v1.5]\r\n            查询对象目标的返回参数\r\n            \r\n","\r\n            Original was GL_GET_TEXTURE_IMAGE_TYPE = 0x8292\r\n            ":"\r\n            原来是 GL_GET_TEXTURE_IMAGE_TYPE = 0x8292\r\n            \r\n","\r\n            Original was GL_FOG_COORD_ARRAY_TYPE = 0x8454\r\n            ":"\r\n            原来是 GL_FOG_COORD_ARRAY_TYPE = 0x8454\r\n            \r\n","[requires: v1.1]\r\n            Delete named textures\r\n            ":"[要求：v1.1]\r\n            删除命名纹理\r\n            \r\n","\r\n            Original was GL_BUFFER_VARIABLE = 0x92E5\r\n            ":"\r\n            原来是 GL_BUFFER_VARIABLE = 0x92E5\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector2 with the W and Z components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 W 和 Z 组件的 OpenTK.Vector2。\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23\r\n            \r\n","\r\n            Retrieves the combined ":"\r\n            检索合并的\r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663\r\n            \r\n","\r\n            Original was GL_COMBINE4_NV = 0x8503\r\n            ":"\r\n            原来是 GL_COMBINE4_NV = 0x8503\r\n            \r\n","[length: bufSize] \r\n            Specifies the address of a variable into which to write the retrieved information.\r\n            ":"[长度：bufSize]\r\n            指定要将检索到的信息写入其中的变量的地址。\r\n            \r\n","\r\n            Original was GL_TRANSPOSE_AFFINE_3D_NV = 0x9098\r\n            ":"\r\n            原来是 GL_TRANSPOSE_AFFINE_3D_NV = 0x9098\r\n            \r\n"," \r\n            Specifies the symbolic name of the parameter to be set. One value affects the packing of pixel data into memory: PackAlignment. The other affects the unpacking of pixel data from memory: UnpackAlignment.\r\n            ":" \r\n            指定要设置的参数的符号名称。一个值影响将像素数据打包到内存中：PackAlignment。另一个影响从内存中解包像素数据：UnpackAlignment。\r\n            \r\n","\r\n            Original was GL_AMBIENT_AND_DIFFUSE = 0x1602\r\n            ":"\r\n            原来是 GL_AMBIENT_AND_DIFFUSE = 0x1602\r\n            \r\n","\r\n            Original was GL_REG_22_ATI = 0x8937\r\n            ":"\r\n            原来是 GL_REG_22_ATI = 0x8937\r\n            \r\n","\r\n            Original was GL_SOURCE2_ALPHA = 0x858A\r\n            ":"\r\n            原来是 GL_SOURCE2_ALPHA = 0x858A\r\n            \r\n","[length: 2] \r\n            Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.\r\n            ":"[长度：2]\r\n            指定指向二元素数组的指针，其中返回格式的最小和最大可表示量级的对数 sub 2。\r\n            \r\n","\r\n            Original was GL_LINE = 0x1B01\r\n            ":"原来是 GL_LINE = 0x1B01\r\n            \r\n"," for this debug message.":" 对于此调试消息。\r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 0x93E0\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 0x93E0\r\n            \r\n","[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]\r\n            Load active subroutine uniforms\r\n            ":"[需要：v4.0 或 ARB_shader_subroutine|VERSION_4_0]\r\n            加载活动子程序制服\r\n            \r\n","\r\n            A raw input message is in the queue. For more information, see Raw Input.\r\n            Windows XP and higher only.\r\n            ":"\r\n            原始输入消息在队列中。有关详细信息，请参阅原始输入。\r\n            仅限 Windows XP 及更高版本。\r\n            \r\n","\r\n            Size, in bytes, of a RAWINPUTDEVICE structure.\r\n            ":"\r\n            RAWINPUTDEVICE 结构的大小（以字节为单位）。\r\n            \r\n","\r\n            Original was GL_SHADER_COMPILER = 0x8DFA\r\n            ":"\r\n            原来是 GL_SHADER_COMPILER = 0x8DFA\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER14_NV = 0x8833\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER14_NV = 0x8833\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Set the lighting model parameters\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            设置光照模型参数\r\n            \r\n"," \r\n            The target color table. Must be ColorTable, PostConvolutionColorTable, PostColorMatrixColorTable, ProxyColorTable, ProxyPostConvolutionColorTable, or ProxyPostColorMatrixColorTable.\r\n            ":" \r\n            目标颜色表。必须是 ColorTable、PostConvolutionColorTable、PostColorMatrixColorTable、ProxyColorTable、ProxyPostConvolutionColorTable 或 ProxyPostColorMatrixColorTable。\r\n            \r\n","A new instance that is the result of the multiplication":"作为乘法结果的新实例\r\n"," \r\n            The type of the pixel data in data. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            ":"数据中像素数据的类型。 Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            \r\n","\r\n            Used in GL.Amd.QueryObjectParameter\r\n            ":"\r\n            在 GL.Amd.QueryObjectParameter 中使用\r\n            \r\n","\r\n            Original was GL_MAX_SAMPLES_EXT = 0x8D57\r\n            ":"\r\n            原来是 GL_MAX_SAMPLES_EXT = 0x8D57\r\n            \r\n","Specifies the parent window.":"指定父窗口。\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Load a precompiled shader binary\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            加载预编译的着色器二进制文件\r\n            \r\n","\r\n            The window is minimized to the taskbar (also known as 'iconified').\r\n            ":"\r\n            窗口最小化到任务栏（也称为“图标化”）。\r\n            \r\n","\r\n            Original was GL_GREEN_INTEGER_EXT = 0x8D95\r\n            ":"\r\n            原来是 GL_GREEN_INTEGER_EXT = 0x8D95\r\n            \r\n","\r\n            A WM_KEYUP, WM_KEYDOWN, WM_SYSKEYUP, or WM_SYSKEYDOWN message is in the queue.\r\n            ":"\r\n            WM_KEYUP、WM_KEYDOWN、WM_SYSKEYUP 或 WM_SYSKEYDOWN 消息在队列中。\r\n            \r\n","\r\n            Original was GL_INDEX_ARRAY_COUNT_EXT = 0x8087\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_COUNT_EXT = 0x8087\r\n            \r\n","[requires: v4.3 or KHR_debug|VERSION_4_3]\r\n            Retrieve messages from the debug message log\r\n            ":"[要求：v4.3 或 KHR_debug|VERSION_4_3]\r\n            从调试消息日志中检索消息\r\n            \r\n","\r\n            Original was GL_STATIC_READ_ARB = 0x88E5\r\n            ":"\r\n            原来是 GL_STATIC_READ_ARB = 0x88E5\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75\r\n            \r\n","\r\n            Original was GL_DSDT_NV = 0x86F5\r\n            ":"\r\n            原来是 GL_DSDT_NV = 0x86F5\r\n            \r\n","\r\n            Original was GL_CLAMP_TO_BORDER_ARB = 0x812D\r\n            ":"\r\n            原来是 GL_CLAMP_TO_BORDER_ARB = 0x812D\r\n            \r\n","\r\n            Original was GL_SEPARATE_ATTRIBS_EXT = 0x8C8D\r\n            ":"\r\n            原来是 GL_SEPARATE_ATTRIBS_EXT = 0x8C8D\r\n            \r\n","[requires: v4.3 or ARB_program_interface_query|VERSION_4_3]\r\n            Query the index of a named resource within a program\r\n            ":"[要求：v4.3 或 ARB_program_interface_query|VERSION_4_3]\r\n            查询程序中命名资源的索引\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 0x8E8A\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 0x8E8A\r\n            \r\n"," \r\n            The size, in basic machine units of the range of the data store to fill.\r\n            ":" \r\n            要填充的数据存储范围的基本机器单位的大小。\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A\r\n            \r\n","\r\n            Returns the handles of the shader objects attached to a program object\r\n            ":"\r\n            返回附加到程序对象的着色器对象的句柄\r\n            \r\n","\r\n            Original was GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5\r\n            ":"\r\n            原来是 GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5\r\n            \r\n","\r\n            Gets a string describing this MouseDevice.\r\n            ":"\r\n            获取描述此 MouseDevice 的字符串。\r\n            \r\n","Ignored. This is reserved for future use.":"忽略。这是为将来使用保留的。\r\n","\r\n            Original was GL_MAX_TESS_GEN_LEVEL_EXT = 0x8E7E\r\n            ":"\r\n            原来是 GL_MAX_TESS_GEN_LEVEL_EXT = 0x8E7E\r\n            \r\n"," \r\n            Specify the target of the bind operation. target must be one of AtomicCounterBuffer, TransformFeedbackBuffer, UniformBuffer or ShaderStorageBuffer.\r\n            ":" \r\n            指定绑定操作的目标。 target 必须是 AtomicCounterBuffer、TransformFeedbackBuffer、UniformBuffer 或 ShaderStorageBuffer 之一。\r\n            \r\n","A new Matrix2 which holds the result of the multiplication":"保存乘法结果的新 Matrix2\r\n","\r\n            Gets or sets an OpenTK.Vector4 with the Y, X, Z, and W components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Y、X、Z 和 W 组件的 OpenTK.Vector4。\r\n            \r\n","[requires: v3.0]\r\n            Returns the value of a uniform variable\r\n            ":"[要求：v3.0]\r\n            返回统一变量的值\r\n            \r\n","\r\n            Windows NT/2000/XP: You should access the data represented by the lpCreateParams member\r\n            using a pointer that has been declared using the UNALIGNED type, because the pointer\r\n            may not be DWORD aligned.\r\n            ":"\r\n            Windows NT/2000/XP：您应该访问 lpCreateParams 成员表示的数据\r\n            使用已使用 UNALIGNED 类型声明的指针，因为指针\r\n            可能不是 DWORD 对齐的。\r\n            \r\n","\r\n            Specifies the y-coordinate of the upper-left corner of the rectangle.\r\n            ":"指定矩形左上角的 y 坐标。\r\n            \r\n"," \r\n            Specify the , , and  coordinates of the new current normal. The initial value of the current normal is the unit vector, (0, 0, 1).\r\n            ":" \r\n            指定新的当前法线的 、 和 坐标。当前法线的初始值是单位向量，(0, 0, 1)。\r\n            \r\n","[requires: EXT_texture_buffer]\r\n            Bind a range of a buffer's data store to a buffer texture\r\n            ":"[需要：EXT_texture_buffer]\r\n            将缓冲区数据存储的范围绑定到缓冲区纹理\r\n            \r\n","[requires: APPLE_texture_range]":"[要求：APPLE_texture_range]\r\n","\r\n            Original was GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B\r\n            ":"\r\n            原来是 GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B\r\n            \r\n","\r\n            Original was GL_FramebufferUnsupported = 0X8cdd\r\n            ":"\r\n            原来是 GL_FramebufferUnsupported = 0X8cdd\r\n            \r\n","\r\n            Construct a new Quaternion from vector and w components\r\n            ":"\r\n            从向量和 w 分量构造一个新的四元数\r\n            \r\n","\r\n            Original was GL_SUBSAMPLE_DISTANCE_AMD = 0x883F\r\n            ":"\r\n            原来是 GL_SUBSAMPLE_DISTANCE_AMD = 0x883F\r\n            \r\n","\r\n            Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.\r\n            ":"\r\n            指定单值纹理参数的符号名称。 pname can be one of the following: GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.\r\n            \r\n","\r\n            Original was GL_RELEASED_APPLE = 0x8A19\r\n            ":"\r\n            原来是 GL_RELEASED_APPLE = 0x8A19\r\n            \r\n"," if this instance has a big button; otherwise, ":" 如果这个实例有一个大按钮；否则，\r\n","\r\n            Used in GL.Arb.PointParameter\r\n            ":"\r\n            在 GL.Arb.PointParameter 中使用\r\n            \r\n"," \r\n            Specifies the shader stage from which to query for the subroutine parameter. shadertype must be one of VertexShader, TessControlShader, TessEvaluationShader, GeometryShader or FragmentShader.\r\n            ":" \r\n            指定从中查询子例程参数的着色器阶段。 shadertype 必须是 VertexShader、TessControlShader、TessEvaluationShader、GeometryShader 或 FragmentShader 之一。\r\n            \r\n","The insert key.":"插入键。\r\n","\r\n            Specifies the width of the border. Must be either 0 or 1.\r\n            ":"\r\n            指定边框的宽度。必须为 0 或 1。\r\n            \r\n","\r\n            Original was GL_SAMPLES_SGIS = 0x80A9\r\n            ":"\r\n            原来是 GL_SAMPLES_SGIS = 0x80A9\r\n            \r\n","\r\n            Original was GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A\r\n            ":"\r\n            原来是 GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A\r\n            \r\n","\r\n            Original was GL_RGB32F = 0x8815\r\n            ":"\r\n            原来是 GL_RGB32F = 0x8815\r\n            \r\n","\r\n            Original was GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8\r\n            ":"\r\n            原来是 GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8\r\n            \r\n"," \r\n            Specifies a texture environment. May be TextureEnv, TextureFilterControl, or PointSprite.\r\n            ":" \r\n            指定纹理环境。可能是 TextureEnv、TextureFilterControl 或 PointSprite。\r\n            \r\n","[requires: v4.3 or ARB_clear_buffer_object|VERSION_4_3]\r\n            Fill a buffer object's data store with a fixed value\r\n            ":"[要求：v4.3 或 ARB_clear_buffer_object|VERSION_4_3]\r\n            用固定值填充缓冲区对象的数据存储\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 0x93E3\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 0x93E3\r\n            \r\n","\r\n            Original was GL_TextureMinLod = 0x813A\r\n            ":"\r\n            原来是 GL_TextureMinLod = 0x813A\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Returns the information log for a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回程序对象的信息日志\r\n            \r\n","\r\n            Original was GL_STENCIL_BUFFER_BIT7_QCOM = 0x00800000\r\n            ":"\r\n            原来是 GL_STENCIL_BUFFER_BIT7_QCOM = 0x00800000\r\n            \r\n","\r\n            Used in GL.ReadnPixels, GL.ReadPixels and 5 other functions\r\n            ":"\r\n            用于GL.ReadnPixels、GL.ReadPixels等5个函数\r\n            \r\n","\r\n            Original was GL_INDEX_TEST_REF_EXT = 0x81B7\r\n            ":"\r\n            原来是 GL_INDEX_TEST_REF_EXT = 0x81B7\r\n            \r\n"," \r\n            This value must be 0.\r\n            ":" \r\n            该值必须为 0。\r\n            \r\n","\r\n            Original was GL_MAX_COLOR_ATTACHMENTS_NV = 0x8CDF\r\n            ":"\r\n            原来是 GL_MAX_COLOR_ATTACHMENTS_NV = 0x8CDF\r\n            \r\n","XCreateWindow can generate BadAlloc BadColor, BadCursor, BadMatch, BadPixmap, BadValue, and BadWindow errors. ":"XCreateWindow 可以生成 BadAlloc BadColor、BadCursor、BadMatch、BadPixmap、BadValue 和 BadWindow 错误。\r\n","\r\n            Original was GL_RENDERBUFFER_HEIGHT = 0x8D43\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_HEIGHT = 0x8D43\r\n            \r\n","\r\n            Original was GL_TEXTURE_1D_ARRAY_EXT = 0x8C18\r\n            ":"\r\n            原来是 GL_TEXTURE_1D_ARRAY_EXT = 0x8C18\r\n            \r\n","\r\n            Original was GL_DS_BIAS_NV = 0x8716\r\n            ":"\r\n            原来是 GL_DS_BIAS_NV = 0x8716\r\n            \r\n","\r\n            Original was GL_TEXTURE11_ARB = 0x84CB\r\n            ":"\r\n            原来是 GL_TEXTURE11_ARB = 0x84CB\r\n            \r\n","\r\n            Occurs after the window has closed. \r\n            ":"\r\n            在窗口关闭后发生。\r\n            \r\n","\r\n            Original was GL_RGBA8UI_EXT = 0x8D7C\r\n            ":"\r\n            原来是 GL_RGBA8UI_EXT = 0x8D7C\r\n            \r\n","\r\n            Original was GL_MATRIX22_ARB = 0x88D6\r\n            ":"\r\n            原来是 GL_MATRIX22_ARB = 0x88D6\r\n            \r\n","\r\n            Original was GL_PROGRAM_ERROR_STRING_ARB = 0x8874\r\n            ":"\r\n            原来是 GL_PROGRAM_ERROR_STRING_ARB = 0x8874\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE\r\n            \r\n","[requires: v1.1]\r\n            Set the scale and units used to calculate depth values\r\n            ":"[要求：v1.1]\r\n            设置用于计算深度值的比例和单位\r\n            \r\n","\r\n            A handle to the icon to be destroyed. The icon must not be in use.\r\n            ":"\r\n            要销毁的图标的句柄。不得使用该图标。\r\n            \r\n"," \r\n            Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.\r\n            ":" \r\n            指定视口的宽度和高度。当 GL 上下文首次附加到窗口时，宽度和高度将设置为该窗口的尺寸。\r\n            \r\n"," \r\n            Specifies the target texture. Must be Texture3D.\r\n            ":" \r\n            指定目标纹理。必须是 Texture3D。\r\n            \r\n","\r\n            Used in GL.Apple.FinishObject, GL.Apple.TestObject\r\n            ":"\r\n            用于 GL.Apple.FinishObject, GL.Apple.TestObject\r\n            \r\n","\r\n            Original was GL_MITER_REVERT_NV = 0x90A7\r\n            ":"\r\n            原来是 GL_MITER_REVERT_NV = 0x90A7\r\n            \r\n","[requires: APPLE_sync]\r\n            Delete a sync object\r\n            ":"[需要：APPLE_sync]\r\n            删除同步对象\r\n            \r\n","\r\n            Original was GL_READ_FRAMEBUFFER_NV = 0x8CA8\r\n            ":"\r\n            原来是 GL_READ_FRAMEBUFFER_NV = 0x8CA8\r\n            \r\n","\r\n            Original was GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E\r\n            ":"\r\n            原来是 GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E\r\n            \r\n","\r\n            Original was GL_Back = 0X0405\r\n            ":"\r\n            原来是 GL_Back = 0X0405\r\n            \r\n","\r\n            Original was GL_ROUNDED_RECT_NV = 0xE8\r\n            ":"\r\n            原来是 GL_ROUNDED_RECT_NV = 0xE8\r\n            \r\n","\r\n            Original was GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403\r\n            ":"\r\n            原来是 GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403\r\n            \r\n","\r\n            Original was GL_TEXTURE29 = 0x84DD\r\n            ":"\r\n            原来是 GL_TEXTURE29 = 0x84DD\r\n            \r\n"," \r\n            Specifies the name of the pixel map to return. Accepted values are PixelMapIToI, PixelMapSToS, PixelMapIToR, PixelMapIToG, PixelMapIToB, PixelMapIToA, PixelMapRToR, PixelMapGToG, PixelMapBToB, and PixelMapAToA.\r\n            ":" \r\n            指定要返回的像素图的名称。接受的值为 PixelMapIToI、PixelMapSToS、PixelMapIToR、PixelMapIToG、PixelMapIToB、PixelMapIToA、PixelMapRToR、PixelMapGToG、PixelMapBToB 和 PixelMapAToA。\r\n            \r\n","\r\n            Contains the header information that is part of the raw input data.\r\n            ":"\r\n            包含作为原始输入数据一部分的标头信息。\r\n            \r\n","\r\n            Original was GL_BOUNDING_BOX_NV = 0x908D\r\n            ":"\r\n            原来是 GL_BOUNDING_BOX_NV = 0x908D\r\n            \r\n","[length: rowBufSize]":"[长度：rowBufSize]\r\n","\r\n            Original was GL_SAMPLE_BUFFERS_ARB = 0x80A8\r\n            ":"\r\n            原来是 GL_SAMPLE_BUFFERS_ARB = 0x80A8\r\n            \r\n","\r\n            Original was GL_UNSIGNED_NORMALIZED_EXT = 0x8C17\r\n            ":"\r\n            原来是 GL_UNSIGNED_NORMALIZED_EXT = 0x8C17\r\n            \r\n","\r\n            Original was GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143\r\n            ":"\r\n            原来是 GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143\r\n            \r\n","\r\n            Build a scaling matrix\r\n            ":"\r\n            构建缩放矩阵\r\n            \r\n","\r\n            Select the optimal OpenTK.Platform implementation\r\n            for the current operating system. This is the default\r\n            option.\r\n            ":"\r\n            选择最佳的 OpenTK.Platform 实现\r\n            对于当前的操作系统。这是默认值\r\n            选项。\r\n            \r\n"," \r\n            Specifies the sample parameter name. pname must be SamplePosition.\r\n            ":" \r\n            指定示例参数名称。 pname 必须是 SamplePosition。\r\n            \r\n"," \r\n            Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.\r\n            ":" \r\n            指定详细级别编号。级别 0 是基础映像级别。 Level 是第 n sup 个 mipmap 缩减图像。\r\n            \r\n","\r\n            Specify the lower left corner of the scissor box. Initially (0, 0).\r\n            ":"\r\n            指定剪刀框的左下角。最初是 (0, 0)。\r\n            \r\n","\r\n            Original was GL_STENCIL_BUFFER_BIT5_QCOM = 0x00200000\r\n            ":"\r\n            原来是 GL_STENCIL_BUFFER_BIT5_QCOM = 0x00200000\r\n            \r\n","\r\n            Returns a System.String representing this KeyboardDevice.\r\n            ":"\r\n            返回表示此 KeyboardDevice 的 System.String。\r\n            \r\n","\r\n            Original was GL_FramebufferAttachmentTextureCubeMapFace = 0X8cd3\r\n            ":"\r\n            原来是 GL_FramebufferAttachmentTextureCubeMapFace = 0X8cd3\r\n            \r\n","\r\n            Enters the game loop of the GameWindow using the specified update rate.\r\n            ":"\r\n            使用指定的更新率进入 GameWindow 的游戏循环。\r\n            \r\n","\r\n            Original was GL_INTENSITY_EXT = 0x8049\r\n            ":"\r\n            原来是 GL_INTENSITY_EXT = 0x8049\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT0 = 0x8CE0\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT0 = 0x8CE0\r\n            \r\n","\r\n            Original was GL_ELEMENT_ARRAY_ATI = 0x8768\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_ATI = 0x8768\r\n            \r\n"," \r\n            Specifies whether the depth buffer is enabled for writing. If flag is False, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.\r\n            ":" \r\n            指定深度缓冲区是否启用写入。如果标志为 False，则禁用深度缓冲区写入。否则，它被启用。最初，启用深度缓冲区写入。\r\n            \r\n","\r\n            Original was GL_CLAMP_TO_EDGE_SGIS = 0x812F\r\n            ":"\r\n            原来是 GL_CLAMP_TO_EDGE_SGIS = 0x812F\r\n            \r\n"," \r\n            specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.\r\n            ":" \r\n            指定 RGB 混合方程式，源颜色和目标颜色的红色、绿色和蓝色分量如何组合。它必须是 FuncAdd、FuncSubtract、FuncReverseSubtract、Min、Max。\r\n            \r\n","[length: 2] \r\n            Specifies the address of an integer into which the numeric precision of the implementation is written.\r\n            ":"[长度：2]\r\n            指定一个整数的地址，实现的数字精度被写入其中。\r\n            \r\n","\r\n            Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least two. texture must be one of GL_TEXTURE, where i ranges from 0 to the value of GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value. The initial value is GL_TEXTURE0.\r\n            ":"\r\n            指定激活哪个纹理单元。纹理单元的数量取决于实现，但必须至少为两个。 texture 必须是 GL_TEXTURE 之一，其中 i 的范围从 0 到 GL_MAX_TEXTURE_COORDS - 1 的值，这是一个依赖于实现的值。初始值为 GL_TEXTURE0。\r\n            \r\n","\r\n            Original was GL_LIGHT5 = 0x4005\r\n            ":"\r\n            原来是 GL_LIGHT5 = 0x4005\r\n            \r\n","\r\n            Get minimum and maximum pixel values\r\n            ":"\r\n            获取最小和最大像素值\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9\r\n            \r\n","\r\n            Original was GL_COMPUTE_SHADER = 0x91B9\r\n            ":"\r\n            原来是 GL_COMPUTE_SHADER = 0x91B9\r\n            \r\n","A new Matrix2x4d which holds the result of the multiplication":"保存乘法结果的新 Matrix2x4d\r\n","\r\n            This delegate represents any method that takes no arguments and returns an int.\r\n            I would have used Func but that requires .NET 4\r\n            ":"\r\n            此委托表示任何不带参数并返回 int 的方法。\r\n            我会使用 Func 但这需要 .NET 4\r\n            \r\n","GameControllerAxis":"游戏控制器轴\r\n","\r\n            Used in GL.CompressedTexImage2D, GL.CompressedTexSubImage2D and 6 other functions\r\n            ":"\r\n            用于 GL.CompressedTexImage2D、GL.CompressedTexSubImage2D 和其他 6 个函数\r\n            \r\n","[requires: v2.1]":"[要求：v2.1]\r\n","\r\n            Original was GL_PROXY_TEXTURE_3D_EXT = 0x8070\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_3D_EXT = 0x8070\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Enable or disable server-side GL capabilities\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            启用或禁用服务器端 GL 功能\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify multisample coverage parameters\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定多样本覆盖参数\r\n            \r\n","\r\n            Original was GL_DECODE_EXT = 0x8A49\r\n            ":"\r\n            原来是 GL_DECODE_EXT = 0x8A49\r\n            \r\n","\r\n            Instances of this class implement the ":"\r\n            此类的实例实现了\r\n","\r\n            Used in GL.ShaderBinary\r\n            ":"\r\n            在 GL.ShaderBinary 中使用\r\n            \r\n","\r\n            Original was GL_ATTRIB_ARRAY_POINTER_NV = 0x8645\r\n            ":"\r\n            原来是 GL_ATTRIB_ARRAY_POINTER_NV = 0x8645\r\n            \r\n","\r\n            Original was GL_SHADER_SOURCE_LENGTH = 0x8B88\r\n            ":"\r\n            原来是 GL_SHADER_SOURCE_LENGTH = 0x8B88\r\n            \r\n","\r\n            Original was GL_INDEX_BITS = 0x0D51\r\n            ":"\r\n            原来是 GL_INDEX_BITS = 0x0D51\r\n            \r\n","\r\n            Original was GL_FRAGMENT_LIGHT1_SGIX = 0x840D\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHT1_SGIX = 0x840D\r\n            \r\n","\r\n            Represents a Quaternion.\r\n            ":"\r\n            代表一个四元数。\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4\r\n            \r\n","\r\n            Used in GL.Apple.VertexArrayParameter\r\n            ":"\r\n            在 GL.Apple.VertexArrayParameter 中使用\r\n            \r\n","\r\n            Original was GL_ALPHA_MIN_SGIX = 0x8320\r\n            ":"\r\n            原来是 GL_ALPHA_MIN_SGIX = 0x8320\r\n            \r\n","\r\n            Original was GL_MAX_SAMPLES_APPLE = 0x8D57\r\n            ":"\r\n            原来是 GL_MAX_SAMPLES_APPLE = 0x8D57\r\n            \r\n"," for the left button.\r\n            ":" 对于左按钮。\r\n            \r\n","Constructs a new X11WindowInfo class.":"构造一个新的 X11WindowInfo 类。\r\n","[requires: v1.0]\r\n            Return error information\r\n            ":"[要求：v1.0]\r\n            返回错误信息\r\n            \r\n","\r\n            Original was GL_EYE_LINEAR_NV = 0x2400\r\n            ":"\r\n            原来是 GL_EYE_LINEAR_NV = 0x2400\r\n            \r\n","[length: count] \r\n            Specifies the address of an array of pointers to source code strings from which to create the program object.\r\n            ":"[长度：计数]\r\n            指定指向源代码字符串的指针数组的地址，从中创建程序对象。\r\n            \r\n"," indicating\r\n            whether this hat lies in the left hemicircle.\r\n            ":" 表明\r\n            这顶帽子是否在左半圆内。\r\n            \r\n","The euler angles as a Vector3":"作为 Vector3 的欧拉角\r\n","\r\n            Original was GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036\r\n            ":"\r\n            原来是 GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036\r\n            \r\n"," \r\n            The type of debug messages to enable or disable.\r\n            ":" \r\n            要启用或禁用的调试消息类型。\r\n            \r\n","\r\n            Compares this object instance to another object for equality. \r\n            ":"\r\n            比较此对象实例与另一个对象是否相等。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Set front and/or back function and reference value for stencil testing\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            设置模板测试的正面和/或背面功能和参考值\r\n            \r\n","\r\n            Original was GL_ALPHA_MAX_SGIX = 0x8321\r\n            ":"\r\n            原来是 GL_ALPHA_MAX_SGIX = 0x8321\r\n            \r\n","\r\n            Original was GL_HARDLIGHT_NV = 0x929B\r\n            ":"\r\n            原来是 GL_HARDLIGHT_NV = 0x929B\r\n            \r\n","\r\n            Used in GL.Ibm.FlushStaticData\r\n            ":"\r\n            在 GL.Ibm.FlushStaticData 中使用\r\n            \r\n","\r\n            property of the returned structure will be false.\r\n            ":"\r\n            返回结构的属性将为 false。\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_3D = 0x8070\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_3D = 0x8070\r\n            \r\n","[requires: EXT_x11_sync_object]":"[需要：EXT_x11_sync_object]\r\n","\r\n            Original was GL_IntVec4 = 0X8b55\r\n            ":"\r\n            原来是 GL_IntVec4 = 0X8b55\r\n            \r\n","\r\n            Original was GL_COMBINER6_NV = 0x8556\r\n            ":"\r\n            原来是 GL_COMBINER6_NV = 0x8556\r\n            \r\n","\r\n            Original was GL_SCALE_BY_ONE_HALF_NV = 0x8540\r\n            ":"\r\n            原来是 GL_SCALE_BY_ONE_HALF_NV = 0x8540\r\n            \r\n","\r\n            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4 times 4 column-major matrix.\r\n            ":"\r\n            指定指向 16 个连续值的指针，这些值用作 4 乘 4 列主矩阵的元素。\r\n            \r\n","\r\n            Original was GL_HSL_HUE_KHR = 0x92AD\r\n            ":"\r\n            原来是 GL_HSL_HUE_KHR = 0x92AD\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211\r\n            \r\n","\r\n            Original was GL_Texture3 = 0X84c3\r\n            ":"\r\n            原来是 GL_Texture3 = 0X84c3\r\n            \r\n","[length: primcount]":"[长度：primcount]\r\n","\r\n            Original was GL_COLOR_INDEX12_EXT = 0x80E6\r\n            ":"\r\n            原来是 GL_COLOR_INDEX12_EXT = 0x80E6\r\n            \r\n","\r\n            Used in GL.LogicOp\r\n            ":"\r\n            在 GL.LogicOp 中使用\r\n            \r\n","\r\n            Original was GL_OBJECT_BUFFER_SIZE_ATI = 0x8764\r\n            ":"\r\n            原来是 GL_OBJECT_BUFFER_SIZE_ATI = 0x8764\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F\r\n            \r\n","\r\n            Original was GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643\r\n            ":"\r\n            原来是 GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643\r\n            \r\n"," \r\n            Specifies the target of the invalidate operation. Must be Framebuffer.\r\n            ":" \r\n            指定无效操作的目标。必须是帧缓冲区。\r\n            \r\n","\r\n            Original was GL_PALETTE8_RGB8_OES = 0x8B95\r\n            ":"\r\n            原来是 GL_PALETTE8_RGB8_OES = 0x8B95\r\n            \r\n","\r\n            Original was GL_PATH_STROKE_WIDTH_NV = 0x9075\r\n            ":"\r\n            原来是 GL_PATH_STROKE_WIDTH_NV = 0x9075\r\n            \r\n","\r\n            Original was GL_CONTEXT_ROBUST_ACCESS_EXT = 0x90F3\r\n            ":"\r\n            原来是 GL_CONTEXT_ROBUST_ACCESS_EXT = 0x90F3\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the Y, Z, and W components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Y、Z 和 W 组件的 OpenTK.Vector3。\r\n            \r\n"," \r\n            Specifies the internal format about which to retrieve information.\r\n            ":"指定检索信息的内部格式。\r\n            \r\n","\r\n            Original was GL_SPOT_DIRECTION = 0x1204\r\n            ":"\r\n            原来是 GL_SPOT_DIRECTION = 0x1204\r\n            \r\n","\r\n            Used in GL.Disable, GL.DisableClientState and 3 other functions\r\n            ":"\r\n            用于 GL.Disable、GL.DisableClientState 和其他 3 个函数\r\n            \r\n","\r\n            Used in GL.GetBufferParameter, GL.GetNamedBufferParameter\r\n            ":"\r\n            用于GL.GetBufferParameter、GL.GetNamedBufferParameter\r\n            \r\n","\r\n            Original was GL_R8 = 0x8229\r\n            ":"\r\n            原来是 GL_R8 = 0x8229\r\n            \r\n","\r\n            Original was GL_SHADER_IMAGE_STORE = 0x82A5\r\n            ":"\r\n            原来是 GL_SHADER_IMAGE_STORE = 0x82A5\r\n            \r\n","\r\n            Original was GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3\r\n            ":"\r\n            原来是 GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3\r\n            \r\n","\r\n            Original was GL_OPERAND0_RGB_ARB = 0x8590\r\n            ":"\r\n            原来是 GL_OPERAND0_RGB_ARB = 0x8590\r\n            \r\n","If Data is not large enough for the data, the function returns -1. If Data is NULL, the function returns a value of zero. In both of these cases, Size is set to the minimum size required for the Data buffer.":"如果数据对于数据来说不够大，函数返回 -1。如果数据为 NULL，则函数返回零值。在这两种情况下，大小都设置为数据缓冲区所需的最小大小。\r\n"," \r\n            Specifies the number of levels of detail to include in the view.\r\n            ":" \r\n            指定要包含在视图中的详细级别数。\r\n            \r\n"," has\r\n            an up digital pad button.\r\n            ":" 有\r\n            向上数字键盘按钮。\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Retrieve information about a bound renderbuffer object\r\n            ":"[需要：EXT_framebuffer_object]\r\n            检索有关绑定渲染缓冲区对象的信息\r\n            \r\n","\r\n            Original was GL_PATH_PROJECTION_NV = 0x1701\r\n            ":"原来是 GL_PATH_PROJECTION_NV = 0x1701\r\n            \r\n","[requires: v1.0]\r\n            Specify a logical pixel operation for rendering\r\n            ":"[要求：v1.0]\r\n            指定用于渲染的逻辑像素操作\r\n            \r\n","[requires: APPLE_object_purgeable]":"[要求：APPLE_object_purgeable]\r\n","\r\n            Original was GL_MAX_MAP_TESSELLATION_NV = 0x86D6\r\n            ":"\r\n            原来是 GL_MAX_MAP_TESSELLATION_NV = 0x86D6\r\n            \r\n","[requires: v2.0]\r\n            Define an array of generic vertex attribute data\r\n            ":"[要求：v2.0]\r\n            定义一个通用顶点属性数据数组\r\n            \r\n","\r\n            Original was GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973\r\n            ":"\r\n            原来是 GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973\r\n            \r\n"," \r\n            Specifies the texture unit whose coordinates should be modified. The number of texture units is implementation dependent, but must be at least two. Symbolic constant must be one of Texture, where i ranges from 0 to MaxTextureCoords - 1, which is an implementation-dependent value.\r\n            ":" \r\n            指定应修改其坐标的纹理单元。纹理单元的数量取决于实现，但必须至少为两个。符号常量必须是 Texture 之一，其中 i 的范围从 0 到 MaxTextureCoords - 1，这是一个依赖于实现的值。\r\n            \r\n","\r\n            Used in GL.GetBufferParameter\r\n            ":"\r\n            在 GL.GetBufferParameter 中使用\r\n            \r\n","\r\n            Used in GL.GetPointer\r\n            ":"\r\n            在 GL.GetPointer 中使用\r\n            \r\n","Scale factors for the x, y, and z axes.":"x、y 和 z 轴的比例因子。\r\n","\r\n            Used in GL.CompressedTexImage3D, GL.CompressedTexSubImage3D and 10 other functions\r\n            ":"\r\n            用于 GL.CompressedTexImage3D、GL.CompressedTexSubImage3D 和其他 10 个函数\r\n            \r\n","Windows NT/2000/XP: uCode is a scan code and is translated into a virtual-key code that distinguishes between left- and right-hand keys. If there is no translation, the function returns 0.":"Windows NT/2000/XP：uCode 是一个扫描码，被翻译成一个区分左手和右手键的虚拟键码。如果没有翻译，函数返回 0。\r\n","\r\n            Original was GL_Zero = 0X0000\r\n            ":"\r\n            原来是 GL_Zero = 0X0000\r\n            \r\n","[length: length]":"[长度：长度]\r\n","\r\n            Original was GL_VERTEX_ARRAY = 0x8074\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY = 0x8074\r\n            \r\n","\r\n            Original was GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED\r\n            ":"\r\n            原来是 GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED\r\n            \r\n","\r\n            Gets the current window handle.\r\n            ":"\r\n            获取当前窗口句柄。\r\n            \r\n"," has\r\n            a right digital pad button.\r\n            ":" 有\r\n            右数字键盘按钮。\r\n            \r\n"," \r\n            Specifies the target buffer object. The symbolic constant must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, TransformFeedbackBuffer, or UniformBuffer.\r\n            ":" \r\n            指定目标缓冲区对象。符号常量必须是 ArrayBuffer、CopyReadBuffer、CopyWriteBuffer、ElementArrayBuffer、PixelPackBuffer、PixelUnpackBuffer、TransformFeedbackBuffer 或 UniformBuffer。\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53\r\n            \r\n","[requires: v4.1 or ARB_ES2_compatibility|VERSION_4_1]\r\n            Load pre-compiled shader binaries\r\n            ":"[要求：v4.1 或 ARB_ES2_compatibility|VERSION_4_1]\r\n            加载预编译的着色器二进制文件\r\n            \r\n","The twentythird button of the JoystickDevice.":"JoystickDevice 的第二十个按钮。\r\n","\r\n            Used in GL.ProvokingVertex\r\n            ":"\r\n            在 GL.ProvokingVertex 中使用\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER6_ARB = 0x882B\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER6_ARB = 0x882B\r\n            \r\n","[length: length] \r\n            The length string contained in the character array whose address is given by message.\r\n            ":"[长度：长度]\r\n            message 给定地址的字符数组中包含的长度字符串。\r\n            \r\n"," indicating whether this button is up.\r\n            ":" 指示此按钮是否已启动。\r\n            \r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8\r\n            \r\n","\r\n            Original was GL_POINT_SIZE_ARRAY_STRIDE_OES = 0x898B\r\n            ":"\r\n            原来是 GL_POINT_SIZE_ARRAY_STRIDE_OES = 0x898B\r\n            \r\n","Gets or sets the parent of the window.":"获取或设置窗口的父级。\r\n","\r\n            Original was GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313\r\n            \r\n","[requires: NV_framebuffer_blit]\r\n            Copy a block of pixels from the read framebuffer to the draw framebuffer\r\n            ":"[需要：NV_framebuffer_blit]\r\n            将像素块从读取帧缓冲区复制到绘制帧缓冲区\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D\r\n            \r\n"," \r\n            Specifies the vertex to be used as the source of data for flat shaded varyings.\r\n            ":" \r\n            指定要用作平面着色变量的数据源的顶点。\r\n            \r\n"," \r\n            Specifies the data type of each component in the array. The symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, and UnsignedInt are accepted by glVertexAttribPointer and glVertexAttribIPointer. Additionally HalfFloat, Float, Double, Fixed, Int2101010Rev, UnsignedInt2101010Rev and UnsignedInt10F11F11FRev are accepted by glVertexAttribPointer. Double is also accepted by glVertexAttribLPointer and is the only token accepted by the type parameter for that function. The initial value is Float.\r\n            ":" \r\n            指定数组中每个组件的数据类型。 glVertexAttribPointer 和 glVertexAttribIPointer 接受符号常量 Byte、UnsignedByte、Short、UnsignedShort、Int 和 UnsignedInt。此外，glVertexAttribPointer 接受 HalfFloat、Float、Double、Fixed、Int2101010Rev、UnsignedInt2101010Rev 和 UnsignedInt10F11F11FRev。 Double 也被 glVertexAttribLPointer 接受，并且是该函数的类型参数接受的唯一标记。初始值为浮点数。\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Set the current color index\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            设置当前颜色索引\r\n            \r\n","\r\n            A reflection handle to the nested type that contains the function delegates.\r\n            ":"\r\n            包含函数委托的嵌套类型的反射句柄。\r\n            \r\n","A reference to the new surface":"对新表面的引用\r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6\r\n            \r\n","\r\n            Original was GL_SAMPLER_CUBE_SHADOW_NV = 0x8DC5\r\n            ":"原来是 GL_SAMPLER_CUBE_SHADOW_NV = 0x8DC5\r\n            \r\n","The left shift key.":"左移键。\r\n","GamePadState":"游戏手柄状态\r\n"," \r\n            The Y coordinate of the top edge of the destination region.\r\n            ":" \r\n            目标区域上边缘的 Y 坐标。\r\n            \r\n","\r\n            Used in GL.GetPixelMap, GL.PixelMap\r\n            ":"\r\n            用于GL.GetPixelMap, GL.PixelMap\r\n            \r\n","\r\n            Used in GL.Apple.FenceSync, GL.Apple.GetInteger64 and 163 other functions\r\n            ":"\r\n            用于 GL.Apple.FenceSync、GL.Apple.GetInteger64 和 163 个其他函数\r\n            \r\n","The keypad minus key (equivalent to KeypadSubtract).":"键盘减号键（相当于 KeypadSubtract）。\r\n","\r\n            Original was GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00\r\n            \r\n","\r\n            Original was GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2\r\n            ":"\r\n            原来是 GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2\r\n            \r\n","[length: size,type,stride,count] \r\n            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.\r\n            ":"[长度：尺寸、类型、步幅、计数]\r\n            指定指向数组中第一个纹理坐标集的第一个坐标的指针。初始值为 0。\r\n            \r\n","[requires: v3.2 or ARB_sync|VERSION_3_2]\r\n            Instruct the GL server to block until the specified sync object becomes signaled\r\n            ":"[要求：v3.2 或 ARB_sync|VERSION_3_2]\r\n            指示 GL 服务器阻塞，直到指定的同步对象发出信号\r\n            \r\n","\r\n            Original was GL_FLOAT_RGB32_NV = 0x8889\r\n            ":"\r\n            原来是 GL_FLOAT_RGB32_NV = 0x8889\r\n            \r\n","[requires: NV_register_combiners2]":"[需要：NV_register_combiners2]\r\n","\r\n            Original was GL_MODELVIEW22_ARB = 0x8736\r\n            ":"\r\n            原来是 GL_MODELVIEW22_ARB = 0x8736\r\n            \r\n","\r\n            Original was GL_TEXTURE_DT_SIZE_NV = 0x871E\r\n            ":"\r\n            原来是 GL_TEXTURE_DT_SIZE_NV = 0x871E\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B\r\n            \r\n","\r\n            Original was GL_EXT_texture_format_BGRA8888 = 1\r\n            ":"\r\n            原来是 GL_EXT_texture_format_BGRA8888 = 1\r\n            \r\n","The height of the NativeWindow in pixels.":"NativeWindow 的高度（以像素为单位）。\r\n","[length: 16] \r\n            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 row-major matrix.\r\n            ":"[长度：16]\r\n            指定指向 16 个连续值的指针，这些值用作 4 乘 4 行主矩阵的元素。\r\n            \r\n","\r\n            Original was GL_Texture8 = 0X84c8\r\n            ":"\r\n            原来是 GL_Texture8 = 0X84c8\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER6 = 0x882B\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER6 = 0x882B\r\n            \r\n","\r\n            Original was GL_BUFFER_DATA_SIZE = 0x9303\r\n            ":"\r\n            原来是 GL_BUFFER_DATA_SIZE = 0x9303\r\n            \r\n","[requires: v4.0 or ARB_shader_subroutine|VERSION_4_0]\r\n            Query a property of an active shader subroutine uniform\r\n            ":"[需要：v4.0 或 ARB_shader_subroutine|VERSION_4_0]\r\n            查询活动着色器子程序统一的属性\r\n            \r\n","\r\n            Original was GL_REPEAT = 0x2901\r\n            ":"\r\n            原来是 GL_REPEAT = 0x2901\r\n            \r\n","\r\n            Original was GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 0x9117\r\n            ":"\r\n            原来是 GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 0x9117\r\n            \r\n","\r\n            Original was GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF\r\n            ":"\r\n            原来是 GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF\r\n            \r\n","\r\n            Original was GL_RGB16UI_EXT = 0x8D77\r\n            ":"\r\n            原来是 GL_RGB16UI_EXT = 0x8D77\r\n            \r\n","A new Matrix3x2d which holds the result of the subtraction":"保存减法结果的新 Matrix3x2d\r\n","\r\n            Original was GL_RGB32I = 0x8D83\r\n            ":"\r\n            原来是 GL_RGB32I = 0x8D83\r\n            \r\n","\r\n            The XMaskEvent() function searches the event queue for the events associated with the specified mask. When it finds a match, XMaskEvent() removes that event and copies it into the specified XEvent structure. The other events stored in the queue are not discarded. If the event you requested is not in the queue, XMaskEvent() flushes the output buffer and blocks until one is received.\r\n            ":"\r\n            XMaskEvent() 函数在事件队列中搜索与指定掩码关联的事件。当找到匹配时，XMaskEvent() 删除该事件并将其复制到指定的 XEvent 结构中。存储在队列中的其他事件不会被丢弃。如果您请求的事件不在队列中，XMaskEvent() 会刷新输出缓冲区并阻塞，直到收到一个事件。\r\n            \r\n","[requires: v1.0]\r\n            Return parameters of a buffer object\r\n            ":"[要求：v1.0]\r\n            缓冲区对象的返回参数\r\n            \r\n"," \r\n            The format of the data to be returned in values. Must be one of Red, Green, Blue, Alpha, Rgb, Bgr, Rgba, Bgra, Luminance, or LuminanceAlpha.\r\n            ":" \r\n            要在值中返回的数据的格式。必须是 Red、Green、Blue、Alpha、Rgb、Bgr、Rgba、Bgra、Luminance 或 LuminanceAlpha 之一。\r\n            \r\n","\r\n            Disposes of this X11WindowInfo instance.\r\n            ":"\r\n            处理此 X11WindowInfo 实例。\r\n            \r\n","\r\n            Used in GL.Apple.FenceSync\r\n            ":"\r\n            用于 GL.Apple.FenceSync\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_COORDS_ARB = 0x8871\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_COORDS_ARB = 0x8871\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = 0x93C5\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = 0x93C5\r\n            \r\n","[requires: NV_draw_texture]":"[需要：NV_draw_texture]\r\n","\r\n            Original was GL_MULTISAMPLE_BIT_EXT = 0x20000000\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_BIT_EXT = 0x20000000\r\n            \r\n","\r\n            Specifies whether the depth buffer is enabled for writing. If flag is GL_FALSE, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.\r\n            ":"\r\n            指定深度缓冲区是否启用写入。如果 flag 为 GL_FALSE，则禁用深度缓冲区写入。否则，它被启用。最初，启用深度缓冲区写入。\r\n            \r\n","\r\n            Checks whether type is a blittable value type.\r\n            ":"\r\n            检查类型是否为 blittable 值类型。\r\n            \r\n"," to retrieve error information":" 检索错误信息\r\n","\r\n            Original was GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899\r\n            \r\n","\r\n            Original was GL_HISTOGRAM = 0x8024\r\n            ":"\r\n            原来是 GL_HISTOGRAM = 0x8024\r\n            \r\n","\r\n            Used in GL.GetTransformFeedbackVarying\r\n            ":"\r\n            在 GL.GetTransformFeedbackVarying 中使用\r\n            \r\n","\r\n            Contains information about the state of the keyboard.\r\n            ":"\r\n            包含有关键盘状态的信息。\r\n            \r\n","[length: count] \r\n            Specifies a pointer to the location where the indices are stored.\r\n            ":"[长度：计数]\r\n            指定指向存储索引的位置的指针。\r\n            \r\n","\r\n            Raw state of the mouse buttons.\r\n            ":"\r\n            鼠标按钮的原始状态。\r\n            \r\n"," \r\n            Specifies the renderbuffer target.  The symbolic constant must be Renderbuffer.\r\n            ":" \r\n            指定渲染缓冲区目标。符号常量必须是 Renderbuffer。\r\n            \r\n","\r\n            Original was GL_OP_SUB_EXT = 0x8796\r\n            ":"\r\n            原来是 GL_OP_SUB_EXT = 0x8796\r\n            \r\n","The number 8 key.":"8 号键。\r\n","\r\n            Used in GL.Ext.BeginQuery, GL.Ext.EndQuery and 1 other function\r\n            ":"\r\n            用于 GL.Ext.BeginQuery、GL.Ext.EndQuery 和 1 个其他函数\r\n            \r\n","\r\n            Original was GL_SECONDARY_INTERPOLATOR_ATI = 0x896D\r\n            ":"\r\n            原来是 GL_SECONDARY_INTERPOLATOR_ATI = 0x896D\r\n            \r\n","\r\n            The middle mouse button.\r\n            ":"\r\n            鼠标中键。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6\r\n            \r\n","[requires: v1.5]\r\n            Return the pointer to a mapped buffer object's data store\r\n            ":"[要求：v1.5]\r\n            返回指向映射缓冲区对象的数据存储的指针\r\n            \r\n","\r\n            Convert the current quaternion to axis angle representation\r\n            ":"\r\n            将当前四元数转换为轴角表示\r\n            \r\n","[requires: EXT_depth_bounds_test]":"[需要：EXT_depth_bounds_test]\r\n","\r\n            Original was GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3\r\n            ":"\r\n            原来是 GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3\r\n            \r\n","\r\n            Used in GL.Sgix.LightEnv\r\n            ":"\r\n            用于 GL.Sgix.LightEnv\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Retrieve the range and precision for numeric formats supported by the shader compiler\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            检索着色器编译器支持的数字格式的范围和精度\r\n            \r\n","\r\n            Original was GL_INTENSITY4_EXT = 0x804A\r\n            ":"\r\n            原来是 GL_INTENSITY4_EXT = 0x804A\r\n            \r\n","\r\n            Original was GL_IMAGE_CLASS_4_X_8 = 0x82BF\r\n            ":"\r\n            原来是 GL_IMAGE_CLASS_4_X_8 = 0x82BF\r\n            \r\n","Third item of the second row of the matrix.":"矩阵第二行的第三项。\r\n","\r\n            Used in GL.RenderMode\r\n            ":"\r\n            在 GL.RenderMode 中使用\r\n            \r\n","\r\n            Original was GL_VARIABLE_B_NV = 0x8524\r\n            ":"\r\n            原来是 GL_VARIABLE_B_NV = 0x8524\r\n            \r\n","\r\n            Top-level collection Usage Page for the device.\r\n            ":"\r\n            设备的顶级集合使用页面。\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT16_ARB = 0x81A5\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT16_ARB = 0x81A5\r\n            \r\n","[length: count] \r\n            A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or Null.\r\n            ":"[长度：计数]\r\n            指向要绑定到指定绑定点上的目标的缓冲区对象名称数组的指针，或 Null。\r\n            \r\n","\r\n            Original was GL_COPY_WRITE_BUFFER = 0x8F37\r\n            ":"\r\n            原来是 GL_COPY_WRITE_BUFFER = 0x8F37\r\n            \r\n","A new Matrix2d which holds the result of the subtraction":"保存减法结果的新 Matrix2d\r\n"," \r\n            Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, or Rgba.\r\n            ":" \r\n            指定纹理的内部格式。必须是以下符号常量之一：Alpha、Luminance、LuminanceAlpha、Rgb 或 Rgba。\r\n            \r\n"," \r\n            The identifier of the message.\r\n            ":" \r\n            消息的标识符。\r\n            \r\n","[requires: NV_shader_buffer_load]":"[要求：NV_shader_buffer_load]\r\n","\r\n            Original was GL_PROGRAM_POINT_SIZE_EXT = 0x8642\r\n            ":"\r\n            原来是 GL_PROGRAM_POINT_SIZE_EXT = 0x8642\r\n            \r\n","\r\n            Original was GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125\r\n            \r\n","\r\n            Original was GL_PATH_DASH_OFFSET_NV = 0x907E\r\n            ":"\r\n            原来是 GL_PATH_DASH_OFFSET_NV = 0x907E\r\n            \r\n","\r\n            Specifies the index used when the stencil buffer is cleared. The initial value is 0.\r\n            ":"\r\n            指定清除模板缓冲区时使用的索引。初始值为 0。\r\n            \r\n","\r\n            Original was GL_RGB10_A2 = 0x8059\r\n            ":"\r\n            原来是 GL_RGB10_A2 = 0x8059\r\n            \r\n","\r\n            Gets the change in X position produced by this event.\r\n            ":"\r\n            获取由此事件产生的 X 位置变化。\r\n            \r\n","The value to scale":"规模化价值\r\n","\r\n            Gets a double representing the actual frequency of RenderFrame events, in hertz (i.e. fps or frames per second).\r\n            ":"\r\n            获取表示 RenderFrame 事件实际频率的双精度值，以赫兹为单位（即 fps 或每秒帧数）。\r\n            \r\n","\r\n            Original was GL_FLOAT_VEC2_ARB = 0x8B50\r\n            ":"\r\n            原来是 GL_FLOAT_VEC2_ARB = 0x8B50\r\n            \r\n","\r\n            Original was GL_INT16_VEC3_NV = 0x8FE6\r\n            ":"\r\n            原来是 GL_INT16_VEC3_NV = 0x8FE6\r\n            \r\n","\r\n            Original was GL_1PASS_SGIS = 0x80A1\r\n            ":"\r\n            原来是 GL_1PASS_SGIS = 0x80A1\r\n            \r\n"," \r\n            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, 4. The initial value is 4.\r\n            ":" \r\n            指定每个通用顶点属性的组件数。必须为 1, 2, 3, 4。初始值为 4。\r\n            \r\n","[requires: NV_vertex_array_range]":"[要求：NV_vertex_array_range]\r\n","\r\n            Original was GL_LUMINANCE4_ALPHA4 = 0x8043\r\n            ":"\r\n            原来是 GL_LUMINANCE4_ALPHA4 = 0x8043\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4\r\n            \r\n","[requires: v3.0 or ARB_map_buffer_range|VERSION_3_0]\r\n            Indicate modifications to a range of a mapped buffer\r\n            ":"[要求：v3.0 或 ARB_map_buffer_range|VERSION_3_0]\r\n            指示对映射缓冲区范围的修改\r\n            \r\n","The quaternion to rotate by.":"要旋转的四元数。\r\n","\r\n            Defines the interface for MouseDevice drivers.\r\n            ":"\r\n            定义 MouseDevice 驱动程序的接口。\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022\r\n            \r\n","\r\n            Original was GL_MODELVIEW30_ARB = 0x873E\r\n            ":"\r\n            原来是 GL_MODELVIEW30_ARB = 0x873E\r\n            \r\n","\r\n            Retrieves the message time for the last message retrieved by the \r\n            GetMessage function. The time is a long integer that specifies the \r\n            elapsed time, in milliseconds, from the time the system was started \r\n            to the time the message was created (that is, placed in the thread's\r\n            message queue).\r\n            ":"\r\n            检索由 检索的最后一条消息的消息时间\r\n            获取消息函数。时间是一个长整数，指定\r\n            从系统启动后经过的时间，以毫秒为单位\r\n            到消息创建的时间（即放置在线程的\r\n            消息队列）。\r\n            \r\n","[requires: APPLE_sync]\r\n            Block and wait for a sync object to become signaled\r\n            ":"[需要：APPLE_sync]\r\n            阻塞并等待同步对象发出信号\r\n            \r\n","[requires: v1.0]\r\n            Specify which matrix is the current matrix\r\n            ":"[要求：v1.0]\r\n            指定哪个矩阵是当前矩阵\r\n            \r\n","\r\n            Original was GL_BLUE_INTEGER_EXT = 0x8D96\r\n            ":"\r\n            原来是 GL_BLUE_INTEGER_EXT = 0x8D96\r\n            \r\n"," \r\n            Specifies the layer of texture to attach.\r\n            ":" \r\n            指定要附加的纹理层。\r\n            \r\n","\r\n            Original was GL_QUERY_COUNTER_BITS_EXT = 0x8864\r\n            ":"\r\n            原来是 GL_QUERY_COUNTER_BITS_EXT = 0x8864\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02\r\n            \r\n","\r\n            Original was GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032\r\n            ":"\r\n            原来是 GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032\r\n            \r\n","\r\n            Original was GL_DELETE_STATUS = 0x8B80\r\n            ":"\r\n            原来是 GL_DELETE_STATUS = 0x8B80\r\n            \r\n","\r\n            The joystick device index for the ADDED event, instance id for the REMOVED or REMAPPED event\r\n            ":"\r\n            ADDED 事件的操纵杆设备索引，REMOVED 或 REMAPPED 事件的实例 ID\r\n            \r\n","\r\n            Specifies a symbolic constant indicating the desired behavior. GL_FASTEST, GL_NICEST, and GL_DONT_CARE are accepted.\r\n            ":"\r\n            指定指示所需行为的符号常量。接受 GL_FASTEST、GL_NICEST 和 GL_DONT_CARE。\r\n            \r\n","The second quaternion":"第二个四元数\r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = 0x93C9\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = 0x93C9\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return the range and precision for different shader numeric formats\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回不同着色器数字格式的范围和精度\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Set the current color\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            设置当前颜色\r\n            \r\n"," \r\n            The index of the attribute to associate with a vertex buffer binding.\r\n            ":" \r\n            与顶点缓冲区绑定关联的属性的索引。\r\n            \r\n"," events.\r\n            This class is cached for performance reasons - avoid storing references outside the scope of the event.\r\n            ":" 事件。\r\n            出于性能原因缓存此类 - 避免在事件范围之外存储引用。\r\n            \r\n","\r\n            Original was GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4\r\n            ":"\r\n            原来是 GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4\r\n            \r\n","\r\n            Original was GL_AND_INVERTED = 0x1504\r\n            ":"\r\n            原来是 GL_AND_INVERTED = 0x1504\r\n            \r\n","The fifteenth button of the JoystickDevice.":"JoystickDevice 的第十五个按钮。\r\n","[requires: v4.2 or ARB_transform_feedback_instanced|VERSION_4_2]\r\n            Render multiple instances of primitives using a count derived from a specifed stream of a transform feedback object\r\n            ":"[要求：v4.2 或 ARB_transform_feedback_instanced|VERSION_4_2]\r\n            使用从变换反馈对象的指定流派生的计数来渲染图元的多个实例\r\n            \r\n","\r\n            Original was GL_FLOAT_RG_NV = 0x8881\r\n            ":"\r\n            原来是 GL_FLOAT_RG_NV = 0x8881\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER3_ATI = 0x8828\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER3_ATI = 0x8828\r\n            \r\n","\r\n            Original was GL_IMAGE_TRANSFORM_2D_HP = 0x8161\r\n            ":"\r\n            原来是 GL_IMAGE_TRANSFORM_2D_HP = 0x8161\r\n            \r\n","\r\n            Original was GL_DEFORMATIONS_MASK_SGIX = 0x8196\r\n            ":"\r\n            原来是 GL_DEFORMATIONS_MASK_SGIX = 0x8196\r\n            \r\n","\r\n            Original was GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145\r\n            ":"\r\n            原来是 GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145\r\n            \r\n","\r\n            Used in GL.BindBuffer, GL.BufferData and 12 other functions\r\n            ":"\r\n            用于GL.BindBuffer、GL.BufferData等12个函数\r\n            \r\n","\r\n            Original was GL_TEXTURE_GATHER = 0x82A2\r\n            ":"\r\n            原来是 GL_TEXTURE_GATHER = 0x82A2\r\n            \r\n","\r\n            Original was GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355\r\n            ":"\r\n            原来是 GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355\r\n            \r\n"," structure contains the x and y coordinates of a point.\r\n            ":" 结构包含点的 x 和 y 坐标。\r\n            \r\n","\r\n            Get histogram parameters\r\n            ":"\r\n            获取直方图参数\r\n            \r\n","[requires: EXT_texture3D]\r\n            Specify a three-dimensional texture subimage\r\n            ":"[需要：EXT_texture3D]\r\n            指定三维纹理子图像\r\n            \r\n","\r\n            Original was GL_READ_WRITE = 0x88BA\r\n            ":"\r\n            原来是 GL_READ_WRITE = 0x88BA\r\n            \r\n","[requires: v1.1]\r\n            Copy pixels into a 2D texture image\r\n            ":"[要求：v1.1]\r\n            将像素复制到二维纹理图像中\r\n            \r\n","\r\n            Original was GL_FACTOR_MIN_AMD = 0x901C\r\n            ":"\r\n            原来是 GL_FACTOR_MIN_AMD = 0x901C\r\n            \r\n","\r\n            Original was GL_TEXTURE13_ARB = 0x84CD\r\n            ":"\r\n            原来是 GL_TEXTURE13_ARB = 0x84CD\r\n            \r\n","\r\n            Original was GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D\r\n            ":"\r\n            原来是 GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D\r\n            \r\n","\r\n            The ShowWindow function sets the specified window's show state.\r\n            ":"\r\n            ShowWindow 函数设置指定窗口的显示状态。\r\n            \r\n"," \r\n            Specifies the format of the pixel data. Symbolic constants ColorIndex, StencilIndex, DepthComponent, Rgb, Bgr, Rgba, Bgra, Red, Green, Blue, Alpha, Luminance, and LuminanceAlpha are accepted.\r\n            ":" \r\n            指定像素数据的格式。接受符号常量 ColorIndex、StencilIndex、DepthComponent、Rgb、Bgr、Rgba、Bgra、Red、Green、Blue、Alpha、Luminance 和 LuminanceAlpha。\r\n            \r\n","If true, the state of underlying system event propagation will be preserved, otherwise event propagation will be enabled if it has not been already.":"如果为真，底层系统事件传播的状态将被保留，否则事件传播将被启用（如果尚未启用）。\r\n","If no device exists at the specified index, the return value is ":"如果指定索引处不存在设备，则返回值为\r\n","\r\n            Original was GL_SOURCE2_ALPHA_EXT = 0x858A\r\n            ":"\r\n            原来是 GL_SOURCE2_ALPHA_EXT = 0x858A\r\n            \r\n","\r\n            Original was GL_POINT_SIZE_MIN = 0x8126\r\n            ":"\r\n            原来是 GL_POINT_SIZE_MIN = 0x8126\r\n            \r\n","\r\n            Original was GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD\r\n            ":"\r\n            原来是 GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD\r\n            \r\n","\r\n            Original was GL_PROGRAM_BINDING_ARB = 0x8677\r\n            ":"\r\n            原来是 GL_PROGRAM_BINDING_ARB = 0x8677\r\n            \r\n","A new Matrix3d which holds the result of the multiplication":"保存乘法结果的新 Matrix3d\r\n","\r\n            Original was GL_FLOAT_MAT3_ARB = 0x8B5B\r\n            ":"\r\n            原来是 GL_FLOAT_MAT3_ARB = 0x8B5B\r\n            \r\n","\r\n            Original was GL_GCCSO_SHADER_BINARY_FJ = 0x9260\r\n            ":"\r\n            原来是 GL_GCCSO_SHADER_BINARY_FJ = 0x9260\r\n            \r\n","\r\n            Gets the size of the type in bytes or 0 for non-blittable types.\r\n            ":"\r\n            获取类型的大小（以字节为单位）或 0（对于非 blittable 类型）。\r\n            \r\n","\r\n            Original was GL_DOUBLE_MAT3x4_EXT = 0x8F4C\r\n            ":"\r\n            原来是 GL_DOUBLE_MAT3x4_EXT = 0x8F4C\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_3D = 0x806A\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_3D = 0x806A\r\n            \r\n"," for the starth button.\r\n            ":" 对于开始按钮。\r\n            \r\n","\r\n            Original was GL_MATRIX6 = 0x88C6\r\n            ":"\r\n            原来是 GL_MATRIX6 = 0x88C6\r\n            \r\n","A new Matrix2x3 which holds the result of the multiplication":"保存乘法结果的新 Matrix2x3\r\n","A new Matrix3x2 which holds the result of the addition":"保存加法结果的新 Matrix3x2\r\n","\r\n            Original was GL_RGBA4_OES = 0x8056\r\n            ":"\r\n            原来是 GL_RGBA4_OES = 0x8056\r\n            \r\n","The created window is not yet displayed (mapped) on the user's display. To display the window, call XMapWindow(). The new window initially uses the same cursor as its parent. A new cursor can be defined for the new window by calling XDefineCursor(). The window will not be visible on the screen unless it and all of its ancestors are mapped and it is not obscured by any of its ancestors. ":"创建的窗口尚未显示（映射）在用户的显示器上。要显示窗口，请调用 XMapWindow()。新窗口最初使用与其父窗口相同的光标。可以通过调用 XDefineCursor() 为新窗口定义新光标。窗口在屏幕上不可见，除非它和它的所有祖先都被映射并且它没有被它的任何祖先遮挡。\r\n","\r\n            Gets or sets an OpenTK.Vector4 with the Y, Z, W, and X components of this instance.\r\n            ":"获取或设置具有此实例的 Y、Z、W 和 X 组件的 OpenTK.Vector4。\r\n            \r\n","\r\n            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.\r\n            ":"\r\n            指定每个数组元素的坐标数。必须为 1、2、3 或 4。初始值为 4。\r\n            \r\n","\r\n            Original was GL_VERSION = 0x1F02\r\n            ":"\r\n            原来是 GL_VERSION = 0x1F02\r\n            \r\n","\r\n            Original was GL_MATRIX_STRIDE = 0x92FF\r\n            ":"\r\n            原来是 GL_MATRIX_STRIDE = 0x92FF\r\n            \r\n","\r\n            Used in GL.BindBufferBase, GL.BindBufferRange and 2 other functions\r\n            ":"\r\n            用于 GL.BindBufferBase、GL.BindBufferRange 和其他 2 个函数\r\n            \r\n","[requires: ARB_texture_compression]\r\n            Specify a three-dimensional texture subimage in a compressed format\r\n            ":"[需要：ARB_texture_compression]\r\n            以压缩格式指定三维纹理子图像\r\n            \r\n","\r\n            Original was GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB\r\n            ":"\r\n            原来是 GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB\r\n            \r\n"," has\r\n            a right trigger.\r\n            ":" 有\r\n            一个正确的触发器。\r\n            \r\n","\r\n            Original was GL_MATRIX26 = 0x88DA\r\n            ":"\r\n            原来是 GL_MATRIX26 = 0x88DA\r\n            \r\n","[length: dashCount]":"[长度：dashCount]\r\n","\r\n            Original was GL_TEXTURE_USAGE_ANGLE = 0x93A2\r\n            ":"\r\n            原来是 GL_TEXTURE_USAGE_ANGLE = 0x93A2\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Bind a transform feedback object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            绑定一个变换反馈对象\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = 0x93C3\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = 0x93C3\r\n            \r\n","\r\n            Original was GL_COORD_REPLACE_OES = 0x8862\r\n            ":"\r\n            原来是 GL_COORD_REPLACE_OES = 0x8862\r\n            \r\n","\r\n            Used in GL.StencilFuncSeparate, GL.StencilMaskSeparate and 1 other function\r\n            ":"\r\n            用于 GL.StencilFuncSeparate、GL.StencilMaskSeparate 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908\r\n            \r\n","\r\n            Used in GL.TransformFeedbackVaryings\r\n            ":"\r\n            在 GL.TransformFeedbackVaryings 中使用\r\n            \r\n","\r\n            Returns a copy of this Matrix3 without rotation.\r\n            ":"\r\n            返回此 Matrix3 的副本，无需旋转。\r\n            \r\n"," \r\n            Specifies the name of a framebuffer object.\r\n            ":" \r\n            指定帧缓冲区对象的名称。\r\n            \r\n","\r\n            Original was GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073\r\n            ":"\r\n            原来是 GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073\r\n            \r\n"," \r\n            Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.\r\n            ":" \r\n            指定一个值，该值是先前 glMap1 或 glMap2 命令中定义的基函数的域坐标。\r\n            \r\n","\r\n            Used in GL.BeginTransformFeedback\r\n            ":"\r\n            在 GL.BeginTransformFeedback 中使用\r\n            \r\n","A matrix instance.":"矩阵实例。\r\n","\r\n            Original was GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971\r\n            ":"\r\n            原来是 GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971\r\n            \r\n"," \r\n            Specify x, y, z, and w coordinates of a vertex. Not all parameters are present in all forms of the command.\r\n            ":" \r\n            指定顶点的 x、y、z 和 w 坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n","\r\n            Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.\r\n            ":"\r\n            指定从帧缓冲区读取的第一个像素的窗口坐标。该位置是矩形像素块的左下角。\r\n            \r\n","\r\n            Used in GL.GetProgramPipeline\r\n            ":"\r\n            在 GL.GetProgramPipeline 中使用\r\n            \r\n","[requires: INTEL_parallel_arrays]\r\n            Define an array of colors\r\n            ":"[需要：INTEL_parallel_arrays]\r\n            定义颜色数组\r\n            \r\n"," that indicates how many seconds of time elapsed since the previous event.\r\n            ":" 指示自上一个事件以来经过了多少秒的时间。\r\n            \r\n","[requires: ARB_vertex_program|ARB_vertex_shader]\r\n            Specifies the value of a generic vertex attribute\r\n            ":"[需要：ARB_vertex_program|ARB_vertex_shader]\r\n            指定通用顶点属性的值\r\n            \r\n","[length: maxPrograms]":"[长度：最大程序]\r\n"," \r\n            Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form Light , where i ranges from 0 to the value of MaxLights - 1.\r\n            ":" \r\n            指定一盏灯。灯的数量取决于实现，但至少支持八个灯。它们由 Light 形式的符号名称标识，其中 i 的范围从 0 到 MaxLights - 1 的值。\r\n            \r\n","\r\n            Original was GL_STENCIL = 0x1802\r\n            ":"\r\n            原来是 GL_STENCIL = 0x1802\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9\r\n            \r\n","\r\n            An IDisposable instance that you can use to dispose of the resources\r\n            consumed by OpenTK.\r\n            ":"\r\n            可用于处理资源的 IDisposable 实例\r\n            由 OpenTK 消耗。\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4\r\n            \r\n","\r\n            Original was GL_E_TIMES_F_NV = 0x8531\r\n            ":"\r\n            原来是 GL_E_TIMES_F_NV = 0x8531\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER11_ATI = 0x8830\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER11_ATI = 0x8830\r\n            \r\n","The left alt key (equivalent to AltLeft.":"左 alt 键（相当于 AltLeft.\r\n","An instance of the type to check.":"要检查的类型的实例。\r\n","\r\n            Original was GL_TEXTURE_PRE_SPECULAR_HP = 0x8169\r\n            ":"\r\n            原来是 GL_TEXTURE_PRE_SPECULAR_HP = 0x8169\r\n            \r\n","[requires: NV_half_float]":"[要求：NV_half_float]\r\n","\r\n            Original was GL_REG_23_ATI = 0x8938\r\n            ":"\r\n            原来是 GL_REG_23_ATI = 0x8938\r\n            \r\n","[requires: v2.0]\r\n            Determines if a name corresponds to a shader object\r\n            ":"[要求：v2.0]\r\n            确定名称是否对应于着色器对象\r\n            \r\n","\r\n            Original was GL_Z400_BINARY_AMD = 0x8740\r\n            ":"\r\n            原来是 GL_Z400_BINARY_AMD = 0x8740\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_BPTC_UNORM = 0x82D2\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_BPTC_UNORM = 0x82D2\r\n            \r\n","\r\n            Used in GL.Apple.FenceSync, GL.Apple.WaitSync\r\n            ":"\r\n            用于GL.Apple.FenceSync, GL.Apple.WaitSync\r\n            \r\n"," \r\n            The target representing the namespace of the source name srcName.\r\n            ":" \r\n            表示源名称 srcName 的命名空间的目标。\r\n            \r\n","\r\n            Original was GL_INDEX_MATERIAL_EXT = 0x81B8\r\n            ":"\r\n            原来是 GL_INDEX_MATERIAL_EXT = 0x81B8\r\n            \r\n","\r\n            Used in GL.Ati.PNTriangles\r\n            ":"\r\n            用于 GL.Ati.PNTriangles\r\n            \r\n","\r\n            Original was GL_PROGRAM_NATIVE_INSTRUCTIONS = 0x88A2\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_INSTRUCTIONS = 0x88A2\r\n            \r\n","\r\n            Original was GL_RGBA4_DXT5_S3TC = 0x83A5\r\n            ":"\r\n            原来是 GL_RGBA4_DXT5_S3TC = 0x83A5\r\n            \r\n","\r\n            Inject an application-supplied message into the debug message queue\r\n            ":"\r\n            将应用程序提供的消息注入调试消息队列\r\n            \r\n"," \r\n            The height of the region to be copied.\r\n            ":" \r\n            要复制的区域的高度。\r\n            \r\n","Stereoscopic rendering enabled/disabled.":"启用/禁用立体渲染。\r\n","\r\n            Original was GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983\r\n            ":"\r\n            原来是 GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_SAMPLES_NV = 0x8CAB\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_SAMPLES_NV = 0x8CAB\r\n            \r\n","[requires: EXT_stencil_two_side]":"[需要：EXT_stencil_two_side]\r\n","The OpenTK.Graphics.DisplayDevice to construct the GameWindow in.":"在其中构建 GameWindow 的 OpenTK.Graphics.DisplayDevice。\r\n","\r\n            Used in GL.TexStorage1D\r\n            ":"\r\n            用于 GL.TexStorage1D\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 0x9312\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 0x9312\r\n            \r\n","\r\n            Original was GL_MANUAL_GENERATE_MIPMAP = 0x8294\r\n            ":"\r\n            原来是 GL_MANUAL_GENERATE_MIPMAP = 0x8294\r\n            \r\n","[requires: OES_framebuffer_object]\r\n            Delete named renderbuffer objects\r\n            ":"[要求：OES_framebuffer_object]\r\n            删除命名的渲染缓冲区对象\r\n            \r\n"," \r\n            The height of the region to be invalidated.\r\n            ":" \r\n            要失效的区域的高度。\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the X, Z, and W components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 X、Z 和 W 组件的 OpenTK.Vector3。\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55\r\n            ":"原来是 GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55\r\n            \r\n","\r\n            Original was GL_READ_FRAMEBUFFER_APPLE = 0x8CA8\r\n            ":"\r\n            原来是 GL_READ_FRAMEBUFFER_APPLE = 0x8CA8\r\n            \r\n","[requires: EXT_instanced_arrays]\r\n            Modify the rate at which generic vertex attributes advance during instanced rendering\r\n            ":"[需要：EXT_instanced_arrays]\r\n            修改实例化渲染期间通用顶点属性前进的速率\r\n            \r\n","\r\n            Original was GL_DEPTH_CLAMP_NEAR_AMD = 0x901E\r\n            ":"\r\n            原来是 GL_DEPTH_CLAMP_NEAR_AMD = 0x901E\r\n            \r\n","The resulting Matrix3x2 instance.":"生成的 Matrix3x2 实例。\r\n","[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]\r\n            Assign a binding point to an active uniform block\r\n            ":"[要求：v3.1 或 ARB_uniform_buffer_object|VERSION_3_1]\r\n            将绑定点分配给活动的统一块\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector4 with the Y, W, X, and Z components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Y、W、X 和 Z 组件的 OpenTK.Vector4。\r\n            \r\n","[requires: ANGLE_instanced_arrays]\r\n            Draw multiple instances of a set of elements\r\n            ":"[需要：ANGLE_instanced_arrays]\r\n            绘制一组元素的多个实例\r\n            \r\n","\r\n            Original was GL_Texture21 = 0X84d5\r\n            ":"\r\n            原来是 GL_Texture21 = 0X84d5\r\n            \r\n","\r\n            Used in GL.BindBuffer, GL.BufferData and 7 other functions\r\n            ":"\r\n            用于GL.BindBuffer、GL.BufferData等7个函数\r\n            \r\n","\r\n            Original was GL_ARRAY_STRIDE = 0x8624\r\n            ":"\r\n            原来是 GL_ARRAY_STRIDE = 0x8624\r\n            \r\n","[requires: v1.4]\r\n            Specify pixel arithmetic for RGB and alpha components separately\r\n            ":"[要求：v1.4]\r\n            分别为 RGB 和 alpha 分量指定像素算法\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D\r\n            \r\n","\r\n            Original was GL_STENCIL_BACK_REF = 0x8CA3\r\n            ":"\r\n            原来是 GL_STENCIL_BACK_REF = 0x8CA3\r\n            \r\n"," are specified as notional units.":" 被指定为名义单位。\r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A\r\n            \r\n","\r\n            The QS_ALLPOSTMESSAGE and QS_POSTMESSAGE flags differ in when they are cleared.\r\n            QS_POSTMESSAGE is cleared when you call GetMessage or PeekMessage, whether or not you are filtering messages.\r\n            QS_ALLPOSTMESSAGE is cleared when you call GetMessage or PeekMessage without filtering messages\r\n            (wMsgFilterMin and wMsgFilterMax are 0). This can be useful when you call PeekMessage multiple times\r\n            to get messages in different ranges.\r\n            ":"\r\n            QS_ALLPOSTMESSAGE 和 QS_POSTMESSAGE 标志在清除时有所不同。\r\n            QS_POSTMESSAGE 在您调用 GetMessage 或 PeekMessage 时被清除，无论您是否过滤消息。\r\n            QS_ALLPOSTMESSAGE 在调用 GetMessage 或 PeekMessage 没有过滤消息时被清除\r\n            （wMsgFilterMin 和 wMsgFilterMax 为 0）。这在您多次调用 PeekMessage 时很有用\r\n            获取不同范围的消息。\r\n            \r\n"," \r\n            Specifies a the starting offset within the buffer of the range to be mapped.\r\n            ":" \r\n            指定要映射的范围缓冲区内的起始偏移量。\r\n            \r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER = 0x92C0\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER = 0x92C0\r\n            \r\n","[requires: ARB_draw_buffers_blend]\r\n            Specify pixel arithmetic for RGB and alpha components separately\r\n            ":"[需要：ARB_draw_buffers_blend]\r\n            分别为 RGB 和 alpha 分量指定像素算法\r\n            \r\n"," \r\n            Specifies the size of the character buffer for storing the returned information log.\r\n            ":" \r\n            指定用于存储返回信息日志的字符缓冲区的大小。\r\n            \r\n","\r\n            Original was GL_ONE_MINUS_SRC1_COLOR = 0x88FA\r\n            ":"\r\n            原来是 GL_ONE_MINUS_SRC1_COLOR = 0x88FA\r\n            \r\n","\r\n            Used in GL.Ati.DrawBuffers\r\n            ":"\r\n            在 GL.Ati.DrawBuffers 中使用\r\n            \r\n","\r\n            Called after GameWindow.Exit was called, but before destroying the OpenGL context.\r\n            ":"\r\n            在调用 GameWindow.Exit 之后但在销毁 OpenGL 上下文之前调用。\r\n            \r\n"," \r\n            The name of the program containing varying out variable whose binding to modify\r\n            ":" \r\n            包含要修改其绑定的 varying out 变量的程序的名称\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4\r\n            \r\n","[length: pname] \r\n            Pointer to storage for the parameters to be retrieved.\r\n            ":"[长度：pname]\r\n            指向要检索的参数的存储指针。\r\n            \r\n","The equivalent Quaternion":"等价的四元数\r\n","\r\n            Original was GL_HighInt = 0X8df5\r\n            ":"\r\n            原来是 GL_HighInt = 0X8df5\r\n            \r\n","\r\n            Original was GL_SAMPLER = 0x82E6\r\n            ":"\r\n            原来是 GL_SAMPLER = 0x82E6\r\n            \r\n","\r\n            Used in GL.Amd.MultiDrawArraysIndirect, GL.Amd.MultiDrawElementsIndirect\r\n            ":"\r\n            用于GL.Amd.MultiDrawArraysIndirect、GL.Amd.MultiDrawElementsIndirect\r\n            \r\n","\r\n            Original was GL_MAP_TESSELLATION_NV = 0x86C2\r\n            ":"\r\n            原来是 GL_MAP_TESSELLATION_NV = 0x86C2\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Set the current normal vector\r\n            ":"[要求：v1.0 和 1.0]\r\n            设置当前法向量\r\n            \r\n","\r\n            Original was GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5\r\n            ":"\r\n            原来是 GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5\r\n            \r\n","\r\n            Original was GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E\r\n            ":"\r\n            原来是 GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E\r\n            \r\n"," if the left button is pressed; otherwise, ":" 如果按下左键；否则，\r\n","\r\n            Original was GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180\r\n            ":"\r\n            原来是 GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180\r\n            \r\n","\r\n            Original was GL_DUAL_LUMINANCE12_SGIS = 0x8116\r\n            ":"\r\n            原来是 GL_DUAL_LUMINANCE12_SGIS = 0x8116\r\n            \r\n","\r\n            Original was GL_YCBCR_MESA = 0x8757\r\n            ":"\r\n            原来是 GL_YCBCR_MESA = 0x8757\r\n            \r\n","A new Matrix4x2d which holds the result of the subtraction":"保存减法结果的新 Matrix4x2d\r\n"," \r\n            Specifies the name of a program pipeline object to validate.\r\n            ":" \r\n            指定要验证的程序管道对象的名称。\r\n            \r\n"," \r\n            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level  is the th mipmap reduction image.\r\n            ":" \r\n            指定所需图像的细节级别数。级别 0 是基础映像级别。 Level 是第 th 个 mipmap 缩小图像。\r\n            \r\n","\r\n            Enumerates the raw input devices attached to the system.\r\n            ":"\r\n            枚举连接到系统的原始输入设备。\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Invalidate the contents of attachments within a framebuffer\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            使帧缓冲区内的附件内容无效\r\n            \r\n","\r\n            Specifies the program object to be queried.\r\n            ":"\r\n            指定要查询的程序对象。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify the value used for depth buffer comparisons\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定用于深度缓冲区比较的值\r\n            \r\n","\r\n            Original was GL_OBJECT_LINK_STATUS_ARB = 0x8B82\r\n            ":"\r\n            原来是 GL_OBJECT_LINK_STATUS_ARB = 0x8B82\r\n            \r\n","\r\n            Original was GL_TEXTURE_HEIGHT_QCOM = 0x8BD3\r\n            ":"\r\n            原来是 GL_TEXTURE_HEIGHT_QCOM = 0x8BD3\r\n            \r\n"," \r\n            The maximum number of characters, including the null terminator, that may be written into name.\r\n            ":" \r\n            可以写入名称的最大字符数，包括空终止符。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652\r\n            \r\n","\r\n            Original was GL_CONSTANT_ARB = 0x8576\r\n            ":"\r\n            原来是 GL_CONSTANT_ARB = 0x8576\r\n            \r\n","\r\n            Original was GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59\r\n            ":"\r\n            原来是 GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify which matrix is the current matrix\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定哪个矩阵是当前矩阵\r\n            \r\n","\r\n            Product ID for the HID.\r\n            ":"\r\n            HID 的产品 ID。\r\n            \r\n","\r\n            Original was GL_SOURCE0_RGB = 0x8580\r\n            ":"\r\n            原来是 GL_SOURCE0_RGB = 0x8580\r\n            \r\n","\r\n            Original was GL_COMBINER5_NV = 0x8555\r\n            ":"\r\n            原来是 GL_COMBINER5_NV = 0x8555\r\n            \r\n","\r\n            Original was GL_4PASS_3_EXT = 0x80A7\r\n            ":"\r\n            原来是 GL_4PASS_3_EXT = 0x80A7\r\n            \r\n","\r\n            Original was GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_POINTER_EXT = 0x8090\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_POINTER_EXT = 0x8090\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Copy pixels into a 2D texture image\r\n            ":"[要求：v1.0 和 1.0]\r\n            将像素复制到二维纹理图像中\r\n            \r\n","\r\n            Original was GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A\r\n            ":"\r\n            原来是 GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A\r\n            \r\n"," \r\n            Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 8. texture must be one of Texture, where i ranges from 0 to (MaxCombinedTextureImageUnits - 1). The initial value is Texture0.\r\n            ":" \r\n            指定激活哪个纹理单元。纹理单元的数量取决于实现，但必须至少为 8。纹理必须是纹理之一，其中 i 的范围从 0 到 (MaxCombinedTextureImageUnits - 1)。初始值为 Texture0。\r\n            \r\n","\r\n            Original was GL_OP_DOT4_EXT = 0x8785\r\n            ":"\r\n            原来是 GL_OP_DOT4_EXT = 0x8785\r\n            \r\n"," \r\n            The size of the character array whose address is given by name.\r\n            ":" \r\n            地址由名称给出的字符数组的大小。\r\n            \r\n","\r\n            Used in GL.GetInteger64, GL.GetInteger and 1 other function\r\n            ":"\r\n            用于 GL.GetInteger64、GL.GetInteger 和其他 1 个函数\r\n            \r\n","[requires: v3.0]\r\n            Bind a buffer object to an indexed buffer target\r\n            ":"[要求：v3.0]\r\n            将缓冲区对象绑定到索引缓冲区目标\r\n            \r\n","\r\n            Original was GL_MAX_IMAGE_SAMPLES_EXT = 0x906D\r\n            ":"\r\n            原来是 GL_MAX_IMAGE_SAMPLES_EXT = 0x906D\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F\r\n            \r\n"," if this instance has a right thumbstick with a x-axis; otherwise, ":" 如果这个实例有一个带有 x 轴的右摇杆；否则，\r\n"," that indicates whether the list of supported extensions may have changed.\r\n            ":" 指示支持的扩展列表是否可能已更改。\r\n            \r\n","\r\n            Original was GL_MAX_COLOR_ATTACHMENTS = 0x8CDF\r\n            ":"\r\n            原来是 GL_MAX_COLOR_ATTACHMENTS = 0x8CDF\r\n            \r\n","\r\n            Gets a value indicating whether the down button is pressed.\r\n            ":"\r\n            获取一个值，该值指示是否按下了向下按钮。\r\n            \r\n","\r\n            Original was GL_RGB5_EXT = 0x8050\r\n            ":"\r\n            原来是 GL_RGB5_EXT = 0x8050\r\n            \r\n","\r\n            Original was GL_POINT_SIZE_ARRAY_POINTER_OES = 0x898C\r\n            ":"\r\n            原来是 GL_POINT_SIZE_ARRAY_POINTER_OES = 0x898C\r\n            \r\n","\r\n            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.\r\n            ":"\r\n            指定指向数组中第一个颜色元素的第一个组件的指针。初始值为 0。\r\n            \r\n","\r\n            Calculate the transpose of the given matrix\r\n            ":"\r\n            计算给定矩阵的转置\r\n            \r\n","\r\n            Original was GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B\r\n            ":"\r\n            原来是 GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B\r\n            \r\n","\r\n            Original was GL_GenerateMipmapHint = 0X8192\r\n            ":"\r\n            原来是 GL_GenerateMipmapHint = 0X8192\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_SAMPLES_ANGLE = 0x8CAB\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_SAMPLES_ANGLE = 0x8CAB\r\n            \r\n","\r\n            Original was GL_OP_RECIP_EXT = 0x8794\r\n            ":"\r\n            原来是 GL_OP_RECIP_EXT = 0x8794\r\n            \r\n","\r\n            Builds a rotation matrix.\r\n            ":"\r\n            构建旋转矩阵。\r\n            \r\n","\r\n            Original was GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E\r\n            ":"\r\n            原来是 GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT64_AMD = 0x8BC2\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT64_AMD = 0x8BC2\r\n            \r\n","\r\n            Original was GL_FIELDS_NV = 0x8E27\r\n            ":"\r\n            原来是 GL_FIELDS_NV = 0x8E27\r\n            \r\n","\r\n            Original was GL_WRITE_ONLY_ARB = 0x88B9\r\n            ":"\r\n            原来是 GL_WRITE_ONLY_ARB = 0x88B9\r\n            \r\n","\r\n            Original was GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D\r\n            ":"\r\n            原来是 GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D\r\n            \r\n","\r\n            For internal use by OpenTK only!\r\n            Exposes useful native WINAPI methods and structures.\r\n            ":"\r\n            仅供 OpenTK 内部使用！\r\n            公开有用的本机 WINAPI 方法和结构。\r\n            \r\n","\r\n            Original was GL_OES_stencil8 = 1\r\n            ":"\r\n            原来是 GL_OES_stencil8 = 1\r\n            \r\n","\r\n            Original was GL_NICEST = 0x1102\r\n            ":"\r\n            原来是 GL_NICEST = 0x1102\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E1E\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E1E\r\n            \r\n","[length: 1] \r\n            Specifies the current edge flag value, either True or False. The initial value is True.\r\n            ":"[长度：1]\r\n            指定当前边缘标志值，True 或 False。初始值为真。\r\n            \r\n","\r\n            Original was GL_OP_MIN_EXT = 0x878B\r\n            ":"\r\n            原来是 GL_OP_MIN_EXT = 0x878B\r\n            \r\n","\r\n            Original was GL_EYE_LINEAR = 0x2400\r\n            ":"\r\n            原来是 GL_EYE_LINEAR = 0x2400\r\n            \r\n","[length: 1] \r\n            Returns the length of the string returned in source (excluding the null terminator).\r\n            ":"[长度：1]\r\n            返回源中返回的字符串的长度（不包括空终止符）。\r\n            \r\n","Pointer to a game controller instance returned by ":"指向由返回的游戏控制器实例的指针\r\n","\r\n            Original was GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805\r\n            ":"\r\n            原来是 GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805\r\n            \r\n","[requires: EXT_subtexture]\r\n            Specify a one-dimensional texture subimage\r\n            ":"[需要：EXT_subtexture]\r\n            指定一维纹理子图像\r\n            \r\n","\r\n            Original was GL_TEXTURE_WIDTH_QCOM = 0x8BD2\r\n            ":"\r\n            原来是 GL_TEXTURE_WIDTH_QCOM = 0x8BD2\r\n            \r\n","[requires: SGIX_pixel_texture]":"[要求：SGIX_pixel_texture]\r\n","\r\n            Original was GL_OneMinusConstantAlpha = 0X8004\r\n            ":"\r\n            原来是 GL_OneMinusConstantAlpha = 0X8004\r\n            \r\n","[requires: EXT_convolution]\r\n            Define a one-dimensional convolution filter\r\n            ":"[需要：EXT_convolution]\r\n            定义一维卷积滤波器\r\n            \r\n","\r\n            Original was GL_SLICE_ACCUM_SUN = 0x85CC\r\n            ":"\r\n            原来是 GL_SLICE_ACCUM_SUN = 0x85CC\r\n            \r\n","\r\n            Original was GL_SCALE_BY_FOUR_NV = 0x853F\r\n            ":"\r\n            原来是 GL_SCALE_BY_FOUR_NV = 0x853F\r\n            \r\n","[requires: v1.0]\r\n            Specify a two-dimensional texture image in a compressed format\r\n            ":"[要求：v1.0]\r\n            以压缩格式指定二维纹理图像\r\n            \r\n","\r\n            Original was GL_HALF_FLOAT_OES = 0x8D61\r\n            ":"\r\n            原来是 GL_HALF_FLOAT_OES = 0x8D61\r\n            \r\n","\r\n            Each WM_INPUT can indicate several inputs, but all of the inputs\r\n            come from the same HID. The size of the bRawData array is\r\n            dwSizeHid * dwCount.\r\n            ":"\r\n            每个 WM_INPUT 可以指示多个输入，但所有输入\r\n            来自同一个 HID。 bRawData 数组的大小是\r\n            dwSizeHid * dwCount。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Return a string describing the current GL connection\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            返回描述当前 GL 连接的字符串\r\n            \r\n","The down arrow key.":"向下箭头键。\r\n","\r\n            Original was GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C\r\n            ":"\r\n            原来是 GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C\r\n            \r\n","\r\n            Original was GL_CLIP_PLANE0 = 0x3000\r\n            ":"\r\n            原来是 GL_CLIP_PLANE0 = 0x3000\r\n            \r\n"," \r\n            Specify the target of the operation. target must be one of Texture3D, ProxyTexture3D, Texture2DArray, ProxyTexture2DArray, TextureCubeArray, or ProxyTextureCubeArray.\r\n            ":" \r\n            指定操作的目标。目标必须是 Texture3D、ProxyTexture3D、Texture2DArray、ProxyTexture2DArray、TextureCubeArray 或 ProxyTextureCubeArray 之一。\r\n            \r\n"," structure representing the combined state of all mouse devices.":" 表示所有鼠标设备的组合状态的结构。\r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Returns the value of a uniform variable\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            返回统一变量的值\r\n            \r\n","\r\n            Original was GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308\r\n            ":"\r\n            原来是 GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308\r\n            \r\n"," \r\n            Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.\r\n            ":" \r\n            在写入帧缓冲区的写入缓冲区内指定目标矩形的边界。\r\n            \r\n","\r\n            Original was GL_TEXTURE_2D_MULTISAMPLE = 0x9100\r\n            ":"\r\n            原来是 GL_TEXTURE_2D_MULTISAMPLE = 0x9100\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return the handles of the shader objects attached to a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回附加到程序对象的着色器对象的句柄\r\n            \r\n","\r\n            Original was GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899\r\n            \r\n"," \r\n            Specifies the index of the uniform block within program.\r\n            ":" \r\n            指定程序内统一块的索引。\r\n            \r\n","[requires: EXT_histogram]\r\n            Define histogram table\r\n            ":"[需要：EXT_histogram]\r\n            定义直方图表\r\n            \r\n","\r\n            Original was GL_CLAMP_READ_COLOR = 0x891C\r\n            ":"\r\n            原来是 GL_CLAMP_READ_COLOR = 0x891C\r\n            \r\n"," triggers.\r\n            ":" 触发器。\r\n            \r\n","\r\n            Original was GL_MAX_NAME_STACK_DEPTH = 0x0D37\r\n            ":"\r\n            原来是 GL_MAX_NAME_STACK_DEPTH = 0x0D37\r\n            \r\n","\r\n            Window field offsets for GetWindowLong() and GetWindowLongPtr().\r\n            ":"\r\n            GetWindowLong() 和 GetWindowLongPtr() 的窗口字段偏移量。\r\n            \r\n","[length: numPaths]":"[长度：numPaths]\r\n","\r\n            Original was GL_HILO_NV = 0x86F4\r\n            ":"\r\n            原来是 GL_HILO_NV = 0x86F4\r\n            \r\n","\r\n            Original was GL_TRIANGLE_STRIP_ADJACENCY = 0xD\r\n            ":"\r\n            原来是 GL_TRIANGLE_STRIP_ADJACENCY = 0xD\r\n            \r\n","\r\n            Original was GL_SRGB8_NV = 0x8C41\r\n            ":"\r\n            原来是 GL_SRGB8_NV = 0x8C41\r\n            \r\n","\r\n            Original was GL_TRIANGLES = 0x0004\r\n            ":"\r\n            原来是 GL_TRIANGLES = 0x0004\r\n            \r\n","\r\n            Original was GL_VERTEX_STREAM2_ATI = 0x876E\r\n            ":"\r\n            原来是 GL_VERTEX_STREAM2_ATI = 0x876E\r\n            \r\n"," \r\n            Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only).\r\n            ":" \r\n            指定网格范围区间 [v1, v2] 中的分区数（仅限 glMapGrid2）。\r\n            \r\n","[requires: APPLE_vertex_array_object]\r\n            Determine if a name corresponds to a vertex array object\r\n            ":"[需要：APPLE_vertex_array_object]\r\n            判断名称是否对应于顶点数组对象\r\n            \r\n","\r\n            Original was GL_LUMINANCE32UI_EXT = 0x8D74\r\n            ":"\r\n            原来是 GL_LUMINANCE32UI_EXT = 0x8D74\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RG11_EAC = 0x9272\r\n            ":"\r\n            原来是 GL_COMPRESSED_RG11_EAC = 0x9272\r\n            \r\n","\r\n            Used in GL.Arb.BlendEquationSeparate, GL.Arb.BlendFunc and 48 other functions\r\n            ":"\r\n            用于 GL.Arb.BlendEquationSeparate、GL.Arb.BlendFunc 和 48 个其他函数\r\n            \r\n","\r\n            Original was GL_BLUE_NV = 0x1905\r\n            ":"\r\n            原来是 GL_BLUE_NV = 0x1905\r\n            \r\n","\r\n            Original was GL_INTERLACE_OML = 0x8980\r\n            ":"\r\n            原来是 GL_INTERLACE_OML = 0x8980\r\n            \r\n","\r\n            Original was GL_TEXTURE_RED_TYPE_ARB = 0x8C10\r\n            ":"\r\n            原来是 GL_TEXTURE_RED_TYPE_ARB = 0x8C10\r\n            \r\n","[requires: v1.4 or ARB_imaging|VERSION_1_4]\r\n            Specify the equation used for both the RGB blend equation and the Alpha blend equation\r\n            ":"[要求：v1.4 或 ARB_imaging|VERSION_1_4]\r\n            指定用于 RGB 混合方程和 Alpha 混合方程的方程\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT32F_NV = 0x8DAB\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT32F_NV = 0x8DAB\r\n            \r\n","\r\n            Original was GL_NORMAL_ARRAY_LIST_IBM = 103071\r\n            ":"\r\n            原来是 GL_NORMAL_ARRAY_LIST_IBM = 103071\r\n            \r\n","Only one client at a time can select CirculateRequest, ConfigureRequest, or MapRequest events, which are associated with the event mask SubstructureRedirectMask. ":"一次只有一个客户端可以选择与事件掩码 SubstructureRedirectMask 关联的 CirculateRequest、ConfigureRequest 或 MapRequest 事件。\r\n","\r\n            Original was GL_RED_INTEGER = 0x8D94\r\n            ":"\r\n            原来是 GL_RED_INTEGER = 0x8D94\r\n            \r\n","\r\n            Original was GL_VECTOR_EXT = 0x87BF\r\n            ":"\r\n            原来是 GL_VECTOR_EXT = 0x87BF\r\n            \r\n","Occurs when type is not blittable.":"当类型不可 blittable 时发生。\r\n","\r\n            Original was GL_IMAGE_CLASS_4_X_32 = 0x82B9\r\n            ":"\r\n            原来是 GL_IMAGE_CLASS_4_X_32 = 0x82B9\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Returns a parameter from a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            从程序对象返回参数\r\n            \r\n"," \r\n            Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.\r\n            ":" \r\n            指定指示所需行为的符号常量。接受 Fastest、Nicest 和 DontCare。\r\n            \r\n"," \r\n            Specifies the index of the query object target.\r\n            ":" \r\n            指定查询对象目标的索引。\r\n            \r\n","\r\n            Gets the precise change in value of the wheel for this event in floating-point units.\r\n            ":"\r\n            以浮点单位获取此事件的轮值的精确变化。\r\n            \r\n","\r\n            This value must be 0.\r\n            ":"\r\n            该值必须为 0。\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674\r\n            \r\n","The seventh axis of the JoystickDevice.":"JoystickDevice 的第七轴。\r\n","\r\n            Original was GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Write a block of pixels to the frame buffer\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            将像素块写入帧缓冲区\r\n            \r\n","\r\n            The Y component of the Vector4.\r\n            ":"\r\n            Vector4 的 Y 分量。\r\n            \r\n","\r\n            Gets or sets the value at the index of the Vector.\r\n            ":"\r\n            获取或设置 Vector 索引处的值。\r\n            \r\n","\r\n            Gets the list of available MouseDevices.\r\n            ":"\r\n            获取可用的 MouseDevices 列表。\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E\r\n            \r\n","\r\n            Subtype of the keyboard.\r\n            ":"\r\n            键盘的子类型。\r\n            \r\n","Handle to the window whose client area will be used for the conversion.":"其客户区将用于转换的窗口的句柄。\r\n"," \r\n            Specifies the number of uniform indices stored in indices.\r\n            ":" \r\n            指定索引中存储的统一索引数。\r\n            \r\n","\r\n            Gets or sets the horizontal location of this window on the desktop.\r\n            ":"\r\n            获取或设置此窗口在桌面上的水平位置。\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077\r\n            ":"原来是 GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077\r\n            \r\n","\r\n            Original was GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE\r\n            ":"\r\n            原来是 GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE\r\n            \r\n","\r\n            Original was GL_Vendor = 0X1f00\r\n            ":"\r\n            原来是 GL_Vendor = 0X1f00\r\n            \r\n","\r\n            Original was GL_COMBINE_ALPHA_EXT = 0x8572\r\n            ":"\r\n            原来是 GL_COMBINE_ALPHA_EXT = 0x8572\r\n            \r\n","\r\n            Original was GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF\r\n            ":"\r\n            原来是 GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF\r\n            \r\n","[requires: v2.0]\r\n            Return the address of the specified generic vertex attribute pointer\r\n            ":"[要求：v2.0]\r\n            返回指定通用顶点属性指针的地址\r\n            \r\n","\r\n            Original was GL_TextureMagFilter = 0x2800\r\n            ":"\r\n            原来是 GL_TextureMagFilter = 0x2800\r\n            \r\n","\r\n            Original was GL_PATH_GEN_MODE_NV = 0x90B0\r\n            ":"\r\n            原来是 GL_PATH_GEN_MODE_NV = 0x90B0\r\n            \r\n","\r\n            Original was GL_LINEAR_MIPMAP_LINEAR = 0x2703\r\n            ":"\r\n            原来是 GL_LINEAR_MIPMAP_LINEAR = 0x2703\r\n            \r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301\r\n            \r\n","\r\n            Original was GL_VERSION_ES_CL_1_0 = 1\r\n            ":"\r\n            原来是 GL_VERSION_ES_CL_1_0 = 1\r\n            \r\n","\r\n            Original was GL_PROXY_HISTOGRAM = 0x8025\r\n            ":"原来是 GL_PROXY_HISTOGRAM = 0x8025\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_STRIDE = 0x807C\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_STRIDE = 0x807C\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455\r\n            \r\n","The right bracket key (equivalent to BracketRight).":"右括号键（相当于 BracketRight）。\r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Simultaneously specify storage for all levels of a two-dimensional texture\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            同时为二维纹理的所有级别指定存储\r\n            \r\n","\r\n            Original was GL_DONT_CARE = 0x1100\r\n            ":"\r\n            原来是 GL_DONT_CARE = 0x1100\r\n            \r\n"," \r\n            The sync object whose status to wait on.\r\n            ":" \r\n            要等待其状态的同步对象。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER1_NV = 0x8826\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER1_NV = 0x8826\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E\r\n            \r\n","\r\n            Specifies the height of the smallest rectangle (the glyph's black box) that completely encloses the glyph.\r\n            ":"\r\n            指定完全包围字形的最小矩形（字形的黑框）的高度。\r\n            \r\n","\r\n            Original was GL_POINT_SPRITE_R_MODE_NV = 0x8863\r\n            ":"\r\n            原来是 GL_POINT_SPRITE_R_MODE_NV = 0x8863\r\n            \r\n","\r\n            Original was GL_FRAGMENT_LIGHT2_SGIX = 0x840E\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHT2_SGIX = 0x840E\r\n            \r\n","\r\n            Gets or sets the System.Drawing.Icon for this GameWindow.\r\n            ":"\r\n            获取或设置此 GameWindow 的 System.Drawing.Icon。\r\n            \r\n","[requires: EXT_convolution]\r\n            Get separable convolution filter kernel images\r\n            ":"[需要：EXT_convolution]\r\n            获取可分离卷积核图像\r\n            \r\n","\r\n            Gets a value indicating the InputDeviceType of this InputDevice. \r\n            ":"\r\n            获取一个值，该值指示此 InputDevice 的 InputDeviceType。\r\n            \r\n","\r\n            Original was GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2\r\n            ":"\r\n            原来是 GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2\r\n            \r\n","\r\n            Original was GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 0x00000001\r\n            ":"\r\n            原来是 GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 0x00000001\r\n            \r\n","\r\n            Original was GL_CLAMP_READ_COLOR_ARB = 0x891C\r\n            ":"\r\n            原来是 GL_CLAMP_READ_COLOR_ARB = 0x891C\r\n            \r\n","\r\n            Original was GL_MAX_VIEWPORTS = 0x825B\r\n            ":"\r\n            原来是 GL_MAX_VIEWPORTS = 0x825B\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 0x9138\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 0x9138\r\n            \r\n","[requires: ARB_sparse_texture]":"[需要：ARB_sparse_texture]\r\n"," \r\n            Specifies a symbolic value representing a shading technique. Accepted values are Flat and Smooth. The initial value is Smooth.\r\n            ":" \r\n            指定表示着色技术的符号值。接受的值为平坦和平滑。初始值为平滑。\r\n            \r\n","\r\n            Original was GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A\r\n            ":"\r\n            原来是 GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645\r\n            \r\n","\r\n            Original was GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F\r\n            ":"\r\n            原来是 GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F\r\n            \r\n","[length: 1] \r\n            The address of a variable which will receive the length of the resource name.\r\n            ":"[长度：1]\r\n            将接收资源名称长度的变量的地址。\r\n            \r\n","\r\n            Original was GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F\r\n            ":"\r\n            原来是 GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F\r\n            \r\n","\r\n            Describes the capabilities of a ":"\r\n            描述了一个的能力\r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F\r\n            \r\n","[requires: v1.0]":"[要求：v1.0]\r\n","\r\n            Used in GL.DrawBuffers, GL.NamedFramebufferDrawBuffers\r\n            ":"\r\n            在GL.DrawBuffers、GL.NamedFramebufferDrawBuffers中使用\r\n            \r\n","\r\n            Original was GL_Texture20 = 0X84d4\r\n            ":"\r\n            原来是 GL_Texture20 = 0X84d4\r\n            \r\n","\r\n            Original was GL_COPY_READ_BUFFER_BINDING = 0x8F36\r\n            ":"\r\n            原来是 GL_COPY_READ_BUFFER_BINDING = 0x8F36\r\n            \r\n"," \r\n            Specifies the address an array of characters to containing the name of the uniform block whose index to retrieve.\r\n            ":" \r\n            指定一个字符数组的地址，其中包含要检索其索引的统一块的名称。\r\n            \r\n"," \r\n            Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.\r\n            ":" \r\n            指定纹理的内部格式。必须是以下符号常量之一：Alpha、Luminance、LuminanceAlpha、Rgb、Rgba。\r\n            \r\n"," \r\n            Specifies the number of renderbuffer object names to be generated.\r\n            ":" \r\n            指定要生成的渲染缓冲区对象名称的数量。\r\n            \r\n","\r\n            Original was GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6\r\n            ":"\r\n            原来是 GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER_SIZE_EXT = 0x919E\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_SIZE_EXT = 0x919E\r\n            \r\n","\r\n            Original was GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F\r\n            ":"\r\n            原来是 GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F\r\n            \r\n"," \r\n            Specifies the parameter of attachment to query.\r\n            ":" \r\n            指定要查询的附件参数。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Retrieve information about varying variables selected for transform feedback\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            检索有关为变换反馈选择的不同变量的信息\r\n            \r\n","\r\n            Original was GL_LineStrip = 0X0003\r\n            ":"\r\n            原来是 GL_LineStrip = 0X0003\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC\r\n            ":"\r\n            原来是 GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC\r\n            \r\n","\r\n            Original was GL_INT = 0X1404\r\n            ":"\r\n            原来是 GL_INT = 0X1404\r\n            \r\n"," \r\n            The amount of data in machine units that can be read from the buffet object while used as an indexed target.\r\n            ":" \r\n            用作索引目标时可以从自助餐对象读取的机器单位数据量。\r\n            \r\n","If successful, the function returns S_OK. Otherwise it returns an error value.":"如果成功，函数返回 S_OK。否则它返回一个错误值。\r\n","\r\n            Original was GL_ALPHA12_EXT = 0x803D\r\n            ":"\r\n            原来是 GL_ALPHA12_EXT = 0x803D\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1\r\n            \r\n","\r\n            The index of the joystick button for the event.\r\n            ":"\r\n            事件的操纵杆按钮的索引。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_ENV_PARAMETERS = 0x88B5\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_ENV_PARAMETERS = 0x88B5\r\n            \r\n","\r\n            Pointer to a null-terminated string that specifies the name of the new window.\r\n            ":"\r\n            指向指定新窗口名称的空终止字符串的指针。\r\n            \r\n","\r\n            Original was GL_FONT_HAS_KERNING_BIT_NV = 0x10000000\r\n            ":"\r\n            原来是 GL_FONT_HAS_KERNING_BIT_NV = 0x10000000\r\n            \r\n","\r\n            Original was GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307\r\n            ":"\r\n            原来是 GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307\r\n            \r\n","\r\n            Used in GL.GetMinmaxParameter\r\n            ":"\r\n            在 GL.GetMinmaxParameter 中使用\r\n            \r\n"," to retrieve the current state\r\n            of a given device.\r\n            ":" 检索当前状态\r\n            一个给定的设备。\r\n            \r\n","The window ID of the created window.":"创建的窗口的窗口 ID。\r\n","\r\n            Original was GL_RGBA16_EXT = 0x805B\r\n            ":"\r\n            原来是 GL_RGBA16_EXT = 0x805B\r\n            \r\n"," \r\n            Specifies a query object target. Must be AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.\r\n            ":"指定查询对象目标。必须是 AnySamplesPassed、AnySamplesPassedConservative 或 TransformFeedbackPrimitivesWritten。\r\n            \r\n","[requires: v4.0]\r\n            Specifies minimum rate at which sample shaing takes place\r\n            ":"[要求：v4.0]\r\n            指定样本着色发生的最小速率\r\n            \r\n"," for all specified mouse devices.\r\n            This method is equivalent to ":"对于所有指定的鼠标设备。\r\n            这个方法相当于\r\n","\r\n            Original was GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Return the pointer to a mapped buffer object's data store\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            返回指向映射缓冲区对象的数据存储的指针\r\n            \r\n","[requires: v3.0]\r\n            Specify values to record in transform feedback buffers\r\n            ":"[要求：v3.0]\r\n            指定要记录在变换反馈缓冲区中的值\r\n            \r\n"," \r\n            Specifies the name of the pipeline object to bind to the context.\r\n            ":" \r\n            指定要绑定到上下文的管道对象的名称。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Determine if a name corresponds to a query object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            确定名称是否对应于查询对象\r\n            \r\n","\r\n            Original was GL_LUMINANCE_FLOAT16_ATI = 0x881E\r\n            ":"\r\n            原来是 GL_LUMINANCE_FLOAT16_ATI = 0x881E\r\n            \r\n","The print screen key.":"打印屏幕键。\r\n","\r\n            Original was GL_EVAL_2D_NV = 0x86C0\r\n            ":"\r\n            原来是 GL_EVAL_2D_NV = 0x86C0\r\n            \r\n","\r\n            Original was GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D\r\n            ":"\r\n            原来是 GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D\r\n            \r\n"," \r\n            specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, FuncReverseSubtract, Min, Max.\r\n            ":" \r\n            指定源颜色和目标颜色的组合方式。它必须是 FuncAdd、FuncSubtract、FuncReverseSubtract、Min、Max。\r\n            \r\n","\r\n            Original was GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 0x8F63\r\n            ":"\r\n            原来是 GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 0x8F63\r\n            \r\n","\r\n            Original was GL_SOURCE1_ALPHA_EXT = 0x8589\r\n            ":"原来是 GL_SOURCE1_ALPHA_EXT = 0x8589\r\n            \r\n"," directional pad.\r\n            ":" 方向垫。\r\n            \r\n","\r\n            Original was GL_QUAD_ALPHA4_SGIS = 0x811E\r\n            ":"\r\n            原来是 GL_QUAD_ALPHA4_SGIS = 0x811E\r\n            \r\n","\r\n            Used in GL.NV.GetOcclusionQuery\r\n            ":"\r\n            在 GL.NV.GetOcclusionQuery 中使用\r\n            \r\n","[requires: ARB_debug_output]\r\n            Control the reporting of debug messages in a debug context\r\n            ":"[需要：ARB_debug_output]\r\n            在调试上下文中控制调试消息的报告\r\n            \r\n","A new Matrix3x4d which holds the result of the multiplication":"保存乘法结果的新 Matrix3x4d\r\n","[requires: v1.0][deprecated: v3.2]\r\n            Set the current normal vector\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            设置当前法向量\r\n            \r\n","A message explaining the cause for this exception.":"解释此异常原因的消息。\r\n","[length: groupsSize]":"[长度：groupsSize]\r\n","\r\n            Original was GL_STENCIL_TAG_BITS_EXT = 0x88F2\r\n            ":"\r\n            原来是 GL_STENCIL_TAG_BITS_EXT = 0x88F2\r\n            \r\n","GameWindow options regarding window appearance and behavior.":"关于窗口外观和行为的 GameWindow 选项。\r\n","\r\n            Used in GL.Arb.GetProgram, GL.Arb.GetProgramString and 5 other functions\r\n            ":"\r\n            用于 GL.Arb.GetProgram、GL.Arb.GetProgramString 和其他 5 个函数\r\n            \r\n","\r\n            Original was GL_BOOL_VEC4_ARB = 0x8B59\r\n            ":"\r\n            原来是 GL_BOOL_VEC4_ARB = 0x8B59\r\n            \r\n","\r\n            Pixel clock.\r\n            ":"\r\n            像素时钟。\r\n            \r\n","\r\n            Used in GL.NV.CopyImageSubData\r\n            ":"\r\n            在 GL.NV.CopyImageSubData 中使用\r\n            \r\n","[requires: v4.3 or ARB_framebuffer_no_attachments|VERSION_4_3]\r\n            Retrieve a named parameter from a framebuffer\r\n            ":"[要求：v4.3 或 ARB_framebuffer_no_attachments|VERSION_4_3]\r\n            从帧缓冲区中检索命名参数\r\n            \r\n","[requires: EXT_secondary_color]\r\n            Set the current secondary color\r\n            ":"[要求：EXT_secondary_color]\r\n            设置当前的次要颜色\r\n            \r\n"," \r\n            Must be Convolution1D.\r\n            ":" \r\n            必须是 Convolution1D。\r\n            \r\n"," if this instance has a microphone input; otherwise, ":" 如果此实例有麦克风输入；否则，\r\n","\r\n            Gets a System.Single representing the relative change in the position of the axis.\r\n            ":"\r\n            获取表示轴位置相对变化的 System.Single。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT14_NV = 0x8CEE\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT14_NV = 0x8CEE\r\n            \r\n","[length: pname] \r\n            Returns the requested data.\r\n            ":"[长度：pname]\r\n            返回请求的数据。\r\n            \r\n"," \r\n            Specifies the data type of each coordinate in the array. Symbolic constants Byte, Short, Int, Float, and Double are accepted. The initial value is Float.\r\n            ":" \r\n            指定数组中每个坐标的数据类型。接受符号常量 Byte、Short、Int、Float 和 Double。初始值为浮点数。\r\n            \r\n","\r\n            Original was GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9\r\n            ":"\r\n            原来是 GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9\r\n            \r\n","\r\n            Builds a quaternion from the given rotation matrix\r\n            ":"\r\n            从给定的旋转矩阵构建四元数\r\n            \r\n"," if the down button is pressed; otherwise, ":" 如果按下向下按钮；否则，\r\n","[requires: ARB_debug_output]\r\n            Retrieve messages from the debug message log\r\n            ":"[需要：ARB_debug_output]\r\n            从调试消息日志中检索消息\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE\r\n            \r\n","\r\n            Original was GL_ETC1_RGB8_OES = 0x8D64\r\n            ":"\r\n            原来是 GL_ETC1_RGB8_OES = 0x8D64\r\n            \r\n","\r\n            Second row of the matrix.\r\n            ":"\r\n            矩阵的第二行。\r\n            \r\n","\r\n            Original was GL_CLIP_DISTANCE_NV = 0x8C7A\r\n            ":"\r\n            原来是 GL_CLIP_DISTANCE_NV = 0x8C7A\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F\r\n            \r\n","[requires: ARB_geometry_shader4]\r\n            Attach a single layer of a texture to a framebuffer\r\n            ":"[需要：ARB_geometry_shader4]\r\n            将单层纹理附加到帧缓冲区\r\n            \r\n","\r\n            Define a separable two-dimensional convolution filter\r\n            ":"\r\n            定义一个可分离的二维卷积滤波器\r\n            \r\n"," \r\n            Specifies a potential display list name.\r\n            ":" \r\n            指定可能的显示列表名称。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650\r\n            \r\n","width in pixels":"以像素为单位的宽度\r\n","[length: count*2] \r\n            For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.\r\n            ":"[长度：计数*2]\r\n            对于向量和矩阵命令，指定一个指向计数值数组的指针，该数组将用于更新指定的统一变量。\r\n            \r\n","\r\n            Original was GL_RGBA16UI_EXT = 0x8D76\r\n            ":"\r\n            原来是 GL_RGBA16UI_EXT = 0x8D76\r\n            \r\n","The left operand of the subtraction.":"减法的左操作数。\r\n","\r\n            Original was GL_Texture9 = 0X84c9\r\n            ":"\r\n            原来是 GL_Texture9 = 0X84c9\r\n            \r\n","\r\n            Original was GL_UNPACK_RESAMPLE_SGIX = 0x842D\r\n            ":"\r\n            原来是 GL_UNPACK_RESAMPLE_SGIX = 0x842D\r\n            \r\n","\r\n            Used in GL.GetTexLevelParameter, GL.GetTexParameter and 3 other functions\r\n            ":"\r\n            用于 GL.GetTexLevelParameter、GL.GetTexParameter 和其他 3 个函数\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n","[requires: EXT_pixel_transform]":"[需要：EXT_pixel_transform]\r\n","\r\n            Original was GL_IMAGE_BINDING_NAME = 0x8F3A\r\n            ":"\r\n            原来是 GL_IMAGE_BINDING_NAME = 0x8F3A\r\n            \r\n"," \r\n            Specifies the name of a program containing the uniform block.\r\n            ":" \r\n            指定包含统一块的程序的名称。\r\n            \r\n","[requires: v2.0]\r\n            Determines if a name corresponds to a program object\r\n            ":"[要求：v2.0]\r\n            确定名称是否对应于程序对象\r\n            \r\n","\r\n            Original was GL_INTENSITY4 = 0x804A\r\n            ":"\r\n            原来是 GL_INTENSITY4 = 0x804A\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B\r\n            \r\n"," \r\n            Specifies the program object to which a shader object will be attached.\r\n            ":" \r\n            指定着色器对象将附加到的程序对象。\r\n            \r\n","\r\n            Original was GL_SAMPLE_COVERAGE_VALUE = 0x80AA\r\n            ":"\r\n            原来是 GL_SAMPLE_COVERAGE_VALUE = 0x80AA\r\n            \r\n","\r\n            Original was GL_OPERAND0_RGB_EXT = 0x8590\r\n            ":"\r\n            原来是 GL_OPERAND0_RGB_EXT = 0x8590\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84\r\n            ":"原来是 GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84\r\n            \r\n","\r\n            Reset histogram table entries to zero\r\n            ":"\r\n            将直方图条目重置为零\r\n            \r\n"," \r\n            Specifies a pointer to the first component of the first color element in the array. The initial value is 0.\r\n            ":" \r\n            指定指向数组中第一个颜色元素的第一个组件的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_FloatMat4 = 0X8b5c\r\n            ":"\r\n            原来是 GL_FloatMat4 = 0X8b5c\r\n            \r\n","\r\n            Original was GL_PIXEL_GROUP_COLOR_SGIS = 0x8356\r\n            ":"\r\n            原来是 GL_PIXEL_GROUP_COLOR_SGIS = 0x8356\r\n            \r\n","[requires: ARB_multitexture]\r\n            Select active texture unit\r\n            ":"[需要：ARB_multitexture]\r\n            选择活动纹理单元\r\n            \r\n","[length: target,ustride,uorder,vstride,vorder] \r\n            Specifies a pointer to the array of control points.\r\n            ":"[长度：目标、ustride、uorder、vstride、vorder]\r\n            指定指向控制点数组的指针。\r\n            \r\n","\r\n            Original was GL_PATH_FORMAT_SVG_NV = 0x9070\r\n            ":"\r\n            原来是 GL_PATH_FORMAT_SVG_NV = 0x9070\r\n            \r\n"," \r\n            Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.\r\n            ":" \r\n            指定到更近和更远的深度裁剪平面的距离。如果飞机位于观察者后面，则这些值为负。\r\n            \r\n","\r\n            Original was GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5\r\n            ":"\r\n            原来是 GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5\r\n            \r\n","\r\n            Original was GL_ALPHA4 = 0x803B\r\n            ":"\r\n            原来是 GL_ALPHA4 = 0x803B\r\n            \r\n","\r\n            Original was GL_RG16F = 0x822F\r\n            ":"\r\n            原来是 GL_RG16F = 0x822F\r\n            \r\n","\r\n            Do Spherical linear interpolation between two quaternions \r\n            ":"\r\n            在两个四元数之间进行球面线性插值\r\n            \r\n"," \r\n            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.\r\n            ":" \r\n            指定图像是否将对图像中的所有纹素使用相同的样本位置和相同数量的样本，并且样本位置将不依赖于图像的内部格式或大小。\r\n            \r\n","\r\n            Used in GL.GetBufferParameter, GL.GetNamedBufferParameter and 2 other functions\r\n            ":"\r\n            用于 GL.GetBufferParameter、GL.GetNamedBufferParameter 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_QUERY_RESULT = 0x8866\r\n            ":"\r\n            原来是 GL_QUERY_RESULT = 0x8866\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 0x9123\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 0x9123\r\n            \r\n"," \r\n            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.\r\n            ":" \r\n            对于矩阵命令，指定是否在将值加载到统一变量时转置矩阵。\r\n            \r\n"," \r\n            Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach.\r\n            ":" \r\n            指定要附加的 renderbuffertarget 类型的现有渲染缓冲区对象的名称。\r\n            \r\n","\r\n            Original was GL_PATH_STROKE_COVER_MODE_NV = 0x9083\r\n            ":"\r\n            原来是 GL_PATH_STROKE_COVER_MODE_NV = 0x9083\r\n            \r\n","[length: 1] \r\n            Returns the pointer value specified by pname.\r\n            ":"[长度：1]\r\n            返回由 pname 指定的指针值。\r\n            \r\n","\r\n            Override to add custom cleanup logic.\r\n            ":"\r\n            覆盖以添加自定义清理逻辑。\r\n            \r\n","\r\n            Original was GL_MATRIX3_NV = 0x8633\r\n            ":"原来是 GL_MATRIX3_NV = 0x8633\r\n            \r\n","\r\n            Original was GL_READ_ONLY_ARB = 0x88B8\r\n            ":"\r\n            原来是 GL_READ_ONLY_ARB = 0x88B8\r\n            \r\n","\r\n            Original was GL_PACK_SKIP_IMAGES_EXT = 0x806B\r\n            ":"\r\n            原来是 GL_PACK_SKIP_IMAGES_EXT = 0x806B\r\n            \r\n","\r\n            The RawHID structure describes the format of the raw input\r\n            from a Human Interface Device (HID).\r\n            ":"\r\n            RawHID 结构描述原始输入的格式\r\n            来自人机接口设备 (HID)。\r\n            \r\n","\r\n            Occurs whenever a ":"\r\n            每当\r\n"," \r\n            The target of the operation, which must be ReadFramebuffer, DrawFramebuffer or Framebuffer.\r\n            ":" \r\n            操作的目标，必须是ReadFramebuffer、DrawFramebuffer或Framebuffer。\r\n            \r\n","\r\n            Specifies the format of the compressed image data stored at address data.\r\n            ":"\r\n            指定存储在地址数据中的压缩图像数据的格式。\r\n            \r\n","\r\n            Used in GL.BindTexture, GL.CompressedTexImage2D and 7 other functions\r\n            ":"\r\n            用于GL.BindTexture、GL.CompressedTexImage2D等7个函数\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 0x92D3\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 0x92D3\r\n            \r\n"," \r\n            Specifies the base instance for use in fetching instanced vertex attributes.\r\n            ":" \r\n            指定用于获取实例化顶点属性的基础实例。\r\n            \r\n","\r\n            Original was GL_DepthAttachment = 0X8d00\r\n            ":"\r\n            原来是 GL_DepthAttachment = 0X8d00\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify a logical pixel operation for rendering\r\n            ":"[要求：v1.0 和 1.0]\r\n            指定用于渲染的逻辑像素操作\r\n            \r\n","\r\n            Destroy a surface created with CreateSurface and clears the passed reference.\r\n            ":"\r\n            销毁使用 CreateSurface 创建的表面并清除传递的引用。\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER8 = 0x882D\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER8 = 0x882D\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365\r\n            \r\n","[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]\r\n            Set the value of a sub-word of the sample mask\r\n            ":"[要求：v3.2 或 ARB_texture_multisample|VERSION_3_2]\r\n            设置样本掩码的子词的值\r\n            \r\n","\r\n            Original was GL_INDEX_ARRAY_LIST_IBM = 103073\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_LIST_IBM = 103073\r\n            \r\n"," \r\n            Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.\r\n            ":" \r\n            指定正面或背面多边形是剔除的候选对象。接受符号常量 Front、Back 和 FrontAndBack。初始值为返回。\r\n            \r\n","\r\n            Original was GL_FramebufferIncompleteDimensions = 0X8cd9\r\n            ":"\r\n            原来是 GL_FramebufferIncompleteDimensions = 0X8cd9\r\n            \r\n","\r\n            Original was GL_ALPHA16F_EXT = 0x881C\r\n            ":"\r\n            原来是 GL_ALPHA16F_EXT = 0x881C\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Specify the pixel zoom factors\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            指定像素缩放因子\r\n            \r\n","\r\n            Returns the scale component of this instance.\r\n            ":"\r\n            返回此实例的比例组件。\r\n            \r\n","\r\n            Original was GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906\r\n            ":"\r\n            原来是 GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906\r\n            \r\n","\r\n            Original was GL_TRANSPOSE_AFFINE_2D_NV = 0x9096\r\n            ":"\r\n            原来是 GL_TRANSPOSE_AFFINE_2D_NV = 0x9096\r\n            \r\n"," \r\n            Specify a particular draw buffer to clear.\r\n            ":" \r\n            指定要清除的特定绘制缓冲区。\r\n            \r\n","\r\n            Occurs whenever a mouse wheel is moved;\r\n            ":"\r\n            每当移动鼠标滚轮时发生；\r\n            \r\n"," \r\n            Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.\r\n            ":" \r\n            指定缓冲区对象参数的符号名称。接受的值为 BufferSize 或 BufferUsage。\r\n            \r\n","[requires: v1.0]\r\n            Select active texture unit\r\n            ":"[要求：v1.0]\r\n            选择活动纹理单元\r\n            \r\n","\r\n            Original was GL_SAMPLES_EXT = 0x80A9\r\n            ":"\r\n            原来是 GL_SAMPLES_EXT = 0x80A9\r\n            \r\n","\r\n            Original was GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A\r\n            ":"\r\n            原来是 GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A\r\n            \r\n","\r\n            Original was GL_CONSTANT_ALPHA_EXT = 0x8003\r\n            ":"\r\n            原来是 GL_CONSTANT_ALPHA_EXT = 0x8003\r\n            \r\n","Single scale factor for the x and y axes.":"x 和 y 轴的单一比例因子。\r\n","[requires: NV_depth_buffer_float]":"[要求：NV_depth_buffer_float]\r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB\r\n            \r\n","\r\n            Original was GL_MAX_LABEL_LENGTH_KHR = 0x82E8\r\n            ":"\r\n            原来是 GL_MAX_LABEL_LENGTH_KHR = 0x82E8\r\n            \r\n","\r\n            Original was GL_DRAW_FRAMEBUFFER_BINDING_NV = 0x8CA6\r\n            ":"\r\n            原来是 GL_DRAW_FRAMEBUFFER_BINDING_NV = 0x8CA6\r\n            \r\n","A new Matrix4x2d which holds the result of the addition":"保存加法结果的新 Matrix4x2d\r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Simultaneously specify storage for all levels of a three-dimensional or two-dimensional array texture\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            同时为三维或二维数组纹理的所有级别指定存储\r\n            \r\n","\r\n            Used in GL.ReadBuffer\r\n            ":"\r\n            在 GL.ReadBuffer 中使用\r\n            \r\n","\r\n            Original was GL_VERTEX_PROGRAM_ARB = 0x8620\r\n            ":"\r\n            原来是 GL_VERTEX_PROGRAM_ARB = 0x8620\r\n            \r\n","\r\n            Original was GL_PROGRAM_NATIVE_PARAMETERS = 0x88AA\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_PARAMETERS = 0x88AA\r\n            \r\n","[length: format,type,width,height,depth,size4d]":"[长度：格式，类型，宽度，高度，深度，size4d]\r\n"," \r\n            Specify the bounds of the source rectangle within the read buffer of the read framebuffer.\r\n            ":" \r\n            在读取帧缓冲区的读取缓冲区内指定源矩形的边界。\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A\r\n            \r\n","\r\n            Original was GL_PROGRAM_FORMAT = 0x8876\r\n            ":"\r\n            原来是 GL_PROGRAM_FORMAT = 0x8876\r\n            \r\n"," \r\n            Specifies the format of the compressed image data stored at address data.\r\n            ":" \r\n            指定存储在地址数据中的压缩图像数据的格式。\r\n            \r\n","\r\n            Original was GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E\r\n            ":"\r\n            原来是 GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E\r\n            \r\n","\r\n            Original was GL_BLEND_EQUATION_RGB_EXT = 0x8009\r\n            ":"原来是 GL_BLEND_EQUATION_RGB_EXT = 0x8009\r\n            \r\n","\r\n            Original was GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19\r\n            ":"\r\n            原来是 GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19\r\n            \r\n","\r\n            Left stick up direction button\r\n            ":"\r\n            左摇杆向上方向键\r\n            \r\n","\r\n            Original was GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C\r\n            ":"\r\n            原来是 GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C\r\n            \r\n","\r\n            Original was GL_Texture14 = 0X84ce\r\n            ":"\r\n            原来是 GL_Texture14 = 0X84ce\r\n            \r\n","\r\n            Original was GL_FloatVec2 = 0X8b50\r\n            ":"\r\n            原来是 GL_FloatVec2 = 0X8b50\r\n            \r\n","\r\n            Original was GL_Invert = 0X150a\r\n            ":"\r\n            原来是 GL_Invert = 0X150a\r\n            \r\n"," array to unmanaged memory by calling\r\n            Marshal.AllocHGlobal for each element.\r\n            ":" 通过调用数组到非托管内存\r\n            每个元素的 Marshal.AllocHGlobal。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 0x88FE\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 0x88FE\r\n            \r\n"," \r\n            Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.\r\n            ":" \r\n            指定帧缓冲区对象绑定到的目标。符号常量必须是 Framebuffer。\r\n            \r\n"," \r\n            Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.\r\n            ":" \r\n            指定地址在 uniformName 中指定的缓冲区的大小，以 GLchar 为单位。\r\n            \r\n","\r\n            one of the window gravity values\r\n            ":"\r\n            窗口重力值之一\r\n            \r\n","\r\n            Original was GL_StaticDraw = 0X88e4\r\n            ":"\r\n            原来是 GL_StaticDraw = 0X88e4\r\n            \r\n","[requires: APPLE_fence]":"[需要：APPLE_fence]\r\n","\r\n            Original was GL_Incr = 0X1e02\r\n            ":"\r\n            原来是 GL_Incr = 0X1e02\r\n            \r\n","\r\n            Original was GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6\r\n            ":"\r\n            原来是 GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6\r\n            \r\n"," \r\n            Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.\r\n            ":"指定每个通用顶点属性的组件数。必须为 1、2、3 或 4。初始值为 4。\r\n            \r\n","\r\n            Original was GL_CULL_FRAGMENT_NV = 0x86E7\r\n            ":"\r\n            原来是 GL_CULL_FRAGMENT_NV = 0x86E7\r\n            \r\n","\r\n            Original was GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125\r\n            ":"\r\n            原来是 GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 0x851A\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 0x851A\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD\r\n            \r\n"," \r\n            Specifies the depth of the texture, in layers.\r\n            ":" \r\n            以图层为单位指定纹理的深度。\r\n            \r\n","\r\n            Original was GL_MAX_VARYING_FLOATS_ARB = 0x8B4B\r\n            ":"\r\n            原来是 GL_MAX_VARYING_FLOATS_ARB = 0x8B4B\r\n            \r\n","\r\n            Used in GL.Arb.BindProgram, GL.Arb.GetProgram and 12 other functions\r\n            ":"\r\n            用于GL.Arb.BindProgram、GL.Arb.GetProgram等12个函数\r\n            \r\n","\r\n            Used in GL.Angle.DrawArraysInstanced, GL.Angle.DrawElementsInstanced and 8 other functions\r\n            ":"\r\n            用于 GL.Angle.DrawArraysInstanced、GL.Angle.DrawElementsInstanced 和其他 8 个函数\r\n            \r\n","Do not use ScreenToClient when in a mirroring situation, that is, when changing from left-to-right layout to right-to-left layout. Instead, use MapWindowPoints. For more information, see \"Window Layout and Mirroring\" in Window Features.":"在镜像情况下，即从左到右布局更改为从右到左布局时，不要使用 ScreenToClient。相反，使用 MapWindowPoints。有关详细信息，请参阅窗口功能中的“窗口布局和镜像”。\r\n","\r\n            Original was GL_BLEND_EQUATION_ALPHA_EXT = 0x883D\r\n            ":"\r\n            原来是 GL_BLEND_EQUATION_ALPHA_EXT = 0x883D\r\n            \r\n","[requires: v4.4 or ARB_multi_bind|VERSION_4_4]\r\n            Bind one or more buffer objects to a sequence of indexed buffer targets\r\n            ":"[要求：v4.4 或 ARB_multi_bind|VERSION_4_4]\r\n            将一个或多个缓冲区对象绑定到一系列索引缓冲区目标\r\n            \r\n"," instance.\r\n            Use the packet number to determine whether the state of a\r\n            ":" 实例。\r\n            使用数据包编号来确定一个状态是否\r\n            \r\n","\r\n            Data type of components in the output images. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.\r\n            ":"\r\n            输出图像中组件的数据类型。 Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.\r\n            \r\n","\r\n            Original was GL_SRGB8 = 0x8C41\r\n            ":"\r\n            原来是 GL_SRGB8 = 0x8C41\r\n            \r\n","\r\n            Original was GL_TABLE_TOO_LARGE = 0x8031\r\n            ":"\r\n            原来是 GL_TABLE_TOO_LARGE = 0x8031\r\n            \r\n","\r\n            Original was GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD\r\n            ":"\r\n            原来是 GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD\r\n            \r\n","\r\n            Original was GL_PRIMARY_COLOR_EXT = 0x8577\r\n            ":"\r\n            原来是 GL_PRIMARY_COLOR_EXT = 0x8577\r\n            \r\n","Handle to the window whose client coordinates are to be retrieved.":"要检索其客户坐标的窗口的句柄。\r\n","\r\n            Original was GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337\r\n            ":"\r\n            原来是 GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337\r\n            \r\n","\r\n            Original was GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D\r\n            ":"\r\n            原来是 GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D\r\n            \r\n","\r\n            Original was GL_UNIFORM_BUFFER_EXT = 0x8DEE\r\n            ":"\r\n            原来是 GL_UNIFORM_BUFFER_EXT = 0x8DEE\r\n            \r\n","\r\n            Original was GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5\r\n            ":"原来是 GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5\r\n            \r\n","\r\n            Original was GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254\r\n            ":"原来是 GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254\r\n            \r\n","First item of the second row of the matrix.":"矩阵第二行的第一项。\r\n"," \r\n            Specifies the starting index in the enabled arrays.\r\n            ":" \r\n            指定启用数组中的起始索引。\r\n            \r\n","\r\n            Original was GL_BUFFER_KHR = 0x82E0\r\n            ":"原来是 GL_BUFFER_KHR = 0x82E0\r\n            \r\n","\r\n            Original was GL_WEIGHT_SUM_UNITY_ARB = 0x86A6\r\n            ":"\r\n            原来是 GL_WEIGHT_SUM_UNITY_ARB = 0x86A6\r\n            \r\n","\r\n            Defines LATIN-1 and miscellaneous keys.\r\n            ":"\r\n            定义 LATIN-1 和杂项键。\r\n            \r\n"," if this instance has a right trigger; otherwise, ":" 如果这个实例有一个正确的触发器；否则，\r\n","\r\n            Original was GL_COLOR_ARRAY_EXT = 0x8076\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_EXT = 0x8076\r\n            \r\n","Raw input is available only when the application calls RegisterRawInputDevices with valid device specifications.":"只有当应用程序使用有效的设备规范调用 RegisterRawInputDevices 时，原始输入才可用。\r\n"," if this instance is currently connected; otherwise, ":" 如果此实例当前已连接；否则，\r\n","The ScreenToClient function assumes the specified point is in screen coordinates. ":"ScreenToClient 函数假定指定点位于屏幕坐标中。\r\n","\r\n            Original was GL_SRC_NV = 0x9286\r\n            ":"\r\n            原来是 GL_SRC_NV = 0x9286\r\n            \r\n","[requires: v2.0]\r\n            Control the front and/or back writing of individual bits in the stencil planes\r\n            ":"[要求：v2.0]\r\n            控制模板平面中单个位的正面和/或背面写入\r\n            \r\n","[requires: EXT_geometry_shader4|EXT_separate_shader_objects]\r\n            Specify a parameter for a program object\r\n            ":"[需要：EXT_geometry_shader4|EXT_separate_shader_objects]\r\n            为程序对象指定参数\r\n            \r\n","\r\n            Original was GL_REG_0_ATI = 0x8921\r\n            ":"\r\n            原来是 GL_REG_0_ATI = 0x8921\r\n            \r\n","\r\n            Original was GL_TEXTURE_RESIDENT_EXT = 0x8067\r\n            ":"\r\n            原来是 GL_TEXTURE_RESIDENT_EXT = 0x8067\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX8 = 0x8D48\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX8 = 0x8D48\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Clear individual buffers of the currently bound draw framebuffer\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            清除当前绑定的绘制帧缓冲区的各个缓冲区\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER3_NV = 0x8828\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER3_NV = 0x8828\r\n            \r\n","[requires: v4.3 or KHR_debug|VERSION_4_3]\r\n            Label a named object identified within a namespace\r\n            ":"[要求：v4.3 或 KHR_debug|VERSION_4_3]\r\n            标记命名空间中标识的命名对象\r\n            \r\n","\r\n            Original was GL_MIRROR_CLAMP_EXT = 0x8742\r\n            ":"\r\n            原来是 GL_MIRROR_CLAMP_EXT = 0x8742\r\n            \r\n","\r\n            Original was GL_QUERY = 0x82E3\r\n            ":"\r\n            原来是 GL_QUERY = 0x82E3\r\n            \r\n","\r\n            Original was GL_PATH_COORD_COUNT_NV = 0x909E\r\n            ":"\r\n            原来是 GL_PATH_COORD_COUNT_NV = 0x909E\r\n            \r\n"," \r\n            The number of table entries to replace.\r\n            ":" \r\n            要替换的表条目数。\r\n            \r\n","[length: 16] \r\n            Specifies a pointer to 16 consecutive values, which are used as the elements of a 4  times  4 column-major matrix.\r\n            ":"[长度：16]\r\n            指定指向 16 个连续值的指针，这些值用作 4 乘 4 列主矩阵的元素。\r\n            \r\n","\r\n            Original was GL_SIGNED_NEGATE_NV = 0x853D\r\n            ":"\r\n            原来是 GL_SIGNED_NEGATE_NV = 0x853D\r\n            \r\n","\r\n            Used in GL.DrawBuffer, GL.NamedFramebufferDrawBuffer and 2 other functions\r\n            ":"\r\n            用于 GL.DrawBuffer、GL.NamedFramebufferDrawBuffer 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED\r\n            ":"\r\n            原来是 GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED\r\n            \r\n","\r\n            Original was GL_RGB16F_EXT = 0x881B\r\n            ":"\r\n            原来是 GL_RGB16F_EXT = 0x881B\r\n            \r\n","\r\n            Original was GL_VertexAttribArrayPointer = 0X8645\r\n            ":"\r\n            原来是 GL_VertexAttribArrayPointer = 0X8645\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262\r\n            \r\n","\r\n            Original was GL_2PASS_0_EXT = 0x80A2\r\n            ":"\r\n            原来是 GL_2PASS_0_EXT = 0x80A2\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX16_EXT = 0x8D49\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX16_EXT = 0x8D49\r\n            \r\n","\r\n            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE.\r\n            ":"\r\n            指定纹理环境。可能是 GL_TEXTURE_ENV、GL_TEXTURE_FILTER_CONTROL 或 GL_POINT_SPRITE。\r\n            \r\n"," for the specified mouse device.\r\n            The X, Y and wheel values are defined in a hardware-specific coordinate system.\r\n            Pointer ballistics (acceleration) are NOT applied. Resolution is hardware-specific,\r\n            typically between 200 and 2000 DPI.\r\n            Use ":" 对于指定的鼠标设备。\r\n            X、Y 和车轮值在特定于硬件的坐标系中定义。\r\n            不应用指针弹道（加速度）。分辨率是特定于硬件的，\r\n            通常在 200 到 2000 DPI 之间。\r\n            使用\r\n","\r\n            Original was GL_TEXTURE_TARGET_QCOM = 0x8BDA\r\n            ":"\r\n            原来是 GL_TEXTURE_TARGET_QCOM = 0x8BDA\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_HINT_SGIX = 0x8316\r\n            ":"\r\n            原来是 GL_CONVOLUTION_HINT_SGIX = 0x8316\r\n            \r\n","\r\n            Original was GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A\r\n            ":"\r\n            原来是 GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A\r\n            \r\n"," \r\n            Specifies the number of indices to be rendered.\r\n            ":" \r\n            指定要呈现的索引数。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT4_EXT = 0x8CE4\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT4_EXT = 0x8CE4\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT16_SGIX = 0x81A5\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT16_SGIX = 0x81A5\r\n            \r\n","[requires: v1.3]\r\n            Specify a one-dimensional texture image in a compressed format\r\n            ":"[要求：v1.3]\r\n            以压缩格式指定一维纹理图像\r\n            \r\n","\r\n            Gets or sets the value at row 3, column 4 of this instance.\r\n            ":"\r\n            获取或设置此实例第 3 行第 4 列的值。\r\n            \r\n","\r\n            Original was GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE\r\n            ":"\r\n            原来是 GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE\r\n            \r\n","Gets a System.Boolean indicating whether OpenTK is running on a MacOS platform.":"获取一个 System.Boolean，指示 OpenTK 是否在 MacOS 平台上运行。\r\n","\r\n            Gets the second column of this matrix.\r\n            ":"\r\n            获取此矩阵的第二列。\r\n            \r\n","The left win key.":"左赢键。\r\n","\r\n            Original was GL_UNSIGNED_INT_10_10_10_2_OES = 0x8DF6\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_10_10_10_2_OES = 0x8DF6\r\n            \r\n"," \r\n            Specifies the symbolic name of the value(s) to be returned. Must be either TextureGenMode or the name of one of the texture generation plane equations: ObjectPlane or EyePlane.\r\n            ":" \r\n            指定要返回的值的符号名称。必须是 TextureGenMode 或纹理生成平面方程之一的名称：ObjectPlane 或 EyePlane。\r\n            \r\n","\r\n            Original was GL_SRC0_ALPHA = 0x8588\r\n            ":"\r\n            原来是 GL_SRC0_ALPHA = 0x8588\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA\r\n            \r\n","\r\n            Used in GL.BindTexture, GL.CompressedTexImage1D and 28 other functions\r\n            ":"\r\n            用于 GL.BindTexture、GL.CompressedTexImage1D 和其他 28 个函数\r\n            \r\n","\r\n            Original was GL_BUFFER_MAPPED_OES = 0x88BC\r\n            ":"\r\n            原来是 GL_BUFFER_MAPPED_OES = 0x88BC\r\n            \r\n","\r\n            Original was GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642\r\n            ":"\r\n            原来是 GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE\r\n            \r\n","\r\n            Original was GL_MINMAX_FORMAT_EXT = 0x802F\r\n            ":"\r\n            原来是 GL_MINMAX_FORMAT_EXT = 0x802F\r\n            \r\n","\r\n            Builds a rotation matrix from a quaternion.\r\n            ":"\r\n            从四元数构建旋转矩阵。\r\n            \r\n","\r\n            Original was GL_MULTISAMPLE_BIT = 0x20000000\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_BIT = 0x20000000\r\n            \r\n","\r\n            The GetClientRect function retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0).\r\n            ":"\r\n            GetClientRect 函数检索窗口客户区的坐标。客户坐标指定客户区的左上角和右下角。因为客户坐标是相对于窗口客户区的左上角的，所以左上角的坐标是(0,0)。\r\n            \r\n","\r\n            Original was GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023\r\n            ":"\r\n            原来是 GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023\r\n            \r\n","\r\n            Original was GL_RGBA32I_EXT = 0x8D82\r\n            ":"\r\n            原来是 GL_RGBA32I_EXT = 0x8D82\r\n            \r\n","[requires: v4.1 or ARB_viewport_array|VERSION_4_1]\r\n            Define the scissor box for a specific viewport\r\n            ":"[要求：v4.1 或 ARB_viewport_array|VERSION_4_1]\r\n            为特定视口定义剪刀框\r\n            \r\n","\r\n            Original was GL_DRAW_FRAMEBUFFER_ANGLE = 0x8CA9\r\n            ":"\r\n            原来是 GL_DRAW_FRAMEBUFFER_ANGLE = 0x8CA9\r\n            \r\n","\r\n            Specifies the height of the texture image. Must be 0 or 2 sup m + 2 ( border ) for some integer .\r\n            ":"\r\n            指定纹理图像的高度。对于某个整数，必须是 0 或 2 sup m + 2（边界）。\r\n            \r\n","Returns a System.String describing this OpenGL context.":"返回描述此 OpenGL 上下文的 System.String。\r\n","\r\n            Original was GL_VERTEX_SHADER_BINDING_EXT = 0x8781\r\n            ":"\r\n            原来是 GL_VERTEX_SHADER_BINDING_EXT = 0x8781\r\n            \r\n","\r\n            Original was GL_FLAT = 0x1D00\r\n            ":"\r\n            原来是 GL_FLAT = 0x1D00\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666\r\n            \r\n","[requires: AMD_gpu_shader_int64|NV_gpu_shader5]\r\n            Specify the value of a uniform variable for the current program object\r\n            ":"[要求：AMD_gpu_shader_int64|NV_gpu_shader5]\r\n            为当前程序对象指定统一变量的值\r\n            \r\n","[requires: EXT_index_func]":"[要求：EXT_index_func]\r\n"," \r\n            Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.\r\n            ":" \r\n            指定测试函数。八个符号常量是有效的：Never、Less、Lequal、Greater、Gequal、Equal、Notequal 和 Always。初始值为始终。\r\n            \r\n","\r\n            Original was GL_NAME_LENGTH = 0x92F9\r\n            ":"\r\n            原来是 GL_NAME_LENGTH = 0x92F9\r\n            \r\n","\r\n            Original was GL_RGB16_EXT = 0x8054\r\n            ":"\r\n            原来是 GL_RGB16_EXT = 0x8054\r\n            \r\n","\r\n            Original was GL_KEEP = 0x1E00\r\n            ":"\r\n            原来是 GL_KEEP = 0x1E00\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the X, W, and Y components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 X、W 和 Y 组件的 OpenTK.Vector3。\r\n            \r\n","[length: count] \r\n            The address of an array of variables to receive the lengths of the received messages.\r\n            ":"[长度：计数]\r\n            用于接收接收到的消息长度的变量数组的地址。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = 0x93C6\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = 0x93C6\r\n            \r\n","\r\n            Original was GL_ARRAY_BUFFER_BINDING_ARB = 0x8894\r\n            ":"\r\n            原来是 GL_ARRAY_BUFFER_BINDING_ARB = 0x8894\r\n            \r\n","\r\n            Original was GL_READ_PIXELS_FORMAT = 0x828D\r\n            ":"\r\n            原来是 GL_READ_PIXELS_FORMAT = 0x828D\r\n            \r\n","\r\n            Original was GL_MAX_NAME_LENGTH = 0x92F6\r\n            ":"\r\n            原来是 GL_MAX_NAME_LENGTH = 0x92F6\r\n            \r\n","\r\n            Specifies a light. The number of lights depends on the implementation, but at least eight lights are supported. They are identified by symbolic names of the form GL_LIGHT , where i ranges from 0 to the value of GL_MAX_LIGHTS - 1.\r\n            ":"\r\n            指定一盏灯。灯的数量取决于实现，但至少支持八个灯。它们由 GL_LIGHT 形式的符号名称标识，其中 i 的范围从 0 到 GL_MAX_LIGHTS - 1 的值。\r\n            \r\n","\r\n            Original was GL_TEXTURE_TARGET = 0x1006\r\n            ":"\r\n            原来是 GL_TEXTURE_TARGET = 0x1006\r\n            \r\n","The left bracket key.":"左括号键。\r\n","\r\n            Original was GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3\r\n            \r\n"," \r\n            Specify the pixel width and height of the bitmap image.\r\n            ":"指定位图图像的像素宽度和高度。\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F\r\n            \r\n","\r\n            Original was GL_COMPUTE_TEXTURE = 0x82A0\r\n            ":"\r\n            原来是 GL_COMPUTE_TEXTURE = 0x82A0\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Compiles a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            编译着色器对象\r\n            \r\n","[length: 1] \r\n            Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.\r\n            ":"[长度：1]\r\n            指定一个值，该值是先前 glMap1 或 glMap2 命令中定义的基函数的域坐标。\r\n            \r\n","\r\n            Original was GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF\r\n            ":"\r\n            原来是 GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA32F_ARB = 0x8819\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA32F_ARB = 0x8819\r\n            \r\n"," for the specified gamepad device.\r\n            ":" 对于指定的游戏手柄设备。\r\n            \r\n","\r\n            Original was GL_FLOAT_RGBA16_NV = 0x888A\r\n            ":"\r\n            原来是 GL_FLOAT_RGBA16_NV = 0x888A\r\n            \r\n","[requires: v3.3 or ARB_timer_query|VERSION_3_3]\r\n            Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.\r\n            ":"[要求：v3.3 或 ARB_timer_query|VERSION_3_3]\r\n            在所有先前的命令都已到达 GL 服务器但尚未执行后，将 GL 时间记录到查询对象中。\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT32 = 0x81A7\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT32 = 0x81A7\r\n            \r\n","\r\n            Original was GL_GREEN_MAX_CLAMP_INGR = 0x8565\r\n            ":"\r\n            原来是 GL_GREEN_MAX_CLAMP_INGR = 0x8565\r\n            \r\n","[requires: v4.1 or ARB_viewport_array|VERSION_4_1]":"[要求：v4.1 或 ARB_viewport_array|VERSION_4_1]\r\n","\r\n            Original was GL_VERTICES_SUBMITTED_ARB = 0x82EE\r\n            ":"\r\n            原来是 GL_VERTICES_SUBMITTED_ARB = 0x82EE\r\n            \r\n","\r\n            Original was GL_UNIFORM_BUFFER_SIZE = 0x8A2A\r\n            ":"\r\n            原来是 GL_UNIFORM_BUFFER_SIZE = 0x8A2A\r\n            \r\n","[length: genMode,components]":"[长度：genMode，组件]\r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Resume transform feedback operations\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            恢复变换反馈操作\r\n            \r\n","\r\n            Original was GL_REG_6_ATI = 0x8927\r\n            ":"\r\n            原来是 GL_REG_6_ATI = 0x8927\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265\r\n            \r\n"," \r\n            Specifies the parameter of the shader to query. pname must be ActiveSubroutineUniforms, ActiveSubroutineUniformLocations, ActiveSubroutines, ActiveSubroutineUniformMaxLength, or ActiveSubroutineMaxLength.\r\n            ":" \r\n            指定要查询的着色器的参数。 pname 必须是 ActiveSubroutineUniforms、ActiveSubroutineUniformLocations、ActiveSubroutines、ActiveSubroutineUniformMaxLength 或 ActiveSubroutineMaxLength。\r\n            \r\n"," \r\n            Specifies the kind of values that are generated by the evaluator. Symbolic constants Map2Vertex3, Map2Vertex4, Map2Index, Map2Color4, Map2Normal, Map2TextureCoord1, Map2TextureCoord2, Map2TextureCoord3, and Map2TextureCoord4 are accepted.\r\n            ":" \r\n            指定由计算器生成的值的种类。接受符号常量 Map2Vertex3、Map2Vertex4、Map2Index、Map2Color4、Map2Normal、Map2TextureCoord1、Map2TextureCoord2、Map2TextureCoord3 和 Map2TextureCoord4。\r\n            \r\n","\r\n            Device-specific additional information for the event.\r\n            ":"\r\n            事件的特定于设备的附加信息。\r\n            \r\n","[length: size]":"[长度：尺寸]\r\n","[length: 1] \r\n            Returns the requested data.\r\n            ":"[长度：1]\r\n            返回请求的数据。\r\n            \r\n","\r\n            Original was GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E\r\n            ":"\r\n            原来是 GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E\r\n            \r\n","[length: bufSize] \r\n            Returns a null terminated string containing the name of the attribute variable.\r\n            ":"[长度：bufSize]\r\n            返回包含属性变量名称的空终止字符串。\r\n            \r\n","\r\n            Gets or sets a double representing the target render frequency, in hertz.\r\n            ":"\r\n            获取或设置一个表示目标渲染频率的双精度值，以赫兹为单位。\r\n            \r\n"," \r\n            specify the components of BlendColor\r\n            ":" \r\n            指定 BlendColor 的组件\r\n            \r\n"," \r\n            Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.\r\n            ":" \r\n            指定 uniformIndices 中每个 uniform 的属性，应该写入 params 的相应元素。\r\n            \r\n","\r\n            Original was GL_CLIP_PLANE2 = 0x3002\r\n            ":"\r\n            原来是 GL_CLIP_PLANE2 = 0x3002\r\n            \r\n","\r\n            Original was GL_COLOR_SUM_ARB = 0x8458\r\n            ":"\r\n            原来是 GL_COLOR_SUM_ARB = 0x8458\r\n            \r\n"," \r\n            Specifies a binding to which the target of the allocation and must be Renderbuffer.\r\n            ":" \r\n            指定一个绑定，分配的目标必须是 Renderbuffer。\r\n            \r\n","[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]\r\n            Render primitives using a count derived from a transform feedback object\r\n            ":"[要求：v4.0 或 ARB_transform_feedback2|VERSION_4_0]\r\n            使用从变换反馈对象派生的计数渲染基元\r\n            \r\n","The ninth button of the JoystickDevice.":"JoystickDevice 的第九个按钮。\r\n","\r\n            Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.\r\n            ":"\r\n            指定纹理图像的高度。所有实现都支持至少 64 纹素高的 2D 纹理图像和至少 16 纹素高的立方体贴图纹理图像。\r\n            \r\n","\r\n            Original was GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A\r\n            ":"\r\n            原来是 GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD\r\n            \r\n","[requires: ARB_debug_output]\r\n            Inject an application-supplied message into the debug message queue\r\n            ":"[需要：ARB_debug_output]\r\n            将应用程序提供的消息注入调试消息队列\r\n            \r\n"," if this hat lies in the top hemicircle; otherwise, ":" 如果这顶帽子位于顶部半圆；否则，\r\n","If the target window is owned by the current process, SetWindowText causes a WM_SETTEXT message to be sent to the specified window or control. If the control is a list box control created with the WS_CAPTION style, however, SetWindowText sets the text for the control, not for the list box entries. ":"如果目标窗口属于当前进程，则 SetWindowText 会导致将 WM_SETTEXT 消息发送到指定的窗口或控件。但是，如果控件是使用 WS_CAPTION 样式创建的列表框控件，则 SetWindowText 会设置控件的文本，而不是列表框条目的文本。\r\n","[requires: v1.0]\r\n            Set the current texture coordinates\r\n            ":"[要求：v1.0]\r\n            设置当前纹理坐标\r\n            \r\n","\r\n            Original was GL_STATIC_DRAW = 0x88E4\r\n            ":"\r\n            原来是 GL_STATIC_DRAW = 0x88E4\r\n            \r\n","\r\n            Original was GL_MATRIX12 = 0x88CC\r\n            ":"\r\n            原来是 GL_MATRIX12 = 0x88CC\r\n            \r\n","Subtract the Vector passed as parameter from this instance.":"从此实例中减去作为参数传递的 Vector。\r\n","\r\n            Original was GL_Always = 0X0207\r\n            ":"\r\n            原来是 GL_Always = 0X0207\r\n            \r\n",", if at least one display is connected, ":"，如果至少连接了一个显示器，\r\n","\r\n            Original was GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10\r\n            ":"\r\n            原来是 GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10\r\n            \r\n","[requires: INTEL_map_texture]":"[需要：INTEL_map_texture]\r\n","\r\n            Original was GL_VARIABLE_A_NV = 0x8523\r\n            ":"\r\n            原来是 GL_VARIABLE_A_NV = 0x8523\r\n            \r\n","A new instance that is the result of the addition.":"作为加法结果的新实例。\r\n","\r\n            Original was GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE\r\n            ":"\r\n            原来是 GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE\r\n            \r\n","[length: 4] \r\n            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.\r\n            ":"[长度：4]\r\n            指定指向数组中第一条法线的第一个坐标的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_IDENTITY_NV = 0x8536\r\n            ":"\r\n            原来是 GL_UNSIGNED_IDENTITY_NV = 0x8536\r\n            \r\n","\r\n            Original was GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849\r\n            ":"\r\n            原来是 GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849\r\n            \r\n","\r\n            Original was GL_PATH_FILL_MASK_NV = 0x9081\r\n            ":"\r\n            原来是 GL_PATH_FILL_MASK_NV = 0x9081\r\n            \r\n","\r\n            Original was GL_DYNAMIC_COPY_ARB = 0x88EA\r\n            ":"\r\n            原来是 GL_DYNAMIC_COPY_ARB = 0x88EA\r\n            \r\n","\r\n            Gets the square of the quaternion length (magnitude).\r\n            ":"\r\n            获取四元数长度（量值）的平方。\r\n            \r\n","\r\n            Represents a 3x4 Matrix\r\n            ":"\r\n            表示一个 3x4 矩阵\r\n            \r\n","\r\n            Used in GL.VertexAttribIPointer\r\n            ":"在 GL.VertexAttribIPointer 中使用\r\n            \r\n","[requires: ARB_point_parameters]\r\n            Specify point parameters\r\n            ":"[需要：ARB_point_parameters]\r\n            指定点参数\r\n            \r\n","\r\n            Original was GL_C4UB_V3F = 0x2A23\r\n            ":"原来是 GL_C4UB_V3F = 0x2A23\r\n            \r\n","\r\n            Original was GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B\r\n            ":"\r\n            原来是 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B\r\n            \r\n","\r\n            Used in GL.Sgi.ColorTableParameter, GL.Sgi.ColorTable and 3 other functions\r\n            ":"\r\n            用于GL.Sgi.ColorTableParameter、GL.Sgi.ColorTable等3个函数\r\n            \r\n","Checks if ":"检查是否\r\n","\r\n            Original was GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A\r\n            ":"\r\n            原来是 GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A\r\n            \r\n","\r\n            Original was GL_AUTO_GENERATE_MIPMAP = 0x8295\r\n            ":"\r\n            原来是 GL_AUTO_GENERATE_MIPMAP = 0x8295\r\n            \r\n","\r\n            Discards the entire contents of the client area. If this flag is not specified,\r\n            the valid contents of the client area are saved and copied back into the client area \r\n            after the window is sized or repositioned.\r\n            ":"\r\n            丢弃客户区的全部内容。如果未指定此标志，\r\n            客户区的有效内容被保存并复制回客户区\r\n            在调整窗口大小或重新定位之后。\r\n            \r\n"," \r\n            For the scalar commands, specifies the value of pname.\r\n            ":" \r\n            对于标量命令，指定 pname 的值。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_TEMPORARIES = 0x88A5\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_TEMPORARIES = 0x88A5\r\n            \r\n","\r\n            Checks whether an extension function is supported.\r\n            Do not use with core WGL functions, as this function\r\n            will incorrectly return false.\r\n            ":"\r\n            检查是否支持扩展功能。\r\n            不要与核心 WGL 函数一起使用，因为此函数\r\n            将错误地返回 false。\r\n            \r\n","\r\n            Original was GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A\r\n            ":"\r\n            原来是 GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A\r\n            \r\n","\r\n            Original was GL_SPRITE_AXIAL_SGIX = 0x814C\r\n            ":"\r\n            原来是 GL_SPRITE_AXIAL_SGIX = 0x814C\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_LIST_IBM = 103070\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_LIST_IBM = 103070\r\n            \r\n","\r\n            Original was GL_ALPHA = 0X1906\r\n            ":"\r\n            原来是 GL_ALPHA = 0X1906\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify multisample coverage parameters\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            指定多样本覆盖参数\r\n            \r\n","[requires: EXT_transform_feedback]":"[需要：EXT_transform_feedback]\r\n","\r\n            Gets a System.Boolean representing the state of the button for the event.\r\n            ":"\r\n            获取表示事件按钮状态的 System.Boolean。\r\n            \r\n"," \r\n            Specify the mappings for integer grid domain values i = 0 and i = un.\r\n            ":" \r\n            指定整数网格域值 i = 0 和 i = un 的映射。\r\n            \r\n","\r\n            Used in GL.Ati.StencilFuncSeparate, GL.StencilFunc and 2 other functions\r\n            ":"\r\n            用于 GL.Ati.StencilFuncSeparate、GL.StencilFunc 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32\r\n            \r\n"," \r\n            Specifies a texture environment. May be TextureEnv, TextureFilterControl or PointSprite.\r\n            ":" \r\n            指定纹理环境。可能是 TextureEnv、TextureFilterControl 或 PointSprite。\r\n            \r\n","\r\n            The Microsoft Windows version of the application that created the window. \r\n            ":"\r\n            创建窗口的应用程序的 Microsoft Windows 版本。\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E\r\n            \r\n","\r\n            Original was GL_CONJOINT_NV = 0x9284\r\n            ":"\r\n            原来是 GL_CONJOINT_NV = 0x9284\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3\r\n            \r\n","\r\n            Occurs when the window is about to close. \r\n            ":"\r\n            在窗口即将关闭时发生。\r\n            \r\n","\r\n            Original was GL_SAMPLE_BUFFERS_EXT = 0x80A8\r\n            ":"\r\n            原来是 GL_SAMPLE_BUFFERS_EXT = 0x80A8\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 0x919F\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 0x919F\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C\r\n            \r\n","\r\n            Original was GL_BUFFER_USAGE_ARB = 0x8765\r\n            ":"\r\n            原来是 GL_BUFFER_USAGE_ARB = 0x8765\r\n            \r\n","\r\n            Original was GL_ARRAY_BUFFER_ARB = 0x8892\r\n            ":"\r\n            原来是 GL_ARRAY_BUFFER_ARB = 0x8892\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_SAMPLES = 0x8CAB\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_SAMPLES = 0x8CAB\r\n            \r\n","\r\n            Original was GL_STENCIL_BUFFER_BIT2_QCOM = 0x00040000\r\n            ":"\r\n            原来是 GL_STENCIL_BUFFER_BIT2_QCOM = 0x00040000\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Execute a list of display lists\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            执行显示列表列表\r\n            \r\n","\r\n            Original was GL_VERTEX_ID_NV = 0x8C7B\r\n            ":"\r\n            原来是 GL_VERTEX_ID_NV = 0x8C7B\r\n            \r\n","\r\n            Original was GL_SCALEBIAS_HINT_SGIX = 0x8322\r\n            ":"\r\n            原来是 GL_SCALEBIAS_HINT_SGIX = 0x8322\r\n            \r\n","\r\n            Original was GL_Rgba4 = 0X8056\r\n            ":"\r\n            原来是 GL_Rgba4 = 0X8056\r\n            \r\n"," of this window.\r\n            ":" 这个窗口的。\r\n            \r\n","\r\n            Specifies a single-valued light source parameter for light. GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted.\r\n            ":"\r\n            指定光的单值光源参数。接受 GL_SPOT_EXPONENT、GL_SPOT_CUTOFF、GL_CONSTANT_ATTENUATION、GL_LINEAR_ATTENUATION 和 GL_QUADRATIC_ATTENUATION。\r\n            \r\n","[requires: v2.0]\r\n            Attaches a shader object to a program object\r\n            ":"[要求：v2.0]\r\n            将着色器对象附加到程序对象\r\n            \r\n","[requires: v4.4 or ARB_multi_bind|VERSION_4_4]\r\n            Bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points\r\n            ":"[要求：v4.4 或 ARB_multi_bind|VERSION_4_4]\r\n            将一个或多个命名缓冲区对象绑定到一系列连续的顶点缓冲区绑定点\r\n            \r\n"," \r\n            Specifies the format of the binary data in binary.\r\n            ":" \r\n            以二进制指定二进制数据的格式。\r\n            \r\n","The F29 key.":"F29 键。\r\n","[requires: NV_transform_feedback2]\r\n            Render primitives using a count derived from a transform feedback object\r\n            ":"[需要：NV_transform_feedback2]\r\n            使用从变换反馈对象派生的计数渲染基元\r\n            \r\n","\r\n            Defines an instance with all components set to 1.\r\n            ":"\r\n            定义一个所有组件都设置为 1 的实例。\r\n            \r\n","\r\n            Original was GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1\r\n            ":"\r\n            原来是 GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1\r\n            \r\n","\r\n            Original was GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB\r\n            ":"\r\n            原来是 GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB\r\n            \r\n","\r\n            Describes a Carbon window.\r\n            ":"\r\n            描述 Carbon 窗口。\r\n            \r\n","[length: bufSize] \r\n            The address of an array of characters that will receive the messages.\r\n            ":"[长度：bufSize]\r\n            将接收消息的字符数组的地址。\r\n            \r\n"," \r\n            Specifies the height of the texture image.\r\n            ":" \r\n            指定纹理图像的高度。\r\n            \r\n","\r\n            Original was GL_STENCIL_RENDERABLE = 0x8288\r\n            ":"\r\n            原来是 GL_STENCIL_RENDERABLE = 0x8288\r\n            \r\n","\r\n            Original was GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF\r\n            ":"\r\n            原来是 GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF\r\n            \r\n","[length: 3] \r\n            Specify the , , , and  object coordinates (if present) for the raster position.\r\n            ":"[长度：3]\r\n            为光栅位置指定 、 、 和对象坐标（如果存在）。\r\n            \r\n","\r\n            Original was GL_RG16I = 0x8239\r\n            ":"\r\n            原来是 GL_RG16I = 0x8239\r\n            \r\n","\r\n            Used in GL.CompressedTexImage2D, GL.CompressedTexImage3D and 1 other function\r\n            ":"\r\n            用于 GL.CompressedTexImage2D、GL.CompressedTexImage3D 和其他 1 个函数\r\n            \r\n","The backspace key.":"退格键。\r\n"," \r\n            Specifies the width of the texture image. All implementations support 3D texture images that are at least 256 texels wide.\r\n            ":" \r\n            指定纹理图像的宽度。所有实现都支持至少 256 纹素宽的 3D 纹理图像。\r\n            \r\n","[requires: v4.3 or KHR_debug|VERSION_4_3]\r\n            Pop the active debug group\r\n            ":"[要求：v4.3 或 KHR_debug|VERSION_4_3]\r\n            弹出活动调试组\r\n            \r\n","[requires: APPLE_sync]\r\n            Create a new sync object and insert it into the GL command stream\r\n            ":"[需要：APPLE_sync]\r\n            创建一个新的同步对象并将其插入到 GL 命令流中\r\n            \r\n","The Y offset for the GL viewport":"GL 视口的 Y 偏移量\r\n","\r\n            Contains the raw input from a device.\r\n            ":"\r\n            包含来自设备的原始输入。\r\n            \r\n","\r\n            Original was GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C\r\n            ":"\r\n            原来是 GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C\r\n            \r\n"," \r\n            Specifies the target of the operation. target must be Texture2DMultisample or ProxyTexture2DMultisample.\r\n            ":" \r\n            指定操作的目标。目标必须是 Texture2DMultisample 或 ProxyTexture2DMultisample。\r\n            \r\n","\r\n            Original was GL_ALL_BARRIER_BITS = 0xFFFFFFFF\r\n            ":"\r\n            原来是 GL_ALL_BARRIER_BITS = 0xFFFFFFFF\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ETC2 = 0x9275\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ETC2 = 0x9275\r\n            \r\n","\r\n            Original was GL_RenderbufferGreenSize = 0X8d51\r\n            ":"\r\n            原来是 GL_RenderbufferGreenSize = 0X8d51\r\n            \r\n","\r\n            Original was GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851\r\n            ":"\r\n            原来是 GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851\r\n            \r\n"," to retrieve the current state of a given device.\r\n            ":" 检索给定设备的当前状态。\r\n            \r\n","\r\n            Original was GL_RED_MAX_CLAMP_INGR = 0x8564\r\n            ":"\r\n            原来是 GL_RED_MAX_CLAMP_INGR = 0x8564\r\n            \r\n","\r\n            Original was GL_MATRIX25 = 0x88D9\r\n            ":"\r\n            原来是 GL_MATRIX25 = 0x88D9\r\n            \r\n","\r\n            Enumerates options regarding OpenTK.Platform\r\n            implementations.\r\n            ":"\r\n            枚举有关 OpenTK.Platform 的选项\r\n            实施。\r\n            \r\n","\r\n            Original was GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E\r\n            ":"\r\n            原来是 GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E\r\n            \r\n","\r\n            Original was GL_LUMINANCE12_ALPHA12_EXT = 0x8047\r\n            ":"\r\n            原来是 GL_LUMINANCE12_ALPHA12_EXT = 0x8047\r\n            \r\n","\r\n            Original was GL_YCBCR_422_APPLE = 0x85B9\r\n            ":"\r\n            原来是 GL_YCBCR_422_APPLE = 0x85B9\r\n            \r\n","\r\n            Vendor ID for the HID.\r\n            ":"\r\n            HID 的供应商 ID。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B\r\n            \r\n","\r\n            Original was GL_UNIFORM = 0x92E1\r\n            ":"\r\n            原来是 GL_UNIFORM = 0x92E1\r\n            \r\n","\r\n            Provides access to OpenGL ES 1.0 methods.\r\n            ":"\r\n            提供对 OpenGL ES 1.0 方法的访问。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7\r\n            \r\n","\r\n            Original was GL_DynamicDraw = 0X88e8\r\n            ":"\r\n            原来是 GL_DynamicDraw = 0X88e8\r\n            \r\n","\r\n            Original was GL_IMAGE_CLASS_1_X_16 = 0x82BE\r\n            ":"\r\n            原来是 GL_IMAGE_CLASS_1_X_16 = 0x82BE\r\n            \r\n","[requires: OES_framebuffer_object]\r\n            Generate renderbuffer object names\r\n            ":"[要求：OES_framebuffer_object]\r\n            生成渲染缓冲区对象名称\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA = 0x190A\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA = 0x190A\r\n            \r\n","\r\n            Occurs when a key is pressed.\r\n            ":"\r\n            按下某个键时发生。\r\n            \r\n","\r\n            Original was GL_PROXY_COLOR_TABLE_SGI = 0x80D3\r\n            ":"\r\n            原来是 GL_PROXY_COLOR_TABLE_SGI = 0x80D3\r\n            \r\n","\r\n            Used in GL.BufferStorage, GL.NamedBufferStorage and 1 other function\r\n            ":"\r\n            用于 GL.BufferStorage、GL.NamedBufferStorage 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089\r\n            \r\n"," structure\r\n            that defines the size of the OpenGL surface in window coordinates.\r\n            The coordinates are specified in device-dependent pixels.\r\n            ":" 结构\r\n            在窗口坐标中定义 OpenGL 表面的大小。\r\n            坐标以设备相关像素指定。\r\n            \r\n","\r\n            Original was GL_INTENSITY32F_ARB = 0x8817\r\n            ":"\r\n            原来是 GL_INTENSITY32F_ARB = 0x8817\r\n            \r\n","\r\n            Original was GL_UNIFORM_BUFFER_START = 0x8A29\r\n            ":"\r\n            原来是 GL_UNIFORM_BUFFER_START = 0x8A29\r\n            \r\n","\r\n            Original was GL_VERTEX_BINDING_DIVISOR = 0x82D6\r\n            ":"\r\n            原来是 GL_VERTEX_BINDING_DIVISOR = 0x82D6\r\n            \r\n","\r\n            Used in GL.Ext.VertexWeightPointer\r\n            ":"\r\n            在 GL.Ext.VertexWeightPointer 中使用\r\n            \r\n","\r\n            Original was GL_TEXTURE_BORDER_COLOR_EXT = 0x1004\r\n            ":"\r\n            原来是 GL_TEXTURE_BORDER_COLOR_EXT = 0x1004\r\n            \r\n","[requires: v4.3 or ARB_shader_storage_buffer_object|VERSION_4_3]\r\n            Change an active shader storage block binding\r\n            ":"[要求：v4.3 或 ARB_shader_storage_buffer_object|VERSION_4_3]\r\n            更改活动着色器存储块绑定\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER13_ARB = 0x8832\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER13_ARB = 0x8832\r\n            \r\n"," \r\n            Specifies the new values to be used for the specified vertex attribute.\r\n            ":" \r\n            指定要用于指定顶点属性的新值。\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B\r\n            \r\n","\r\n            Original was GL_GPU_ADDRESS_NV = 0x8F34\r\n            ":"\r\n            原来是 GL_GPU_ADDRESS_NV = 0x8F34\r\n            \r\n","True if the JoystickButton is pressed; false otherwise.":"如果按下 JoystickButton，则为真；否则为假。\r\n","\r\n            Original was GL_REPLACEMENT_CODE_SUN = 0x81D8\r\n            ":"\r\n            原来是 GL_REPLACEMENT_CODE_SUN = 0x81D8\r\n            \r\n","[requires: EXT_convolution]\r\n            Get current 1D or 2D convolution filter kernel\r\n            ":"[需要：EXT_convolution]\r\n            获取当前的 1D 或 2D 卷积核\r\n            \r\n","\r\n            Original was GL_OP_MUL_EXT = 0x8786\r\n            ":"\r\n            原来是 GL_OP_MUL_EXT = 0x8786\r\n            \r\n","[length: length] \r\n            The address of a character array containing the message to insert.\r\n            ":"[长度：长度]\r\n            包含要插入的消息的字符数组的地址。\r\n            \r\n","[requires: EXT_transform_feedback]\r\n            Retrieve information about varying variables selected for transform feedback\r\n            ":"[需要：EXT_transform_feedback]\r\n            检索有关为变换反馈选择的不同变量的信息\r\n            \r\n"," \r\n            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes.\r\n            ":" \r\n            指定从中返回数据的缓冲区对象数据存储的偏移量，以字节为单位。\r\n            \r\n","\r\n            Original was GL_STENCIL_COMPONENTS = 0x8285\r\n            ":"\r\n            原来是 GL_STENCIL_COMPONENTS = 0x8285\r\n            \r\n","\r\n            Original was GL_CONDITION_SATISFIED_APPLE = 0x911C\r\n            ":"\r\n            原来是 GL_CONDITION_SATISFIED_APPLE = 0x911C\r\n            \r\n","[requires: EXT_subtexture]\r\n            Specify a two-dimensional texture subimage\r\n            ":"[需要：EXT_subtexture]\r\n            指定二维纹理子图像\r\n            \r\n","\r\n            The zero matrix\r\n            ":"\r\n            零矩阵\r\n            \r\n"," \r\n            The type of the pixel data in row and column. Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            ":" \r\n            行和列中像素数据的类型。 Symbolic constants UnsignedByte, Byte, Bitmap, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev are accepted.\r\n            \r\n","The plus key.":"加号键。\r\n","\r\n            Original was GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7\r\n            \r\n","\r\n            Original was GL_DEPTH_ATTACHMENT_EXT = 0x8D00\r\n            ":"\r\n            原来是 GL_DEPTH_ATTACHMENT_EXT = 0x8D00\r\n            \r\n","\r\n            Original was GL_CLAMP_TO_BORDER_NV = 0x812D\r\n            ":"\r\n            原来是 GL_CLAMP_TO_BORDER_NV = 0x812D\r\n            \r\n","A new Matrix4 which holds the result of the multiplication":"保存乘法结果的新 Matrix4\r\n","\r\n            Device is a keyboard.\r\n            ":"\r\n            设备是键盘。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT7_EXT = 0x8CE7\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT7_EXT = 0x8CE7\r\n            \r\n","[requires: ARB_shader_objects]\r\n            Returns the source code string from a shader object\r\n            ":"[需要：ARB_shader_objects]\r\n            从着色器对象返回源代码字符串\r\n            \r\n","\r\n            Original was GL_DEPTH_ATTACHMENT_OES = 0x8D00\r\n            ":"\r\n            原来是 GL_DEPTH_ATTACHMENT_OES = 0x8D00\r\n            \r\n","\r\n            Used in GL.LightModel\r\n            ":"\r\n            用于 GL.LightModel\r\n            \r\n","\r\n            Original was GL_TEXTURE_WRAP_R = 0x8072\r\n            ":"\r\n            原来是 GL_TEXTURE_WRAP_R = 0x8072\r\n            \r\n","Gets or sets the X11 EventMask.":"获取或设置 X11 EventMask。\r\n","\r\n            Original was GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7\r\n            ":"\r\n            原来是 GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7\r\n            \r\n","[length: message,length] \r\n            The a string containing the message to be sent to the debug output stream.\r\n            ":"[长度：消息，长度]\r\n            包含要发送到调试输出流的消息的字符串。\r\n            \r\n","\r\n            Original was GL_DST_ATOP_NV = 0x928F\r\n            ":"\r\n            原来是 GL_DST_ATOP_NV = 0x928F\r\n            \r\n"," has\r\n            a start button.\r\n            ":" 有\r\n            一个开始按钮。\r\n            \r\n","The left operand of the addition.":"加法的左操作数。\r\n","\r\n            Original was GL_GREEN_SCALE = 0x0D18\r\n            ":"\r\n            原来是 GL_GREEN_SCALE = 0x0D18\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Force execution of GL commands in finite time\r\n            ":"[要求：v1.0 和 1.0]\r\n            在有限时间内强制执行 GL 命令\r\n            \r\n","\r\n            Provides static methods to manage an OpenTK application.\r\n            ":"\r\n            提供静态方法来管理 OpenTK 应用程序。\r\n            \r\n","\r\n            Original was GL_SEPARABLE_2D_EXT = 0x8012\r\n            ":"\r\n            原来是 GL_SEPARABLE_2D_EXT = 0x8012\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return error information\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回错误信息\r\n            \r\n","\r\n            Original was GL_ARRAY_STRIDE = 0x92FE\r\n            ":"\r\n            原来是 GL_ARRAY_STRIDE = 0x92FE\r\n            \r\n","\r\n            Original was GL_COLOR_SUM = 0x8458\r\n            ":"\r\n            原来是 GL_COLOR_SUM = 0x8458\r\n            \r\n","\r\n            Original was GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124\r\n            ":"\r\n            原来是 GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124\r\n            \r\n","[requires: NV_vertex_buffer_unified_memory]\r\n            Specify the organization of vertex arrays\r\n            ":"[需要：NV_vertex_buffer_unified_memory]\r\n            指定顶点数组的组织\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA\r\n            \r\n","The transpose of the given matrix":"给定矩阵的转置\r\n"," \r\n            The length of the message to be sent to the debug output stream.\r\n            ":" \r\n            要发送到调试输出流的消息的长度。\r\n            \r\n","\r\n            Original was GL_SHADOW_ATTENUATION_EXT = 0x834E\r\n            ":"\r\n            原来是 GL_SHADOW_ATTENUATION_EXT = 0x834E\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896\r\n            \r\n","A hash code formed from the bitwise XOR of this objects members.":"由此对象成员的按位 XOR 形成的哈希码。\r\n","[requires: ARB_draw_instanced]\r\n            Draw multiple instances of a set of elements\r\n            ":"[需要：ARB_draw_instanced]\r\n            绘制一组元素的多个实例\r\n            \r\n","\r\n            Original was GL_TESS_GEN_POINT_MODE = 0x8E79\r\n            ":"\r\n            原来是 GL_TESS_GEN_POINT_MODE = 0x8E79\r\n            \r\n","\r\n            Original was GL_SPECULAR = 0x1202\r\n            ":"原来是 GL_SPECULAR = 0x1202\r\n            \r\n"," \r\n            The address of a callback function that will be called when a debug message is generated.\r\n            ":" \r\n            生成调试消息时将调用的回调函数的地址。\r\n            \r\n","[requires: NV_non_square_matrices]":"[需要：NV_non_square_matrices]\r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB\r\n            \r\n","\r\n            Original was GL_PACK_IMAGE_HEIGHT_EXT = 0x806C\r\n            ":"\r\n            原来是 GL_PACK_IMAGE_HEIGHT_EXT = 0x806C\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Specify a three-dimensional texture subimage in a compressed format\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            以压缩格式指定三维纹理子图像\r\n            \r\n"," \r\n            Specifies a value that may be the name of a query object.\r\n            ":" \r\n            指定一个值，该值可以是查询对象的名称。\r\n            \r\n","\r\n            Original was GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB\r\n            ":"\r\n            原来是 GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB\r\n            \r\n","\r\n            Original was GL_PRIMITIVE_RESTART_INDEX = 0x8F9E\r\n            ":"\r\n            原来是 GL_PRIMITIVE_RESTART_INDEX = 0x8F9E\r\n            \r\n"," \r\n            Specify s, t, r, and q texture coordinates for target texture unit. Not all parameters are present in all forms of the command.\r\n            ":" \r\n            指定目标纹理单元的 s、t、r 和 q 纹理坐标。并非所有参数都存在于所有形式的命令中。\r\n            \r\n","[requires: NV_occlusion_query]":"[要求：NV_occlusion_query]\r\n","The delete key.":"删除键。\r\n","\r\n            Original was GL_DEBUG_SOURCE_API_ARB = 0x8246\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_API_ARB = 0x8246\r\n            \r\n","\r\n            Original was GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7\r\n            ":"\r\n            原来是 GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7\r\n            \r\n","\r\n            Used in GL.BlitFramebuffer, GL.BlitNamedFramebuffer and 2 other functions\r\n            ":"\r\n            用于 GL.BlitFramebuffer、GL.BlitNamedFramebuffer 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A\r\n            ":"\r\n            原来是 GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A\r\n            \r\n","The left instance.":"左边的例子。\r\n"," \r\n            Returns the stipple pattern. The initial value is all 1's.\r\n            ":" \r\n            返回点画图案。初始值为全 1。\r\n            \r\n"," \r\n            Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, or one of the sized internal formats given in Table 2, below.\r\n            ":"指定纹理中颜色分量的数量。必须是表 1 中给出的基本内部格式之一，或者是下表 2 中给出的大小内部格式之一。\r\n            \r\n","\r\n            Original was GL_LINEARDODGE_NV = 0x92A4\r\n            ":"\r\n            原来是 GL_LINEARDODGE_NV = 0x92A4\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_HEIGHT_EXT = 0x8019\r\n            ":"\r\n            原来是 GL_CONVOLUTION_HEIGHT_EXT = 0x8019\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_32_BITS = 0x82C8\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_32_BITS = 0x82C8\r\n            \r\n","[requires: EXT_compiled_vertex_array]":"[需要：EXT_compiled_vertex_array]\r\n","\r\n            Original was GL_ImplementationColorReadFormat = 0X8b9b\r\n            ":"\r\n            原来是 GL_ImplementationColorReadFormat = 0X8b9b\r\n            \r\n","[length: numAttachments]":"[长度：numAttachments]\r\n","\r\n            Original was GL_REG_26_ATI = 0x893B\r\n            ":"\r\n            原来是 GL_REG_26_ATI = 0x893B\r\n            \r\n","\r\n            Gets or sets the value at row 2, column 3 of this instance.\r\n            ":"\r\n            获取或设置此实例第 2 行第 3 列的值。\r\n            \r\n","\r\n            Original was GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC\r\n            ":"\r\n            原来是 GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC\r\n            \r\n","The seventh button of the JoystickDevice.":"JoystickDevice 的第七个按钮。\r\n","\r\n            If this NativeWindow has been disposed.\r\n            ":"\r\n            如果此 NativeWindow 已被释放。\r\n            \r\n","\r\n            Original was GL_MINOR_VERSION = 0x821C\r\n            ":"\r\n            原来是 GL_MINOR_VERSION = 0x821C\r\n            \r\n","True, if left does not equal right; false otherwise.":"是的，如果左不等于右；否则为假。\r\n","\r\n            Original was GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2\r\n            ":"原来是 GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2\r\n            \r\n"," \r\n            Specifies the index of the capability.\r\n            ":" \r\n            指定能力的索引。\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0\r\n            \r\n","\r\n            The Z component of the Vector4.\r\n            ":"\r\n            Vector4 的 Z 分量。\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E1F\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E1F\r\n            \r\n","\r\n            Used in GL.Arb.CompressedTexSubImage1D, GL.Arb.CompressedTexSubImage2D and 80 other functions\r\n            ":"\r\n            用于 GL.Arb.CompressedTexSubImage1D、GL.Arb.CompressedTexSubImage2D 和其他 80 个函数\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_HIGH_KHR = 0x9146\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_HIGH_KHR = 0x9146\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_BINDING = 0x8CA6\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_BINDING = 0x8CA6\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT1 = 0x8CE1\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT1 = 0x8CE1\r\n            \r\n","\r\n            Used in GL.ShadeModel\r\n            ":"\r\n            在 GL.ShadeModel 中使用\r\n            \r\n","\r\n            Original was GL_LUMINANCE8_ALPHA8_EXT = 0x8045\r\n            ":"\r\n            原来是 GL_LUMINANCE8_ALPHA8_EXT = 0x8045\r\n            \r\n","\r\n            Used in GL.DrawArrays, GL.DrawElements and 2 other functions\r\n            ":"\r\n            用于 GL.DrawArrays、GL.DrawElements 和其他 2 个函数\r\n            \r\n","\r\n            Original was GL_ABGR_EXT = 0x8000\r\n            ":"\r\n            原来是 GL_ABGR_EXT = 0x8000\r\n            \r\n","\r\n            Identifiers for the WM_SHOWWINDOW message\r\n            ":"\r\n            WM_SHOWWINDOW 消息的标识符\r\n            \r\n"," \r\n            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.\r\n            ":" \r\n            指定每个数组元素的坐标数。必须为 1、2、3 或 4。初始值为 4。\r\n            \r\n","\r\n            Original was GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 0x9308\r\n            ":"\r\n            原来是 GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 0x9308\r\n            \r\n","\r\n            Original was GL_NEGATIVE_Y_EXT = 0x87DA\r\n            ":"\r\n            原来是 GL_NEGATIVE_Y_EXT = 0x87DA\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return the information log for a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回程序对象的信息日志\r\n            \r\n"," for this event.\r\n            Set e.Cancel to true in order to stop the GameWindow from closing.":" 对于这个事件。\r\n            将 e.Cancel 设置为 true 以阻止 GameWindow 关闭。\r\n","\r\n            Original was GL_CMYKA_EXT = 0x800D\r\n            ":"\r\n            原来是 GL_CMYKA_EXT = 0x800D\r\n            \r\n","\r\n            Original was GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875\r\n            ":"原来是 GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875\r\n            \r\n","\r\n            Original was GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x8A52\r\n            ":"\r\n            原来是 GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x8A52\r\n            \r\n","\r\n            Original was GL_QUERY_RESULT_NO_WAIT = 0x9194\r\n            ":"\r\n            原来是 GL_QUERY_RESULT_NO_WAIT = 0x9194\r\n            \r\n","[requires: EXT_separate_shader_objects]\r\n            Specify a parameter for a program object\r\n            ":"[需要：EXT_separate_shader_objects]\r\n            为程序对象指定参数\r\n            \r\n","\r\n            Original was GL_MODELVIEW18_ARB = 0x8732\r\n            ":"\r\n            原来是 GL_MODELVIEW18_ARB = 0x8732\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0\r\n            \r\n","\r\n            Original was GL_MATRIX9_ARB = 0x88C9\r\n            ":"\r\n            原来是 GL_MATRIX9_ARB = 0x88C9\r\n            \r\n"," \r\n            Specifies a single-valued light source parameter for light. SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation are accepted.\r\n            ":" \r\n            指定光的单值光源参数。接受 SpotExponent、SpotCutoff、ConstantAttenuation、LinearAttenuation 和 QuadraticAttenuation。\r\n            \r\n","[length: 1] \r\n            Returns the data type of the attribute variable.\r\n            ":"[长度：1]\r\n            返回属性变量的数据类型。\r\n            \r\n","\r\n            Original was GL_SampleAlphaToCoverage = 0X809e\r\n            ":"\r\n            原来是 GL_SampleAlphaToCoverage = 0X809e\r\n            \r\n","\r\n            Original was GL_INDEX_TEST_EXT = 0x81B5\r\n            ":"\r\n            原来是 GL_INDEX_TEST_EXT = 0x81B5\r\n            \r\n","\r\n            Used in GL.GetMaterial, GL.Material\r\n            ":"\r\n            用于GL.GetMaterial, GL.Material\r\n            \r\n"," \r\n            Must be Minmax.\r\n            ":" \r\n            必须是极小极大。\r\n            \r\n","\r\n            Original was GL_OES_compressed_paletted_texture = 1\r\n            ":"\r\n            原来是 GL_OES_compressed_pa​​letted_texture = 1\r\n            \r\n","[requires: OES_single_precision]\r\n            Multiply the current matrix by a perspective matrix\r\n            ":"[要求：OES_single_precision]\r\n            将当前矩阵乘以透视矩阵\r\n            \r\n","\r\n            Original was GL_POLYGON_OFFSET_UNITS = 0x2A00\r\n            ":"\r\n            原来是 GL_POLYGON_OFFSET_UNITS = 0x2A00\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER6_ATI = 0x882B\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER6_ATI = 0x882B\r\n            \r\n","[length: len]":"[长度：len]\r\n","\r\n            Original was GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803\r\n            ":"\r\n            原来是 GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803\r\n            \r\n","[requires: v3.2 or ARB_sync|VERSION_3_2]":"[要求：v3.2 或 ARB_sync|VERSION_3_2]\r\n","\r\n            Original was GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338\r\n            ":"\r\n            原来是 GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338\r\n            \r\n","\r\n            Original was GL_UNPACK_ROW_BYTES_APPLE = 0x8A16\r\n            ":"\r\n            原来是 GL_UNPACK_ROW_BYTES_APPLE = 0x8A16\r\n            \r\n","[requires: v1.0]\r\n            Enable and disable writing of frame buffer color components\r\n            ":"[要求：v1.0]\r\n            启用和禁用帧缓冲区颜色分量的写入\r\n            \r\n","\r\n            A button\r\n            ":"\r\n            一个按钮\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C\r\n            \r\n","\r\n            Original was GL_IMG_texture_env_enhanced_fixed_function = 1\r\n            ":"\r\n            原来是 GL_IMG_texture_env_enhanced_fixed_function = 1\r\n            \r\n"," that triggered this event.\r\n            ":" 触发了这个事件。\r\n            \r\n","\r\n            Original was GL_LINEAR = 0x2601\r\n            ":"\r\n            原来是 GL_LINEAR = 0x2601\r\n            \r\n","The tilde key.":"波浪键。\r\n","\r\n            Original was GL_CLIP_DISTANCE5 = 0x3005\r\n            ":"\r\n            原来是 GL_CLIP_DISTANCE5 = 0x3005\r\n            \r\n","\r\n            Original was GL_OBJECT_TYPE_APPLE = 0x9112\r\n            ":"\r\n            原来是 GL_OBJECT_TYPE_APPLE = 0x9112\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20\r\n            \r\n","\r\n            Defines information for the raw input devices.\r\n            ":"\r\n            定义原始输入设备的信息。\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_GREEN_SIZE = 0x8272\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_GREEN_SIZE = 0x8272\r\n            \r\n","[requires: EXT_separate_shader_objects]":"[需要：EXT_separate_shader_objects]\r\n"," is of an unknown type.\r\n            ":" 属于未知类型。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Specify a three-dimensional texture image in a compressed format\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            以压缩格式指定三维纹理图像\r\n            \r\n","Describes a win32 window.":"描述一个 win32 窗口。\r\n","The resulting Matrix2x4 instance.":"生成的 Matrix2x4 实例。\r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Delete named textures\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            删除命名纹理\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Pause transform feedback operations\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            暂停变换反馈操作\r\n            \r\n","\r\n            Original was GL_MIN_EXT = 0x8007\r\n            ":"\r\n            原来是 GL_MIN_EXT = 0x8007\r\n            \r\n","\r\n            Original was GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4\r\n            ":"\r\n            原来是 GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4\r\n            \r\n","[length: callback] \r\n            A user supplied pointer that will be passed on each invocation of callback.\r\n            ":"[长度：回调]\r\n            将在每次调用回调时传递的用户提供的指针。\r\n            \r\n","\r\n            Original was GL_UNPACK_CMYK_HINT_EXT = 0x800F\r\n            ":"\r\n            原来是 GL_UNPACK_CMYK_HINT_EXT = 0x800F\r\n            \r\n","\r\n            Original was GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4\r\n            ":"\r\n            原来是 GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4\r\n            \r\n","\r\n            Original was GL_WEIGHT_ARRAY_ARB = 0x86AD\r\n            ":"\r\n            原来是 GL_WEIGHT_ARRAY_ARB = 0x86AD\r\n            \r\n","\r\n            Original was GL_REPLACE_EXT = 0x8062\r\n            ":"\r\n            原来是 GL_REPLACE_EXT = 0x8062\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216\r\n            \r\n","\r\n            Original was GL_FramebufferAttachmentObjectType = 0X8cd0\r\n            ":"\r\n            原来是 GL_FramebufferAttachmentObjectType = 0X8cd0\r\n            \r\n"," \r\n            If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.\r\n            ":" \r\n            如果缓冲区绑定到 QueryResultBuffer 目标，则 params 被视为该缓冲区数据存储中某个位置的偏移量，以接收查询结果。如果没有缓冲区绑定到 QueryResultBuffer，则 params 被视为变量在客户端内存中的地址以接收结果数据。\r\n            \r\n","\r\n            Used in GL.Arb.GetNamedString, GL.Arb.NamedString\r\n            ":"\r\n            用于 GL.Arb.GetNamedString, GL.Arb.NamedString\r\n            \r\n","\r\n            Returns an inverted copy of this instance.\r\n            ":"\r\n            返回此实例的倒置副本。\r\n            \r\n","\r\n            Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.\r\n            ":"\r\n            乘以特定于实现的值以创建恒定的深度偏移。初始值为 0。\r\n            \r\n","\r\n            Original was GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 0x82DC\r\n            ":"\r\n            原来是 GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 0x82DC\r\n            \r\n","\r\n            Original was GL_TEXTURE0_ARB = 0x84C0\r\n            ":"\r\n            原来是 GL_TEXTURE0_ARB = 0x84C0\r\n            \r\n","\r\n            Original was GL_Front = 0X0404\r\n            ":"\r\n            原来是 GL_Front = 0X0404\r\n            \r\n","The Vector3 to copy components from.":"要从中复制组件的 Vector3。\r\n","The return value specifies the message time.":"返回值指定消息时间。\r\n"," \r\n            Specifies the number of program pipeline object names to reserve.\r\n            ":" \r\n            指定要保留的程序管道对象名称的数量。\r\n            \r\n","\r\n            Gets the length (magnitude) of the quaternion.\r\n            ":"\r\n            获取四元数的长度（量级）。\r\n            \r\n","[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]\r\n            Determine if a name corresponds to a transform feedback object\r\n            ":"[要求：v4.0 或 ARB_transform_feedback2|VERSION_4_0]\r\n            确定名称是否对应于变换反馈对象\r\n            \r\n","[length: 2] \r\n            For the vector commands (glVertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute.\r\n            ":"[长度：2]\r\n            对于矢量命令 (glVertexAttrib*v)，指定指向要用于通用顶点属性的值数组的指针。\r\n            \r\n","\r\n            Used in GL.NV.BufferAddressRange, GL.NV.ColorFormat and 9 other functions\r\n            ":"\r\n            用于 GL.NV.BufferAddressRange、GL.NV.ColorFormat 和其他 9 个函数\r\n            \r\n","\r\n            Original was GL_RGB10_A2UI = 0x906F\r\n            ":"\r\n            原来是 GL_RGB10_A2UI = 0x906F\r\n            \r\n"," \r\n            Specifies which texture is to be obtained. Texture1D, Texture2D, Texture3D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, and TextureCubeMapNegativeZ are accepted.\r\n            ":" \r\n            指定要获取的纹理。接受 Texture1D、Texture2D、Texture3D、TextureCubeMapPositiveX、TextureCubeMapNegativeX、TextureCubeMapPositiveY、TextureCubeMapNegativeY、TextureCubeMapPositiveZ 和 TextureCubeMapNegativeZ。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Attach a shader object to a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            将着色器对象附加到程序对象\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44\r\n            \r\n","[requires: IMG_multisampled_render_to_texture]":"[需要：IMG_multisampled_render_to_texture]\r\n","[requires: EXT_gpu_shader4]\r\n            Query the bindings of color numbers to user-defined varying out variables\r\n            ":"[需要：EXT_gpu_shader4]\r\n            查询颜色编号与用户定义的 varying out 变量的绑定\r\n            \r\n"," \r\n            Specifies the byte offset between consecutive colors. If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0.\r\n            ":" \r\n            指定连续颜色之间的字节偏移量。如果步幅为 0，则颜色被理解为紧密排列在数组中。初始值为 0。\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28\r\n            \r\n","\r\n            Enumerates available window borders.\r\n            ":"\r\n            枚举可用的窗口边框。\r\n            \r\n","\r\n            Original was GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143\r\n            ":"\r\n            原来是 GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143\r\n            \r\n"," \r\n            Specifies the format of the shader binaries contained in binary.\r\n            ":" \r\n            指定二进制文件中包含的着色器二进制文件的格式。\r\n            \r\n","[requires: KHR_debug]\r\n            Retrieve the label of a sync object identified by a pointer\r\n            ":"[要求：KHR_debug]\r\n            检索由指针标识的同步对象的标签\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_PARAMETERS = 0x88AB\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_PARAMETERS = 0x88AB\r\n            \r\n","\r\n            Provides access to GLX functions.\r\n            ":"\r\n            提供对 GLX 功能的访问。\r\n            \r\n","\r\n            Gets or sets the first column of the matrix.\r\n            ":"\r\n            获取或设置矩阵的第一列。\r\n            \r\n","\r\n            Gets a JoystickAxisCollection containing the state of each axis on this instance. Values are normalized in the [-1, 1] range.\r\n            ":"\r\n            获取一个 JoystickAxisCollection，其中包含此实例上每个轴的状态。值在 [-1, 1] 范围内标准化。\r\n            \r\n","[requires: v2.0]\r\n            Returns the location of a uniform variable\r\n            ":"[要求：v2.0]\r\n            返回统一变量的位置\r\n            \r\n","\r\n            Calculate the transpose of the given matrix.\r\n            ":"\r\n            计算给定矩阵的转置。\r\n            \r\n","\r\n            Original was GL_2_BYTES_NV = 0x1407\r\n            ":"\r\n            原来是 GL_2_BYTES_NV = 0x1407\r\n            \r\n","\r\n            Mode flags\r\n            ":"\r\n            模式标志\r\n            \r\n","\r\n            Original was GL_OP_FRAC_EXT = 0x8789\r\n            ":"\r\n            原来是 GL_OP_FRAC_EXT = 0x8789\r\n            \r\n","The resulting Matrix4dinstance.":"生成的 Matrix4 实例。\r\n","\r\n            Used in GL.GetSamplerParameter, GL.SamplerParameter and 1 other function\r\n            ":"\r\n            用于 GL.GetSamplerParameter、GL.SamplerParameter 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_ASYNC_TEX_IMAGE_SGIX = 0x835C\r\n            ":"\r\n            原来是 GL_ASYNC_TEX_IMAGE_SGIX = 0x835C\r\n            \r\n","[length: 2] \r\n            Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.\r\n            ":"[长度：2]\r\n            指定指向返回格式精度的 log sub 2 的位置的指针。\r\n            \r\n","[requires: v2.0]\r\n            Creates a shader object\r\n            ":"[要求：v2.0]\r\n            创建着色器对象\r\n            \r\n","\r\n            Original was GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2\r\n            ":"\r\n            原来是 GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2\r\n            \r\n","\r\n            Original was GL_AFFINE_3D_NV = 0x9094\r\n            ":"\r\n            原来是 GL_AFFINE_3D_NV = 0x9094\r\n            \r\n"," \r\n            The length of the buffer whose address is in label.\r\n            ":" \r\n            地址在标签中的缓冲区的长度。\r\n            \r\n","\r\n            Original was GL_ALPHA_SCALE = 0x0D1C\r\n            ":"\r\n            原来是 GL_ALPHA_SCALE = 0x0D1C\r\n            \r\n","\r\n            Enumerates available mouse keys (suitable for use in WM_MOUSEMOVE messages).\r\n            ":"\r\n            枚举可用的鼠标键（适用于 WM_MOUSEMOVE 消息）。\r\n            \r\n","\r\n            Original was GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369\r\n            ":"\r\n            原来是 GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013\r\n            ":"\r\n            原来是 GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013\r\n            \r\n","\r\n            Original was GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D\r\n            ":"\r\n            原来是 GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D\r\n            \r\n","[requires: QCOM_alpha_test]\r\n            Specify the alpha test function\r\n            ":"[要求：QCOM_alpha_test]\r\n            指定 alpha 测试函数\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB\r\n            \r\n"," \r\n            Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap2 command. This argument is not present in a glEvalCoord1 command.\r\n            ":" \r\n            指定一个值，该值是先前 glMap2 命令中定义的基函数的域坐标。此参数不存在于 glEvalCoord1 命令中。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return the address of the specified generic vertex attribute pointer\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回指定通用顶点属性指针的地址\r\n            \r\n","\r\n            Original was GL_TESS_CONTROL_TEXTURE = 0x829C\r\n            ":"\r\n            原来是 GL_TESS_CONTROL_TEXTURE = 0x829C\r\n            \r\n","\r\n            Called after an OpenGL context has been established, but before entering the main loop.\r\n            ":"\r\n            在建立 OpenGL 上下文之后，但在进入主循环之前调用。\r\n            \r\n","\r\n            Used in GL.Ext.GetPixelTransformParameter, GL.Ext.PixelTransformParameter\r\n            ":"\r\n            在GL.Ext.GetPixelTransformParameter、GL.Ext.PixelTransformParameter中使用\r\n            \r\n","A new Matrix4x3d which holds the result of the subtraction":"保存减法结果的新 Matrix4x3d\r\n","\r\n            Used in GL.NamedFramebufferReadBuffer, GL.ReadBuffer and 1 other function\r\n            ":"\r\n            用于 GL.NamedFramebufferReadBuffer、GL.ReadBuffer 和 1 个其他函数\r\n            \r\n","\r\n            Original was GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F\r\n            ":"\r\n            原来是 GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F\r\n            \r\n","\r\n            Original was GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6\r\n            ":"\r\n            原来是 GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6\r\n            \r\n",">\r\n            This is a workaround for the lack of ChangeResolution support in SDL2.\r\n            When and if this changes upstream, we should remove this code.\r\n            ":">\r\n            这是 SDL2 中缺少 ChangeResolution 支持的解决方法。\r\n            如果这在上游发生变化，我们应该删除这段代码。\r\n            \r\n","The twentysecond button of the JoystickDevice.":"JoystickDevice 的第二个按钮。\r\n","\r\n            Original was GL_MATRIX25_ARB = 0x88D9\r\n            ":"\r\n            原来是 GL_MATRIX25_ARB = 0x88D9\r\n            \r\n","[length: 1] \r\n            Specifies the address of a variable to receive the value or values of the subroutine uniform.\r\n            ":"[长度：1]\r\n            指定一个变量的地址来接收一个或多个子程序统一的值。\r\n            \r\n","\r\n            Original was GL_READ_PIXELS = 0x828C\r\n            ":"\r\n            原来是 GL_READ_PIXELS = 0x828C\r\n            \r\n","Third item of the first row of the matrix.":"矩阵第一行的第三项。\r\n","\r\n            Original was GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074\r\n            ":"\r\n            原来是 GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074\r\n            \r\n","\r\n            Original was GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904\r\n            ":"\r\n            原来是 GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07\r\n            \r\n","The nineteenth button of the JoystickDevice.":"JoystickDevice 的第十九个按钮。\r\n","The pitch (attitude), rotation around X axis":"俯仰（姿态），绕X轴旋转\r\n","[length: drawcount] \r\n            Points to an array of the elements counts.\r\n            ":"[长度：drawcount]\r\n            指向元素计数的数组。\r\n            \r\n","\r\n            Original was GL_PERCENTAGE_AMD = 0x8BC3\r\n            ":"\r\n            原来是 GL_PERCENTAGE_AMD = 0x8BC3\r\n            \r\n","[requires: v3.0]\r\n            Retrieve information about varying variables selected for transform feedback\r\n            ":"[要求：v3.0]\r\n            检索有关为变换反馈选择的不同变量的信息\r\n            \r\n","\r\n            Original was GL_ADD_SIGNED = 0x8574\r\n            ":"\r\n            原来是 GL_ADD_SIGNED = 0x8574\r\n            \r\n","\r\n            Represents a 3x3 matrix containing 3D rotation and scale with double-precision components.\r\n            ":"\r\n            表示一个 3x3 矩阵，其中包含具有双精度组件的 3D 旋转和缩放。\r\n            \r\n","\r\n            Original was GL_RG_EXT = 0x8227\r\n            ":"\r\n            原来是 GL_RG_EXT = 0x8227\r\n            \r\n","\r\n            Original was GL_SAMPLER_KHR = 0x82E6\r\n            ":"\r\n            原来是 GL_SAMPLER_KHR = 0x82E6\r\n            \r\n","The eleventh button of the JoystickDevice.":"JoystickDevice 的第十一个按钮。\r\n","\r\n            Original was GL_ConstantColor = 0X8001\r\n            ":"\r\n            原来是 GL_ConstantColor = 0X8001\r\n            \r\n","\r\n            Original was GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096\r\n            ":"原来是 GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096\r\n            \r\n","[requires: NV_present_video]":"[需要：NV_present_video]\r\n","\r\n            The type of the pixel data in row and column. Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.\r\n            ":"\r\n            行和列中像素数据的类型。 Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are accepted.\r\n            \r\n"," \r\n            Specifies the start of the buffer subrange, in basic machine units.\r\n            ":" \r\n            以基本机器单位指定缓冲区子范围的开始。\r\n            \r\n","\r\n            Used in GL.Angle.DrawArraysInstanced, GL.Angle.DrawElementsInstanced and 11 other functions\r\n            ":"\r\n            用于 GL.Angle.DrawArraysInstanced、GL.Angle.DrawElementsInstanced 和其他 11 个函数\r\n            \r\n"," \r\n            Specifies the parameter of the shader subroutine uniform to query. pname must be NumCompatibleSubroutines, CompatibleSubroutines, UniformSize or UniformNameLength.\r\n            ":" \r\n            指定要查询的着色器子程序统一的参数。 pname 必须是 NumCompatibleSubroutines、CompatibleSubroutines、UniformSize 或 UniformNameLength。\r\n            \r\n","\r\n            Original was GL_LAYER_PROVOKING_VERTEX = 0x825E\r\n            ":"\r\n            原来是 GL_LAYER_PROVOKING_VERTEX = 0x825E\r\n            \r\n","\r\n            Original was GL_REG_4_ATI = 0x8925\r\n            ":"\r\n            原来是 GL_REG_4_ATI = 0x8925\r\n            \r\n","[requires: EXT_draw_instanced]\r\n            Draw multiple instances of a set of elements\r\n            ":"[需要：EXT_draw_instanced]\r\n            绘制一组元素的多个实例\r\n            \r\n"," \r\n            Specify whether red, green, blue, and alpha are to be written into the frame buffer. The initial values are all True, indicating that the color components are written.\r\n            ":" \r\n            指定是否将红色、绿色、蓝色和 alpha 写入帧缓冲区。初始值都是True，表示写入了颜色分量。\r\n            \r\n","\r\n            Original was GL_CON_28_ATI = 0x895D\r\n            ":"\r\n            原来是 GL_CON_28_ATI = 0x895D\r\n            \r\n","\r\n            Original was GL_COLOR_INDEXES = 0x1603\r\n            ":"\r\n            原来是 GL_COLOR_INDEXES = 0x1603\r\n            \r\n","\r\n            Used in GL.TexStorage2D\r\n            ":"\r\n            用于 GL.TexStorage2D\r\n            \r\n","[length: pname] \r\n            For glPointParameterf and glPointParameteri, specifies the value that pname will be set to.\r\n            ":"[长度：pname]\r\n            对于 glPointParameterf 和 glPointParameteri，指定 pname 将设置为的值。\r\n            \r\n","\r\n            Pointer to a RECT structure that specifies the coordinates of the client area. \r\n            ":"\r\n            指向指定客户区坐标的 RECT 结构的指针。\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA\r\n            \r\n"," \r\n            The namespace from which the name of the object is allocated.\r\n            ":" \r\n            从中分配对象名称的命名空间。\r\n            \r\n","The twentyfirst button of the JoystickDevice.":"JoystickDevice 的第二十一个按钮。\r\n","[requires: v1.0 and 1.0]\r\n            Define an array of vertex data\r\n            ":"[要求：v1.0 和 1.0]\r\n            定义一个顶点数据数组\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return a generic vertex attribute parameter\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            返回一个通用的顶点属性参数\r\n            \r\n","\r\n            Gets or sets the Parent of the window (may be null).\r\n            ":"\r\n            获取或设置窗口的父级（可能为空）。\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E\r\n            \r\n","The keypad 2 key.":"键盘 2 键。\r\n","\r\n            Original was GL_INVARIANT_DATATYPE_EXT = 0x87EB\r\n            ":"\r\n            原来是 GL_INVARIANT_DATATYPE_EXT = 0x87EB\r\n            \r\n","\r\n            Gets or sets a System.Boolean that indicates whether this NativeWindow is visible.\r\n            ":"\r\n            获取或设置一个 System.Boolean，它指示此 NativeWindow 是否可见。\r\n            \r\n","\r\n            Original was GL_BACK = 0X0405\r\n            ":"\r\n            原来是 GL_BACK = 0X0405\r\n            \r\n","[requires: EXT_draw_buffers_indexed]\r\n            Specify pixel arithmetic for RGB and alpha components separately\r\n            ":"[需要：EXT_draw_buffers_indexed]\r\n            分别为 RGB 和 alpha 分量指定像素算法\r\n            \r\n"," \r\n            Specifies the handle of the shader object whose source code is to be replaced.\r\n            ":" \r\n            指定要替换其源代码的着色器对象的句柄。\r\n            \r\n"," \r\n            Must be Convolution2D.\r\n            ":" \r\n            必须是 Convolution2D。\r\n            \r\n","\r\n            Original was GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703\r\n            ":"\r\n            原来是 GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703\r\n            \r\n","\r\n            Original was GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514\r\n            ":"\r\n            原来是 GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514\r\n            \r\n","\r\n            Original was GL_IMAGE_CLASS_2_X_16 = 0x82BD\r\n            ":"\r\n            原来是 GL_IMAGE_CLASS_2_X_16 = 0x82BD\r\n            \r\n","\r\n            Original was GL_SRC_IN_NV = 0x928A\r\n            ":"\r\n            原来是 GL_SRC_IN_NV = 0x928A\r\n            \r\n","\r\n            Gets an OpenTK.Vector4 with the Y, Y, Z, and W components of this instance.\r\n            ":"\r\n            获取具有此实例的 Y、Y、Z 和 W 组件的 OpenTK.Vector4。\r\n            \r\n"," \r\n            The format of the data whose address in memory is given by data.\r\n            ":" \r\n            数据的格式，其在内存中的地址由数据给出。\r\n            \r\n","\r\n            Original was GL_Float = 0X1406\r\n            ":"\r\n            原来是 GL_Float = 0X1406\r\n            \r\n","\r\n            Original was GL_UNDEFINED_APPLE = 0x8A1C\r\n            ":"\r\n            原来是 GL_UNDEFINED_APPLE = 0x8A1C\r\n            \r\n","\r\n            Original was GL_COMBINER2_NV = 0x8552\r\n            ":"\r\n            原来是 GL_COMBINER2_NV = 0x8552\r\n            \r\n"," \r\n            The target to which the framebuffer is attached. target must be Framebuffer, DrawFramebuffer, or ReadFramebuffer.\r\n            ":" \r\n            帧缓冲区附加到的目标。 target 必须是 Framebuffer、DrawFramebuffer 或 ReadFramebuffer。\r\n            \r\n","\r\n            Gets the list of available JoystickDevices.\r\n            ":"\r\n            获取可用的 JoystickDevices 列表。\r\n            \r\n","[requires: NV_gpu_program5]":"[要求：NV_gpu_program5]\r\n","[requires: EXT_separate_shader_objects]\r\n            Set the active program object for a program pipeline object\r\n            ":"[需要：EXT_separate_shader_objects]\r\n            为程序管道对象设置活动程序对象\r\n            \r\n","[length: format,type,width,height] \r\n            Returns the pixel data.\r\n            ":"[长度：格式、类型、宽度、高度]\r\n            返回像素数据。\r\n            \r\n","\r\n            Original was GL_FOG_FUNC_SGIS = 0x812A\r\n            ":"\r\n            原来是 GL_FOG_FUNC_SGIS = 0x812A\r\n            \r\n","[requires: v1.0]\r\n            Specify a two-dimensional texture subimage\r\n            ":"[要求：v1.0]\r\n            指定二维纹理子图像\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_ARB = 0x8513\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_ARB = 0x8513\r\n            \r\n","\r\n            Original was GL_INTENSITY8 = 0x804B\r\n            ":"\r\n            原来是 GL_INTENSITY8 = 0x804B\r\n            \r\n"," \r\n            Must be Separable2D.\r\n            ":" \r\n            必须是 Separable2D。\r\n            \r\n","\r\n            The system copies the bitmaps in the IconInfo structure before \r\n            creating the icon or cursor. Because the system may temporarily \r\n            select the bitmaps in a device context, the hbmMask and hbmColor \r\n            members of the IconInfo structure should not already be selected \r\n            into a device context. The application must continue to manage the \r\n            original bitmaps and delete them when they are no longer necessary.\r\n            When you are finished using the icon, destroy it using the \r\n            DestroyIcon function.\r\n            ":"\r\n            系统复制 IconInfo 结构中的位图之前\r\n            创建图标或光标。因为系统可能会暂时\r\n            在设备上下文中选择位图，hbmMask 和 hbmColor\r\n            不应选择 IconInfo 结构的成员\r\n            进入设备上下文。应用程序必须继续管理\r\n            原始位图并在不再需要时将其删除。\r\n            使用完图标后，使用\r\n            DestroyIcon 函数。\r\n            \r\n","\r\n            Original was GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA\r\n            ":"\r\n            原来是 GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA\r\n            \r\n","\r\n            Original was GL_MATRIX3_ARB = 0x88C3\r\n            ":"\r\n            原来是 GL_MATRIX3_ARB = 0x88C3\r\n            \r\n","\r\n            Retrieves a handle to the current cursor.\r\n            ":"\r\n            检索当前游标的句柄。\r\n            \r\n","\r\n            Original was GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0\r\n            ":"\r\n            原来是 GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0\r\n            \r\n","\r\n            Original was GL_IMAGE_CLASS_4_X_16 = 0x82BC\r\n            ":"\r\n            原来是 GL_IMAGE_CLASS_4_X_16 = 0x82BC\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Set front and/or back stencil test actions\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            设置正面和/或背面模板测试操作\r\n            \r\n","\r\n            Original was GL_SIGNED_RGBA_NV = 0x86FB\r\n            ":"\r\n            原来是 GL_SIGNED_RGBA_NV = 0x86FB\r\n            \r\n","[requires: EXT_fog_coord]\r\n            Define an array of fog coordinates\r\n            ":"[需要：EXT_fog_coord]\r\n            定义雾坐标数组\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER = 0x8C2A\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER = 0x8C2A\r\n            \r\n","A GameControllerButtonBind instance describing the specified binding":"描述指定绑定的 GameControllerButtonBind 实例\r\n","[length: pname] \r\n            Pointer to storage for the returned values.\r\n            ":"[长度：pname]\r\n            指向存储返回值的指针。\r\n            \r\n","\r\n            The return value is the handle to the previous cursor, if there was one.\r\n            \r\n            If there was no previous cursor, the return value is null.\r\n            ":"\r\n            返回值是前一个游标的句柄，如果有的话。\r\n            \r\n            如果没有前一个游标，则返回值为 null。\r\n            \r\n","\r\n            Original was GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9\r\n            ":"\r\n            原来是 GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9\r\n            \r\n","\r\n            Used in GL.Ati.VertexAttribArrayObject, GL.VertexAttribPointer and 1 other function\r\n            ":"\r\n            用于 GL.Ati.VertexAttribArrayObject、GL.VertexAttribPointer 和 1 个其他函数\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Multiply the current matrix by a general scaling matrix\r\n            ":"[要求：v1.0 和 1.0]\r\n            将当前矩阵乘以通用缩放矩阵\r\n            \r\n","GamePadType":"游戏手柄类型\r\n"," \r\n            The address of a variable to receive the length of the object label.\r\n            ":" \r\n            接收对象标签长度的变量地址。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_24_8_NV = 0x84FA\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_24_8_NV = 0x84FA\r\n            \r\n","\r\n            Specify a callback to receive debugging messages from the GL\r\n            ":"\r\n            指定回调以接收来自 GL 的调试消息\r\n            \r\n","\r\n            Gets an IntPtr representing a device dependent ID.\r\n            ":"\r\n            获取表示设备相关 ID 的 IntPtr。\r\n            \r\n","\r\n            Original was GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129\r\n            ":"\r\n            原来是 GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129\r\n            \r\n","\r\n            Original was GL_DISJOINT_NV = 0x9283\r\n            ":"\r\n            原来是 GL_DISJOINT_NV = 0x9283\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Enable or disable writing into the depth buffer\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            启用或禁用写入深度缓冲区\r\n            \r\n","\r\n            Original was GL_IMAGE_BINDING_LEVEL = 0x8F3B\r\n            ":"\r\n            原来是 GL_IMAGE_BINDING_LEVEL = 0x8F3B\r\n            \r\n","[requires: EXT_blend_equation_separate]\r\n            Set the RGB blend equation and the alpha blend equation separately\r\n            ":"[需要：EXT_blend_equation_separate]\r\n            分别设置RGB混合方程和alpha混合方程\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Set texture environment parameters\r\n            ":"[要求：v1.0 和 1.0]\r\n            设置纹理环境参数\r\n            \r\n","\r\n            Original was GL_ARRAY_ENABLED = 0x8622\r\n            ":"\r\n            原来是 GL_ARRAY_ENABLED = 0x8622\r\n            \r\n","\r\n            Original was GL_SURFACE_MAPPED_NV = 0x8700\r\n            ":"\r\n            原来是 GL_SURFACE_MAPPED_NV = 0x8700\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify a two-dimensional texture subimage in a compressed format\r\n            ":"[要求：v1.0 和 1.0]\r\n            以压缩格式指定二维纹理子图像\r\n            \r\n","\r\n            Original was GL_TEXTURE19 = 0x84D3\r\n            ":"\r\n            原来是 GL_TEXTURE19 = 0x84D3\r\n            \r\n","The SetWindowText function does not expand tab characters (ASCII code 0x09). Tab characters are displayed as vertical bar (|) characters. ":"SetWindowText 函数不扩展制表符（ASCII 代码 0x09）。制表符显示为竖线 (|) 字符。\r\n","\r\n            Original was GL_CONSTANT_ATTENUATION = 0x1207\r\n            ":"\r\n            原来是 GL_CONSTANT_ATTENUATION = 0x1207\r\n            \r\n","[requires: ARB_vertex_blend]":"[需要：ARB_vertex_blend]\r\n"," \r\n            Specifies the target to be used for the newly initialized texture.\r\n            ":" \r\n            指定要用于新初始化纹理的目标。\r\n            \r\n","\r\n            Original was GL_SAMPLER_BUFFER_EXT = 0x8DC2\r\n            ":"\r\n            原来是 GL_SAMPLER_BUFFER_EXT = 0x8DC2\r\n            \r\n"," \r\n            Specifies the length of the array whose address is given in binary.\r\n            ":" \r\n            指定地址以二进制形式给出的数组的长度。\r\n            \r\n","\r\n            Used in GL.Ext.BlendEquation\r\n            ":"\r\n            在 GL.Ext.BlendEquation 中使用\r\n            \r\n","\r\n            Does not activate the window. If this flag is not set,\r\n            the window is activated and moved to the top of either the topmost or non-topmost group\r\n            (depending on the setting of the hwndInsertAfter member).\r\n            ":"\r\n            不激活窗口。如果未设置此标志，\r\n            窗口被激活并移动到最顶层或非最顶层组的顶部\r\n            （取决于 hwndInsertAfter 成员的设置）。\r\n            \r\n","\r\n            Original was GL_DRAW_PIXELS_APPLE = 0x8A0A\r\n            ":"\r\n            原来是 GL_DRAW_PIXELS_APPLE = 0x8A0A\r\n            \r\n","MarshalStringToPtr":"MarshalStringToPtr\r\n","\r\n            Used in GL.GetShaderPrecisionFormat\r\n            ":"\r\n            在 GL.GetShaderPrecisionFormat 中使用\r\n            \r\n"," \r\n            Specifies the minimum array index contained in indices.\r\n            ":" \r\n            指定索引中包含的最小数组索引。\r\n            \r\n","\r\n            Original was GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD\r\n            ":"原来是 GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD\r\n            \r\n","\r\n            Original was GL_STENCIL_ATTACHMENT_EXT = 0x8D20\r\n            ":"\r\n            原来是 GL_STENCIL_ATTACHMENT_EXT = 0x8D20\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify the clear value for the depth buffer\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            为深度缓冲区指定清除值\r\n            \r\n","[requires: v3.1]\r\n            Attach the storage for a buffer object to the active buffer texture\r\n            ":"[要求：v3.1]\r\n            将缓冲区对象的存储附加到活动缓冲区纹理\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Multiply the current matrix by a general scaling matrix\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            将当前矩阵乘以通用缩放矩阵\r\n            \r\n","Specifies the event.":"指定事件。\r\n","\r\n            Gets or sets an OpenTK.Vector4 with the X, Y, W, and Z components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 X、Y、W 和 Z 组件的 OpenTK.Vector4。\r\n            \r\n","[requires: v4.2 or ARB_base_instance|VERSION_4_2]\r\n            Draw multiple instances of a set of elements with offset applied to instanced attributes\r\n            ":"[要求：v4.2 或 ARB_base_instance|VERSION_4_2]\r\n            绘制一组元素的多个实例，并将偏移应用于实例属性\r\n            \r\n","The eighth button of the JoystickDevice.":"JoystickDevice 的第八个按钮。\r\n","True if code is pressed; false otherwise.":"如果按下代码则为真；否则为假。\r\n","\r\n            Original was GL_RGB32UI = 0x8D71\r\n            ":"\r\n            原来是 GL_RGB32UI = 0x8D71\r\n            \r\n","\r\n            Original was GL_TEXTURE_HI_SIZE_NV = 0x871B\r\n            ":"原来是 GL_TEXTURE_HI_SIZE_NV = 0x871B\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76\r\n            \r\n","\r\n            Gets or sets a value indicating whether high\r\n            resolution modes are supported on high-DPI\r\n            (\"Retina\") displays. Enabled by default.\r\n            Set to false for applications that are not\r\n            DPI-aware (e.g. WinForms.)\r\n            ":"\r\n            获取或设置一个值，该值指示是否为高\r\n            高 DPI 支持分辨率模式\r\n            （“视网膜”）显示。默认启用。\r\n            对于不是的应用程序设置为 false\r\n            DPI 感知（例如 WinForms。）\r\n            \r\n","\r\n            When the predicate procedure finds a match, XCheckIfEvent() copies the matched event into the client-supplied XEvent structure and returns True. (This event is removed from the queue.) If the predicate procedure finds no match, XCheckIfEvent() returns False, and the output buffer will have been flushed. All earlier events stored in the queue are not discarded.\r\n            ":"\r\n            当谓词过程找到匹配项时，XCheckIfEvent() 将匹配的事件复制到客户端提供的 XEvent 结构中并返回 True。 （此事件从队列中删除。）如果谓词过程未找到匹配项，则 XCheckIfEvent() 返回 False，并且输出缓冲区将被刷新。存储在队列中的所有较早事件都不会被丢弃。\r\n            \r\n","\r\n            Original was GL_DEPTH_BOUNDS_EXT = 0x8891\r\n            ":"\r\n            原来是 GL_DEPTH_BOUNDS_EXT = 0x8891\r\n            \r\n","\r\n            Original was GL_MAX_SHININESS_NV = 0x8504\r\n            ":"\r\n            原来是 GL_MAX_SHININESS_NV = 0x8504\r\n            \r\n"," \r\n            Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.\r\n            ":" \r\n            指定要渲染的图元类型。接受符号常量 Points、LineStrip、LineLoop、Lines、TriangleStrip、TriangleFan 和 Triangles。\r\n            \r\n","\r\n            Original was GL_PRESENT_DURATION_NV = 0x8E2B\r\n            ":"\r\n            原来是 GL_PRESENT_DURATION_NV = 0x8E2B\r\n            \r\n","\r\n            Gets a value indicating whether the up button is pressed.\r\n            ":"\r\n            获取一个值，该值指示向上按钮是否被按下。\r\n            \r\n","\r\n            Original was GL_MAP1_GRID_DOMAIN = 0x0DD0\r\n            ":"\r\n            原来是 GL_MAP1_GRID_DOMAIN = 0x0DD0\r\n            \r\n","\r\n            Original was GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81\r\n            ":"\r\n            原来是 GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81\r\n            \r\n","\r\n            Original was GL_UNPACK_IMAGE_HEIGHT = 0x806E\r\n            ":"\r\n            原来是 GL_UNPACK_IMAGE_HEIGHT = 0x806E\r\n            \r\n","\r\n            Original was GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111\r\n            ":"\r\n            原来是 GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4\r\n            ":"原来是 GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4\r\n            \r\n","\r\n            Original was GL_INDEX_ARRAY_STRIDE = 0x8086\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_STRIDE = 0x8086\r\n            \r\n","\r\n            Original was GL_IMG_user_clip_plane = 1\r\n            ":"\r\n            原来是 GL_IMG_user_clip_plane = 1\r\n            \r\n","\r\n            Original was GL_4PASS_2_EXT = 0x80A6\r\n            ":"\r\n            原来是 GL_4PASS_2_EXT = 0x80A6\r\n            \r\n","\r\n            Original was GL_WRAP_BORDER_SUN = 0x81D4\r\n            ":"\r\n            原来是 GL_WRAP_BORDER_SUN = 0x81D4\r\n            \r\n","\r\n            Original was GL_CompressedTextureFormats = 0X86a3\r\n            ":"\r\n            原来是 GL_CompressedTextureFormats = 0X86a3\r\n            \r\n","[length: pname] \r\n            If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.\r\n            ":"[长度：pname]\r\n            如果缓冲区绑定到 QueryResultBuffer 目标，则 params 被视为该缓冲区数据存储中某个位置的偏移量，以接收查询结果。如果没有缓冲区绑定到 QueryResultBuffer，则 params 被视为变量在客户端内存中的地址以接收结果数据。\r\n            \r\n","\r\n            Original was GL_PROGRAM_TEMPORARIES_ARB = 0x88A4\r\n            ":"\r\n            原来是 GL_PROGRAM_TEMPORARIES_ARB = 0x88A4\r\n            \r\n","\r\n            Used in GL.Ext.ConvolutionFilter1D, GL.Ext.ConvolutionFilter2D and 5 other functions\r\n            ":"\r\n            用于GL.Ext.ConvolutionFilter1D、GL.Ext.ConvolutionFilter2D等5个函数\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT = 0x1403\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT = 0x1403\r\n            \r\n"," \r\n            Specifies the texture object to attach to the framebuffer attachment point named by attachment.\r\n            ":" \r\n            指定要附加到由附件命名的帧缓冲区附加点的纹理对象。\r\n            \r\n","\r\n            Returns true if a render window/context exists.\r\n            ":"\r\n            如果存在渲染窗口/上下文，则返回 true。\r\n            \r\n"," trigger buttons.\r\n            ":" 触发按钮。\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER = 0X8d41\r\n            ":"\r\n            原来是 GL_RENDERBUFFER = 0X8d41\r\n            \r\n","\r\n            Get separable convolution filter kernel images\r\n            ":"\r\n            获取可分离卷积核图像\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX4 = 0x8D47\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX4 = 0x8D47\r\n            \r\n"," if this instance has a B button; otherwise, ":" 如果这个实例有一个 B 按钮；否则，\r\n","\r\n            Original was GL_ALPHA_FLOAT16_APPLE = 0x881C\r\n            ":"\r\n            原来是 GL_ALPHA_FLOAT16_APPLE = 0x881C\r\n            \r\n","\r\n            See: http://msdn.microsoft.com/en-us/library/windows/desktop/ee308410(v=vs.85).aspx\r\n        ":"\r\n            请参阅：http://msdn.microsoft.com/en-us/library/windows/desktop/ee308410(v=vs.85).aspx\r\n        \r\n"," otherwise. This method can return false\r\n            if the ":" 否则。这个方法可以返回 false\r\n            如果\r\n","\r\n            Original was GL_INTENSITY8UI_EXT = 0x8D7F\r\n            ":"\r\n            原来是 GL_INTENSITY8UI_EXT = 0x8D7F\r\n            \r\n","\r\n            Constructs a new BindingsBase instance.\r\n            ":"\r\n            构造一个新的 BindingsBase 实例。\r\n            \r\n","\r\n            Original was GL_COLOR_BUFFER_BIT7_QCOM = 0x00000080\r\n            ":"\r\n            原来是 GL_COLOR_BUFFER_BIT7_QCOM = 0x00000080\r\n            \r\n","\r\n            Vsync disabled.\r\n            ":"\r\n            禁用垂直同步。\r\n            \r\n","[length: count] \r\n            Specifies the address of an array of names of existing sampler objects.\r\n            ":"[长度：计数]\r\n            指定现有采样器对象名称数组的地址。\r\n            \r\n","Gets a System.Boolean indicating whether OpenTK is running on an X11 platform.":"获取一个 System.Boolean，指示 OpenTK 是否在 X11 平台上运行。\r\n","[requires: NV_draw_instanced]\r\n            Draw multiple instances of a range of elements\r\n            ":"[要求：NV_draw_instanced]\r\n            绘制一系列元素的多个实例\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the Y, X, and W components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Y、X 和 W 组件的 OpenTK.Vector3。\r\n            \r\n"," \r\n            The type of the pixel data in data. The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.\r\n            ":" \r\n            数据中像素数据的类型。 The allowable values are UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.\r\n            \r\n","\r\n            Used in GL.Arb.GetBufferParameter, GL.Arb.GetBufferPointer and 1 other function\r\n            ":"\r\n            用于 GL.Arb.GetBufferParameter、GL.Arb.GetBufferPointer 和 1 个其他函数\r\n            \r\n","\r\n            Used in GL.PolygonMode\r\n            ":"\r\n            在 GL.PolygonMode 中使用\r\n            \r\n","\r\n            Used in GL.Ext.GetObjectLabel, GL.Ext.LabelObject\r\n            ":"\r\n            用于GL.Ext.GetObjectLabel, GL.Ext.LabelObject\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT5_NV = 0x8CE5\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT5_NV = 0x8CE5\r\n            \r\n","\r\n            If the function succeeds, the return value is a handle to the icon\r\n            or cursor that is created.\r\n            \r\n            If the function fails, the return value is null. To get extended \r\n            error information, call Marshal.GetLastWin32Error.\r\n            ":"\r\n            如果函数成功，返回值是图标的句柄\r\n            或创建的游标。\r\n            \r\n            如果函数失败，则返回值为 null。得到扩展\r\n            错误信息，调用Marshal.GetLastWin32Error。\r\n            \r\n","[length: 1] \r\n            Returns the size of the uniform variable.\r\n            ":"[长度：1]\r\n            返回统一变量的大小。\r\n            \r\n","\r\n            Gets or sets the value at row 2, column 1 of this instance.\r\n            ":"\r\n            获取或设置此实例第 2 行第 1 列的值。\r\n            \r\n","\r\n            Original was GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C\r\n            ":"\r\n            原来是 GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E\r\n            \r\n"," \r\n            Specifies the texture object whose image is to be attached.\r\n            ":" \r\n            指定要附加其图像的纹理对象。\r\n            \r\n","The number of points to be retrieved.":"要检索的点数。\r\n","\r\n            Type of raw input.\r\n            ":"\r\n            原始输入的类型。\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_BLUE_TYPE = 0x827A\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_BLUE_TYPE = 0x827A\r\n            \r\n","\r\n            Specifies an array that is used to return the names of attached shader objects.\r\n            ":"\r\n            指定一个数组，用于返回附加着色器对象的名称。\r\n            \r\n","Specifies the created window's class. You can pass InputOutput, InputOnly, or CopyFromParent. A class of CopyFromParent means the class is taken from the parent.":"指定创建的窗口的类。您可以传递 InputOutput、InputOnly 或 CopyFromParent。 CopyFromParent 类意味着该类取自父类。\r\n","\r\n            Original was GL_LO_SCALE_NV = 0x870F\r\n            ":"\r\n            原来是 GL_LO_SCALE_NV = 0x870F\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F\r\n            \r\n","\r\n            Original was GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559\r\n            ":"\r\n            原来是 GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559\r\n            \r\n","\r\n            Original was GL_DEPTH32F_STENCIL8_NV = 0x8DAC\r\n            ":"\r\n            原来是 GL_DEPTH32F_STENCIL8_NV = 0x8DAC\r\n            \r\n","\r\n            Original was GL_OBJECT_LINEAR_NV = 0x2401\r\n            ":"\r\n            原来是 GL_OBJECT_LINEAR_NV = 0x2401\r\n            \r\n","\r\n            Original was GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2\r\n            ":"\r\n            原来是 GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2\r\n            \r\n"," is an arcade stick.\r\n            ":" 是街机摇杆。\r\n            \r\n","\r\n            Original was GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8\r\n            ":"\r\n            原来是 GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8\r\n            \r\n"," \r\n            Specifies the accumulation buffer operation. Symbolic constants Accum, Load, Add, Mult, and Return are accepted.\r\n            ":" \r\n            指定累积缓冲操作。接受符号常量 Accum、Load、Add、Mult 和 Return。\r\n            \r\n","\r\n            Gets or sets an OpenTK.Vector3 with the Z, X, and W components of this instance.\r\n            ":"\r\n            获取或设置具有此实例的 Z、X 和 W 组件的 OpenTK.Vector3。\r\n            \r\n","[requires: v1.1]\r\n            Generate texture names\r\n            ":"[要求：v1.1]\r\n            生成纹理名称\r\n            \r\n","[length: pname] \r\n            Specifies the value that pname will be set to.\r\n            ":"[长度：pname]\r\n            指定 pname 将设置为的值。\r\n            \r\n"," \r\n            Specifies the target texture, which must be either Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray, TextureRectangle, or TextureCubeMap.\r\n            ":" \r\n            指定目标纹理，它必须是 Texture1D、Texture2D、Texture3D、Texture1DArray、Texture2DArray、TextureRectangle 或 TextureCubeMap。\r\n            \r\n","[length: 4] \r\n            Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0.\r\n            ":"[长度：4]\r\n            指定指向数组中第一个顶点的第一个坐标的指针。初始值为 0。\r\n            \r\n"," \r\n            Specifies a symbolic constant indicating a GL capability.\r\n            ":" \r\n            指定表示 GL 功能的符号常量。\r\n            \r\n","\r\n            Original was GL_CURRENT_QUERY_EXT = 0x8865\r\n            ":"\r\n            原来是 GL_CURRENT_QUERY_EXT = 0x8865\r\n            \r\n","\r\n            Original was GL_LUMINANCE_INTEGER_EXT = 0x8D9C\r\n            ":"\r\n            原来是 GL_LUMINANCE_INTEGER_EXT = 0x8D9C\r\n            \r\n","\r\n            Original was GL_MATRIX_INDEX_ARRAY_OES = 0x8844\r\n            ":"\r\n            原来是 GL_MATRIX_INDEX_ARRAY_OES = 0x8844\r\n            \r\n","\r\n            Used in GL.Oes.GetBufferPointer\r\n            ":"\r\n            在 GL.Oes.GetBufferPointer 中使用\r\n            \r\n","\r\n            Gets or sets a value indicating whether to use SDL2 fullscreen-desktop mode\r\n            for fullscreen windows. When true, then GameWindow instances will not change\r\n            DisplayDevice resolutions when going fullscreen. When false, fullscreen GameWindows\r\n            will change the device resolution to match their size.\r\n            ":"\r\n            获取或设置一个值，该值指示是否使用 SDL2 全屏桌面模式\r\n            对于全屏窗口。当为真时，GameWindow 实例将不会改变\r\n            全屏显示时的 DisplayDevice 分辨率。为 false 时，全屏 GameWindows\r\n            将更改设备分辨率以匹配其大小。\r\n            \r\n","\r\n            Specifies the target texture. Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z.\r\n            ":"\r\n            指定目标纹理。必须是 GL_TEXTURE_2D、GL_TEXTURE_CUBE_MAP_POSITIVE_X、GL_TEXTURE_CUBE_MAP_NEGATIVE_X、GL_TEXTURE_CUBE_MAP_POSITIVE_Y、GL_TEXTURE_CUBE_MAP_NEGATIVE_Y、GL_TEXTURE_CUBE_MAP_POSITIVE_Z 或 GL_TEXTURE_CUBE_MAP_NEGATIVE_Z。\r\n            \r\n","[requires: v3.0]\r\n            Start transform feedback operation\r\n            ":"[要求：v3.0]\r\n            开始变换反馈操作\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Define an array of normals\r\n            ":"[要求：v1.0 和 1.0]\r\n            定义法线数组\r\n            \r\n","\r\n            Original was GL_UNCORRELATED_NV = 0x9282\r\n            ":"\r\n            原来是 GL_UNCORRELATED_NV = 0x9282\r\n            \r\n","\r\n            Queue status flags for GetQueueStatus() and MsgWaitForMultipleObjects()\r\n            ":"\r\n            GetQueueStatus() 和 MsgWaitForMultipleObjects() 的队列状态标志\r\n            \r\n","\r\n            Scales the specified value linearly between min and max.\r\n            ":"\r\n            在最小值和最大值之间线性缩放指定值。\r\n            \r\n","\r\n            Original was GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802\r\n            ":"\r\n            原来是 GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802\r\n            \r\n","\r\n            Used in GL.Arb.ClampColor\r\n            ":"\r\n            用于 GL.Arb.ClampColor\r\n            \r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C\r\n            \r\n"," \r\n            Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.\r\n            ":" \r\n            指定活动纹理单元的目标纹理，它必须是 Texture2D 或 TextureCubeMap。\r\n            \r\n"," \r\n            The filter to be retrieved. Must be one of Convolution1D or Convolution2D.\r\n            ":" \r\n            要检索的过滤器。必须是 Convolution1D 或 Convolution2D 之一。\r\n            \r\n","\r\n            Used in GL.TexParameter, GL.Ext.TexParameterI\r\n            ":"\r\n            用于GL.TexParameter, GL.Ext.TexParameterI\r\n            \r\n","The keypad subtract key.":"小键盘减法键。\r\n","\r\n            Original was GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49\r\n            ":"\r\n            原来是 GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49\r\n            \r\n","\r\n            Original was GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42\r\n            ":"\r\n            原来是 GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42\r\n            \r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY_EXT = 0x8079\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY_EXT = 0x8079\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Draw multiple instances of a set of elements\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            绘制一组元素的多个实例\r\n            \r\n","\r\n            Original was GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459\r\n            ":"\r\n            原来是 GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3\r\n            \r\n","\r\n            Original was GL_SAMPLER_2D_SHADOW_ARB = 0x8B62\r\n            ":"\r\n            原来是 GL_SAMPLER_2D_SHADOW_ARB = 0x8B62\r\n            \r\n","[requires: NV_read_buffer]\r\n            Select a color buffer source for pixels\r\n            ":"[需要：NV_read_buffer]\r\n            为像素选择颜色缓冲源\r\n            \r\n","The cursor position is always specified in screen coordinates and is not affected by the mapping mode of the window that contains the cursor.":"光标位置总是在屏幕坐标中指定，并且不受包含光标的窗口的映射模式的影响。\r\n","\r\n            Original was GL_RenderbufferStencilSize = 0X8d55\r\n            ":"\r\n            原来是 GL_RenderbufferStencilSize = 0X8d55\r\n            \r\n","\r\n            Original was GL_INTENSITY_ICC_SGIX = 0x8464\r\n            ":"\r\n            原来是 GL_INTENSITY_ICC_SGIX = 0x8464\r\n            \r\n","[requires: v3.2 or ARB_texture_multisample|VERSION_3_2]\r\n            Establish the data storage, format, dimensions, and number of samples of a multisample texture's image\r\n            ":"[要求：v3.2 或 ARB_texture_multisample|VERSION_3_2]\r\n            建立多样本纹理图像的数据存储、格式、维度和样本数\r\n            \r\n","\r\n            Used in GL.VertexAttribLPointer\r\n            ":"\r\n            在 GL.VertexAttribLPointer 中使用\r\n            \r\n","\r\n            Original was GL_SLUMINANCE8 = 0x8C47\r\n            ":"\r\n            原来是 GL_SLUMINANCE8 = 0x8C47\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85\r\n            \r\n","\r\n            Original was GL_RGBA_SNORM = 0x8F93\r\n            ":"\r\n            原来是 GL_RGBA_SNORM = 0x8F93\r\n            \r\n","\r\n            Original was GL_EDGE_FLAG_ARRAY_POINTER = 0x8093\r\n            ":"\r\n            原来是 GL_EDGE_FLAG_ARRAY_POINTER = 0x8093\r\n            \r\n"," property of the NativeWindow has changed.\r\n            ":"NativeWindow 的属性已更改。\r\n            \r\n","\r\n            Prefer an X11 OpenTK.Platform implementation,\r\n            even if a different implementation is available. This option\r\n            allows you to use X11 on Windows or Mac OS X when an\r\n            X11 server is installed. \r\n            ":"\r\n            更喜欢 X11 OpenTK.Platform 实现，\r\n            即使有不同的实现可用。这个选项\r\n            允许您在 Windows 或 Mac OS X 上使用 X11\r\n            X11 服务器已安装。\r\n            \r\n","\r\n            Used in GL.Arb.TexBuffer\r\n            ":"\r\n            在 GL.Arb.TexBuffer 中使用\r\n            \r\n"," \r\n            Specifies the type of data in the buffer bound to the ElementArrayBuffer binding.\r\n            ":" \r\n            指定绑定到 ElementArrayBuffer 绑定的缓冲区中的数据类型。\r\n            \r\n"," \r\n            Specifies the new value for the parameter given by pname.\r\n            ":" \r\n            指定由 pname 给出的参数的新值。\r\n            \r\n"," \r\n            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.\r\n            ":" \r\n            指定每个顶点的坐标数。必须为 2、3 或 4。初始值为 4。\r\n            \r\n","\r\n            Original was GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B\r\n            ":"\r\n            原来是 GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B\r\n            \r\n","\r\n            Original was GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E\r\n            ":"\r\n            原来是 GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E\r\n            \r\n"," \r\n            Specifies lowest level of detail of the view.\r\n            ":" \r\n            指定视图的最低级别详细信息。\r\n            \r\n","The tab key.":"选项卡键。\r\n","[requires: v1.1]\r\n            Specify a one-dimensional texture subimage\r\n            ":"[要求：v1.1]\r\n            指定一维纹理子图像\r\n            \r\n","\r\n            Gets or sets the value at row 3, column 2 of this instance.\r\n            ":"\r\n            获取或设置此实例第 3 行第 2 列的值。\r\n            \r\n","\r\n            Original was GL_DEPTH_SCALE = 0x0D1E\r\n            ":"\r\n            原来是 GL_DEPTH_SCALE = 0x0D1E\r\n            \r\n","\r\n            Original was GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC\r\n            ":"\r\n            原来是 GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC\r\n            \r\n","\r\n            calls the default raw input procedure to provide default processing for\r\n            any raw input messages that an application does not process.\r\n            This function ensures that every message is processed.\r\n            DefRawInputProc is called with the same parameters received by the window procedure.\r\n            ":"\r\n            调用默认的原始输入过程来提供默认处理\r\n            应用程序不处理的任何原始输入消息。\r\n            此函数确保处理每条消息。\r\n            DefRawInputProc 使用窗口过程接收的相同参数调用。\r\n            \r\n","\r\n            The hat is in its top-right position.\r\n            ":"\r\n            帽子位于右上角。\r\n            \r\n","\r\n            Original was GL_ACTIVE_STENCIL_FACE_EXT = 0x8911\r\n            ":"\r\n            原来是 GL_ACTIVE_STENCIL_FACE_EXT = 0x8911\r\n            \r\n","\r\n            Original was GL_BUFFER_SIZE = 0x8764\r\n            ":"\r\n            原来是 GL_BUFFER_SIZE = 0x8764\r\n            \r\n","\r\n            Original was GL_MATRIX16 = 0x88D0\r\n            ":"\r\n            原来是 GL_MATRIX16 = 0x88D0\r\n            \r\n","The twelfth button of the JoystickDevice.":"JoystickDevice 的第十二个按钮。\r\n","\r\n            Specify the distances to the nearer and farther depth clipping planes. These values are negative if the plane is to be behind the viewer.\r\n            ":"\r\n            指定到更近和更远的深度裁剪平面的距离。如果飞机位于观察者后面，则这些值为负。\r\n            \r\n","[requires: NV_transform_feedback]":"[需要：NV_transform_feedback]\r\n","The MouseButton to check.":"要检查的 MouseButton。\r\n","\r\n            Original was GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC\r\n            ":"\r\n            原来是 GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC\r\n            \r\n"," \r\n            Specifies an integer offset that will be added to glCallLists offsets to generate display-list names. The initial value is 0.\r\n            ":" \r\n            指定将添加到 glCallLists 偏移量以生成显示列表名称的整数偏移量。初始值为 0。\r\n            \r\n"," \r\n            Specifies the number of textures to be prioritized.\r\n            ":" \r\n            指定要优先处理的纹理数。\r\n            \r\n","\r\n            Specify the x, y, and z coordinates of a translation vector.\r\n            ":"\r\n            指定平移向量的 x、y 和 z 坐标。\r\n            \r\n","\r\n            Original was GL_DOUBLE_MAT3x2_EXT = 0x8F4B\r\n            ":"\r\n            原来是 GL_DOUBLE_MAT3x2_EXT = 0x8F4B\r\n            \r\n","[length: 2] \r\n            Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned.\r\n            ":"[长度：2]\r\n            指定两个整数数组的地址，实现的数字范围的编码将返回到该数组中。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT8_NV = 0x8FEC\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT8_NV = 0x8FEC\r\n            \r\n","\r\n            TRUE if the mouse has a wheel for horizontal scrolling; otherwise, FALSE.\r\n            ":"\r\n            如果鼠标具有用于水平滚动的滚轮，则为 TRUE；否则为 TRUE。否则为假。\r\n            \r\n","[requires: ARB_vertex_buffer_object]\r\n            Delete named buffer objects\r\n            ":"[需要：ARB_vertex_buffer_object]\r\n            删除命名缓冲区对象\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER11_NV = 0x8830\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER11_NV = 0x8830\r\n            \r\n","[requires: v1.0]\r\n            Specify the value used for depth buffer comparisons\r\n            ":"[要求：v1.0]\r\n            指定用于深度缓冲区比较的值\r\n            \r\n","\r\n            Original was GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72\r\n            ":"\r\n            原来是 GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72\r\n            \r\n","\r\n            Original was GL_ALPHA8I_EXT = 0x8D90\r\n            ":"\r\n            原来是 GL_ALPHA8I_EXT = 0x8D90\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_TYPE_EXT = 0x8082\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_TYPE_EXT = 0x8082\r\n            \r\n","\r\n            Used in GL.TexStorage3D\r\n            ":"\r\n            用于 GL.TexStorage3D\r\n            \r\n","\r\n            Original was GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3\r\n            ":"\r\n            原来是 GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_RED_TYPE = 0x8278\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_RED_TYPE = 0x8278\r\n            \r\n","\r\n            Original was GL_DOUBLE_MAT2x4_EXT = 0x8F4A\r\n            ":"\r\n            原来是 GL_DOUBLE_MAT2x4_EXT = 0x8F4A\r\n            \r\n"," \r\n            Specifies a pixel format for the returned data. The supported formats are StencilIndex, DepthComponent, DepthStencil, Red, Green, Blue, Rg, Rgb, Rgba, Bgr, Bgra, RedInteger, GreenInteger, BlueInteger, RgInteger, RgbInteger, RgbaInteger, BgrInteger, BgraInteger.\r\n            ":" \r\n            指定返回数据的像素格式。支持的格式有 StencilIndex、DepthComponent、DepthStencil、Red、Green、Blue、Rg、Rgb、Rgba、Bgr、Bgra、RedInteger、GreenInteger、BlueInteger、RgInteger、RgbInteger、RgbaInteger、BgrInteger、BgraInteger。\r\n            \r\n","\r\n            Original was GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0\r\n            ":"\r\n            原来是 GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0\r\n            \r\n","[requires: AMD_sparse_texture]":"[需要：AMD_sparse_texture]\r\n","\r\n            Original was GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8\r\n            ":"\r\n            原来是 GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8\r\n            \r\n","[requires: v3.0]\r\n            Start conditional rendering\r\n            ":"[要求：v3.0]\r\n            开始条件渲染\r\n            \r\n","\r\n            Original was GL_SPARE0_NV = 0x852E\r\n            ":"\r\n            原来是 GL_SPARE0_NV = 0x852E\r\n            \r\n","\r\n            Enumerates available VSync modes.\r\n            ":"\r\n            枚举可用的 VSync 模式。\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069\r\n            \r\n","\r\n            Original was GL_UNSIGNED_SHORT_5_6_5_REVERSED = 0x8364\r\n            ":"\r\n            原来是 GL_UNSIGNED_SHORT_5_6_5_REVERSED = 0x8364\r\n            \r\n"," \r\n            Specifies a set of program stages to bind to the program pipeline object.\r\n            ":" \r\n            指定一组程序阶段以绑定到程序管道对象。\r\n            \r\n"," \r\n            Specifies the size of the first and count\r\n            ":" \r\n            指定第一个和计数的大小\r\n            \r\n","\r\n            Specifies the vertical (y) coordinate of a point.\r\n            ":"\r\n            指定点的垂直 (y) 坐标。\r\n            \r\n","[requires: AMD_interleaved_elements]":"[需要：AMD_interleaved_elements]\r\n","\r\n            Used in GL.GetNamedRenderbufferParameter, GL.GetRenderbufferParameter\r\n            ":"\r\n            在GL.GetNamedRenderbufferParameter、GL.GetRenderbufferParameter中使用\r\n            \r\n","\r\n            Original was GL_HSL_HUE_NV = 0x92AD\r\n            ":"\r\n            原来是 GL_HSL_HUE_NV = 0x92AD\r\n            \r\n","\r\n            Original was GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9\r\n            ":"\r\n            原来是 GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9\r\n            \r\n","\r\n            Original was GL_SHADER_BINARY_DMP = 0x9250\r\n            ":"\r\n            原来是 GL_SHADER_BINARY_DMP = 0x9250\r\n            \r\n","\r\n            Original was GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144\r\n            ":"\r\n            原来是 GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144\r\n            \r\n","\r\n            Original was GL_BLEND_EQUATION_ALPHA = 0x883D\r\n            ":"\r\n            原来是 GL_BLEND_EQUATION_ALPHA = 0x883D\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5\r\n            \r\n"," \r\n            For glColorMaski, specifies the index of the draw buffer whose color mask to set.\r\n            ":" \r\n            对于 glColorMaski，指定要设置其颜色掩码的绘制缓冲区的索引。\r\n            \r\n","The roll (bank), rotation around Z axis":"横滚（bank），绕Z轴旋转\r\n","\r\n            Used in GL.BufferStorage, GL.NamedBufferStorage\r\n            ":"\r\n            用于GL.BufferStorage、GL.NamedBufferStorage\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT3_EXT = 0x8CE3\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT3_EXT = 0x8CE3\r\n            \r\n","\r\n            Original was GL_OP_MULTIPLY_MATRIX_EXT = 0x8798\r\n            ":"\r\n            原来是 GL_OP_MULTIPLY_MATRIX_EXT = 0x8798\r\n            \r\n","[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]\r\n            Invalidate the content of a buffer object's data store\r\n            ":"[要求：v4.3 或 ARB_invalidate_subdata|VERSION_4_3]\r\n            使缓冲区对象的数据存储的内容无效\r\n            \r\n","\r\n            Original was GL_R8UI = 0x8232\r\n            ":"\r\n            原来是 GL_R8UI = 0x8232\r\n            \r\n","\r\n            Used in GL.Sgix.GetListParameter, GL.Sgix.ListParameter\r\n            ":"\r\n            用于GL.Sgix.GetListParameter, GL.Sgix.ListParameter\r\n            \r\n","\r\n            Used in GL.CullFace\r\n            ":"\r\n            在 GL.CullFace 中使用\r\n            \r\n","Values lower than 1.0Hz are clamped to 0.0. Values higher than 500.0Hz are clamped to 200.0Hz.":"低于 1.0Hz 的值被限制为 0.0。高于 500.0Hz 的值被限制在 200.0Hz。\r\n","\r\n            Used in GL.GetTexParameter\r\n            ":"\r\n            在 GL.GetTexParameter 中使用\r\n            \r\n","\r\n            Original was GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B\r\n            ":"\r\n            原来是 GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER_OFFSET_EXT = 0x919D\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_OFFSET_EXT = 0x919D\r\n            \r\n"," \r\n            Specifies the symbolic name of a buffer object parameter. Accepted values are BufferAccess, BufferMapped, BufferSize, or BufferUsage.\r\n            ":" \r\n            指定缓冲区对象参数的符号名称。接受的值为 BufferAccess、BufferMapped、BufferSize 或 BufferUsage。\r\n            \r\n","[length: n] \r\n            Specifies an array in which the generated texture names are stored.\r\n            ":"[长度：n]\r\n            指定存储生成的纹理名称的数组。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Delete a sync object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            删除同步对象\r\n            \r\n"," is currently pressed.\r\n            ":" 当前被按下。\r\n            \r\n","\r\n            Raw input data as an array of bytes.\r\n            ":"\r\n            原始输入数据作为字节数组。\r\n            \r\n"," \r\n            Specifies the number of bytes contained in binary.\r\n            ":" \r\n            指定二进制中包含的字节数。\r\n            \r\n","\r\n            Original was GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D\r\n            \r\n","\r\n            Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST, GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES, and GL_PACK_ALIGNMENT. Six more affect the unpacking of pixel data from memory: GL_UNPACK_SWAP_BYTES, GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS, GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES, and GL_UNPACK_ALIGNMENT.\r\n            ":"\r\n            指定要设置的参数的符号名称。六个值会影响像素数据打包到内存中：GL_PACK_SWAP_BYTES、GL_PACK_LSB_FIRST、GL_PACK_ROW_LENGTH、GL_PACK_IMAGE_HEIGHT、GL_PACK_SKIP_PIXELS、GL_PACK_SKIP_ROWS、GL_PACK_SKIP_IMAGES 和 GL_PACK_ALIGNMENT。还有六个影响从内存中解包像素数据：GL_UNPACK_SWAP_BYTES、GL_UNPACK_LSB_FIRST、GL_UNPACK_ROW_LENGTH、GL_UNPACK_IMAGE_HEIGHT、GL_UNPACK_SKIP_PIXELS、GL_UNPACK_SKIP_ROWS、GL_UNPACK_SKIP_IMAGES 和 GL_UNPACK_ALIGNMENT。\r\n            \r\n","\r\n            Original was GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x82FC\r\n            ":"\r\n            原来是 GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x82FC\r\n            \r\n"," \r\n            Specifies the number of buffer object names to be generated.\r\n            ":" \r\n            指定要生成的缓冲区对象名称的数量。\r\n            \r\n"," \r\n            Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.\r\n            ":" \r\n            指定单值纹理参数的符号名称。 pname 可以是以下之一：TextureMinFilter、TextureMagFilter、TextureWrapS 或 TextureWrapT。\r\n            \r\n","[requires: SUNX_constant_data]":"[需要：SUNX_constant_data]\r\n","[requires: NV_path_rendering]":"[要求：NV_path_rendering]\r\n","\r\n            Original was GL_ACTIVE_PROGRAM_EXT = 0x8259\r\n            ":"\r\n            原来是 GL_ACTIVE_PROGRAM_EXT = 0x8259\r\n            \r\n","\r\n            Original was GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33\r\n            ":"\r\n            原来是 GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33\r\n            \r\n","[length: nbuffers]":"[长度：nbuffers]\r\n","[requires: v1.0 and 1.0]\r\n            Multiply the current matrix by a rotation matrix\r\n            ":"[要求：v1.0 和 1.0]\r\n            将当前矩阵乘以旋转矩阵\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA\r\n            \r\n","\r\n            Original was GL_PATH_COMPUTED_LENGTH_NV = 0x90A0\r\n            ":"\r\n            原来是 GL_PATH_COMPUTED_LENGTH_NV = 0x90A0\r\n            \r\n"," \r\n            Specifies the number of samples to be used for the renderbuffer object's storage.\r\n            ":" \r\n            指定用于渲染缓冲区对象存储的样本数。\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Enable and disable writing of frame buffer color components\r\n            ":"[要求：v1.0 和 1.0]\r\n            启用和禁用帧缓冲区颜色分量的写入\r\n            \r\n","\r\n            Original was GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB\r\n            ":"\r\n            原来是 GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_STREAMS_ATI = 0x876B\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_STREAMS_ATI = 0x876B\r\n            \r\n","\r\n            Gets a readonly IList containing all available OpenTK.Input.JoystickDevices.\r\n            ":"\r\n            获取包含所有可用 OpenTK.Input.JoystickDevices 的只读 IList。\r\n            \r\n","\r\n            Original was GL_OPERAND1_RGB = 0x8591\r\n            ":"\r\n            原来是 GL_OPERAND1_RGB = 0x8591\r\n            \r\n","\r\n            Original was GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75\r\n            ":"\r\n            原来是 GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75\r\n            \r\n","\r\n            Frees the memory used by an X structure. Only use on unmanaged structures!\r\n            ":"\r\n            释放 X 结构使用的内存。仅在非托管结构上使用！\r\n            \r\n"," \r\n            Specifies which matrix stack is the target for subsequent matrix operations. Three values are accepted: Modelview, Projection, and Texture. The initial value is Modelview. Additionally, if the ARB_imaging extension is supported, Color is also accepted.\r\n            ":" \r\n            指定哪个矩阵堆栈是后续矩阵运算的目标。接受三个值：模型视图、投影和纹理。初始值为模型视图。此外，如果支持 ARB_imaging 扩展，也可以接受 Color。\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622\r\n            \r\n","\r\n            Original was GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C\r\n            ":"\r\n            原来是 GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C\r\n            \r\n","[in] Handle to the window or control containing the text.":"[在]包含文本的窗口或控件的句柄。\r\n","\r\n            Specifies the position of the top edge of the window.\r\n            ":"\r\n            指定窗口上边缘的位置。\r\n            \r\n","\r\n            Original was GL_CULL_MODES_NV = 0x86E0\r\n            ":"\r\n            原来是 GL_CULL_MODES_NV = 0x86E0\r\n            \r\n"," \r\n            Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.\r\n            ":" \r\n            指定索引中值的类型。必须是 UnsignedByte、UnsignedShort 或 UnsignedInt 之一。\r\n            \r\n","\r\n            Note  Because the lpszClass member can contain a pointer to a local (and thus inaccessable) atom,\r\n            do not obtain the class name by using this member. Use the GetClassName function instead.\r\n            ":"\r\n            注意 因为 lpszClass 成员可以包含指向本地（因此不可访问）原子的指针，\r\n            不要使用该成员获取类名。请改用 GetClassName 函数。\r\n            \r\n","The value, scaled linearly between min and max":"在最小值和最大值之间线性缩放的值\r\n","\r\n            Used in GL.NV.GetFence, GL.NV.SetFence\r\n            ":"\r\n            用于GL.NV.GetFence、GL.NV.SetFence\r\n            \r\n","\r\n            Used in GL.NV.EvalMap, GL.NV.GetMapAttribParameter and 4 other functions\r\n            ":"\r\n            用于 GL.NV.EvalMap、GL.NV.GetMapAttribParameter 和其他 4 个函数\r\n            \r\n"," \r\n            Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.\r\n            ":" \r\n            指定数组中每个组件的数据类型。接受符号常量 Byte、UnsignedByte、Short、UnsignedShort、Fixed 或 Float。初始值为浮点数。\r\n            \r\n","[length: numCoords,coordType]":"[长度：numCoords，坐标类型]\r\n","\r\n            Used in GL.NV.CoverFillPathInstanced, GL.NV.CoverFillPath and 37 other functions\r\n            ":"\r\n            用于 GL.NV.CoverFillPathInstanced、GL.NV.CoverFillPath 和 37 个其他函数\r\n            \r\n","\r\n            Original was GL_TEXTURE_BUFFER_ARB = 0x8C2A\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_ARB = 0x8C2A\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB\r\n            \r\n","\r\n            Gets an integer representing the relative y movement of the pointer, in pixel coordinates.\r\n            ":"\r\n            获取一个整数，表示指针在像素坐标中的相对 y 移动。\r\n            \r\n","\r\n            Used in GL.Ext.GetSeparableFilter, GL.Ext.SeparableFilter2D\r\n            ":"\r\n            用于GL.Ext.GetSeparableFilter, GL.Ext.SeparableFilter2D\r\n            \r\n","\r\n            Original was GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4\r\n            ":"\r\n            原来是 GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654\r\n            \r\n","\r\n            Original was GL_POINT_SIZE_MAX_SGIS = 0x8127\r\n            ":"\r\n            原来是 GL_POINT_SIZE_MAX_SGIS = 0x8127\r\n            \r\n","\r\n            Gets the absolute horizontal offset of the wheel,\r\n            or 0 if no horizontal scroll wheel exists.\r\n            ":"\r\n            获取车轮的绝对水平偏移量，\r\n            如果不存在水平滚轮，则为 0。\r\n            \r\n"," \r\n            Specifies the number of scissor boxes to modify.\r\n            ":" \r\n            指定要修改的剪刀框数。\r\n            \r\n","\r\n            Specifies the window position.\r\n            ":"\r\n            指定窗口位置。\r\n            \r\n"," \r\n            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.\r\n            ":" \r\n            指向符号常量数组的指针，这些常量指定将写入片段颜色或数据值的缓冲区。\r\n            \r\n","\r\n            Original was GL_VENDOR = 0x1F00\r\n            ":"\r\n            原来是 GL_VENDOR = 0x1F00\r\n            \r\n"," \r\n            Specifies the number of instances of the indexed geometry that should be drawn.\r\n            ":" \r\n            指定应绘制的索引几何体的实例数。\r\n            \r\n","[requires: EXT_draw_buffers_indexed]":"[需要：EXT_draw_buffers_indexed]\r\n","\r\n            Original was GL_RGB565_OES = 0x8D62\r\n            ":"\r\n            原来是 GL_RGB565_OES = 0x8D62\r\n            \r\n","\r\n            Original was GL_UnsignedShort = 0X1403\r\n            ":"\r\n            原来是 GL_UnsignedShort = 0X1403\r\n            \r\n"," \r\n            The value to clear a stencil render buffer to.\r\n            ":" \r\n            清除模板渲染缓冲区的值。\r\n            \r\n","\r\n            Original was GL_EQUIV = 0x1509\r\n            ":"\r\n            原来是 GL_EQUIV = 0x1509\r\n            \r\n"," \r\n            Specifies the index of the query target upon which to begin the query.\r\n            ":" \r\n            指定开始查询的查询目标的索引。\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2\r\n            ":"\r\n            原来是 GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2\r\n            \r\n","\r\n            Original was GL_CON_12_ATI = 0x894D\r\n            ":"\r\n            原来是 GL_CON_12_ATI = 0x894D\r\n            \r\n"," structure\r\n            that specifies the external bounds of this window, in screen coordinates.\r\n            The coordinates are specified in device-independent points and\r\n            include the title bar, borders and drawing area of the window.\r\n            ":" 结构\r\n            在屏幕坐标中指定此窗口的外部边界。\r\n            坐标在与设备无关的点中指定，并且\r\n            包括窗口的标题栏、边框和绘图区。\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Delete vertex array objects\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            删除顶点数组对象\r\n            \r\n","[requires: OES_query_matrix]":"[要求：OES_query_matrix]\r\n","\r\n            Original was GL_4PASS_1_SGIS = 0x80A5\r\n            ":"\r\n            原来是 GL_4PASS_1_SGIS = 0x80A5\r\n            \r\n","\r\n            Original was GL_COLOR_INDEX = 0x1900\r\n            ":"\r\n            原来是 GL_COLOR_INDEX = 0x1900\r\n            \r\n"," \r\n            Specify the target of the operation. target must be Texture2DMultisample or ProxyTexture2DMultisample.\r\n            ":" \r\n            指定操作的目标。目标必须是 Texture2DMultisample 或 ProxyTexture2DMultisample。\r\n            \r\n","[requires: ATI_pn_triangles]":"[需要：ATI_pn_triangles]\r\n","[requires: NV_instanced_arrays]\r\n            Modify the rate at which generic vertex attributes advance during instanced rendering\r\n            ":"[需要：NV_instanced_arrays]\r\n            修改实例化渲染期间通用顶点属性前进的速率\r\n            \r\n","The ContextHandle to convert.":"要转换的 ContextHandle。\r\n","\r\n            Original was GL_CUBIC_EXT = 0x8334\r\n            ":"\r\n            原来是 GL_CUBIC_EXT = 0x8334\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Return sampler parameter values\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            返回采样器参数值\r\n            \r\n","\r\n            Original was GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80\r\n            ":"\r\n            原来是 GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80\r\n            \r\n"," \r\n            Specifies the diameter of rasterized points. The initial value is 1.\r\n            ":" \r\n            指定光栅化点的直径。初始值为 1。\r\n            \r\n","\r\n            Original was GL_CON_6_ATI = 0x8947\r\n            ":"\r\n            原来是 GL_CON_6_ATI = 0x8947\r\n            \r\n","\r\n            Original was GL_FRAGMENT_SUBROUTINE = 0x92EC\r\n            ":"原来是 GL_FRAGMENT_SUBROUTINE = 0x92EC\r\n            \r\n","\r\n            Original was GL_PROVOKING_VERTEX = 0x8E4F\r\n            ":"\r\n            原来是 GL_PROVOKING_VERTEX = 0x8E4F\r\n            \r\n","The sixth axis of the JoystickDevice.":"JoystickDevice 的第六轴。\r\n","[requires: v2.0]\r\n            Specify the value of a uniform variable for the current program object\r\n            ":"[要求：v2.0]\r\n            为当前程序对象指定统一变量的值\r\n            \r\n","\r\n            Original was GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743\r\n            ":"\r\n            原来是 GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743\r\n            \r\n","\r\n            Build a quaternion from the given axis and angle\r\n            ":"\r\n            从给定的轴和角度构建四元数\r\n            \r\n","\r\n            Specifies a symbolic value representing a shading technique. Accepted values are GL_FLAT and GL_SMOOTH. The initial value is GL_SMOOTH.\r\n            ":"\r\n            指定表示着色技术的符号值。接受的值为 GL_FLAT 和 GL_SMOOTH。初始值为 GL_SMOOTH。\r\n            \r\n","\r\n            Original was GL_FloatMat3 = 0X8b5b\r\n            ":"\r\n            原来是 GL_FloatMat3 = 0X8b5b\r\n            \r\n","\r\n            Original was GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E\r\n            ":"\r\n            原来是 GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E\r\n            \r\n","\r\n            Original was GL_TEXTURE27_ARB = 0x84DB\r\n            ":"\r\n            原来是 GL_TEXTURE27_ARB = 0x84DB\r\n            \r\n","\r\n            Scale the given quaternion to unit length\r\n            ":"\r\n            将给定的四元数缩放到单位长度\r\n            \r\n","The number 3 key.":"3 号键。\r\n"," \r\n            Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of AnySamplesPassed, AnySamplesPassedConservative, or TransformFeedbackPrimitivesWritten.\r\n            ":" \r\n            指定在 glBeginQuery 和后续的 glEndQuery 之间建立的查询对象的目标类型。符号常量必须是 AnySamplesPassed、AnySamplesPassedConservative 或 TransformFeedbackPrimitivesWritten 之一。\r\n            \r\n","\r\n            Original was GL_COLOR_INDEX2_EXT = 0x80E3\r\n            ":"\r\n            原来是 GL_COLOR_INDEX2_EXT = 0x80E3\r\n            \r\n","\r\n            Original was GL_DUAL_ALPHA8_SGIS = 0x8111\r\n            ":"\r\n            原来是 GL_DUAL_ALPHA8_SGIS = 0x8111\r\n            \r\n","\r\n            Get or set the desired ":"\r\n            获取或设置所需的\r\n","\r\n            Original was GL_TEXTURE_DEFORMATION_SGIX = 0x8195\r\n            ":"\r\n            原来是 GL_TEXTURE_DEFORMATION_SGIX = 0x8195\r\n            \r\n"," \r\n            Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.\r\n            ":" \r\n            指定对象参数。接受的符号名称是 DeleteStatus、LinkStatus、ValidateStatus、InfoLogLength、AttachedShaders、ActiveAttributes、ActiveAttributeMaxLength、ActiveUniforms、ActiveUniformMaxLength。\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_ATTRIBS = 0x8869\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_ATTRIBS = 0x8869\r\n            \r\n"," for the B button.\r\n            ":" 对于 B 按钮。\r\n            \r\n","[requires: EXT_direct_state_access|EXT_separate_shader_objects]":"[需要：EXT_direct_state_access|EXT_separate_shader_objects]\r\n","\r\n            Original was GL_QUERY_WAIT = 0x8E13\r\n            ":"\r\n            原来是 GL_QUERY_WAIT = 0x8E13\r\n            \r\n","[requires: EXT_histogram]\r\n            Define minmax table\r\n            ":"[需要：EXT_histogram]\r\n            定义最小最大表\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3\r\n            \r\n","\r\n            Original was GL_OP_RECIP_SQRT_EXT = 0x8795\r\n            ":"\r\n            原来是 GL_OP_RECIP_SQRT_EXT = 0x8795\r\n            \r\n","\r\n            Original was GL_RGB10 = 0x8052\r\n            ":"\r\n            原来是 GL_RGB10 = 0x8052\r\n            \r\n","\r\n            Original was GL_COMBINE_EXT = 0x8570\r\n            ":"\r\n            原来是 GL_COMBINE_EXT = 0x8570\r\n            \r\n","\r\n            Original was GL_MODELVIEW7_ARB = 0x8727\r\n            ":"\r\n            原来是 GL_MODELVIEW7_ARB = 0x8727\r\n            \r\n","\r\n            Original was GL_MATRIX14_ARB = 0x88CE\r\n            ":"\r\n            原来是 GL_MATRIX14_ARB = 0x88CE\r\n            \r\n","[requires: v3.2 or ARB_sync|VERSION_3_2]\r\n            Delete a sync object\r\n            ":"[要求：v3.2 或 ARB_sync|VERSION_3_2]\r\n            删除同步对象\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E7F\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E7F\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Specify values to record in transform feedback buffers\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            指定要记录在变换反馈缓冲区中的值\r\n            \r\n","\r\n            Original was GL_TEXTURE_ALPHA_SIZE = 0x805F\r\n            ":"\r\n            原来是 GL_TEXTURE_ALPHA_SIZE = 0x805F\r\n            \r\n","\r\n            Original was GL_SAMPLE_MASK_VALUE = 0x8E52\r\n            ":"\r\n            原来是 GL_SAMPLE_MASK_VALUE = 0x8E52\r\n            \r\n","[requires: EXT_gpu_shader4]\r\n            Specify the value of a uniform variable for the current program object\r\n            ":"[需要：EXT_gpu_shader4]\r\n            为当前程序对象指定统一变量的值\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Return error information\r\n            ":"[要求：v1.0 和 1.0]\r\n            返回错误信息\r\n            \r\n","\r\n            Specifies the value that pname is set to.\r\n            ":"\r\n            指定 pname 设置的值。\r\n            \r\n","\r\n            Defines the raw input data coming from the specified mouse.\r\n            ":"\r\n            定义来自指定鼠标的原始输入数据。\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 0x8517\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 0x8517\r\n            \r\n","The title of the GameWindow.":"游戏窗口的标题。\r\n","[requires: NV_bindless_multi_draw_indirect_count]":"[需要：NV_bindless_multi_draw_indirect_count]\r\n","\r\n            Original was GL_PALETTE8_RGB5_A1_OES = 0x8B99\r\n            ":"\r\n            原来是 GL_PALETTE8_RGB5_A1_OES = 0x8B99\r\n            \r\n","True if the extension is supported by the given context, false otherwise":"如果给定上下文支持扩展，则为 True，否则为 false\r\n","\r\n            Specifies the format of the pixel data. The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.\r\n            ":"\r\n            指定像素数据的格式。接受以下符号值：GL_RED、GL_RG、GL_RGB、GL_BGR、GL_RGBA 和 GL_BGRA。\r\n            \r\n","[requires: SGIS_detail_texture]":"[要求：SGIS_detail_texture]\r\n","\r\n            Original was GL_DEPTH_BUFFER_BIT4_QCOM = 0x00001000\r\n            ":"\r\n            原来是 GL_DEPTH_BUFFER_BIT4_QCOM = 0x00001000\r\n            \r\n"," \r\n            The number of work groups to be launched in the X dimension.\r\n            ":" \r\n            X 维度要启动的工作组的数量。\r\n            \r\n","\r\n            Original was GL_CONTRAST_NV = 0x92A1\r\n            ":"\r\n            原来是 GL_CONTRAST_NV = 0x92A1\r\n            \r\n","\r\n            Gets an OpenTK.Vector4 with the Y, Y, W, and Z components of this instance.\r\n            ":"\r\n            获取具有此实例的 Y、Y、W 和 Z 组件的 OpenTK.Vector4。\r\n            \r\n","[length: target,level,format,type]":"[长度：目标、级别、格式、类型]\r\n","\r\n            Original was GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11\r\n            ":"\r\n            原来是 GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11\r\n            \r\n","\r\n            Original was GL_ShaderBinaryFormats = 0X8df8\r\n            ":"\r\n            原来是 GL_ShaderBinaryFormats = 0X8df8\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 0x8D44\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 0x8D44\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83\r\n            \r\n","\r\n            Original was GL_UNSIGNED_NORMALIZED = 0x8C17\r\n            ":"\r\n            原来是 GL_UNSIGNED_NORMALIZED = 0x8C17\r\n            \r\n","[requires: v1.0]\r\n            Copy pixels into a 2D texture image\r\n            ":"[要求：v1.0]\r\n            将像素复制到二维纹理图像中\r\n            \r\n","\r\n            Original was GL_SAMPLER_1D_ARB = 0x8B5D\r\n            ":"\r\n            原来是 GL_SAMPLER_1D_ARB = 0x8B5D\r\n            \r\n","\r\n            Original was GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D\r\n            ":"\r\n            原来是 GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D\r\n            \r\n","\r\n            Original was GL_CONSTANT_NV = 0x8576\r\n            ":"\r\n            原来是 GL_CONSTANT_NV = 0x8576\r\n            \r\n","The left control key.":"左控制键。\r\n","\r\n            Original was GL_INDEX_ARRAY_STRIDE_EXT = 0x8086\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_STRIDE_EXT = 0x8086\r\n            \r\n","\r\n            Original was GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369\r\n            ":"\r\n            原来是 GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369\r\n            \r\n","\r\n            Original was GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83\r\n            ":"\r\n            原来是 GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F\r\n            \r\n"," \r\n            Specifies the byte offset between consecutive normals. If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0.\r\n            ":" \r\n            指定连续法线之间的字节偏移量。如果步幅为 0，则法线被理解为紧密排列在数组中。初始值为 0。\r\n            \r\n","\r\n            Original was GL_FRAGMENT_INPUT_NV = 0x936D\r\n            ":"\r\n            原来是 GL_FRAGMENT_INPUT_NV = 0x936D\r\n            \r\n","\r\n            Original was GL_CON_0_ATI = 0x8941\r\n            ":"\r\n            原来是 GL_CON_0_ATI = 0x8941\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_COORDS_NV = 0x8871\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_COORDS_NV = 0x8871\r\n            \r\n"," \r\n            The window coordinates of the left corner of the row of pixels to be copied.\r\n            ":" \r\n            要复制的像素行左角的窗口坐标。\r\n            \r\n","\r\n            The X component of the Vector4.\r\n            ":"\r\n            Vector4 的 X 分量。\r\n            \r\n","[requires: AMD_occlusion_query_event]":"[需要：AMD_occlusion_query_event]\r\n","\r\n            Original was GL_NV_fence = 1\r\n            ":"\r\n            原来是 GL_NV_fence = 1\r\n            \r\n","\r\n            Original was GL_INTERNALFORMAT_RED_SIZE = 0x8271\r\n            ":"\r\n            原来是 GL_INTERNALFORMAT_RED_SIZE = 0x8271\r\n            \r\n","[requires: v4.0]\r\n            Specify the equation used for both the RGB blend equation and the Alpha blend equation\r\n            ":"[要求：v4.0]\r\n            指定用于 RGB 混合方程和 Alpha 混合方程的方程\r\n            \r\n","\r\n            Defines the interface for a native window. \r\n            ":"\r\n            定义本机窗口的界面。\r\n            \r\n","\r\n            Original was GL_FRAGMENT_ALPHA_MODULATE_IMG = 0x8C08\r\n            ":"\r\n            原来是 GL_FRAGMENT_ALPHA_MODULATE_IMG = 0x8C08\r\n            \r\n","\r\n            Original was GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661\r\n            ":"\r\n            原来是 GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661\r\n            \r\n","\r\n            Constructs a new Vector4.\r\n            ":"\r\n            构造一个新的 Vector4。\r\n            \r\n","\r\n            Original was GL_CONVEX_HULL_NV = 0x908B\r\n            ":"\r\n            原来是 GL_CONVEX_HULL_NV = 0x908B\r\n            \r\n","\r\n            Original was GL_FramebufferIncompleteAttachment = 0X8cd6\r\n            ":"\r\n            原来是 GL_FramebufferIncompleteAttachment = 0X8cd6\r\n            \r\n","[requires: ANGLE_instanced_arrays]\r\n            Modify the rate at which generic vertex attributes advance during instanced rendering\r\n            ":"[需要：ANGLE_instanced_arrays]\r\n            修改实例化渲染期间通用顶点属性前进的速率\r\n            \r\n"," \r\n            Specifies the generic vertex attribute parameter to be returned.\r\n            ":" \r\n            指定要返回的通用顶点属性参数。\r\n            \r\n","\r\n            Original was GL_GREEN_BIAS = 0x0D19\r\n            ":"\r\n            原来是 GL_GREEN_BIAS = 0x0D19\r\n            \r\n","\r\n            Pointer to a one-dimensional array of pixel data that is processed to build the row filter kernel.\r\n            ":"\r\n            指向经过处理以构建行过滤器内核的一维像素数据数组的指针。\r\n            \r\n","[requires: EXT_texture_array|NV_geometry_program4]\r\n            Attach a single layer of a texture to a framebuffer\r\n            ":"[需要：EXT_texture_array|NV_geometry_program4]\r\n            将单层纹理附加到帧缓冲区\r\n            \r\n","\r\n            Builds a rotation matrix for a rotation around the z-axis.\r\n            ":"\r\n            构建围绕 z 轴旋转的旋转矩阵。\r\n            \r\n","\r\n            Original was GL_INT_IMAGE_2D_EXT = 0x9058\r\n            ":"\r\n            原来是 GL_INT_IMAGE_2D_EXT = 0x9058\r\n            \r\n","\r\n            Original was GL_TEXTURE_BASE_LEVEL = 0x813C\r\n            ":"\r\n            原来是 GL_TEXTURE_BASE_LEVEL = 0x813C\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Generate framebuffer object names\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            生成帧缓冲区对象名称\r\n            \r\n","\r\n            Original was GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35\r\n            ":"\r\n            原来是 GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35\r\n            \r\n","\r\n            Used in GL.CompressedTexSubImage2D, GL.CompressedTexSubImage3D and 9 other functions\r\n            ":"\r\n            用于 GL.CompressedTexSubImage2D、GL.CompressedTexSubImage3D 和其他 9 个函数\r\n            \r\n","\r\n            Original was GL_TextureWrapR = 0x8072\r\n            ":"\r\n            原来是 GL_TextureWrapR = 0x8072\r\n            \r\n","\r\n            Original was GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242\r\n            ":"\r\n            原来是 GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242\r\n            \r\n","\r\n            Original was GL_MAJOR_VERSION = 0x821B\r\n            ":"\r\n            原来是 GL_MAJOR_VERSION = 0x821B\r\n            \r\n","\r\n            Original was GL_STREAM_DRAW = 0x88E0\r\n            ":"\r\n            原来是 GL_STREAM_DRAW = 0x88E0\r\n            \r\n","\r\n            Original was GL_TIME_ELAPSED_EXT = 0x88BF\r\n            ":"\r\n            原来是 GL_TIME_ELAPSED_EXT = 0x88BF\r\n            \r\n","\r\n            Original was GL_FUNC_REVERSE_SUBTRACT = 0x800B\r\n            ":"\r\n            原来是 GL_FUNC_REVERSE_SUBTRACT = 0x800B\r\n            \r\n","[requires: v1.0]\r\n            Enable or disable client-side capability\r\n            ":"[要求：v1.0]\r\n            启用或禁用客户端功能\r\n            \r\n","\r\n            Original was GL_MAX_VARYING_FLOATS = 0x8B4B\r\n            ":"\r\n            原来是 GL_MAX_VARYING_FLOATS = 0x8B4B\r\n            \r\n","\r\n            Original was GL_Dither = 0X0bd0\r\n            ":"\r\n            原来是 GL_Dither = 0X0bd0\r\n            \r\n","\r\n            Used in GL.DebugMessageInsert, GL.GetDebugMessageLog and 2 other functions\r\n            ":"\r\n            用于 GL.DebugMessageInsert、GL.GetDebugMessageLog 和其他 2 个函数\r\n            \r\n"," \r\n            Specifies the target to which the texture whose mimaps to generate is bound. target must be Texture1D, Texture2D, Texture3D, Texture1DArray, Texture2DArray or TextureCubeMap.\r\n            ":" \r\n            指定要生成其 mimap 的纹理绑定到的目标。目标必须是 Texture1D、Texture2D、Texture3D、Texture1DArray、Texture2DArray 或 TextureCubeMap。\r\n            \r\n","\r\n            Original was GL_GREEN = 0x1904\r\n            ":"\r\n            原来是 GL_GREEN = 0x1904\r\n            \r\n","\r\n            Original was GL_REG_20_ATI = 0x8935\r\n            ":"\r\n            原来是 GL_REG_20_ATI = 0x8935\r\n            \r\n","\r\n            Original was GL_INTENSITY8_EXT = 0x804B\r\n            ":"\r\n            原来是 GL_INTENSITY8_EXT = 0x804B\r\n            \r\n","\r\n            Used in GL.FramebufferRenderbuffer, GL.FramebufferTexture2D and 5 other functions\r\n            ":"\r\n            用于GL.FramebufferRenderbuffer、GL.FramebufferTexture2D等5个函数\r\n            \r\n","\r\n            Compares this Quaternion instance to another Quaternion for equality. \r\n            ":"\r\n            比较此 Quaternion 实例与另一个 Quaternion 的相等性。\r\n            \r\n","\r\n            Reserved; must be zero.\r\n            ":"\r\n            预订的;必须为零。\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Installs a program object as part of current rendering state\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            安装程序对象作为当前呈现状态的一部分\r\n            \r\n","\r\n            Windows 2000/XP: Minimizes a window, even if the thread that owns the window is not responding. This flag should only be used when minimizing windows from a different thread.\r\n            ":"\r\n            Windows 2000/XP：最小化一个窗口，即使拥有该窗口的线程没有响应。只有在最小化来自不同线程的窗口时才应使用此标志。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Enable or disable a generic vertex attribute array\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            启用或禁用通用顶点属性数组\r\n            \r\n","[requires: QCOM_tiled_rendering]":"[要求：QCOM_tiled_rendering]\r\n"," \r\n            Specifies the index of the generic vertex attribute to be bound.\r\n            ":" \r\n            指定要绑定的通用顶点属性的索引。\r\n            \r\n","\r\n            Original was GL_DISTANCE_ATTENUATION_EXT = 0x8129\r\n            ":"\r\n            原来是 GL_DISTANCE_ATTENUATION_EXT = 0x8129\r\n            \r\n","\r\n            Original was GL_INT64_VEC3_NV = 0x8FEA\r\n            ":"\r\n            原来是 GL_INT64_VEC3_NV = 0x8FEA\r\n            \r\n","\r\n            Original was GL_RENDERBUFFER_BLUE_SIZE = 0x8D52\r\n            ":"\r\n            原来是 GL_RENDERBUFFER_BLUE_SIZE = 0x8D52\r\n            \r\n","\r\n            Original was GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43\r\n            ":"\r\n            原来是 GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43\r\n            \r\n","\r\n            Original was GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A\r\n            ":"\r\n            原来是 GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A\r\n            \r\n","\r\n            Original was GL_MATRIX13_ARB = 0x88CD\r\n            ":"\r\n            原来是 GL_MATRIX13_ARB = 0x88CD\r\n            \r\n","[requires: EXT_texture_storage]\r\n            Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture\r\n            ":"[需要：EXT_texture_storage]\r\n            同时为三维、二维数组或立方体贴图数组纹理的所有级别指定存储\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT16 = 0x81A5\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT16 = 0x81A5\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Multiply the current matrix by a translation matrix\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            将当前矩阵乘以平移矩阵\r\n            \r\n","\r\n            Original was GL_IDENTITY_NV = 0x862A\r\n            ":"\r\n            原来是 GL_IDENTITY_NV = 0x862A\r\n            \r\n","\r\n            Original was GL_HSL_LUMINOSITY_KHR = 0x92B0\r\n            ":"\r\n            原来是 GL_HSL_LUMINOSITY_KHR = 0x92B0\r\n            \r\n","\r\n            Original was GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C\r\n            ":"\r\n            原来是 GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C\r\n            \r\n","\r\n            Original was GL_INTENSITY_FLOAT16_ATI = 0x881D\r\n            ":"\r\n            原来是 GL_INTENSITY_FLOAT16_ATI = 0x881D\r\n            \r\n","\r\n            Original was GL_FLOAT_RG32_NV = 0x8887\r\n            ":"\r\n            原来是 GL_FLOAT_RG32_NV = 0x8887\r\n            \r\n","\r\n            Gets or sets a System.Boolean that indicates whether the window is visible.\r\n            ":"\r\n            获取或设置一个 System.Boolean，它指示窗口是否可见。\r\n            \r\n","\r\n            Original was GL_BUFFER_MAP_POINTER_OES = 0x88BD\r\n            ":"\r\n            原来是 GL_BUFFER_MAP_POINTER_OES = 0x88BD\r\n            \r\n","[length: id,type]":"[长度：id，类型]\r\n","\r\n            Original was GL_COMBINER_COMPONENT_USAGE_NV = 0x8544\r\n            ":"\r\n            原来是 GL_COMBINER_COMPONENT_USAGE_NV = 0x8544\r\n            \r\n","\r\n            Original was GL_SAMPLE_MASK_VALUE_EXT = 0x80AA\r\n            ":"\r\n            原来是 GL_SAMPLE_MASK_VALUE_EXT = 0x80AA\r\n            \r\n","\r\n            Original was GL_PIXEL_PACK_BUFFER = 0x88EB\r\n            ":"\r\n            原来是 GL_PIXEL_PACK_BUFFER = 0x88EB\r\n            \r\n","\r\n            To support gamepads on platforms that do not offer a gamepad-optimized API,\r\n            we need to use the generic OpenTK.Input.Joystick and implement a custom\r\n            mapping scheme to provide a stable mapping to OpenTK.Input.GamePad. This\r\n            class implements this mapping scheme.\r\n            ":"\r\n            要在不提供游戏手柄优化 API 的平台上支持游戏手柄，\r\n            我们需要使用通用的 OpenTK.Input.Joystick 并实现自定义\r\n            映射方案以提供到 OpenTK.Input.GamePad 的稳定映射。这\r\n            类实现此映射方案。\r\n            \r\n","\r\n            Original was GL_TEXTURE_SHARED_SIZE = 0x8C3F\r\n            ":"\r\n            原来是 GL_TEXTURE_SHARED_SIZE = 0x8C3F\r\n            \r\n","Size, in bytes, of the RawInputHeader structure.":"RawInputHeader 结构的大小（以字节为单位）。\r\n","\r\n            Original was GL_ALPHA_INTEGER_EXT = 0x8D97\r\n            ":"\r\n            原来是 GL_ALPHA_INTEGER_EXT = 0x8D97\r\n            \r\n","Color bits.":"颜色位。\r\n","\r\n            Used in GL.FenceSync\r\n            ":"\r\n            在 GL.FenceSync 中使用\r\n            \r\n","\r\n            Original was GL_INDEX_ARRAY_POINTER = 0x8091\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_POINTER = 0x8091\r\n            \r\n","[length: 4] \r\n            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.\r\n            ":"[长度：4]\r\n            指定指向数组中第一个纹理坐标集的第一个坐标的指针。初始值为 0。\r\n            \r\n","[requires: v4.5 or KHR_robustness|VERSION_4_5]":"[要求：v4.5 或 KHR_robustness|VERSION_4_5]\r\n","\r\n            Original was GL_MULTISAMPLE_SGIS = 0x809D\r\n            ":"\r\n            原来是 GL_MULTISAMPLE_SGIS = 0x809D\r\n            \r\n","\r\n            Original was GL_REG_8_ATI = 0x8929\r\n            ":"\r\n            原来是 GL_REG_8_ATI = 0x8929\r\n            \r\n","\r\n            Original was GL_ACTIVE_PROGRAM = 0x8259\r\n            ":"\r\n            原来是 GL_ACTIVE_PROGRAM = 0x8259\r\n            \r\n","\r\n            Original was GL_IS_ROW_MAJOR = 0x9300\r\n            ":"\r\n            原来是 GL_IS_ROW_MAJOR = 0x9300\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4\r\n            \r\n","[length: 1] \r\n            Returns the length of the string returned in infoLog (excluding the null terminator).\r\n            ":"[长度：1]\r\n            返回 infoLog 中返回的字符串的长度（不包括空终止符）。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT14_EXT = 0x8CEE\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT14_EXT = 0x8CEE\r\n            \r\n","\r\n            Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all GL_TRUE, indicating that the color components can be written.\r\n            ":"\r\n            指定是否可以将红色、绿色、蓝色和 alpha 写入帧缓冲区。初始值都是GL_TRUE，表示可以写入颜色分量。\r\n            \r\n","\r\n            Original was GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D\r\n            ":"\r\n            原来是 GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D\r\n            \r\n","The w part":"w部分\r\n","[requires: EXT_primitive_bounding_box]":"[需要：EXT_primitive_bounding_box]\r\n","\r\n            Original was GL_REG_5_ATI = 0x8926\r\n            ":"\r\n            原来是 GL_REG_5_ATI = 0x8926\r\n            \r\n","Indicates the last available keyboard key.":"指示最后一个可用的键盘键。\r\n","\r\n            Defines the coordinates of the upper-left and lower-right corners of a rectangle.\r\n            ":"\r\n            定义矩形的左上角和右下角的坐标。\r\n            \r\n","\r\n            Original was GL_STENCIL_OP_VALUE_AMD = 0x874C\r\n            ":"\r\n            原来是 GL_STENCIL_OP_VALUE_AMD = 0x874C\r\n            \r\n","\r\n            Original was GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9\r\n            ":"\r\n            原来是 GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9\r\n            \r\n","\r\n            Original was GL_TEXTURE11 = 0x84CB\r\n            ":"\r\n            原来是 GL_TEXTURE11 = 0x84CB\r\n            \r\n","\r\n            Original was GL_CON_14_ATI = 0x894F\r\n            ":"\r\n            原来是 GL_CON_14_ATI = 0x894F\r\n            \r\n","[requires: v1.0]\r\n            Multiply the current matrix by a translation matrix\r\n            ":"[要求：v1.0]\r\n            将当前矩阵乘以平移矩阵\r\n            \r\n","\r\n            Used in GL.GetMap\r\n            ":"\r\n            在 GL.GetMap 中使用\r\n            \r\n","\r\n            ointer to a buffer that contains the information specified by Command.\r\n            If Command is RawInputDeviceInfoEnum.DEVICEINFO, set RawInputDeviceInfo.Size to sizeof(RawInputDeviceInfo)\r\n            before calling GetRawInputDeviceInfo. (This is done automatically in OpenTK)\r\n            ":"\r\n            指向包含由 Command 指定的信息的缓冲区。\r\n            如果 Command 是 RawInputDeviceInfoEnum.DEVICEINFO，则将 RawInputDeviceInfo.Size 设置为 sizeof(RawInputDeviceInfo)\r\n            在调用 GetRawInputDeviceInfo 之前。 （这是在 OpenTK 中自动完成的）\r\n            \r\n","[requires: EXT_texture_storage]\r\n            Simultaneously specify storage for all levels of a three-dimensional or two-dimensional array texture\r\n            ":"[需要：EXT_texture_storage]\r\n            同时为三维或二维数组纹理的所有级别指定存储\r\n            \r\n","\r\n            Original was GL_MAX_TEXTURE_UNITS_ARB = 0x84E2\r\n            ":"\r\n            原来是 GL_MAX_TEXTURE_UNITS_ARB = 0x84E2\r\n            \r\n","[requires: v4.2 or ARB_shader_image_load_store|VERSION_4_2]\r\n            Bind a level of a texture to an image unit\r\n            ":"[要求：v4.2 或 ARB_shader_image_load_store|VERSION_4_2]\r\n            将纹理的级别绑定到图像单元\r\n            \r\n","\r\n            Original was GL_LIGHT3 = 0x4003\r\n            ":"\r\n            原来是 GL_LIGHT3 = 0x4003\r\n            \r\n","[requires: v2.0]\r\n            Set front and/or back function and reference value for stencil testing\r\n            ":"[要求：v2.0]\r\n            设置模板测试的正面和/或背面功能和参考值\r\n            \r\n","\r\n            Used in GL.NV.BeginConditionalRender\r\n            ":"\r\n            在 GL.NV.BeginConditionalRender 中使用\r\n            \r\n","\r\n            Called when the WindowBorder of this NativeWindow has changed.\r\n            ":"\r\n            在此 NativeWindow 的 WindowBorder 发生更改时调用。\r\n            \r\n","\r\n            Original was GL_SPOT_CUTOFF = 0x1206\r\n            ":"\r\n            原来是 GL_SPOT_CUTOFF = 0x1206\r\n            \r\n"," \r\n            Specifies the number of elements to be rendered.\r\n            ":" \r\n            指定要呈现的元素数。\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7\r\n            \r\n","\r\n            Original was GL_R1UI_N3F_V3F_SUN = 0x85C7\r\n            ":"\r\n            原来是 GL_R1UI_N3F_V3F_SUN = 0x85C7\r\n            \r\n","\r\n            Original was GL_ACTIVE_RESOURCES = 0x92F5\r\n            ":"\r\n            原来是 GL_ACTIVE_RESOURCES = 0x92F5\r\n            \r\n"," \r\n            Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.\r\n            ":" \r\n            指定纹理图像的宽度。所有实现都支持至少 1024 纹素宽的纹理图像。\r\n            \r\n","\r\n            Original was GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38\r\n            ":"\r\n            原来是 GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38\r\n            \r\n","\r\n            Returns a System.String that represents the current Matrix4x3d.\r\n            ":"\r\n            返回表示当前 Matrix4x3d 的 System.String。\r\n            \r\n","\r\n            Original was GL_TEXTURE29_ARB = 0x84DD\r\n            ":"\r\n            原来是 GL_TEXTURE29_ARB = 0x84DD\r\n            \r\n","\r\n            Original was GL_HISTOGRAM_WIDTH_EXT = 0x8026\r\n            ":"\r\n            原来是 GL_HISTOGRAM_WIDTH_EXT = 0x8026\r\n            \r\n"," \r\n            Specifies whether color values, depth values, or stencil values are to be copied. Symbolic constants Color, Depth, and Stencil are accepted.\r\n            ":" \r\n            指定是否要复制颜色值、深度值或模板值。接受符号常量 Color、Depth 和 Stencil。\r\n            \r\n","\r\n            Original was GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291\r\n            ":"\r\n            原来是 GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291\r\n            \r\n","[requires: EXT_draw_buffers_indexed]\r\n            Test whether a capability is enabled\r\n            ":"[需要：EXT_draw_buffers_indexed]\r\n            测试一个能力是否开启\r\n            \r\n","\r\n            Original was GL_INTENSITY12 = 0x804C\r\n            ":"\r\n            原来是 GL_INTENSITY12 = 0x804C\r\n            \r\n","\r\n            Used in GL.GetVertexAttrib\r\n            ":"在 GL.GetVertexAttrib 中使用\r\n            \r\n"," \r\n            Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, DepthComponent, and StencilIndex.\r\n            ":" \r\n            指定像素数据的格式。接受以下符号值：Red、Rg、Rgb、Bgr、Rgba、Bgra、DepthComponent 和 StencilIndex。\r\n            \r\n","\r\n            Original was GL_PATH_COMMAND_COUNT_NV = 0x909D\r\n            ":"原来是 GL_PATH_COMMAND_COUNT_NV = 0x909D\r\n            \r\n","\r\n            Original was GL_UNDEFINED_VERTEX = 0x8260\r\n            ":"\r\n            原来是 GL_UNDEFINED_VERTEX = 0x8260\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Delete a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            删除程序对象\r\n            \r\n","\r\n            Original was GL_OPERAND1_ALPHA_EXT = 0x8599\r\n            ":"\r\n            原来是 GL_OPERAND1_ALPHA_EXT = 0x8599\r\n            \r\n","\r\n            Original was GL_CON_13_ATI = 0x894E\r\n            ":"\r\n            原来是 GL_CON_13_ATI = 0x894E\r\n            \r\n","\r\n            Original was GL_UNSIGNED_BYTE_3_3_2 = 0x8032\r\n            ":"\r\n            原来是 GL_UNSIGNED_BYTE_3_3_2 = 0x8032\r\n            \r\n","\r\n            Scales the Quaternion to unit length.\r\n            ":"\r\n            将四元数缩放为单位长度。\r\n            \r\n","\r\n            Original was GL_SAMPLE_POSITION = 0x8E50\r\n            ":"\r\n            原来是 GL_SAMPLE_POSITION = 0x8E50\r\n            \r\n","\r\n            Original was GL_RG16F_EXT = 0x822F\r\n            ":"\r\n            原来是 GL_RG16F_EXT = 0x822F\r\n            \r\n","\r\n            Original was GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC\r\n            ":"\r\n            原来是 GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC\r\n            \r\n","[requires: ATI_envmap_bumpmap]":"[需要：ATI_envmap_bumpmap]\r\n","\r\n            Scan code from the key depression. The scan code for keyboard overrun is KEYBOARD_OVERRUN_MAKE_CODE.\r\n            ":"\r\n            从按键扫描代码。键盘越界扫描码为KEYBOARD_OVERRUN_MAKE_CODE。\r\n            \r\n","[requires: v3.1 or ARB_uniform_buffer_object|VERSION_3_1]\r\n            Retrieve the index of a named uniform block\r\n            ":"[要求：v3.1 或 ARB_uniform_buffer_object|VERSION_3_1]\r\n            检索命名统一块的索引\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Specify a parameter for a program object\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            为程序对象指定参数\r\n            \r\n","\r\n            Original was GL_SHADER_BINARY_VIV = 0x8FC4\r\n            ":"\r\n            原来是 GL_SHADER_BINARY_VIV = 0x8FC4\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0\r\n            ":"原来是 GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0\r\n            \r\n","\r\n            Original was GL_Blend = 0X0be2\r\n            ":"\r\n            原来是 GL_Blend = 0X0be2\r\n            \r\n","\r\n            cursor to be displayed (or None)\r\n            ":"\r\n            要显示的光标（或无）\r\n            \r\n","[requires: v4.0 or ARB_transform_feedback2|VERSION_4_0]\r\n            Pause transform feedback operations\r\n            ":"[要求：v4.0 或 ARB_transform_feedback2|VERSION_4_0]\r\n            暂停变换反馈操作\r\n            \r\n","The X server arbitrarily chooses the keysyms_per_keycode_return value to be large enough to report all requested symbols. A special KeySym value of NoSymbol is used to fill in unused elements for individual KeyCodes. To free the storage returned by XGetKeyboardMapping(), use XFree(). ":"X 服务器任意选择 keysyms_per_keycode_return 值，使其足够大以报告所有请求的符号。 NoSymbol 的特殊 KeySym 值用于填充各个 KeyCode 的未使用元素。要释放 XGetKeyboardMapping() 返回的存储空间，请使用 XFree()。\r\n","\r\n            A value between -1.0 and 1.0 representing offset of the specified  ":"\r\n            一个介于 -1.0 和 1.0 之间的值，表示指定的偏移量\r\n","[requires: v1.0]\r\n            Define an array of normals\r\n            ":"[要求：v1.0]\r\n            定义法线数组\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Bind a framebuffer to a framebuffer target\r\n            ":"[需要：EXT_framebuffer_object]\r\n            将帧缓冲区绑定到帧缓冲区目标\r\n            \r\n","\r\n            Original was GL_SLUMINANCE8_EXT = 0x8C47\r\n            ":"\r\n            原来是 GL_SLUMINANCE8_EXT = 0x8C47\r\n            \r\n","\r\n            Original was GL_PACK_SKIP_VOLUMES_SGIS = 0x8130\r\n            ":"\r\n            原来是 GL_PACK_SKIP_VOLUMES_SGIS = 0x8130\r\n            \r\n","\r\n            Original was GL_LUMINANCE32F_ARB = 0x8818\r\n            ":"\r\n            原来是 GL_LUMINANCE32F_ARB = 0x8818\r\n            \r\n","\r\n            Used in GL.TexParameter, GL.TexParameterI and 1 other function\r\n            ":"\r\n            用于 GL.TexParameter、GL.TexParameterI 和其他 1 个函数\r\n            \r\n","\r\n            Original was GL_STORAGE_PRIVATE_APPLE = 0x85BD\r\n            ":"\r\n            原来是 GL_STORAGE_PRIVATE_APPLE = 0x85BD\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Validates a program object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            验证程序对象\r\n            \r\n","\r\n            Original was GL_PROGRAM_OUTPUT = 0x92E4\r\n            ":"\r\n            原来是 GL_PROGRAM_OUTPUT = 0x92E4\r\n            \r\n","\r\n            Original was GL_RGB4_S3TC = 0x83A1\r\n            ":"\r\n            原来是 GL_RGB4_S3TC = 0x83A1\r\n            \r\n","\r\n            Original was GL_MAGNITUDE_BIAS_NV = 0x8718\r\n            ":"\r\n            原来是 GL_MAGNITUDE_BIAS_NV = 0x8718\r\n            \r\n","[requires: v3.0]\r\n            Return a string describing the current GL connection\r\n            ":"[要求：v3.0]\r\n            返回描述当前 GL 连接的字符串\r\n            \r\n"," interface on the current platform.\r\n            ":" 当前平台上的界面。\r\n            \r\n","\r\n            Used in GL.Arb.TexPageCommitment\r\n            ":"\r\n            在 GL.Arb.TexPageCommitment 中使用\r\n            \r\n"," \r\n            Specifies the address of a structure containing the draw parameters.\r\n            ":" \r\n            指定包含绘制参数的结构的地址。\r\n            \r\n","\r\n            Original was GL_DEPTH_COMPONENT32_ARB = 0x81A7\r\n            ":"\r\n            原来是 GL_DEPTH_COMPONENT32_ARB = 0x81A7\r\n            \r\n","\r\n            Original was GL_SAMPLER_1D_SHADOW_ARB = 0x8B61\r\n            ":"\r\n            原来是 GL_SAMPLER_1D_SHADOW_ARB = 0x8B61\r\n            \r\n","\r\n            Original was GL_CONTEXT_FLAGS = 0x821E\r\n            ":"\r\n            原来是 GL_CONTEXT_FLAGS = 0x821E\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Specify the equation used for both the RGB blend equation and the Alpha blend equation\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            指定用于 RGB 混合方程和 Alpha 混合方程的方程\r\n            \r\n","\r\n            Original was GL_PROXY_TEXTURE_CUBE_MAP = 0x851B\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_CUBE_MAP = 0x851B\r\n            \r\n","\r\n            Used in GL.GetProgramInterface\r\n            ":"\r\n            在 GL.GetProgramInterface 中使用\r\n            \r\n","\r\n            Original was GL_DEBUG_SOURCE_OTHER_ARB = 0x824B\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_OTHER_ARB = 0x824B\r\n            \r\n","\r\n            Original was GL_IMAGE_MAG_FILTER_HP = 0x815C\r\n            ":"\r\n            原来是 GL_IMAGE_MAG_FILTER_HP = 0x815C\r\n            \r\n","\r\n            Original was GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859\r\n            ":"\r\n            原来是 GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859\r\n            \r\n","\r\n            Provides access to OpenGL 4.x methods for the core profile.\r\n            ":"\r\n            提供对核心配置文件的 OpenGL 4.x 方法的访问。\r\n            \r\n","\r\n            Original was GL_INTENSITY_SNORM = 0x9013\r\n            ":"\r\n            原来是 GL_INTENSITY_SNORM = 0x9013\r\n            \r\n","\r\n            Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0.\r\n            ":"\r\n            指定指向数组中第一条法线的第一个坐标的指针。初始值为 0。\r\n            \r\n","[requires: ATI_element_array]":"[要求：ATI_element_array]\r\n","\r\n            Original was GL_VertexAttribArrayEnabled = 0X8622\r\n            ":"\r\n            原来是 GL_VertexAttribArrayEnabled = 0X8622\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C\r\n            \r\n","\r\n            Original was GL_PROGRAM_FORMAT_ARB = 0x8876\r\n            ":"\r\n            原来是 GL_PROGRAM_FORMAT_ARB = 0x8876\r\n            \r\n"," \r\n            Specifies the symbolic name of the parameter to be set. Six values affect the packing of pixel data into memory: PackRowLength, PackImageHeight, PackSkipPixels, PackSkipRows, PackSkipImages, and PackAlignment. Six more affect the unpacking of pixel data from memory: UnpackRowLength, UnpackImageHeight, UnpackSkipPixels, UnpackSkipRows, UnpackSkipImages, and UnpackAlignment.\r\n            ":" \r\n            指定要设置的参数的符号名称。六个值会影响像素数据打包到内存中：PackRowLength、PackImageHeight、PackSkipPixels、PackSkipRows、PackSkipImages 和 PackAlignment。还有六个会影响从内存中解包像素数据：UnpackRowLength、UnpackImageHeight、UnpackSkipPixels、UnpackSkipRows、UnpackSkipImages 和 UnpackAlignment。\r\n            \r\n","\r\n            Original was GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 0x93A0\r\n            ":"\r\n            原来是 GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 0x93A0\r\n            \r\n"," \r\n            The number of values per vertex that are stored in the array.\r\n            ":" \r\n            存储在数组中的每个顶点的值数。\r\n            \r\n"," property of the window changes. \r\n            ":" 窗口的属性发生变化。\r\n            \r\n","\r\n            Compares to an object instance for equality.\r\n            ":"\r\n            与对象实例比较是否相等。\r\n            \r\n","\r\n            Original was GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C\r\n            ":"\r\n            原来是 GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C\r\n            \r\n","\r\n            Specifies the starting index in the enabled arrays.\r\n            ":"\r\n            指定启用数组中的起始索引。\r\n            \r\n","\r\n            Original was GL_EYE_POINT_SGIS = 0x81F4\r\n            ":"\r\n            原来是 GL_EYE_POINT_SGIS = 0x81F4\r\n            \r\n","\r\n            Used in GL.Arb.ReadnPixels, GL.ClearBufferData and 36 other functions\r\n            ":"\r\n            用于 GL.Arb.ReadnPixels、GL.ClearBufferData 和 36 个其他函数\r\n            \r\n","\r\n            Original was GL_COMBINER_CD_OUTPUT_NV = 0x854B\r\n            ":"\r\n            原来是 GL_COMBINER_CD_OUTPUT_NV = 0x854B\r\n            \r\n","Constructs a new GameWindow with the specified attributes.":"构造具有指定属性的新 GameWindow。\r\n","\r\n            Original was GL_DSDT8_MAG8_NV = 0x870A\r\n            ":"\r\n            原来是 GL_DSDT8_MAG8_NV = 0x870A\r\n            \r\n","The input desktop must be the current desktop when you call GetCursorPos. Call OpenInputDesktop to determine whether the current desktop is the input desktop. If it is not, call SetThreadDesktop with the HDESK returned by OpenInputDesktop to switch to that desktop.":"调用GetCursorPos时输入的桌面必须是当前桌面。调用OpenInputDesktop判断当前桌面是否为输入桌面。如果不是，则使用 OpenInputDesktop 返回的 HDESK 调用 SetThreadDesktop 以切换到该桌面。\r\n","\r\n            Original was GL_TEXTURE16_ARB = 0x84D0\r\n            ":"\r\n            原来是 GL_TEXTURE16_ARB = 0x84D0\r\n            \r\n","\r\n            Original was GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC\r\n            ":"\r\n            原来是 GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC\r\n            \r\n","\r\n            Original was GL_RGB_SCALE_EXT = 0x8573\r\n            ":"\r\n            原来是 GL_RGB_SCALE_EXT = 0x8573\r\n            \r\n","The backslash key.":"反斜杠键。\r\n"," \r\n            Specifies a value that may be the name of a texture.\r\n            ":" \r\n            指定一个可以是纹理名称的值。\r\n            \r\n","\r\n            Original was GL_CONSTANT_ALPHA = 0x8003\r\n            ":"\r\n            原来是 GL_CONSTANT_ALPHA = 0x8003\r\n            \r\n","\r\n            Specifies the internal format of the texture. Must be one of the following symbolic constants: GL_COMPRESSED_RED, GL_COMPRESSED_RG, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA. GL_COMPRESSED_SRGB, GL_COMPRESSED_SRGB_ALPHA. GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_RED, GL_RG, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.\r\n            ":"\r\n            指定纹理的内部格式。必须是以下符号常量之一：GL_COMPRESSED_RED、GL_COMPRESSED_RG、GL_COMPRESSED_RGB、GL_COMPRESSED_RGBA。 GL_COMPRESSED_SRGB，GL_COMPRESSED_SRGB_ALPHA。 GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_RED, GL_RG, GL_RGB, GL_R3_G3_B2, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA,或 GL_SRGB8_ALPHA8。\r\n            \r\n","[requires: OES_texture_3D]\r\n            Copy a three-dimensional texture subimage\r\n            ":"[要求：OES_texture_3D]\r\n            复制三维纹理子图像\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE\r\n            \r\n","\r\n            Original was GL_VERTEX_BINDING_BUFFER = 0x8F4F\r\n            ":"\r\n            原来是 GL_VERTEX_BINDING_BUFFER = 0x8F4F\r\n            \r\n","\r\n            Original was GL_OES_texture_cube_map = 1\r\n            ":"\r\n            原来是 GL_OES_texture_cube_map = 1\r\n            \r\n","[requires: ARB_occlusion_query]\r\n            Return parameters of a query object\r\n            ":"[需要：ARB_occlusion_query]\r\n            查询对象的返回参数\r\n            \r\n","\r\n            Original was GL_DECR_WRAP = 0x8508\r\n            ":"\r\n            原来是 GL_DECR_WRAP = 0x8508\r\n            \r\n","\r\n            Original was GL_MIRRORED_REPEAT = 0x8370\r\n            ":"\r\n            原来是 GL_MIRRORED_REPEAT = 0x8370\r\n            \r\n","[requires: v1.1][deprecated: v3.2]\r\n            Define an array of normals\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            定义法线数组\r\n            \r\n"," \r\n            A bitfield controlling the command flushing behavior. flags may be zero.\r\n            ":" \r\n            控制命令刷新行为的位域。标志可能为零。\r\n            \r\n","\r\n            Original was GL_CONVOLUTION_FILTER_BIAS = 0x8015\r\n            ":"\r\n            原来是 GL_CONVOLUTION_FILTER_BIAS = 0x8015\r\n            \r\n","\r\n            Original was GL_V3F = 0x2A21\r\n            ":"\r\n            原来是 GL_V3F = 0x2A21\r\n            \r\n","\r\n            Original was GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176\r\n            ":"\r\n            原来是 GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176\r\n            \r\n","\r\n            Original was GL_NO_RESET_NOTIFICATION_KHR = 0x8261\r\n            ":"\r\n            原来是 GL_NO_RESET_NOTIFICATION_KHR = 0x8261\r\n            \r\n"," if this instance has a left thumbstick with a x-axis; otherwise, ":" 如果这个实例有一个带有 x 轴的左摇杆；否则，\r\n","\r\n            Original was GL_BGRA = 0x80E1\r\n            ":"\r\n            原来是 GL_BGRA = 0x80E1\r\n            \r\n","\r\n            Original was GL_BLEND_SRC_RGB_OES = 0x80C9\r\n            ":"\r\n            原来是 GL_BLEND_SRC_RGB_OES = 0x80C9\r\n            \r\n","\r\n            Original was GL_R1UI_V3F_SUN = 0x85C4\r\n            ":"\r\n            原来是 GL_R1UI_V3F_SUN = 0x85C4\r\n            \r\n","The tenth button of the JoystickDevice.":"JoystickDevice 的第十个按钮。\r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Generate vertex array object names\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            生成顶点数组对象名称\r\n            \r\n","Gets or sets the X11 root window.":"获取或设置 X11 根窗口。\r\n","\r\n            Original was GL_BUFFER_MAPPED_ARB = 0x88BC\r\n            ":"\r\n            原来是 GL_BUFFER_MAPPED_ARB = 0x88BC\r\n            \r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_EXT = 0x8513\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_EXT = 0x8513\r\n            \r\n","\r\n            Original was GL_422_EXT = 0x80CC\r\n            ":"\r\n            原来是 GL_422_EXT = 0x80CC\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER13_ATI = 0x8832\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER13_ATI = 0x8832\r\n            \r\n","\r\n            Original was GL_BlendColor = 0X8005\r\n            ":"\r\n            原来是 GL_BlendColor = 0X8005\r\n            \r\n","[length: 2] \r\n            Specifies a value that is the domain coordinate  to the basis function defined in a previous glMap1 or glMap2 command.\r\n            ":"[长度：2]\r\n            指定一个值，该值是先前 glMap1 或 glMap2 命令中定义的基函数的域坐标。\r\n            \r\n","\r\n            Original was GL_LUMINANCE_SNORM = 0x9011\r\n            ":"\r\n            原来是 GL_LUMINANCE_SNORM = 0x9011\r\n            \r\n","\r\n            Original was GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128\r\n            ":"\r\n            原来是 GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128\r\n            \r\n"," structure representing the state of the mouse cursor.":" 表示鼠标光标状态的结构。\r\n","\r\n            Original was GL_PROXY_TEXTURE_2D_EXT = 0x8064\r\n            ":"\r\n            原来是 GL_PROXY_TEXTURE_2D_EXT = 0x8064\r\n            \r\n","\r\n            Original was GL_RGBA8 = 0x8058\r\n            ":"\r\n            原来是 GL_RGBA8 = 0x8058\r\n            \r\n","\r\n            Original was GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C\r\n            ":"\r\n            原来是 GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C\r\n            \r\n"," \r\n            Specifies the number of instances of the specified range of indices to be rendered.\r\n            ":" \r\n            指定要呈现的指定索引范围的实例数。\r\n            \r\n","\r\n            Original was GL_MATRIX0_ARB = 0x88C0\r\n            ":"\r\n            原来是 GL_MATRIX0_ARB = 0x88C0\r\n            \r\n","\r\n            Original was GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B\r\n            ":"\r\n            原来是 GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B\r\n            \r\n","\r\n            Original was GL_MINUS_CLAMPED_NV = 0x92B3\r\n            ":"\r\n            原来是 GL_MINUS_CLAMPED_NV = 0x92B3\r\n            \r\n","\r\n            Low-level WINAPI function that checks the next message in the queue.\r\n            ":"\r\n            检查队列中下一条消息的低级 WINAPI 函数。\r\n            \r\n","[requires: EXT_multi_draw_arrays]\r\n            Render multiple sets of primitives from array data\r\n            ":"[需要：EXT_multi_draw_arrays]\r\n            从数组数据渲染多组图元\r\n            \r\n"," of the connected input device.":" 连接的输入设备。\r\n","The hat.":"帽子。\r\n","\r\n            Original was GL_POINT_SIZE_MIN_ARB = 0x8126\r\n            ":"\r\n            原来是 GL_POINT_SIZE_MIN_ARB = 0x8126\r\n            \r\n","\r\n            Original was GL_COLOR_ARRAY_STRIDE_EXT = 0x8083\r\n            ":"\r\n            原来是 GL_COLOR_ARRAY_STRIDE_EXT = 0x8083\r\n            \r\n","\r\n            Original was GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB\r\n            ":"\r\n            原来是 GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB\r\n            \r\n","\r\n            Original was GL_MAX_DRAW_BUFFERS_ATI = 0x8824\r\n            ":"\r\n            原来是 GL_MAX_DRAW_BUFFERS_ATI = 0x8824\r\n            \r\n","\r\n            ID for the mouse device.\r\n            ":"\r\n            鼠标设备的 ID。\r\n            \r\n","\r\n            Specifies the width of the texture image. All implementations support texture images that are at least 1024 texels wide.\r\n            ":"\r\n            指定纹理图像的宽度。所有实现都支持至少 1024 纹素宽的纹理图像。\r\n            \r\n","\r\n            Original was GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC\r\n            ":"\r\n            原来是 GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC\r\n            \r\n","\r\n            ointer to buffer that holds an array of RawInputDeviceList structures\r\n            for the devices attached to the system.\r\n            If NULL, the number of devices are returned in NumDevices.\r\n            ":"\r\n            指向包含 RawInputDeviceList 结构数组的缓冲区\r\n            对于连接到系统的设备。\r\n            如果为 NULL，则在 NumDevices 中返回设备数。\r\n            \r\n"," \r\n            Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.\r\n            ":" \r\n            以基本机器单位指定应从中读取数据的 readtarget 数据存储中的偏移量。\r\n            \r\n","[requires: EXT_debug_label]":"[需要：EXT_debug_label]\r\n"," \r\n            Target for color clamping. target must be ClampReadColor.\r\n            ":" \r\n            颜色夹紧的目标。目标必须是 ClampReadColor。\r\n            \r\n","\r\n            Original was GL_SAMPLE_MASK_VALUE_NV = 0x8E52\r\n            ":"\r\n            原来是 GL_SAMPLE_MASK_VALUE_NV = 0x8E52\r\n            \r\n","\r\n            Used in GL.Disable, GL.Enable and 4 other functions\r\n            ":"\r\n            用于 GL.Disable、GL.Enable 和其他 4 个函数\r\n            \r\n","The twentyfifth button of the JoystickDevice.":"JoystickDevice 的第二十五个按钮。\r\n","\r\n            Used in GL.Ext.GetQueryObject\r\n            ":"\r\n            在 GL.Ext.GetQueryObject 中使用\r\n            \r\n"," \r\n            Specifies a symbolic constant indicating the behavior to be controlled. GenerateMipmapHint is accepted.\r\n            ":" \r\n            指定一个符号常量，指示要控制的行为。 GenerateMipmapHint 被接受。\r\n            \r\n","\r\n            Original was GL_MATRIX30 = 0x88DE\r\n            ":"\r\n            原来是 GL_MATRIX30 = 0x88DE\r\n            \r\n","\r\n            Original was GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E\r\n            ":"\r\n            原来是 GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E\r\n            \r\n","[length: 1] \r\n            Returns the number of names actually returned in shaders.\r\n            ":"[长度：1]\r\n            返回着色器中实际返回的名称数。\r\n            \r\n","\r\n            Original was GL_DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245\r\n            ":"\r\n            原来是 GL_DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER15 = 0x8834\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER15 = 0x8834\r\n            \r\n","\r\n            Used in GL.DepthFunc\r\n            ":"\r\n            在 GL.DepthFunc 中使用\r\n            \r\n","\r\n            Original was GL_QUAD_INTENSITY8_SGIS = 0x8123\r\n            ":"\r\n            原来是 GL_QUAD_INTENSITY8_SGIS = 0x8123\r\n            \r\n","\r\n            Used in GL.Intel.MapTexture2D\r\n            ":"\r\n            用于 GL.Intel.MapTexture2D\r\n            \r\n"," \r\n            Specifies a pointer to the first coordinate of the first texture coordinate set in the array. The initial value is 0.\r\n            ":" \r\n            指定指向数组中第一个纹理坐标集的第一个坐标的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_UNPACK_SKIP_ROWS = 0x0CF3\r\n            ":"\r\n            原来是 GL_UNPACK_SKIP_ROWS = 0x0CF3\r\n            \r\n","\r\n            Original was GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055\r\n            ":"\r\n            原来是 GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055\r\n            \r\n","\r\n            If set, the application-defined keyboard device hotkeys are not handled.\r\n            However, the system hotkeys; for example, ALT+TAB and CTRL+ALT+DEL, are still handled.\r\n            By default, all keyboard hotkeys are handled.\r\n            NOHOTKEYS can be specified even if NOLEGACY is not specified and Target is NULL in RawInputDevice.\r\n            ":"\r\n            如果设置，则不处理应用程序定义的键盘设备热键。\r\n            但是，系统热键；例如，ALT+TAB 和 CTRL+ALT+DEL，仍然会被处理。\r\n            默认情况下，处理所有键盘热键。\r\n            即使未指定 NOLEGACY 并且 RawInputDevice 中的 Target 为 NULL，也可以指定 NOHOTKEYS。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Define the scissor box\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            定义剪刀框\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_LOW_ARB = 0x9148\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_LOW_ARB = 0x9148\r\n            \r\n","\r\n            Original was GL_PROGRAM_NATIVE_TEMPORARIES = 0x88A6\r\n            ":"\r\n            原来是 GL_PROGRAM_NATIVE_TEMPORARIES = 0x88A6\r\n            \r\n","\r\n            Swaps the front and back buffers of the current GraphicsContext, presenting the rendered scene to the user.\r\n            ":"\r\n            交换当前 GraphicsContext 的前缓冲区和后缓冲区，将渲染的场景呈现给用户。\r\n            \r\n","[length: count] \r\n            For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.\r\n            ":"[长度：计数]\r\n            对于向量和矩阵命令，指定一个指向计数值数组的指针，该数组将用于更新指定的统一变量。\r\n            \r\n","\r\n            Original was GL_TEXTURE10_ARB = 0x84CA\r\n            ":"\r\n            原来是 GL_TEXTURE10_ARB = 0x84CA\r\n            \r\n","\r\n            Original was GL_MATRIX1 = 0x88C1\r\n            ":"\r\n            原来是 GL_MATRIX1 = 0x88C1\r\n            \r\n","[length: 1] \r\n            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.\r\n            ":"[长度：1]\r\n            如果传递的值不是 Null，则返回 OpenGL 在名称指示的字符串中实际写入的字符数（不包括 null 终止符）。\r\n            \r\n","\r\n            Original was GL_MATRIX12_ARB = 0x88CC\r\n            ":"\r\n            原来是 GL_MATRIX12_ARB = 0x88CC\r\n            \r\n","\r\n            Original was GL_ALPHA32UI_EXT = 0x8D72\r\n            ":"\r\n            原来是 GL_ALPHA32UI_EXT = 0x8D72\r\n            \r\n","\r\n            Original was GL_COMPILE_STATUS = 0x8B81\r\n            ":"\r\n            原来是 GL_COMPILE_STATUS = 0x8B81\r\n            \r\n","\r\n            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4.\r\n            ":"\r\n            指定每个顶点的坐标数。必须为 2、3 或 4。初始值为 4。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT10_EXT = 0x8CEA\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT10_EXT = 0x8CEA\r\n            \r\n","\r\n            Original was GL_XOR_NV = 0x1506\r\n            ":"\r\n            原来是 GL_XOR_NV = 0x1506\r\n            \r\n","\r\n            Original was GL_Extensions = 0X1f03\r\n            ":"\r\n            原来是 GL_Extensions = 0X1f03\r\n            \r\n","\r\n            Original was GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF\r\n            ":"\r\n            原来是 GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 0x8E86\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 0x8E86\r\n            \r\n","\r\n            Original was GL_PROGRAM_PIPELINE = 0x82E4\r\n            ":"\r\n            原来是 GL_PROGRAM_PIPELINE = 0x82E4\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_LOW_AMD = 0x9148\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_LOW_AMD = 0x9148\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368\r\n            \r\n","\r\n            The separable filter to be retrieved. Must be GL_SEPARABLE_2D.\r\n            ":"\r\n            要检索的可分离过滤器。必须是 GL_SEPARABLE_2D。\r\n            \r\n","\r\n            Original was GL_IUI_N3F_V2F_EXT = 0x81AF\r\n            ":"\r\n            原来是 GL_IUI_N3F_V2F_EXT = 0x81AF\r\n            \r\n","\r\n            Original was GL_BLEND_SRC_ALPHA_EXT = 0x80CB\r\n            ":"\r\n            原来是 GL_BLEND_SRC_ALPHA_EXT = 0x80CB\r\n            \r\n","The title of the NativeWindow.":"NativeWindow 的标题。\r\n","[requires: v3.3 or ARB_sampler_objects|VERSION_3_3]\r\n            Return sampler parameter values\r\n            ":"[要求：v3.3 或 ARB_sampler_objects|VERSION_3_3]\r\n            返回采样器参数值\r\n            \r\n"," \r\n            Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.\r\n            ":" \r\n            指定渲染缓冲区对象绑定到的目标。符号常量必须是 Renderbuffer。\r\n            \r\n","\r\n            Original was GL_COVERAGE_AUTOMATIC_NV = 0x8ED7\r\n            ":"\r\n            原来是 GL_COVERAGE_AUTOMATIC_NV = 0x8ED7\r\n            \r\n","\r\n            Original was GL_TextureWrapS = 0x2802\r\n            ":"\r\n            原来是 GL_TextureWrapS = 0x2802\r\n            \r\n","\r\n            Gets the change in value of the wheel for this event in integer units.\r\n            To support high-precision mice, it is recommended to use ":"\r\n            以整数为单位获取此事件的轮值变化。\r\n            支持高精度鼠标，推荐使用\r\n","\r\n            Original was GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA\r\n            ":"\r\n            原来是 GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA\r\n            \r\n","\r\n            Original was GL_SAMPLER_2D_RECT_ARB = 0x8B63\r\n            ":"\r\n            原来是 GL_SAMPLER_2D_RECT_ARB = 0x8B63\r\n            \r\n","\r\n            Original was GL_BLEND_COLOR = 0x8005\r\n            ":"\r\n            原来是 GL_BLEND_COLOR = 0x8005\r\n            \r\n","\r\n            Original was GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533\r\n            ":"\r\n            原来是 GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER12_ARB = 0x8831\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER12_ARB = 0x8831\r\n            \r\n"," \r\n            Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.\r\n            ":" \r\n            指定要从 readtarget 复制到 writetarget 的数据的大小（以基本机器单位表示）。\r\n            \r\n","[requires: v1.0]\r\n            Delete named textures\r\n            ":"[要求：v1.0]\r\n            删除命名纹理\r\n            \r\n"," \r\n            Specifies the program pipeline object to set the active program object for.\r\n            ":" \r\n            指定要为其设置活动程序对象的程序管道对象。\r\n            \r\n","\r\n            Original was GL_PIXEL_TRANSFORM_2D_EXT = 0x8330\r\n            ":"\r\n            原来是 GL_PIXEL_TRANSFORM_2D_EXT = 0x8330\r\n            \r\n","Whether the method should row-normalise (i.e. remove scale from) the Matrix. Pass false if you know it's already normalised.":"该方法是否应该对矩阵进行行归一化（即从中删除比例）。如果您知道它已经标准化，请传递 false。\r\n","\r\n            Original was GL_CONSTANT_EXT = 0x8576\r\n            ":"\r\n            原来是 GL_CONSTANT_EXT = 0x8576\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6\r\n            \r\n","ButtonState.Pressed":"按钮状态.按下\r\n"," is a dance pad.\r\n            ":" 是一个跳舞垫。\r\n            \r\n","\r\n            Original was GL_COLOR_ATTACHMENT2_NV = 0x8CE2\r\n            ":"\r\n            原来是 GL_COLOR_ATTACHMENT2_NV = 0x8CE2\r\n            \r\n","[requires: v3.0 or ES_VERSION_3_0]\r\n            Draw multiple instances of a range of elements\r\n            ":"[要求：v3.0 或 ES_VERSION_3_0]\r\n            绘制一系列元素的多个实例\r\n            \r\n","[requires: EXT_transform_feedback]\r\n            Bind a buffer object to an indexed buffer target\r\n            ":"[需要：EXT_transform_feedback]\r\n            将缓冲区对象绑定到索引缓冲区目标\r\n            \r\n","\r\n            Returns a System.String that represents the current Matrix4.\r\n            ":"\r\n            返回表示当前 Matrix4 的 System.String。\r\n            \r\n","\r\n            Original was GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B\r\n            ":"\r\n            原来是 GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B\r\n            \r\n"," \r\n            Specifies how many attachments are supplied in the attachments list.\r\n            ":" \r\n            指定附件列表中提供的附件数量。\r\n            \r\n","[requires: v1.3]\r\n            Select active texture unit\r\n            ":"[要求：v1.3]\r\n            选择活动纹理单元\r\n            \r\n","\r\n            Original was GL_PLUS_DARKER_NV = 0x9292\r\n            ":"\r\n            原来是 GL_PLUS_DARKER_NV = 0x9292\r\n            \r\n","As noted in the discussion of the nCmdShow parameter, the nCmdShow value is ignored in the first call to ShowWindow if the program that launched the application specifies startup information in the structure. In this case, ShowWindow uses the information specified in the STARTUPINFO structure to show the window. On subsequent calls, the application must call ShowWindow with nCmdShow set to SW_SHOWDEFAULT to use the startup information provided by the program that launched the application. This behavior is designed for the following situations:":"正如在讨论 nCmdShow 参数时所指出的，如果启动应用程序的程序在结构中指定了启动信息，则在第一次调用 ShowWindow 时会忽略 nCmdShow 值。在这种情况下，ShowWindow 使用 STARTUPINFO 结构中指定的信息来显示窗口。在后续调用中，应用程序必须调用 ShowWindow 并将 nCmdShow 设置为 SW_SHOWDEFAULT，以使用启动该应用程序的程序提供的启动信息。此行为专为以下情况而设计：\r\n","\r\n            Used in GL.GetActiveAtomicCounterBuffer\r\n            ":"\r\n            在 GL.GetActiveAtomicCounterBuffer 中使用\r\n            \r\n","\r\n            Original was GL_REG_9_ATI = 0x892A\r\n            ":"\r\n            原来是 GL_REG_9_ATI = 0x892A\r\n            \r\n","\r\n            Original was GL_MATRIX5_NV = 0x8635\r\n            ":"\r\n            原来是 GL_MATRIX5_NV = 0x8635\r\n            \r\n","\r\n            Original was GL_RGB2_EXT = 0x804E\r\n            ":"\r\n            原来是 GL_RGB2_EXT = 0x804E\r\n            \r\n","The parent window of this instance (may be null).":"此实例的父窗口（可能为空）。\r\n","\r\n            Original was GL_COVERAGE_ATTACHMENT_NV = 0x8ED2\r\n            ":"\r\n            原来是 GL_COVERAGE_ATTACHMENT_NV = 0x8ED2\r\n            \r\n","\r\n            Used in GL.GetProgramResource, GL.Ext.GetNamedProgram\r\n            ":"\r\n            用于GL.GetProgramResource, GL.Ext.GetNamedProgram\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Creates a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            创建着色器对象\r\n            \r\n","\r\n            Returns the size of the specified value type in bytes or 0 if the type is not blittable.\r\n            ":"\r\n            返回指定值类型的大小（以字节为单位），如果该类型不可 blittable，则返回 0。\r\n            \r\n","\r\n            Format of the output images. Must be one of GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA.\r\n            ":"\r\n            输出图像的格式。必须是 GL_RED、GL_GREEN、G​​L_BLUE、GL_ALPHA、GL_RGB、GL_BGR、GL_RGBA、GL_BGRA、GL_LUMINANCE 或 GL_LUMINANCE_ALPHA 之一。\r\n            \r\n","\r\n            Original was GL_REG_19_ATI = 0x8934\r\n            ":"\r\n            原来是 GL_REG_19_ATI = 0x8934\r\n            \r\n","\r\n            A WM_HOTKEY message is in the queue.\r\n            ":"\r\n            WM_HOTKEY 消息在队列中。\r\n            \r\n"," \r\n            Specifies a light source parameter for light. Accepted symbolic names are Ambient, Diffuse, Specular, Position, SpotDirection, SpotExponent, SpotCutoff, ConstantAttenuation, LinearAttenuation, and QuadraticAttenuation.\r\n            ":" \r\n            指定光的光源参数。接受的符号名称是 Ambient、Diffuse、Specular、Position、SpotDirection、SpotExponent、SpotCutoff、ConstantAttenuation、LinearAttenuation 和 QuadraticAttenuation。\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39\r\n            \r\n","\r\n            Used in GL.GetFramebufferAttachmentParameter\r\n            ":"\r\n            在 GL.GetFramebufferAttachmentParameter 中使用\r\n            \r\n","\r\n            The W component of the Vector4.\r\n            ":"\r\n            Vector4 的 W 分量。\r\n            \r\n","\r\n            Original was GL_FRAMEBUFFER_UNSUPPORTED_OES = 0x8CDD\r\n            ":"\r\n            原来是 GL_FRAMEBUFFER_UNSUPPORTED_OES = 0x8CDD\r\n            \r\n"," \r\n            Specifies the shader object to be compiled.\r\n            ":" \r\n            指定要编译的着色器对象。\r\n            \r\n","\r\n            You can use the GL.SupportsExtension method to check whether any given category of extension functions\r\n            exists in the current OpenGL context. Keep in mind that different OpenGL contexts may support different\r\n            extensions, and under different entry points. Always check if all required extensions are still supported\r\n            when changing visuals or pixel formats.\r\n            ":"\r\n            您可以使用 GL.SupportsExtension 方法检查是否有任何给定类别的扩展函数\r\n            存在于当前 OpenGL 上下文中。请记住，不同的 OpenGL 上下文可能支持不同的\r\n            扩展，并在不同的入口点下。始终检查是否仍支持所有必需的扩展\r\n            更改视觉效果或像素格式时。\r\n            \r\n","[requires: OES_framebuffer_object]\r\n            Determine if a name corresponds to a framebuffer object\r\n            ":"[要求：OES_framebuffer_object]\r\n            确定名称是否对应于帧缓冲区对象\r\n            \r\n","\r\n            Original was GL_TEXTURE_COMPARE_MODE_ARB = 0x884C\r\n            ":"\r\n            原来是 GL_TEXTURE_COMPARE_MODE_ARB = 0x884C\r\n            \r\n","[requires: APPLE_framebuffer_multisample]":"[需要：APPLE_framebuffer_multisample]\r\n","\r\n            Original was GL_MOVE_TO_RESETS_NV = 0x90B5\r\n            ":"\r\n            原来是 GL_MOVE_TO_RESETS_NV = 0x90B5\r\n            \r\n"," indicating whether the specified\r\n            ":" 指示是否指定\r\n            \r\n","\r\n            Converts this instance into its transpose.\r\n            ":"\r\n            将此实例转换为其转置。\r\n            \r\n","[requires: v4.3 or KHR_debug|VERSION_4_3]\r\n            Retrieve the label of a named object identified within a namespace\r\n            ":"[要求：v4.3 或 KHR_debug|VERSION_4_3]\r\n            检索命名空间中标识的命名对象的标签\r\n            \r\n","\r\n            Original was GL_COLOR_INDEX4_EXT = 0x80E4\r\n            ":"\r\n            原来是 GL_COLOR_INDEX4_EXT = 0x80E4\r\n            \r\n","\r\n            Original was GL_OES_framebuffer_object = 1\r\n            ":"\r\n            原来是 GL_OES_framebuffer_object = 1\r\n            \r\n","\r\n            Original was GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA\r\n            ":"\r\n            原来是 GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA\r\n            \r\n","\r\n            Used in GL.Arb.MultiDrawArraysIndirectCount, GL.Arb.MultiDrawElementsIndirectCount\r\n            ":"\r\n            用于GL.Arb.MultiDrawArraysIndirectCount, GL.Arb.MultiDrawElementsIndirectCount\r\n            \r\n","[length: target,pname]":"[长度：目标，pname]\r\n","[requires: EXT_convolution]\r\n            Copy pixels into a one-dimensional convolution filter\r\n            ":"[需要：EXT_convolution]\r\n            将像素复制到一维卷积过滤器中\r\n            \r\n","[requires: EXT_draw_buffers]\r\n            Specifies a list of color buffers to be drawn into\r\n            ":"[需要：EXT_draw_buffers]\r\n            指定要绘制到的颜色缓冲区列表\r\n            \r\n","\r\n            Original was GL_OES_blend_equation_separate = 1\r\n            ":"\r\n            原来是 GL_OES_blend_equation_separate = 1\r\n            \r\n","\r\n            Contains information about an icon or a cursor.\r\n            ":"\r\n            包含有关图标或光标的信息。\r\n            \r\n","\r\n            Original was GL_STENCIL_INDEX_OES = 0x1901\r\n            ":"\r\n            原来是 GL_STENCIL_INDEX_OES = 0x1901\r\n            \r\n","\r\n            Right shoulder button\r\n            ":"\r\n            右肩按钮\r\n            \r\n"," \r\n            Specifies the capability to enable. Symbolic constants ColorArray, EdgeFlagArray, FogCoordArray, IndexArray, NormalArray, SecondaryColorArray, TextureCoordArray, and VertexArray are accepted.\r\n            ":" \r\n            指定启用的能力。接受符号常量 ColorArray、EdgeFlagArray、FogCoordArray、IndexArray、NormalArray、SecondaryColorArray、TextureCoordArray 和 VertexArray。\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Block until all GL execution is complete\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            阻塞直到所有 GL 执行完成\r\n            \r\n","[requires: EXT_draw_range_elements]\r\n            Render primitives from array data\r\n            ":"[需要：EXT_draw_range_elements]\r\n            从数组数据渲染图元\r\n            \r\n"," \r\n            Specifies whether front, back, or both front and back material parameters should track the current color. Accepted values are Front, Back, and FrontAndBack. The initial value is FrontAndBack.\r\n            ":" \r\n            指定正面、背面或正面和背面材料参数是否应跟踪当前颜色。接受的值为 Front、Back 和 FrontAndBack。初始值为 FrontAndBack。\r\n            \r\n","\r\n            Original was GL_VIEWPORT_BOUNDS_RANGE = 0x825D\r\n            ":"\r\n            原来是 GL_VIEWPORT_BOUNDS_RANGE = 0x825D\r\n            \r\n","[requires: EXT_blend_color]\r\n            Set the blend color\r\n            ":"[需要：EXT_blend_color]\r\n            设置混合色\r\n            \r\n","\r\n            Original was GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B\r\n            ":"\r\n            原来是 GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B\r\n            \r\n"," for the right shoulder button.\r\n            ":" 右肩按钮。\r\n            \r\n","\r\n            Original was GL_NumCompressedTextureFormats = 0X86a2\r\n            ":"\r\n            原来是 GL_NumCompressedTextureFormats = 0X86a2\r\n            \r\n","\r\n            Used in GL.NV.BindTransformFeedback, GL.NV.DrawTransformFeedback\r\n            ":"\r\n            用于GL.NV.BindTransformFeedback、GL.NV.DrawTransformFeedback\r\n            \r\n","[requires: EXT_shader_image_load_store]\r\n            Defines a barrier ordering memory transactions\r\n            ":"[需要：EXT_shader_image_load_store]\r\n            定义排序内存事务的障碍\r\n            \r\n","\r\n            Returns a normalised copy of this instance.\r\n            ":"\r\n            返回此实例的规范化副本。\r\n            \r\n","\r\n            Pointer to a RECT structure that specifies the coordinates of the window. \r\n            ":"\r\n            指向指定窗口坐标的 RECT 结构的指针。\r\n            \r\n","Constructs a new NativeWindow with the specified attributes.":"构造具有指定属性的新 NativeWindow。\r\n","[requires: v1.0][deprecated: v3.2]\r\n            Set rasterization mode\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            设置光栅化模式\r\n            \r\n","[requires: NV_texture_barrier]":"[需要：NV_texture_barrier]\r\n","\r\n            The ChangeDisplaySettings function changes the settings of the default display device to the specified graphics mode.\r\n            ":"\r\n            ChangeDisplaySettings 函数将默认显示设备的设置更改为指定的图形模式。\r\n            \r\n","[requires: NV_vdpau_interop]":"[需要：NV_vdpau_interop]\r\n","The keypad 8 key.":"键盘 8 键。\r\n","\r\n            Original was GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E\r\n            ":"\r\n            原来是 GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E\r\n            \r\n"," \r\n            Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.\r\n            ":" \r\n            指定目标纹理。必须是 Texture2D、TextureCubeMapPositiveX、TextureCubeMapNegativeX、TextureCubeMapPositiveY、TextureCubeMapNegativeY、TextureCubeMapPositiveZ 或 TextureCubeMapNegativeZ。\r\n            \r\n","\r\n            Used in GL.Apple.ClientWaitSync, GL.ClientWaitSync\r\n            ":"\r\n            用于GL.Apple.ClientWaitSync, GL.ClientWaitSync\r\n            \r\n","\r\n            Original was GL_S = 0x2000\r\n            ":"\r\n            原来是 GL_S = 0x2000\r\n            \r\n","[length: 2] \r\n            Specify the , ,  coordinates for the raster position.\r\n            ":"[长度：2]\r\n            指定光栅位置的 , , 坐标。\r\n            \r\n","\r\n            Original was GL_OP_MADD_EXT = 0x8788\r\n            ":"\r\n            原来是 GL_OP_MADD_EXT = 0x8788\r\n            \r\n"," \r\n            Specifies the byte offset between consecutive color indexes. If stride is 0, the color indexes are understood to be tightly packed in the array. The initial value is 0.\r\n            ":" \r\n            指定连续颜色索引之间的字节偏移量。如果步幅为 0，则颜色索引被理解为紧密排列在数组中。初始值为 0。\r\n            \r\n","[requires: v4.2 or ARB_internalformat_query|VERSION_4_2]\r\n            Retrieve information about implementation-dependent support for internal formats\r\n            ":"[要求：v4.2 或 ARB_internalformat_query|VERSION_4_2]\r\n            检索有关内部格式的依赖于实现的支持的信息\r\n            \r\n","A System.String that represents the current window.":"表示当前窗口的 System.String。\r\n","A new Matrix2 which holds the result of the subtraction":"保存减法结果的新 Matrix2\r\n","\r\n            Original was GL_TEXTURE31 = 0x84DF\r\n            ":"\r\n            原来是 GL_TEXTURE31 = 0x84DF\r\n            \r\n","\r\n            Copy pixels into a one-dimensional convolution filter\r\n            ":"\r\n            将像素复制到一维卷积过滤器中\r\n            \r\n","[requires: KHR_debug]":"[要求：KHR_debug]\r\n","\r\n            Original was GL_SYNC_CONDITION = 0x9113\r\n            ":"\r\n            原来是 GL_SYNC_CONDITION = 0x9113\r\n            \r\n","\r\n            Original was GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB\r\n            ":"\r\n            原来是 GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB\r\n            \r\n"," \r\n            Specifies which of several material parameters track the current color. Accepted values are Emission, Ambient, Diffuse, Specular, and AmbientAndDiffuse. The initial value is AmbientAndDiffuse.\r\n            ":" \r\n            指定几个材质参数中的哪一个跟踪当前颜色。可接受的值为 Emission、Ambient、Diffuse、Specular 和 AmbientAndDiffuse。初始值为 AmbientAndDiffuse。\r\n            \r\n","\r\n            Original was GL_RenderbufferBinding = 0X8ca7\r\n            ":"\r\n            原来是 GL_RenderbufferBinding = 0X8ca7\r\n            \r\n","[requires: v1.0]\r\n            Specify implementation-specific hints\r\n            ":"[要求：v1.0]\r\n            指定特定于实现的提示\r\n            \r\n","[requires: ARB_fragment_program|ARB_vertex_program]":"[需要：ARB_fragment_program|ARB_vertex_program]\r\n","\r\n            Original was GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C\r\n            ":"\r\n            原来是 GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C\r\n            \r\n"," \r\n            Specifies the height of the texture image. All implementations support texture images that are at least 2048 texels high.\r\n            ":" \r\n            指定纹理图像的高度。所有实现都支持至少 2048 纹素高的纹理图像。\r\n            \r\n","\r\n            Original was GL_RenderbufferRedSize = 0X8d50\r\n            ":"\r\n            原来是 GL_RenderbufferRedSize = 0X8d50\r\n            \r\n","\r\n            Compares two ContextHandles for inequality.\r\n            ":"\r\n            比较两个 ContextHandle 是否不相等。\r\n            \r\n","\r\n            Original was GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA\r\n            ":"\r\n            原来是 GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA\r\n            \r\n","\r\n            Converts the screen coordinates of a specified point on the screen to client-area coordinates.\r\n            ":"\r\n            将屏幕上指定点的屏幕坐标转换为客户区坐标。\r\n            \r\n","\r\n            Original was GL_PATH_CLIENT_LENGTH_NV = 0x907F\r\n            ":"\r\n            原来是 GL_PATH_CLIENT_LENGTH_NV = 0x907F\r\n            \r\n","An integer, specifying the size of the type in bytes.":"一个整数，以字节为单位指定类型的大小。\r\n","\r\n            An empty IGraphicsContext implementation to be used inside the Visual Studio designer.\r\n            This class supports OpenTK, and is not intended for use by OpenTK programs.\r\n            ":"\r\n            要在 Visual Studio 设计器中使用的空 IGraphicsContext 实现。\r\n            此类支持 OpenTK，并不打算供 OpenTK 程序使用。\r\n            \r\n"," for the left shoulder button.\r\n            ":" 对于左肩按钮。\r\n            \r\n","\r\n            Original was GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 0x92D5\r\n            ":"\r\n            原来是 GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 0x92D5\r\n            \r\n","\r\n            Original was GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B\r\n            ":"\r\n            原来是 GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B\r\n            \r\n","\r\n            Original was GL_UnsignedShort565 = 0X8363\r\n            ":"\r\n            原来是 GL_UnsignedShort565 = 0X8363\r\n            \r\n","[requires: APPLE_flush_buffer_range]\r\n            Indicate modifications to a range of a mapped buffer\r\n            ":"[要求：APPLE_flush_buffer_range]\r\n            指示对映射缓冲区范围的修改\r\n            \r\n","\r\n            Original was GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F\r\n            ":"\r\n            原来是 GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Set texture parameters\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            设置纹理参数\r\n            \r\n","\r\n            System.Threading.Thread.CurrentThread.ManagedThreadId of the thread that created this ":"\r\n            创建此线程的 System.Threading.Thread.CurrentThread.ManagedThreadId\r\n","\r\n            Divides each element in the Matrix by the ":"\r\n            将矩阵中的每个元素除以\r\n"," \r\n            Specifies a texture coordinate. Must be one of S, T, R, or Q.\r\n            ":" \r\n            指定纹理坐标。必须是 S、T、R 或 Q 之一。\r\n            \r\n","Mods.":"模组。\r\n","\r\n            Original was GL_DEBUG_SOURCE_API = 0x8246\r\n            ":"\r\n            原来是 GL_DEBUG_SOURCE_API = 0x8246\r\n            \r\n","\r\n            Original was GL_DOUBLE_VEC2_EXT = 0x8FFC\r\n            ":"\r\n            原来是 GL_DOUBLE_VEC2_EXT = 0x8FFC\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657\r\n            \r\n","\r\n            Original was GL_PROGRAM_POINT_SIZE = 0x8642\r\n            ":"\r\n            原来是 GL_PROGRAM_POINT_SIZE = 0x8642\r\n            \r\n","[requires: v3.0 or ARB_framebuffer_object|VERSION_3_0]\r\n            Copy a block of pixels from the read framebuffer to the draw framebuffer\r\n            ":"[要求：v3.0 或 ARB_framebuffer_object|VERSION_3_0]\r\n            将像素块从读取帧缓冲区复制到绘制帧缓冲区\r\n            \r\n","\r\n            Original was GL_FOG_COORD_SRC = 0x8450\r\n            ":"\r\n            原来是 GL_FOG_COORD_SRC = 0x8450\r\n            \r\n","\r\n            Original was GL_MATRIX26_ARB = 0x88DA\r\n            ":"\r\n            原来是 GL_MATRIX26_ARB = 0x88DA\r\n            \r\n","\r\n            Original was GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD\r\n            ":"\r\n            原来是 GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD\r\n            \r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623\r\n            \r\n","\r\n            Original was GL_MODELVIEW28_ARB = 0x873C\r\n            ":"\r\n            原来是 GL_MODELVIEW28_ARB = 0x873C\r\n            \r\n","[requires: EXT_timer_query]\r\n            Return parameters of a query object\r\n            ":"[需要：EXT_timer_query]\r\n            查询对象的返回参数\r\n            \r\n","\r\n            Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.\r\n            ":"\r\n            指定位掩码以启用和禁用在模板平面中写入各个位。最初，掩码全为 1。\r\n            \r\n","\r\n            Gets an integer representing the absolute x position of the pointer, in window pixel coordinates.\r\n            ":"\r\n            获取一个整数，表示指针在窗口像素坐标中的绝对 x 位置。\r\n            \r\n","\r\n            Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.\r\n            ":"\r\n            指定一个掩码，该掩码在测试完成时与参考值和存储的模板值进行 AND 运算。初始值为全 1。\r\n            \r\n","\r\n            Specifies the data type of each coordinate in the array. Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.\r\n            ":"\r\n            指定数组中每个坐标的数据类型。接受符号常量 GL_SHORT、GL_INT、GL_FLOAT 或 GL_DOUBLE。初始值为 GL_FLOAT。\r\n            \r\n","[requires: v3.1 or ARB_copy_buffer|VERSION_3_1]\r\n            Copy part of the data store of a buffer object to the data store of another buffer object\r\n            ":"[要求：v3.1 或 ARB_copy_buffer|VERSION_3_1]\r\n            将缓冲区对象的部分数据存储复制到另一个缓冲区对象的数据存储\r\n            \r\n","\r\n            Original was GL_OP_MAX_EXT = 0x878A\r\n            ":"\r\n            原来是 GL_OP_MAX_EXT = 0x878A\r\n            \r\n","\r\n            Original was GL_T4F_C4F_N3F_V4F = 0x2A2D\r\n            ":"\r\n            原来是 GL_T4F_C4F_N3F_V4F = 0x2A2D\r\n            \r\n","\r\n            Gets or sets the value at row 2, column 2 of this instance.\r\n            ":"\r\n            获取或设置此实例第 2 行第 2 列的值。\r\n            \r\n","\r\n            Gets a System.Single indicating the absolute position of the JoystickAxis.\r\n            ":"\r\n            获取一个 System.Single，指示 JoystickAxis 的绝对位置。\r\n            \r\n","\r\n            Original was GL_TEXTURE_2D = 0x0DE1\r\n            ":"\r\n            原来是 GL_TEXTURE_2D = 0x0DE1\r\n            \r\n","\r\n            Original was GL_OPERAND2_ALPHA_ARB = 0x859A\r\n            ":"\r\n            原来是 GL_OPERAND2_ALPHA_ARB = 0x859A\r\n            \r\n","\r\n            Original was GL_TESS_GEN_SPACING = 0x8E77\r\n            ":"\r\n            原来是 GL_TESS_GEN_SPACING = 0x8E77\r\n            \r\n","\r\n            Original was GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB\r\n            ":"\r\n            原来是 GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB\r\n            \r\n","\r\n            Defines the event arguments for KeyPress events. Instances of this class are cached:\r\n            KeyPressEventArgs should only be used inside the relevant event, unless manually cloned.\r\n            ":"\r\n            定义 KeyPress 事件的事件参数。缓存此类的实例：\r\n            除非手动克隆，否则 KeyPressEventArgs 只能在相关事件中使用。\r\n            \r\n","\r\n            Original was GL_OPERAND3_ALPHA_NV = 0x859B\r\n            ":"\r\n            原来是 GL_OPERAND3_ALPHA_NV = 0x859B\r\n            \r\n","[length: length] \r\n            Specifies the address of an array of bytes containing pre-compiled binary shader code.\r\n            ":"[长度：长度]\r\n            指定包含预编译二进制着色器代码的字节数组的地址。\r\n            \r\n","\r\n            Original was GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80\r\n            ":"\r\n            原来是 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80\r\n            \r\n","\r\n            Original was GL_MAX_SAMPLES_NV = 0x8D57\r\n            ":"\r\n            原来是 GL_MAX_SAMPLES_NV = 0x8D57\r\n            \r\n","[requires: v4.5 or ARB_direct_state_access|VERSION_4_5]":"[要求：v4.5 或 ARB_direct_state_access|VERSION_4_5]\r\n","\r\n            Original was GL_STENCIL_BUFFER_BIT1_QCOM = 0x00020000\r\n            ":"\r\n            原来是 GL_STENCIL_BUFFER_BIT1_QCOM = 0x00020000\r\n            \r\n","[requires: v1.1][deprecated: v3.2]\r\n            Push and pop the client attribute stack\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            推送和弹出客户端属性堆栈\r\n            \r\n"," \r\n            Specify the index of the binding point within the array specified by target.\r\n            ":" \r\n            在目标指定的数组中指定绑定点的索引。\r\n            \r\n"," \r\n            Specifies a name that will replace the top value on the name stack.\r\n            ":" \r\n            指定将替换名称堆栈顶部值的名称。\r\n            \r\n","[length: 16] \r\n            Points to 16 consecutive values that are used as the elements of a 4  times  4 column-major matrix.\r\n            ":"[长度：16]\r\n            指向用作 4 乘 4 列主矩阵元素的 16 个连续值。\r\n            \r\n"," \r\n            Specifies the target texture. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, TextureCubeMapNegativeZ, or Texture1DArray.\r\n            ":" \r\n            指定目标纹理。必须是 Texture2D、TextureCubeMapPositiveX、TextureCubeMapNegativeX、TextureCubeMapPositiveY、TextureCubeMapNegativeY、TextureCubeMapPositiveZ、TextureCubeMapNegativeZ 或 Texture1DArray。\r\n            \r\n","\r\n            Original was GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6\r\n            ":"\r\n            原来是 GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6\r\n            \r\n","\r\n            Original was GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF\r\n            ":"\r\n            原来是 GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF\r\n            \r\n","[requires: v1.0 and 1.0]\r\n            Specify clear values for the color buffers\r\n            ":"[要求：v1.0 和 1.0]\r\n            为颜色缓冲区指定明确的值\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Set up pixel transfer maps\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            设置像素传输映射\r\n            \r\n","\r\n            Original was GL_TEXTURE1 = 0x84C1\r\n            ":"\r\n            原来是 GL_TEXTURE1 = 0x84C1\r\n            \r\n"," \r\n            Specifies the type of values in lists. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Int, UnsignedInt, Float, Gl2Bytes, Gl3Bytes, and Gl4Bytes are accepted.\r\n            ":" \r\n            指定列表中值的类型。接受符号常量 Byte、UnsignedByte、Short、UnsignedShort、Int、UnsignedInt、Float、Gl2Bytes、Gl3Bytes 和 Gl4Bytes。\r\n            \r\n","\r\n            A pointer to an IconInfo structure the function uses to create the \r\n            icon or cursor.\r\n            ":"\r\n            指向函数用于创建的 IconInfo 结构的指针\r\n            图标或光标。\r\n            \r\n","\r\n            Gets a value indicating whether the right button is pressed.\r\n            ":"\r\n            获取一个值，该值指示是否按下了右键。\r\n            \r\n","The space key.":"空格键。\r\n","\r\n            Original was GL_DEPTH24_STENCIL8_OES = 0x88F0\r\n            ":"\r\n            原来是 GL_DEPTH24_STENCIL8_OES = 0x88F0\r\n            \r\n","\r\n            Original was GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865\r\n            ":"\r\n            原来是 GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865\r\n            \r\n","\r\n            Original was GL_WEIGHT_ARRAY_POINTER_OES = 0x86AC\r\n            ":"\r\n            原来是 GL_WEIGHT_ARRAY_POINTER_OES = 0x86AC\r\n            \r\n","\r\n            Original was GL_MUL_ATI = 0x8964\r\n            ":"\r\n            原来是 GL_MUL_ATI = 0x8964\r\n            \r\n","\r\n            Original was GL_3DC_X_AMD = 0x87F9\r\n            ":"\r\n            原来是 GL_3DC_X_AMD = 0x87F9\r\n            \r\n","\r\n            Original was GL_TEXTURE24_ARB = 0x84D8\r\n            ":"\r\n            原来是 GL_TEXTURE24_ARB = 0x84D8\r\n            \r\n","\r\n            Original was GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC\r\n            ":"\r\n            原来是 GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC\r\n            \r\n","\r\n            Original was GL_MATRIX14 = 0x88CE\r\n            ":"\r\n            原来是 GL_MATRIX14 = 0x88CE\r\n            \r\n","\r\n            Original was GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F\r\n            ":"\r\n            原来是 GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F\r\n            \r\n","\r\n            Used in GL.Ati.StencilOpSeparate\r\n            ":"\r\n            在 GL.Ati.StencilOpSeparate 中使用\r\n            \r\n","\r\n            Original was GL_TANGENT_ARRAY_POINTER_EXT = 0x8442\r\n            ":"\r\n            原来是 GL_TANGENT_ARRAY_POINTER_EXT = 0x8442\r\n            \r\n","\r\n            Describes a Cocoa window.\r\n            ":"\r\n            描述 Cocoa 窗口。\r\n            \r\n"," \r\n            Specifies the index of the viewport whose depth range to update.\r\n            ":" \r\n            指定要更新其深度范围的视口的索引。\r\n            \r\n","If the function fails, the return value is zero. To get extended error information, call GetLastError.":"如果函数失败，则返回值为零。要获取扩展的错误信息，请调用 GetLastError。\r\n","\r\n            Original was GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A\r\n            ":"\r\n            原来是 GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A\r\n            \r\n"," has\r\n            a right stick button.\r\n            ":" 有\r\n            一个右摇杆按钮。\r\n            \r\n","\r\n            Gets or sets the Y component of this instance.\r\n            ":"\r\n            获取或设置此实例的 Y 分量。\r\n            \r\n","[requires: ARB_draw_instanced]\r\n            Draw multiple instances of a range of elements\r\n            ":"[需要：ARB_draw_instanced]\r\n            绘制一系列元素的多个实例\r\n            \r\n","\r\n            Original was GL_BUFFER_STORAGE_FLAGS = 0x8220\r\n            ":"\r\n            原来是 GL_BUFFER_STORAGE_FLAGS = 0x8220\r\n            \r\n","[length: 3] \r\n            Specify new red, green, and blue values for the current color.\r\n            ":"[长度：3]\r\n            为当前颜色指定新的红色、绿色和蓝色值。\r\n            \r\n"," to retrieve the absolute coordinates of the mouse cursor.\r\n            Use ":" 检索鼠标光标的绝对坐标。\r\n            使用\r\n","\r\n            Indicates that a mouse button is pressed.\r\n            ":"\r\n            指示按下鼠标按钮。\r\n            \r\n","PointFloat":"点浮点数\r\n","A game controller handle previously opened with ":"之前打开的游戏控制器手柄\r\n","The maximum expected value (inclusive)":"最大期望值（含）\r\n","\r\n            Defines a plaftorm-specific exception.\r\n            ":"\r\n            定义特定于平台的异常。\r\n            \r\n","[requires: v1.1][deprecated: v3.2]\r\n            Define an array of vertex data\r\n            ":"[要求：v1.1][弃用：v3.2]\r\n            定义一个顶点数据数组\r\n            \r\n","\r\n            A WM_TIMER message is in the queue.\r\n            ":"\r\n            WM_TIMER 消息在队列中。\r\n            \r\n","\r\n            Original was GL_DARKEN_KHR = 0x9297\r\n            ":"\r\n            原来是 GL_DARKEN_KHR = 0x9297\r\n            \r\n","\r\n            Original was GL_DRAW_BUFFER9_EXT = 0x882E\r\n            ":"\r\n            原来是 GL_DRAW_BUFFER9_EXT = 0x882E\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Generate buffer object names\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            生成缓冲区对象名称\r\n            \r\n","\r\n            Original was GL_StencilBackPassDepthFail = 0X8802\r\n            ":"\r\n            原来是 GL_StencilBackPassDepthFail = 0X8802\r\n            \r\n","Only one client at a time can select a ResizeRequest event, which is associated with the event mask ResizeRedirectMask. ":"一次只有一个客户端可以选择与事件掩码 ResizeRedirectMask 关联的 ResizeRequest 事件。\r\n"," \r\n            Specifies the index of the image unit to which to bind the texture\r\n            ":" \r\n            指定要绑定纹理的图像单元的索引\r\n            \r\n","\r\n            Original was GL_OPERAND0_RGB = 0x8590\r\n            ":"\r\n            原来是 GL_OPERAND0_RGB = 0x8590\r\n            \r\n","\r\n            Original was GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974\r\n            ":"\r\n            原来是 GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974\r\n            \r\n","\r\n            Original was GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F\r\n            ":"\r\n            原来是 GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F\r\n            \r\n","True, if both instances are equal; false otherwise.":"如果两个实例相等，则为真；否则为假。\r\n"," \r\n            Specified how the alpha destination blending factor is computed. The initial value is Zero.\r\n            ":" \r\n            指定如何计算 alpha 目标混合因子。初始值为零。\r\n            \r\n","\r\n            Original was GL_DEBUG_LOGGED_MESSAGES_KHR = 0x9145\r\n            ":"\r\n            原来是 GL_DEBUG_LOGGED_MESSAGES_KHR = 0x9145\r\n            \r\n","The OpenTK.Graphics.GraphicsMode of the GameWindow.":"GameWindow 的 OpenTK.Graphics.GraphicsMode。\r\n","\r\n            Original was GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516\r\n            ":"\r\n            原来是 GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516\r\n            \r\n","\r\n            Used in GL.Hint\r\n            ":"\r\n            在 GL.Hint 中使用\r\n            \r\n","[length: count*3] \r\n            For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.\r\n            ":"[长度：计数*3]\r\n            对于向量和矩阵命令，指定一个指向计数值数组的指针，该数组将用于更新指定的统一变量。\r\n            \r\n","\r\n            Original was GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82\r\n            ":"\r\n            原来是 GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82\r\n            \r\n","\r\n            Original was GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40\r\n            ":"\r\n            原来是 GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40\r\n            \r\n","A Vector4 that is the axis-angle representation of this quaternion.":"一个 Vector4，它是此四元数的轴角表示。\r\n","\r\n            Original was GL_TEXTURE14 = 0x84CE\r\n            ":"\r\n            原来是 GL_TEXTURE14 = 0x84CE\r\n            \r\n","[requires: EXT_framebuffer_object]\r\n            Delete renderbuffer objects\r\n            ":"[需要：EXT_framebuffer_object]\r\n            删除渲染缓冲区对象\r\n            \r\n"," \r\n            The type of the data stored in the array.\r\n            ":" \r\n            存储在数组中的数据类型。\r\n            \r\n","\r\n            Original was GL_BACK_SECONDARY_COLOR_NV = 0x8C78\r\n            ":"\r\n            原来是 GL_BACK_SECONDARY_COLOR_NV = 0x8C78\r\n            \r\n","\r\n            Original was GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027\r\n            ":"\r\n            原来是 GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027\r\n            \r\n"," \r\n            Specifies a pointer to the first index in the array. The initial value is 0.\r\n            ":" \r\n            指定指向数组中第一个索引的指针。初始值为 0。\r\n            \r\n","\r\n            Original was GL_BUMP_TEX_UNITS_ATI = 0x8778\r\n            ":"\r\n            原来是 GL_BUMP_TEX_UNITS_ATI = 0x8778\r\n            \r\n","\r\n            Original was GL_MAX_FRAMEBUFFER_WIDTH = 0x9315\r\n            ":"\r\n            原来是 GL_MAX_FRAMEBUFFER_WIDTH = 0x9315\r\n            \r\n"," \r\n            Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.\r\n            ":" \r\n            指定数据存储的预期使用模式。符号常量必须是 StreamDraw、StaticDraw 或 DynamicDraw。\r\n            \r\n","[requires: v4.3 or ARB_invalidate_subdata|VERSION_4_3]\r\n            Invalidate a region of a texture image\r\n            ":"[要求：v4.3 或 ARB_invalidate_subdata|VERSION_4_3]\r\n            使纹理图像的区域无效\r\n            \r\n","\r\n            Original was GL_COMPRESSED_RG = 0x8226\r\n            ":"\r\n            原来是 GL_COMPRESSED_RG = 0x8226\r\n            \r\n","\r\n            Original was GL_OES_stencil4 = 1\r\n            ":"\r\n            原来是 GL_OES_stencil4 = 1\r\n            \r\n","\r\n            Original was GL_DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269\r\n            ":"\r\n            原来是 GL_DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269\r\n            \r\n","\r\n            Original was GL_REDUCE = 0x8016\r\n            ":"\r\n            原来是 GL_REDUCE = 0x8016\r\n            \r\n","\r\n            Original was GL_UNSIGNED_INT_8_8_8_8_REVERSED = 0x8367\r\n            ":"\r\n            原来是 GL_UNSIGNED_INT_8_8_8_8_REVERSED = 0x8367\r\n            \r\n","[requires: v1.0][deprecated: v3.2]\r\n            Specify clear values for the accumulation buffer\r\n            ":"[要求：v1.0][弃用：v3.2]\r\n            为累积缓冲区指定清除值\r\n            \r\n","[requires: v2.0 or ES_VERSION_2_0]\r\n            Return a parameter from a shader object\r\n            ":"[要求：v2.0 或 ES_VERSION_2_0]\r\n            从着色器对象返回参数\r\n            \r\n","\r\n            Original was GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6\r\n            ":"\r\n            原来是 GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6\r\n            \r\n","\r\n            Original was GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8A32\r\n            ":"\r\n            原来是 GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8A32\r\n            \r\n","\r\n            Set convolution parameters\r\n            ":"\r\n            设置卷积参数\r\n            \r\n","\r\n            Original was GL_FUNC_ADD_OES = 0x8006\r\n            ":"\r\n            原来是 GL_FUNC_ADD_OES = 0x8006\r\n            \r\n","\r\n            Original was GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098\r\n            ":"\r\n            原来是 GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098\r\n            \r\n","The calling process must have WINSTA_READATTRIBUTES access to the window station.":"调用进程必须具有对窗口站的 WINSTA_READATTRIBUTES 访问权限。\r\n"}